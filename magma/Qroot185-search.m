print "Field 2.2.185.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 46);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w)*OK);
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(5)*OK+(w + 2)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(13)*OK+(w + 4)*OK);
Append(~Plist,(13)*OK+(w + 8)*OK);
Append(~Plist,(17)*OK+(w + 3)*OK);
Append(~Plist,(17)*OK+(w + 13)*OK);
Append(~Plist,(23)*OK+(w)*OK);
Append(~Plist,(23)*OK+(w + 22)*OK);
Append(~Plist,(37)*OK+(w + 18)*OK);
Append(~Plist,(2*w - 13)*OK);
Append(~Plist,(-2*w - 11)*OK);
Append(~Plist,(43)*OK+(w + 11)*OK);
Append(~Plist,(43)*OK+(w + 31)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(97)*OK+(w + 15)*OK);
Append(~Plist,(97)*OK+(w + 81)*OK);
Append(~Plist,(-4*w - 27)*OK);
Append(~Plist,(-4*w + 31)*OK);
Append(~Plist,(103)*OK+(w + 29)*OK);
Append(~Plist,(103)*OK+(w + 73)*OK);
Append(~Plist,(113)*OK+(w + 16)*OK);
Append(~Plist,(113)*OK+(w + 96)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(2*w + 5)*OK);
Append(~Plist,(8*w + 49)*OK);
Append(~Plist,(-8*w + 57)*OK);
Append(~Plist,(163)*OK+(w + 57)*OK);
Append(~Plist,(163)*OK+(w + 105)*OK);
Append(~Plist,(167)*OK+(w + 19)*OK);
Append(~Plist,(167)*OK+(w + 147)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(193)*OK+(w + 62)*OK);
Append(~Plist,(193)*OK+(w + 130)*OK);
Append(~Plist,(-4*w - 21)*OK);
Append(~Plist,(4*w - 25)*OK);
Append(~Plist,(227)*OK+(w + 85)*OK);
Append(~Plist,(227)*OK+(w + 141)*OK);
Append(~Plist,(12*w - 89)*OK);
Append(~Plist,(-12*w - 77)*OK);
Append(~Plist,(257)*OK+(w + 75)*OK);
Append(~Plist,(257)*OK+(w + 181)*OK);
Append(~Plist,(10*w + 61)*OK);
Append(~Plist,(-10*w + 71)*OK);
Append(~Plist,(-6*w - 41)*OK);
Append(~Plist,(-6*w + 47)*OK);
Append(~Plist,(277)*OK+(w + 24)*OK);
Append(~Plist,(277)*OK+(w + 252)*OK);
Append(~Plist,(283)*OK+(w + 121)*OK);
Append(~Plist,(283)*OK+(w + 161)*OK);
Append(~Plist,(313)*OK+(w + 50)*OK);
Append(~Plist,(313)*OK+(w + 262)*OK);
Append(~Plist,(347)*OK+(w + 134)*OK);
Append(~Plist,(347)*OK+(w + 212)*OK);
Append(~Plist,(-4*w - 31)*OK);
Append(~Plist,(4*w - 35)*OK);
Append(~Plist,(353)*OK+(w + 106)*OK);
Append(~Plist,(353)*OK+(w + 246)*OK);
Append(~Plist,(8*w - 55)*OK);
Append(~Plist,(-8*w - 47)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-4*w - 17)*OK);
Append(~Plist,(4*w - 21)*OK);
Append(~Plist,(383)*OK+(w + 28)*OK);
Append(~Plist,(383)*OK+(w + 354)*OK);
Append(~Plist,(12*w + 73)*OK);
Append(~Plist,(-12*w + 85)*OK);
Append(~Plist,(457)*OK+(w + 100)*OK);
Append(~Plist,(457)*OK+(w + 356)*OK);
Append(~Plist,(463)*OK+(w + 206)*OK);
Append(~Plist,(463)*OK+(w + 256)*OK);
Append(~Plist,(467)*OK+(w + 61)*OK);
Append(~Plist,(467)*OK+(w + 405)*OK);
Append(~Plist,(487)*OK+(w + 197)*OK);
Append(~Plist,(487)*OK+(w + 289)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(503)*OK+(w + 210)*OK);
Append(~Plist,(503)*OK+(w + 292)*OK);
Append(~Plist,(-6*w - 31)*OK);
Append(~Plist,(6*w - 37)*OK);
Append(~Plist,(-8*w - 55)*OK);
Append(~Plist,(-8*w + 63)*OK);
Append(~Plist,(523)*OK+(w + 102)*OK);
Append(~Plist,(523)*OK+(w + 420)*OK);
Append(~Plist,(547)*OK+(w + 66)*OK);
Append(~Plist,(547)*OK+(w + 480)*OK);
Append(~Plist,(557)*OK+(w + 221)*OK);
Append(~Plist,(557)*OK+(w + 335)*OK);
Append(~Plist,(563)*OK+(w + 111)*OK);
Append(~Plist,(563)*OK+(w + 451)*OK);
Append(~Plist,(-4*w + 15)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("8.3-a",(8)*OK+(w + 2)*OK,[1, 2, 2, 4, -4, 6, -2, -6, -6, -8, -4, 2, -6, 10, -4, -8, 2, 0, 0, -18, -2, -10, -18, -4, 8, -6, -6, -12, 4]);
ECSearch("8.3-b",(8)*OK+(w + 2)*OK,[-1, -2, 2, 4, -4, -6, 2, 6, 6, 8, 4, -2, -6, 10, 4, 8, 2, 0, 0, 18, 2, -10, -18, 4, -8, 6, 6, -12, 4]);
ECSearch("8.4-a",(8)*OK+(w + 5)*OK,[1, 2, 2, -4, 4, -2, 6, -6, -6, -4, -8, 2, 10, -6, -8, -4, 2, 0, 0, -2, -18, -18, -10, 8, -4, -6, -6, 4, -12]);
ECSearch("8.4-b",(8)*OK+(w + 5)*OK,[-1, -2, 2, -4, 4, 2, -6, 6, 6, 4, 8, -2, 10, -6, 8, 4, 2, 0, 0, 2, 18, -18, -10, -8, 4, 6, 6, 4, -12]);
ECSearch("10.1-a",(-w + 8)*OK,[1, -2, -4, -4, -2, -2, -6, 2, 0, 0, -6, -6, -6, -4, -12, -2, 8, 0, -18, -2, 10, -14, 16, -16, -6, 18, -4, 12]);
ECSearch("10.1-b",(-w + 8)*OK,[-1, -2, -4, -4, 2, 2, 6, -2, 0, 0, 6, -6, -6, 4, 12, -2, 8, 0, 18, 2, 10, -14, -16, 16, 6, -18, -4, 12]);
ECSearch("10.2-a",(w + 7)*OK,[1, -2, -4, -4, -2, -2, 2, -6, 0, 0, -6, -6, -6, -12, -4, -2, 0, 8, -2, -18, -14, 10, -16, 16, 18, -6, 12, -4]);
ECSearch("10.2-b",(w + 7)*OK,[-1, -2, -4, -4, 2, 2, -2, 6, 0, 0, 6, -6, -6, 12, 4, -2, 0, 8, 2, 18, -14, 10, 16, -16, -18, 6, 12, -4]);
