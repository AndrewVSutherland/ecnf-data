print "Field 2.2.473.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 118);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w)*OK);
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(7)*OK+(w + 2)*OK);
Append(~Plist,(7)*OK+(w + 4)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(19)*OK+(w + 6)*OK);
Append(~Plist,(19)*OK+(w + 12)*OK);
Append(~Plist,(23)*OK+(w + 8)*OK);
Append(~Plist,(23)*OK+(w + 14)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(29)*OK+(w + 1)*OK);
Append(~Plist,(29)*OK+(w + 27)*OK);
Append(~Plist,(31)*OK+(w + 7)*OK);
Append(~Plist,(31)*OK+(w + 23)*OK);
Append(~Plist,(-4*w - 41)*OK);
Append(~Plist,(47)*OK+(w + 17)*OK);
Append(~Plist,(47)*OK+(w + 29)*OK);
Append(~Plist,(53)*OK+(w + 3)*OK);
Append(~Plist,(53)*OK+(w + 49)*OK);
Append(~Plist,(59)*OK+(w)*OK);
Append(~Plist,(59)*OK+(w + 58)*OK);
Append(~Plist,(61)*OK+(w + 15)*OK);
Append(~Plist,(61)*OK+(w + 45)*OK);
Append(~Plist,(67)*OK+(w + 32)*OK);
Append(~Plist,(67)*OK+(w + 34)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(97)*OK+(w + 22)*OK);
Append(~Plist,(97)*OK+(w + 74)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(131)*OK+(w + 19)*OK);
Append(~Plist,(131)*OK+(w + 111)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(151)*OK+(w + 20)*OK);
Append(~Plist,(151)*OK+(w + 130)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(181)*OK+(w + 51)*OK);
Append(~Plist,(181)*OK+(w + 129)*OK);
Append(~Plist,(-4*w + 43)*OK);
Append(~Plist,(4*w + 39)*OK);
Append(~Plist,(227)*OK+(w + 71)*OK);
Append(~Plist,(227)*OK+(w + 155)*OK);
Append(~Plist,(229)*OK+(w + 61)*OK);
Append(~Plist,(229)*OK+(w + 167)*OK);
Append(~Plist,(233)*OK+(w + 81)*OK);
Append(~Plist,(233)*OK+(w + 151)*OK);
Append(~Plist,(241)*OK+(w + 24)*OK);
Append(~Plist,(241)*OK+(w + 216)*OK);
Append(~Plist,(251)*OK+(w + 33)*OK);
Append(~Plist,(251)*OK+(w + 217)*OK);
Append(~Plist,(263)*OK+(w + 86)*OK);
Append(~Plist,(263)*OK+(w + 176)*OK);
Append(~Plist,(269)*OK+(w + 66)*OK);
Append(~Plist,(269)*OK+(w + 202)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(-2*w + 29)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(-4*w + 49)*OK);
Append(~Plist,(-4*w - 45)*OK);
Append(~Plist,(347)*OK+(w + 28)*OK);
Append(~Plist,(347)*OK+(w + 318)*OK);
Append(~Plist,(349)*OK+(w + 147)*OK);
Append(~Plist,(349)*OK+(w + 201)*OK);
Append(~Plist,(-8*w - 85)*OK);
Append(~Plist,(8*w - 93)*OK);
Append(~Plist,(6*w + 65)*OK);
Append(~Plist,(6*w - 71)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(379)*OK+(w + 120)*OK);
Append(~Plist,(379)*OK+(w + 258)*OK);
Append(~Plist,(397)*OK+(w + 149)*OK);
Append(~Plist,(397)*OK+(w + 247)*OK);
Append(~Plist,(401)*OK+(w + 41)*OK);
Append(~Plist,(401)*OK+(w + 359)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(-2*w - 7)*OK);
Append(~Plist,(443)*OK+(w + 79)*OK);
Append(~Plist,(443)*OK+(w + 363)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(487)*OK+(w + 165)*OK);
Append(~Plist,(487)*OK+(w + 321)*OK);
Append(~Plist,(491)*OK+(w + 104)*OK);
Append(~Plist,(491)*OK+(w + 386)*OK);
Append(~Plist,(503)*OK+(w + 152)*OK);
Append(~Plist,(503)*OK+(w + 350)*OK);
Append(~Plist,(-4*w - 47)*OK);
Append(~Plist,(4*w - 51)*OK);
Append(~Plist,(-4*w + 39)*OK);
Append(~Plist,(4*w + 35)*OK);
Append(~Plist,(571)*OK+(w + 35)*OK);
Append(~Plist,(571)*OK+(w + 535)*OK);
Append(~Plist,(593)*OK+(w + 262)*OK);
Append(~Plist,(593)*OK+(w + 330)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[1, -2, 4, -2, -3, 3, 0, 6, 3, 0, -1, 2, 2, 5, -4, -8, 12, 0, -1, 11, 9, 3, -10, -4, 4, -11, -4, -10, -10, 11]);
ECSearch("1.1-b",(1)*OK,[2, -1, 2, -4, -3, 3, -6, 0, 0, 3, -1, -2, -2, -4, 5, 8, 0, 12, 11, -1, 3, 9, 4, 10, -11, 4, 10, 4, 11, -10]);
ECSearch("1.1-c",(1)*OK,[-2, 1, -2, 4, -3, 3, 6, 0, 0, 3, -1, 2, 2, -4, 5, -8, 0, 12, 11, -1, 3, 9, -4, -10, -11, 4, -10, -4, 11, -10]);
ECSearch("1.1-d",(1)*OK,[0, 0, 0, 0, 6, 1, 0, 0, 7, 7, 10, 0, 0, 9, 9, 0, 4, 4, -13, -13, 8, 8, 0, 0, -15, -15, 0, 0, -1, -1]);
ECSearch("1.1-e",(1)*OK,[-1, 2, -4, 2, -3, 3, 0, -6, 3, 0, -1, -2, -2, 5, -4, 8, 12, 0, -1, 11, 9, 3, 10, 4, 4, -11, 4, 10, -10, 11]);
ECSearch("2.1-a",(2)*OK+(w)*OK,[0, 2, 2, 1, 3, 2, 2, 3, 0, -7, 0, 6, -1, 8, -10, 0, -12, 3, -3, 3, 9, 2, 2, 8, -1, 14, -4, 2, 11]);
ECSearch("2.1-b",(2)*OK+(w)*OK,[0, -2, -2, 1, 3, -2, -2, 3, 0, -7, 0, -6, -1, 8, 10, 0, -12, 3, -3, 3, 9, -2, -2, 8, -1, -14, 4, 2, 11]);
ECSearch("2.2-a",(2)*OK+(w + 1)*OK,[0, 2, 2, 1, 3, 2, 2, 0, 3, -7, 6, 0, 8, -1, -10, -12, 0, -3, 3, 9, 3, 2, 2, -1, 8, -4, 14, 11, 2]);
ECSearch("2.2-b",(2)*OK+(w + 1)*OK,[0, -2, -2, 1, 3, -2, -2, 0, 3, -7, -6, 0, 8, -1, 10, -12, 0, -3, 3, 9, 3, -2, -2, -1, 8, 4, -14, 11, 2]);
