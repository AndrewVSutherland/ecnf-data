print "Field 2.2.413.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 103);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-w + 10)*OK);
Append(~Plist,(-w - 9)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(w + 11)*OK);
Append(~Plist,(w - 12)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(w - 9)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 13)*OK);
Append(~Plist,(-3*w + 31)*OK);
Append(~Plist,(w + 6)*OK);
Append(~Plist,(w - 7)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(-2*w - 21)*OK);
Append(~Plist,(w + 5)*OK);
Append(~Plist,(w - 6)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(w + 1)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(w)*OK);
Append(~Plist,(w - 1)*OK);
Append(~Plist,(w + 14)*OK);
Append(~Plist,(w - 15)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(-3*w + 34)*OK);
Append(~Plist,(-3*w - 31)*OK);
Append(~Plist,(-4*w - 37)*OK);
Append(~Plist,(4*w - 41)*OK);
Append(~Plist,(w + 15)*OK);
Append(~Plist,(w - 16)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(-3*w + 29)*OK);
Append(~Plist,(3*w + 26)*OK);
Append(~Plist,(-3*w - 32)*OK);
Append(~Plist,(3*w - 35)*OK);
Append(~Plist,(-4*w + 45)*OK);
Append(~Plist,(-4*w - 41)*OK);
Append(~Plist,(-3*w - 25)*OK);
Append(~Plist,(3*w - 28)*OK);
Append(~Plist,(-5*w - 46)*OK);
Append(~Plist,(5*w - 51)*OK);
Append(~Plist,(w + 18)*OK);
Append(~Plist,(w - 19)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(w + 19)*OK);
Append(~Plist,(w - 20)*OK);
Append(~Plist,(-5*w + 56)*OK);
Append(~Plist,(-5*w - 51)*OK);
Append(~Plist,(-4*w + 39)*OK);
Append(~Plist,(4*w + 35)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(w + 20)*OK);
Append(~Plist,(w - 21)*OK);
Append(~Plist,(-3*w + 37)*OK);
Append(~Plist,(3*w + 34)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(-6*w - 55)*OK);
Append(~Plist,(6*w - 61)*OK);
Append(~Plist,(w + 21)*OK);
Append(~Plist,(w - 22)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(7*w - 72)*OK);
Append(~Plist,(7*w + 65)*OK);
Append(~Plist,(-4*w - 43)*OK);
Append(~Plist,(4*w - 47)*OK);
Append(~Plist,(-6*w + 67)*OK);
Append(~Plist,(-6*w - 61)*OK);
Append(~Plist,(5*w + 52)*OK);
Append(~Plist,(-5*w + 57)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(-5*w + 49)*OK);
Append(~Plist,(5*w + 44)*OK);
Append(~Plist,(w + 23)*OK);
Append(~Plist,(w - 24)*OK);
Append(~Plist,(-3*w + 23)*OK);
Append(~Plist,(3*w + 20)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[-1, -2, -3, 3, -10, 0, 0, 0, 0, -12, 12, -6, -6, 0, 6, -6, 9, 9, 12, -12, 1, 1, -15, 15, -12, 12, 6, -6, -3]);
ECSearch("4.1-b",(2)*OK,[-1, -5, -6, 6, -1, -3, -3, 0, 0, -6, 6, -3, -3, 0, -6, 6, 0, 0, -12, 12, 1, 1, 6, -6, -6, 6, 12, -12, 12]);
ECSearch("4.1-c",(2)*OK,[-1, -2, 3, -3, -10, 0, 0, 0, 0, 12, -12, -6, -6, 0, -6, 6, 9, 9, -12, 12, 1, 1, 15, -15, 12, -12, -6, 6, 3]);
ECSearch("4.1-d",(2)*OK,[-1, -5, 6, -6, -1, -3, -3, 0, 0, 6, -6, -3, -3, 0, 6, -6, 0, 0, 12, -12, 1, 1, -6, 6, 6, -6, -12, 12, -12]);
