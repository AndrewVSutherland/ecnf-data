print "Field 2.2.204.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 51);
OK := Integers(K);
Plist := [];
Append(~Plist,(w + 7)*OK);
Append(~Plist,(3)*OK+(w)*OK);
Append(~Plist,(5)*OK+(w + 1)*OK);
Append(~Plist,(5)*OK+(w + 4)*OK);
Append(~Plist,(7)*OK+(w + 3)*OK);
Append(~Plist,(7)*OK+(w + 4)*OK);
Append(~Plist,(-w + 8)*OK);
Append(~Plist,(-w - 8)*OK);
Append(~Plist,(17)*OK+(w)*OK);
Append(~Plist,(29)*OK+(w + 14)*OK);
Append(~Plist,(29)*OK+(w + 15)*OK);
Append(~Plist,(31)*OK+(w + 12)*OK);
Append(~Plist,(31)*OK+(w + 19)*OK);
Append(~Plist,(41)*OK+(w + 16)*OK);
Append(~Plist,(41)*OK+(w + 25)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(3*w - 20)*OK);
Append(~Plist,(3*w + 20)*OK);
Append(~Plist,(79)*OK+(w + 29)*OK);
Append(~Plist,(79)*OK+(w + 50)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(113)*OK+(w + 27)*OK);
Append(~Plist,(113)*OK+(w + 86)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(139)*OK+(w + 32)*OK);
Append(~Plist,(139)*OK+(w + 107)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(163)*OK+(w + 41)*OK);
Append(~Plist,(163)*OK+(w + 122)*OK);
Append(~Plist,(173)*OK+(w + 33)*OK);
Append(~Plist,(173)*OK+(w + 140)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(2*w + 5)*OK);
Append(~Plist,(-4*w - 25)*OK);
Append(~Plist,(4*w - 25)*OK);
Append(~Plist,(197)*OK+(w + 53)*OK);
Append(~Plist,(197)*OK+(w + 144)*OK);
Append(~Plist,(199)*OK+(w + 38)*OK);
Append(~Plist,(199)*OK+(w + 161)*OK);
Append(~Plist,(211)*OK+(w + 85)*OK);
Append(~Plist,(211)*OK+(w + 126)*OK);
Append(~Plist,(10*w + 73)*OK);
Append(~Plist,(-10*w + 73)*OK);
Append(~Plist,(233)*OK+(w + 98)*OK);
Append(~Plist,(233)*OK+(w + 135)*OK);
Append(~Plist,(8*w - 55)*OK);
Append(~Plist,(8*w + 55)*OK);
Append(~Plist,(-5*w + 32)*OK);
Append(~Plist,(5*w + 32)*OK);
Append(~Plist,(-3*w + 14)*OK);
Append(~Plist,(3*w + 14)*OK);
Append(~Plist,(269)*OK+(w + 68)*OK);
Append(~Plist,(269)*OK+(w + 201)*OK);
Append(~Plist,(283)*OK+(w + 30)*OK);
Append(~Plist,(283)*OK+(w + 253)*OK);
Append(~Plist,(317)*OK+(w + 67)*OK);
Append(~Plist,(317)*OK+(w + 250)*OK);
Append(~Plist,(w + 20)*OK);
Append(~Plist,(w - 20)*OK);
Append(~Plist,(-3*w - 10)*OK);
Append(~Plist,(3*w - 10)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(367)*OK+(w + 61)*OK);
Append(~Plist,(367)*OK+(w + 306)*OK);
Append(~Plist,(6*w + 47)*OK);
Append(~Plist,(-6*w + 47)*OK);
Append(~Plist,(379)*OK+(w + 52)*OK);
Append(~Plist,(379)*OK+(w + 327)*OK);
Append(~Plist,(-7*w - 46)*OK);
Append(~Plist,(7*w - 46)*OK);
Append(~Plist,(401)*OK+(w + 177)*OK);
Append(~Plist,(401)*OK+(w + 224)*OK);
Append(~Plist,(-4*w - 35)*OK);
Append(~Plist,(4*w - 35)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(w + 22)*OK);
Append(~Plist,(w - 22)*OK);
Append(~Plist,(439)*OK+(w + 200)*OK);
Append(~Plist,(439)*OK+(w + 239)*OK);
Append(~Plist,(-3*w - 4)*OK);
Append(~Plist,(3*w - 4)*OK);
Append(~Plist,(449)*OK+(w + 167)*OK);
Append(~Plist,(449)*OK+(w + 282)*OK);
Append(~Plist,(8*w + 61)*OK);
Append(~Plist,(8*w - 61)*OK);
Append(~Plist,(-6*w - 37)*OK);
Append(~Plist,(6*w - 37)*OK);
Append(~Plist,(487)*OK+(w + 138)*OK);
Append(~Plist,(487)*OK+(w + 349)*OK);
Append(~Plist,(5*w + 28)*OK);
Append(~Plist,(5*w - 28)*OK);
Append(~Plist,(499)*OK+(w + 71)*OK);
Append(~Plist,(499)*OK+(w + 428)*OK);
Append(~Plist,(521)*OK+(w + 234)*OK);
Append(~Plist,(521)*OK+(w + 287)*OK);
Append(~Plist,(23)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("16.1-a",(4)*OK,[0, 3, 3, 4, -4, -5, -5, 2, -2, -2, 0, 0, -9, -9, -4, 4, -8, 8, 16, -16, 4, -4, -13, -13, -21, -4, 4, -9, -9]);
ECSearch("16.1-b",(4)*OK,[0, 3, 3, -4, 4, -5, -5, 2, -2, -2, 0, 0, -9, -9, 4, -4, 8, -8, -16, 16, -4, 4, -13, -13, -21, 4, -4, -9, -9]);
ECSearch("16.1-c",(4)*OK,[0, -3, -3, -4, 4, -5, -5, -2, 2, 2, 0, 0, 9, 9, -4, 4, -8, 8, -16, 16, 4, -4, 13, 13, -21, 4, -4, -9, -9]);
ECSearch("16.1-d",(4)*OK,[0, -3, -3, 4, -4, -5, -5, -2, 2, 2, 0, 0, 9, 9, 4, -4, 8, -8, 16, -16, -4, 4, 13, 13, -21, -4, 4, -9, -9]);
ECSearch("17.1-a",(17)*OK+(w)*OK,[1, 0, 2, 2, 4, 4, -2, -2, -6, -6, 4, 4, 6, 6, 0, 0, 12, 12, 12, 12, 4, 4, 14, 14, -22, -8, -8, -2, -2]);
ECSearch("17.1-b",(17)*OK+(w)*OK,[-1, 0, 2, 2, -4, -4, -2, -2, -6, -6, -4, -4, 6, 6, 0, 0, -12, -12, -12, -12, -4, -4, 14, 14, -22, 8, 8, -2, -2]);
ECSearch("17.1-c",(17)*OK+(w)*OK,[1, 0, -2, -2, -4, -4, -2, -2, 6, 6, -4, -4, -6, -6, 0, 0, 12, 12, -12, -12, 4, 4, -14, -14, -22, 8, 8, -2, -2]);
ECSearch("17.1-d",(17)*OK+(w)*OK,[-1, 0, -2, -2, 4, 4, -2, -2, 6, 6, 4, 4, -6, -6, 0, 0, -12, -12, 12, 12, -4, -4, -14, -14, -22, -8, -8, -2, -2]);
ECSearch("24.1-a",(12)*OK+(2*w + 6)*OK,[2, 2, 0, 0, -2, -2, -2, -6, -6, -8, -8, 6, 6, 0, 0, 4, 4, 8, 8, -4, -4, -18, -18, -6, 12, 12, -2, -2]);
ECSearch("24.1-b",(12)*OK+(2*w + 6)*OK,[-2, -2, 0, 0, -2, -2, 2, 6, 6, -8, -8, -6, -6, 0, 0, -4, -4, 8, 8, 4, 4, 18, 18, -6, 12, 12, -2, -2]);
ECSearch("24.1-c",(12)*OK+(2*w + 6)*OK,[2, 2, 0, 0, -2, -2, -2, -6, -6, 8, 8, 6, 6, 0, 0, -4, -4, -8, -8, 4, 4, -18, -18, -6, -12, -12, -2, -2]);
ECSearch("24.1-d",(12)*OK+(2*w + 6)*OK,[-2, -2, 0, 0, -2, -2, 2, 6, 6, 8, 8, -6, -6, 0, 0, 4, 4, -8, -8, -4, -4, 18, 18, -6, -12, -12, -2, -2]);
ECSearch("25.2-a",(3*w - 22)*OK,[0, -3, 0, -4, 1, 7, 2, 0, 0, 0, 4, -11, 0, 0, 0, 0, 0, 0, -13, 17, 0, 0, 0, 0, 22, -7, 23, 11, -14]);
ECSearch("25.2-b",(3*w - 22)*OK,[0, 3, 0, 4, -1, 7, 2, 0, 0, 0, -4, 11, 0, 0, 0, 0, 0, 0, 13, -17, 0, 0, 0, 0, 22, 7, -23, 11, -14]);
ECSearch("25.3-a",(-3*w - 22)*OK,[0, -3, 0, 1, -4, 2, 7, 0, 0, 0, -11, 4, 0, 0, 0, 0, 0, 0, 17, -13, 0, 0, 0, 0, 22, 23, -7, -14, 11]);
ECSearch("25.3-b",(-3*w - 22)*OK,[0, 3, 0, -1, 4, 2, 7, 0, 0, 0, 11, -4, 0, 0, 0, 0, 0, 0, -17, 13, 0, 0, 0, 0, 22, -23, 7, -14, 11]);
ECSearch("34.1-a",(34)*OK+(w + 17)*OK,[-2, 0, 0, -4, -4, 2, 2, 0, 0, -4, -4, 6, 6, 0, 0, 0, 0, 8, 8, 0, 0, -6, -6, 14, 2, 2, 14, 14]);
ECSearch("34.1-b",(34)*OK+(w + 17)*OK,[2, 0, 0, 4, 4, 2, 2, 0, 0, 4, 4, 6, 6, 0, 0, 0, 0, -8, -8, 0, 0, -6, -6, 14, -2, -2, 14, 14]);
ECSearch("34.1-c",(34)*OK+(w + 17)*OK,[-2, 0, 0, -4, -4, 2, 2, 0, 0, -4, -4, -6, -6, 0, 0, 0, 0, 8, 8, 0, 0, 6, 6, 14, 2, 2, 14, 14]);
ECSearch("34.1-d",(34)*OK+(w + 17)*OK,[2, 0, 0, 4, 4, 2, 2, 0, 0, 4, 4, -6, -6, 0, 0, 0, 0, -8, -8, 0, 0, 6, 6, 14, -2, -2, 14, 14]);
ECSearch("35.1-a",(w + 4)*OK,[-1, 0, 2, 0, -2, 6, -6, -6, -6, 0, -8, 10, 10, 8, -8, 12, -12, 8, 0, 12, -12, 2, -14, 10, -8, -8, -10, -2]);
ECSearch("35.1-b",(w + 4)*OK,[1, 0, 2, 0, -2, 6, -6, -6, -6, 0, 8, 10, 10, -8, 8, -12, 12, -8, 0, -12, 12, 2, -14, 10, 8, 8, -10, -2]);
ECSearch("35.1-c",(w + 4)*OK,[-1, 0, -2, 0, -2, 6, 6, 6, 6, 0, 8, -10, -10, 8, -8, 12, -12, -8, 0, 12, -12, -2, 14, 10, 8, 8, -10, -2]);
ECSearch("35.1-d",(w + 4)*OK,[1, 0, -2, 0, -2, 6, 6, 6, 6, 0, -8, -10, -10, -8, 8, -12, 12, 8, 0, -12, 12, -2, 14, 10, -8, -8, -10, -2]);
ECSearch("35.2-a",(2*w - 13)*OK,[0, -2, 3, -1, -1, 5, -3, -6, -6, 8, 8, 9, -12, 6, 0, -3, 6, 5, -16, 9, 3, 6, 3, 17, 2, -13, 8, 2]);
ECSearch("35.2-b",(2*w - 13)*OK,[-2, 0, 3, -1, 7, 1, -3, 0, 2, -8, -4, 1, 0, -2, -8, 5, -8, 13, -8, 5, -13, 4, -9, 17, 0, 15, 0, 4]);
ECSearch("35.2-c",(2*w - 13)*OK,[2, 0, 3, 1, 7, 1, -3, 0, 2, 8, 4, 1, 0, 2, 8, -5, 8, -13, 8, -5, 13, 4, -9, 17, 0, -15, 0, 4]);
ECSearch("35.2-d",(2*w - 13)*OK,[0, 2, 3, 1, -1, 5, -3, -6, -6, -8, -8, 9, -12, -6, 0, 3, -6, -5, 16, -9, -3, 6, 3, 17, -2, 13, 8, 2]);
ECSearch("35.2-e",(2*w - 13)*OK,[0, -2, -3, -1, -1, 5, 3, 6, 6, 8, 8, -9, 12, -6, 0, 3, -6, 5, -16, -9, -3, -6, -3, 17, 2, -13, 8, 2]);
ECSearch("35.2-f",(2*w - 13)*OK,[-2, 0, -3, 1, 7, 1, 3, 0, -2, 8, 4, -1, 0, -2, -8, 5, -8, -13, 8, 5, -13, -4, 9, 17, 0, -15, 0, 4]);
ECSearch("35.2-g",(2*w - 13)*OK,[2, 0, -3, -1, 7, 1, 3, 0, -2, -8, -4, -1, 0, 2, 8, -5, 8, 13, -8, -5, 13, -4, 9, 17, 0, 15, 0, 4]);
ECSearch("35.2-h",(2*w - 13)*OK,[0, 2, -3, 1, -1, 5, 3, 6, 6, -8, -8, -9, 12, 6, 0, -3, 6, -5, 16, 9, 3, -6, -3, 17, -2, 13, 8, 2]);
ECSearch("35.4-a",(-w + 4)*OK,[-1, 0, 2, 0, 6, -2, -6, -6, -6, -8, 0, 10, 10, -8, 8, -12, 12, 0, 8, -12, 12, -14, 2, 10, -8, -8, -2, -10]);
ECSearch("35.4-b",(-w + 4)*OK,[1, 0, 2, 0, 6, -2, -6, -6, -6, 8, 0, 10, 10, 8, -8, 12, -12, 0, -8, 12, -12, -14, 2, 10, 8, 8, -2, -10]);
ECSearch("35.4-c",(-w + 4)*OK,[-1, 0, -2, 0, 6, -2, 6, 6, 6, 8, 0, -10, -10, -8, 8, -12, 12, 0, -8, -12, 12, 14, -2, 10, 8, 8, -2, -10]);
ECSearch("35.4-d",(-w + 4)*OK,[1, 0, -2, 0, 6, -2, 6, 6, 6, -8, 0, -10, -10, 8, -8, 12, -12, 0, 8, 12, -12, 14, -2, 10, -8, -8, -2, -10]);
ECSearch("35.3-a",(-2*w - 13)*OK,[0, -2, 3, -1, 5, -1, -3, -6, -6, 8, 8, -12, 9, 0, 6, 6, -3, -16, 5, 3, 9, 3, 6, 17, -13, 2, 2, 8]);
ECSearch("35.3-b",(-2*w - 13)*OK,[-2, 0, 3, -1, 1, 7, -3, 2, 0, -4, -8, 0, 1, -8, -2, -8, 5, -8, 13, -13, 5, -9, 4, 17, 15, 0, 4, 0]);
ECSearch("35.3-c",(-2*w - 13)*OK,[2, 0, 3, 1, 1, 7, -3, 2, 0, 4, 8, 0, 1, 8, 2, 8, -5, 8, -13, 13, -5, -9, 4, 17, -15, 0, 4, 0]);
ECSearch("35.3-d",(-2*w - 13)*OK,[0, 2, 3, 1, 5, -1, -3, -6, -6, -8, -8, -12, 9, 0, -6, -6, 3, 16, -5, -3, -9, 3, 6, 17, 13, -2, 2, 8]);
ECSearch("35.3-e",(-2*w - 13)*OK,[0, -2, -3, -1, 5, -1, 3, 6, 6, 8, 8, 12, -9, 0, -6, -6, 3, -16, 5, -3, -9, -3, -6, 17, -13, 2, 2, 8]);
ECSearch("35.3-f",(-2*w - 13)*OK,[-2, 0, -3, 1, 1, 7, 3, -2, 0, 4, 8, 0, -1, -8, -2, -8, 5, 8, -13, -13, 5, 9, -4, 17, -15, 0, 4, 0]);
ECSearch("35.3-g",(-2*w - 13)*OK,[2, 0, -3, -1, 1, 7, 3, -2, 0, -4, -8, 0, -1, 8, 2, 8, -5, -8, 13, 13, -5, 9, -4, 17, 15, 0, 4, 0]);
ECSearch("35.3-h",(-2*w - 13)*OK,[0, 2, -3, 1, 5, -1, 3, 6, 6, -8, -8, 12, -9, 0, 6, 6, -3, 16, -5, 3, 9, -3, -6, 17, 13, -2, 2, 8]);
ECSearch("36.1-a",(6)*OK,[0, 0, 4, 4, 2, 2, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, -22, 16, 16, 14, 14]);
ECSearch("36.1-b",(6)*OK,[0, 0, -4, -4, 2, 2, 0, 0, 0, -4, -4, 0, 0, 0, 0, 0, 0, -4, -4, 0, 0, 0, 0, -22, -16, -16, 14, 14]);
