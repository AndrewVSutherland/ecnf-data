print "Field 2.2.469.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 117);
OK := Integers(K);
Plist := [];
Append(~Plist,(3)*OK+(w)*OK);
Append(~Plist,(3)*OK+(w + 2)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(5)*OK+(w + 1)*OK);
Append(~Plist,(5)*OK+(w + 3)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(13)*OK+(w)*OK);
Append(~Plist,(13)*OK+(w + 12)*OK);
Append(~Plist,(23)*OK+(w + 1)*OK);
Append(~Plist,(23)*OK+(w + 21)*OK);
Append(~Plist,(29)*OK+(w + 5)*OK);
Append(~Plist,(29)*OK+(w + 23)*OK);
Append(~Plist,(31)*OK+(w + 14)*OK);
Append(~Plist,(31)*OK+(w + 16)*OK);
Append(~Plist,(37)*OK+(w + 2)*OK);
Append(~Plist,(37)*OK+(w + 34)*OK);
Append(~Plist,(41)*OK+(w + 15)*OK);
Append(~Plist,(41)*OK+(w + 25)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(3*w - 35)*OK);
Append(~Plist,(71)*OK+(w + 27)*OK);
Append(~Plist,(71)*OK+(w + 43)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(101)*OK+(w + 20)*OK);
Append(~Plist,(101)*OK+(w + 80)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(127)*OK+(w + 35)*OK);
Append(~Plist,(127)*OK+(w + 91)*OK);
Append(~Plist,(139)*OK+(w + 28)*OK);
Append(~Plist,(139)*OK+(w + 110)*OK);
Append(~Plist,(-4*w - 43)*OK);
Append(~Plist,(-4*w + 47)*OK);
Append(~Plist,(151)*OK+(w + 73)*OK);
Append(~Plist,(151)*OK+(w + 77)*OK);
Append(~Plist,(163)*OK+(w + 59)*OK);
Append(~Plist,(163)*OK+(w + 103)*OK);
Append(~Plist,(193)*OK+(w + 67)*OK);
Append(~Plist,(193)*OK+(w + 125)*OK);
Append(~Plist,(211)*OK+(w + 70)*OK);
Append(~Plist,(211)*OK+(w + 140)*OK);
Append(~Plist,(229)*OK+(w + 97)*OK);
Append(~Plist,(229)*OK+(w + 131)*OK);
Append(~Plist,(251)*OK+(w + 29)*OK);
Append(~Plist,(251)*OK+(w + 221)*OK);
Append(~Plist,(w + 19)*OK);
Append(~Plist,(w - 20)*OK);
Append(~Plist,(271)*OK+(w + 30)*OK);
Append(~Plist,(271)*OK+(w + 240)*OK);
Append(~Plist,(-3*w - 35)*OK);
Append(~Plist,(3*w - 38)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(311)*OK+(w + 64)*OK);
Append(~Plist,(311)*OK+(w + 246)*OK);
Append(~Plist,(313)*OK+(w + 32)*OK);
Append(~Plist,(313)*OK+(w + 280)*OK);
Append(~Plist,(317)*OK+(w + 54)*OK);
Append(~Plist,(317)*OK+(w + 262)*OK);
Append(~Plist,(-3*w - 25)*OK);
Append(~Plist,(3*w - 28)*OK);
Append(~Plist,(359)*OK+(w + 87)*OK);
Append(~Plist,(359)*OK+(w + 271)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(367)*OK+(w + 159)*OK);
Append(~Plist,(367)*OK+(w + 207)*OK);
Append(~Plist,(383)*OK+(w + 109)*OK);
Append(~Plist,(383)*OK+(w + 273)*OK);
Append(~Plist,(w + 22)*OK);
Append(~Plist,(w - 23)*OK);
Append(~Plist,(409)*OK+(w + 46)*OK);
Append(~Plist,(409)*OK+(w + 362)*OK);
Append(~Plist,(421)*OK+(w + 62)*OK);
Append(~Plist,(421)*OK+(w + 358)*OK);
Append(~Plist,(-2*w + 31)*OK);
Append(~Plist,(2*w + 29)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(-2*w - 5)*OK);
Append(~Plist,(449)*OK+(w + 106)*OK);
Append(~Plist,(449)*OK+(w + 342)*OK);
Append(~Plist,(457)*OK+(w + 83)*OK);
Append(~Plist,(457)*OK+(w + 373)*OK);
Append(~Plist,(5*w - 61)*OK);
Append(~Plist,(5*w + 56)*OK);
Append(~Plist,(-3*w - 22)*OK);
Append(~Plist,(3*w - 25)*OK);
Append(~Plist,(521)*OK+(w + 153)*OK);
Append(~Plist,(521)*OK+(w + 367)*OK);
Append(~Plist,(557)*OK+(w + 118)*OK);
Append(~Plist,(557)*OK+(w + 438)*OK);
Append(~Plist,(563)*OK+(w + 42)*OK);
Append(~Plist,(563)*OK+(w + 520)*OK);
Append(~Plist,(569)*OK+(w + 145)*OK);
Append(~Plist,(569)*OK+(w + 423)*OK);
Append(~Plist,(571)*OK+(w + 72)*OK);
Append(~Plist,(571)*OK+(w + 498)*OK);
Append(~Plist,(577)*OK+(w + 161)*OK);
Append(~Plist,(577)*OK+(w + 415)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[0, 0, -3, 0, 0, 0, 0, 0, -8, -8, 2, 2, 0, 0, 6, 6, 0, 0, 0, 0, 4, -16, -16, 0, 0, 0, 0, 20, 20, -6]);
