print "Field 2.2.348.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 87);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(3)*OK+(w)*OK);
Append(~Plist,(-w + 10)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(17)*OK+(w + 6)*OK);
Append(~Plist,(17)*OK+(w + 11)*OK);
Append(~Plist,(19)*OK+(w + 7)*OK);
Append(~Plist,(19)*OK+(w + 12)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(29)*OK+(w)*OK);
Append(~Plist,(31)*OK+(w + 5)*OK);
Append(~Plist,(31)*OK+(w + 26)*OK);
Append(~Plist,(41)*OK+(w + 13)*OK);
Append(~Plist,(41)*OK+(w + 28)*OK);
Append(~Plist,(43)*OK+(w + 1)*OK);
Append(~Plist,(43)*OK+(w + 42)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 4)*OK);
Append(~Plist,(79)*OK+(w + 18)*OK);
Append(~Plist,(79)*OK+(w + 61)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(89)*OK+(w + 40)*OK);
Append(~Plist,(89)*OK+(w + 49)*OK);
Append(~Plist,(101)*OK+(w + 17)*OK);
Append(~Plist,(101)*OK+(w + 84)*OK);
Append(~Plist,(-3*w + 26)*OK);
Append(~Plist,(3*w + 26)*OK);
Append(~Plist,(w + 14)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(113)*OK+(w + 55)*OK);
Append(~Plist,(113)*OK+(w + 58)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(127)*OK+(w + 50)*OK);
Append(~Plist,(127)*OK+(w + 77)*OK);
Append(~Plist,(137)*OK+(w + 19)*OK);
Append(~Plist,(137)*OK+(w + 118)*OK);
Append(~Plist,(163)*OK+(w + 24)*OK);
Append(~Plist,(163)*OK+(w + 139)*OK);
Append(~Plist,(-4*w + 35)*OK);
Append(~Plist,(4*w + 35)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(211)*OK+(w + 64)*OK);
Append(~Plist,(211)*OK+(w + 147)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(-5*w + 44)*OK);
Append(~Plist,(5*w + 44)*OK);
Append(~Plist,(-3*w - 32)*OK);
Append(~Plist,(3*w - 32)*OK);
Append(~Plist,(269)*OK+(w + 25)*OK);
Append(~Plist,(269)*OK+(w + 244)*OK);
Append(~Plist,(271)*OK+(w + 30)*OK);
Append(~Plist,(271)*OK+(w + 241)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(293)*OK+(w + 110)*OK);
Append(~Plist,(293)*OK+(w + 183)*OK);
Append(~Plist,(307)*OK+(w + 98)*OK);
Append(~Plist,(307)*OK+(w + 209)*OK);
Append(~Plist,(w + 20)*OK);
Append(~Plist,(w - 20)*OK);
Append(~Plist,(317)*OK+(w + 74)*OK);
Append(~Plist,(317)*OK+(w + 243)*OK);
Append(~Plist,(331)*OK+(w + 114)*OK);
Append(~Plist,(331)*OK+(w + 217)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(6*w + 59)*OK);
Append(~Plist,(6*w - 59)*OK);
Append(~Plist,(367)*OK+(w + 120)*OK);
Append(~Plist,(367)*OK+(w + 247)*OK);
Append(~Plist,(-3*w + 34)*OK);
Append(~Plist,(3*w + 34)*OK);
Append(~Plist,(379)*OK+(w + 128)*OK);
Append(~Plist,(379)*OK+(w + 251)*OK);
Append(~Plist,(-3*w + 20)*OK);
Append(~Plist,(3*w + 20)*OK);
Append(~Plist,(389)*OK+(w + 101)*OK);
Append(~Plist,(389)*OK+(w + 288)*OK);
Append(~Plist,(w + 22)*OK);
Append(~Plist,(w - 22)*OK);
Append(~Plist,(-7*w + 62)*OK);
Append(~Plist,(7*w + 62)*OK);
Append(~Plist,(-4*w + 31)*OK);
Append(~Plist,(4*w + 31)*OK);
Append(~Plist,(449)*OK+(w + 136)*OK);
Append(~Plist,(449)*OK+(w + 313)*OK);
Append(~Plist,(-4*w - 43)*OK);
Append(~Plist,(4*w - 43)*OK);
Append(~Plist,(461)*OK+(w + 116)*OK);
Append(~Plist,(461)*OK+(w + 345)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("6.1-a",(-w - 9)*OK,[-2, -2, 3, 3, 5, -1, -4, 4, -3, 0, -2, 10, -1, 7, 7, -11, -5, 3, 9, 10, -10, 8, 8, -16, -8, 2, -14, 4]);
ECSearch("6.1-b",(-w - 9)*OK,[-2, -2, 3, 3, 1, -5, -4, 4, -3, 0, -10, 2, 7, -1, 11, -7, -5, -9, -3, 10, -10, -8, -8, 8, 16, -14, 2, -4]);
ECSearch("6.1-c",(-w - 9)*OK,[-2, -2, 3, 3, -1, 5, 4, -4, -3, 0, 10, -2, 7, -1, -11, 7, -5, 9, 3, -10, 10, 8, 8, -8, -16, -14, 2, -4]);
ECSearch("6.1-d",(-w - 9)*OK,[-5, 4, 0, 3, 4, -2, 7, 2, 3, 0, -1, 11, 5, -2, -4, -4, 1, 9, 12, -1, -8, -14, 4, 16, -4, 2, 10, -5]);
ECSearch("6.1-e",(-w - 9)*OK,[4, -5, 3, 0, 2, -4, -2, -7, 3, 0, -11, 1, -2, 5, 4, 4, 1, -12, -9, 8, 1, -4, 14, 4, -16, 10, 2, 5]);
ECSearch("6.1-f",(-w - 9)*OK,[-2, -2, 3, 3, -5, 1, 4, -4, -3, 0, 2, -10, -1, 7, -7, 11, -5, -3, -9, -10, 10, -8, -8, 16, 8, 2, -14, 4]);
ECSearch("6.1-g",(-w - 9)*OK,[4, -5, 3, 0, -2, 4, 2, 7, 3, 0, 11, -1, -2, 5, -4, -4, 1, 12, 9, -8, -1, 4, -14, -4, 16, 10, 2, 5]);
ECSearch("6.1-h",(-w - 9)*OK,[-5, 4, 0, 3, -4, 2, -7, -2, 3, 0, 1, -11, 5, -2, 4, 4, 1, -9, -12, 1, 8, 14, -4, -16, 4, 2, 10, -5]);
ECSearch("6.1-i",(-w - 9)*OK,[-5, 4, 0, -3, 4, -2, -7, -2, 3, 0, -1, 11, -5, 2, -4, -4, 1, -9, -12, 1, 8, -14, 4, -16, 4, -2, -10, 5]);
ECSearch("6.1-j",(-w - 9)*OK,[4, -5, -3, 0, 2, -4, 2, 7, 3, 0, -11, 1, 2, -5, 4, 4, 1, 12, 9, -8, -1, -4, 14, -4, 16, -10, -2, -5]);
ECSearch("6.1-k",(-w - 9)*OK,[-2, -2, -3, -3, 5, -1, 4, -4, -3, 0, -2, 10, 1, -7, 7, -11, -5, -3, -9, -10, 10, 8, 8, 16, 8, -2, 14, -4]);
ECSearch("6.1-l",(-w - 9)*OK,[4, -5, -3, 0, -2, 4, -2, -7, 3, 0, 11, -1, 2, -5, -4, -4, 1, -12, -9, 8, 1, 4, -14, 4, -16, -10, -2, -5]);
ECSearch("6.1-m",(-w - 9)*OK,[-5, 4, 0, -3, -4, 2, 7, 2, 3, 0, 1, -11, -5, 2, 4, 4, 1, 9, 12, -1, -8, 14, -4, 16, -4, -2, -10, 5]);
ECSearch("6.1-n",(-w - 9)*OK,[-2, -2, -3, -3, 1, -5, 4, -4, -3, 0, -10, 2, -7, 1, 11, -7, -5, 9, 3, -10, 10, -8, -8, -8, -16, 14, -2, 4]);
ECSearch("6.1-o",(-w - 9)*OK,[-2, -2, -3, -3, -1, 5, -4, 4, -3, 0, 10, -2, -7, 1, -11, 7, -5, -9, -3, 10, -10, 8, 8, 8, 16, 14, -2, 4]);
ECSearch("6.1-p",(-w - 9)*OK,[-2, -2, -3, -3, -5, 1, -4, 4, -3, 0, 2, -10, 1, -7, -7, 11, -5, 3, 9, 10, -10, -8, -8, -16, -8, -2, 14, -4]);
