print "Field 2.2.376.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 94);
OK := Integers(K);
Plist := [];
Append(~Plist,(-151*w + 1464)*OK);
Append(~Plist,(-23*w + 223)*OK);
Append(~Plist,(23*w + 223)*OK);
Append(~Plist,(3*w - 29)*OK);
Append(~Plist,(3*w + 29)*OK);
Append(~Plist,(-w + 9)*OK);
Append(~Plist,(w + 9)*OK);
Append(~Plist,(-4*w + 39)*OK);
Append(~Plist,(4*w + 39)*OK);
Append(~Plist,(36*w - 349)*OK);
Append(~Plist,(36*w + 349)*OK);
Append(~Plist,(-279*w + 2705)*OK);
Append(~Plist,(279*w + 2705)*OK);
Append(~Plist,(82*w + 795)*OK);
Append(~Plist,(82*w - 795)*OK);
Append(~Plist,(732*w + 7097)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(17*w - 165)*OK);
Append(~Plist,(17*w + 165)*OK);
Append(~Plist,(-43*w - 417)*OK);
Append(~Plist,(43*w - 417)*OK);
Append(~Plist,(220*w + 2133)*OK);
Append(~Plist,(220*w - 2133)*OK);
Append(~Plist,(6*w + 59)*OK);
Append(~Plist,(-6*w + 59)*OK);
Append(~Plist,(-95*w - 921)*OK);
Append(~Plist,(95*w - 921)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(22*w + 213)*OK);
Append(~Plist,(-22*w + 213)*OK);
Append(~Plist,(w + 15)*OK);
Append(~Plist,(w - 15)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(42*w - 407)*OK);
Append(~Plist,(-42*w - 407)*OK);
Append(~Plist,(-535*w - 5187)*OK);
Append(~Plist,(-535*w + 5187)*OK);
Append(~Plist,(14*w - 135)*OK);
Append(~Plist,(-14*w - 135)*OK);
Append(~Plist,(686*w - 6651)*OK);
Append(~Plist,(686*w + 6651)*OK);
Append(~Plist,(35*w - 339)*OK);
Append(~Plist,(35*w + 339)*OK);
Append(~Plist,(1080*w - 10471)*OK);
Append(~Plist,(-1080*w - 10471)*OK);
Append(~Plist,(5*w - 51)*OK);
Append(~Plist,(-5*w - 51)*OK);
Append(~Plist,(-417*w + 4043)*OK);
Append(~Plist,(417*w + 4043)*OK);
Append(~Plist,(-489*w + 4741)*OK);
Append(~Plist,(489*w + 4741)*OK);
Append(~Plist,(9*w + 89)*OK);
Append(~Plist,(-9*w + 89)*OK);
Append(~Plist,(12*w - 115)*OK);
Append(~Plist,(-12*w - 115)*OK);
Append(~Plist,(-3*w + 23)*OK);
Append(~Plist,(3*w + 23)*OK);
Append(~Plist,(135*w + 1309)*OK);
Append(~Plist,(-135*w + 1309)*OK);
Append(~Plist,(6*w - 61)*OK);
Append(~Plist,(-6*w - 61)*OK);
Append(~Plist,(w + 21)*OK);
Append(~Plist,(w - 21)*OK);
Append(~Plist,(-11*w - 105)*OK);
Append(~Plist,(-11*w + 105)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(-6*w - 55)*OK);
Append(~Plist,(-6*w + 55)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(-1441*w - 13971)*OK);
Append(~Plist,(-1441*w + 13971)*OK);
Append(~Plist,(-3*w - 35)*OK);
Append(~Plist,(3*w - 35)*OK);
Append(~Plist,(9*w - 85)*OK);
Append(~Plist,(9*w + 85)*OK);
Append(~Plist,(10*w + 99)*OK);
Append(~Plist,(-10*w + 99)*OK);
Append(~Plist,(-2347*w - 22755)*OK);
Append(~Plist,(2045*w + 19827)*OK);
Append(~Plist,(96*w - 931)*OK);
Append(~Plist,(-96*w - 931)*OK);
Append(~Plist,(-213*w + 2065)*OK);
Append(~Plist,(213*w + 2065)*OK);
Append(~Plist,(-134*w - 1299)*OK);
Append(~Plist,(-134*w + 1299)*OK);
Append(~Plist,(181*w + 1755)*OK);
Append(~Plist,(-181*w + 1755)*OK);
Append(~Plist,(594*w + 5759)*OK);
Append(~Plist,(594*w - 5759)*OK);
Append(~Plist,(81*w - 785)*OK);
Append(~Plist,(-81*w - 785)*OK);
Append(~Plist,(-4*w + 45)*OK);
Append(~Plist,(4*w + 45)*OK);
Append(~Plist,(-3*w + 37)*OK);
Append(~Plist,(3*w + 37)*OK);
Append(~Plist,(-3*w + 17)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("3.1-a",(-23*w + 223)*OK,[-1, 1, -1, 4, 1, 1, 8, 3, -4, 6, -9, 6, 4, 4, 4, 2, 1, 11, 7, 12, -2, -7, -14, 6, -13, -18, -5, -2, 8]);
ECSearch("3.1-b",(-23*w + 223)*OK,[-1, 1, 1, -4, -1, -1, 8, 3, 4, -6, 9, -6, -4, -4, -4, 2, 1, 11, 7, 12, -2, -7, -14, 6, 13, 18, -5, 2, -8]);
ECSearch("3.2-a",(23*w + 223)*OK,[-1, 1, 4, -1, 1, 1, 3, 8, 6, -4, 6, -9, 4, 4, 4, 2, 11, 1, 12, 7, -7, -2, 6, -14, -18, -13, -5, 8, -2]);
ECSearch("3.2-b",(23*w + 223)*OK,[-1, 1, -4, 1, -1, -1, 3, 8, -6, 4, -6, 9, -4, -4, -4, 2, 11, 1, 12, 7, -7, -2, 6, -14, 18, 13, -5, -8, 2]);
ECSearch("6.1-a",(-w + 10)*OK,[0, 4, 2, 0, -6, -6, -2, -2, -6, 6, 0, -6, 2, 4, -10, 12, -4, 0, -12, 6, -10, 2, 2, -16, -14, -10, -2, 14]);
ECSearch("6.1-b",(-w + 10)*OK,[-3, 0, 1, 3, -1, -5, 4, -6, 8, -6, -3, -8, 4, 12, -2, 3, 13, 4, 15, -11, -6, 6, -10, -14, 5, -9, -16, -18]);
ECSearch("6.1-c",(-w + 10)*OK,[-3, 0, -1, -3, 1, -5, 4, 6, -8, 6, 3, 8, -4, -12, -2, 3, 13, 4, 15, -11, -6, 6, -10, 14, -5, -9, 16, 18]);
ECSearch("6.1-d",(-w + 10)*OK,[0, 3, -2, 0, -1, 1, -2, 9, -1, -6, 0, -8, -2, 3, 4, -9, 10, -14, 9, -8, -3, 9, -19, 16, 14, 18, 2, -21]);
ECSearch("6.1-e",(-w + 10)*OK,[0, -3, 2, 0, 1, 1, -2, -9, 1, 6, 0, 8, 2, -3, 4, -9, 10, -14, 9, -8, -3, 9, -19, -16, -14, 18, -2, 21]);
ECSearch("6.1-f",(-w + 10)*OK,[0, -4, -2, 0, 6, -6, -2, 2, 6, -6, 0, 6, -2, -4, -10, 12, -4, 0, -12, 6, -10, 2, 2, 16, 14, -10, 2, -14]);
ECSearch("6.2-a",(-w - 10)*OK,[0, 2, 4, -6, 0, -2, -6, -6, -2, 0, 6, 2, -6, 4, -10, -4, 12, -12, 0, -10, 6, 2, 2, -14, -16, -10, 14, -2]);
ECSearch("6.2-b",(-w - 10)*OK,[-3, 1, 0, -1, 3, 4, -5, 8, -6, -3, -6, 4, -8, 12, -2, 13, 3, 15, 4, -6, -11, -10, 6, 5, -14, -9, -18, -16]);
ECSearch("6.2-c",(-w - 10)*OK,[-3, -1, 0, 1, -3, 4, -5, -8, 6, 3, 6, -4, 8, -12, -2, 13, 3, 15, 4, -6, -11, -10, 6, -5, 14, -9, 18, 16]);
ECSearch("6.2-d",(-w - 10)*OK,[0, -2, 3, -1, 0, -2, 1, -1, 9, 0, -6, -2, -8, 3, 4, 10, -9, 9, -14, -3, -8, -19, 9, 14, 16, 18, -21, 2]);
ECSearch("6.2-e",(-w - 10)*OK,[0, 2, -3, 1, 0, -2, 1, 1, -9, 0, 6, 2, 8, -3, 4, 10, -9, 9, -14, -3, -8, -19, 9, -14, -16, 18, 21, -2]);
ECSearch("6.2-f",(-w - 10)*OK,[0, -2, -4, 6, 0, -2, -6, 6, 2, 0, -6, -2, 6, -4, -10, -4, 12, -12, 0, -10, 6, 2, 2, 14, 16, -10, -14, 2]);
ECSearch("9.1-a",(3)*OK,[0, -3, 3, 6, -6, 6, 6, -3, 3, 9, -9, -6, 6, 0, -13, 6, 6, 6, 6, 12, 12, 1, 1, -12, 12, 13, -6, 6]);
ECSearch("9.1-b",(3)*OK,[-1, -2, 2, 2, 2, 2, -6, -8, 0, 6, -6, 8, -4, -4, 2, 4, -4, 4, -12, 10, 2, -14, 18, 10, -6, 10, 20, -8]);
ECSearch("9.1-c",(3)*OK,[-1, -2, 2, -2, -2, -6, 2, 0, 8, 6, -6, 4, -8, 4, 2, -4, 4, -12, 4, 2, 10, 18, -14, 6, -10, 10, 8, -20]);
ECSearch("9.1-d",(3)*OK,[-1, 2, -2, 2, 2, -6, 2, 0, -8, -6, 6, -4, 8, -4, 2, -4, 4, -12, 4, 2, 10, 18, -14, -6, 10, 10, -8, 20]);
ECSearch("9.1-e",(3)*OK,[-1, 2, -2, -2, -2, 2, -6, 8, 0, -6, 6, -8, 4, 4, 2, 4, -4, 4, -12, 10, 2, -14, 18, -10, 6, 10, -20, 8]);
ECSearch("9.1-f",(3)*OK,[0, 3, -3, -6, 6, 6, 6, 3, -3, -9, 9, 6, -6, 0, -13, 6, 6, 6, 6, 12, 12, 1, 1, 12, -12, 13, 6, -6]);
ECSearch("9.2-a",(10*w - 97)*OK,[0, 2, 0, 0, 0, 0, -6, 6, 0, 0, 0, 0, 0, 0, 0, 14, -6, 6, 18, -18, 18, -18, 10, 10, 0, 0, -14, 0, 0]);
ECSearch("9.3-a",(-10*w - 97)*OK,[0, 2, 0, 0, 0, 0, 6, -6, 0, 0, 0, 0, 0, 0, 0, 14, 6, -6, -18, 18, -18, 18, 10, 10, 0, 0, -14, 0, 0]);
