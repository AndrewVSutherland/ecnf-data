print "Field 2.2.429.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 107);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w + 11)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(5)*OK+(w + 1)*OK);
Append(~Plist,(5)*OK+(w + 3)*OK);
Append(~Plist,(7)*OK+(w + 1)*OK);
Append(~Plist,(7)*OK+(w + 5)*OK);
Append(~Plist,(11)*OK+(w + 5)*OK);
Append(~Plist,(13)*OK+(w + 6)*OK);
Append(~Plist,(w - 10)*OK);
Append(~Plist,(w + 9)*OK);
Append(~Plist,(19)*OK+(w + 3)*OK);
Append(~Plist,(19)*OK+(w + 15)*OK);
Append(~Plist,(2*w - 21)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(47)*OK+(w + 18)*OK);
Append(~Plist,(47)*OK+(w + 28)*OK);
Append(~Plist,(59)*OK+(w + 27)*OK);
Append(~Plist,(59)*OK+(w + 31)*OK);
Append(~Plist,(71)*OK+(w + 21)*OK);
Append(~Plist,(71)*OK+(w + 49)*OK);
Append(~Plist,(73)*OK+(w + 32)*OK);
Append(~Plist,(73)*OK+(w + 40)*OK);
Append(~Plist,(89)*OK+(w + 23)*OK);
Append(~Plist,(89)*OK+(w + 65)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(w + 14)*OK);
Append(~Plist,(w - 15)*OK);
Append(~Plist,(w)*OK);
Append(~Plist,(w - 1)*OK);
Append(~Plist,(109)*OK+(w + 29)*OK);
Append(~Plist,(109)*OK+(w + 79)*OK);
Append(~Plist,(-5*w - 48)*OK);
Append(~Plist,(5*w - 53)*OK);
Append(~Plist,(137)*OK+(w + 46)*OK);
Append(~Plist,(137)*OK+(w + 90)*OK);
Append(~Plist,(151)*OK+(w + 45)*OK);
Append(~Plist,(151)*OK+(w + 105)*OK);
Append(~Plist,(3*w + 32)*OK);
Append(~Plist,(-3*w + 35)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(-5*w + 56)*OK);
Append(~Plist,(-5*w - 51)*OK);
Append(~Plist,(193)*OK+(w + 64)*OK);
Append(~Plist,(193)*OK+(w + 128)*OK);
Append(~Plist,(w + 17)*OK);
Append(~Plist,(w - 18)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(241)*OK+(w + 97)*OK);
Append(~Plist,(241)*OK+(w + 143)*OK);
Append(~Plist,(-3*w - 25)*OK);
Append(~Plist,(3*w - 28)*OK);
Append(~Plist,(271)*OK+(w + 72)*OK);
Append(~Plist,(271)*OK+(w + 198)*OK);
Append(~Plist,(307)*OK+(w + 47)*OK);
Append(~Plist,(307)*OK+(w + 259)*OK);
Append(~Plist,(w + 20)*OK);
Append(~Plist,(w - 21)*OK);
Append(~Plist,(317)*OK+(w + 122)*OK);
Append(~Plist,(317)*OK+(w + 194)*OK);
Append(~Plist,(-4*w + 39)*OK);
Append(~Plist,(4*w + 35)*OK);
Append(~Plist,(349)*OK+(w + 50)*OK);
Append(~Plist,(349)*OK+(w + 298)*OK);
Append(~Plist,(353)*OK+(w + 73)*OK);
Append(~Plist,(353)*OK+(w + 279)*OK);
Append(~Plist,(-3*w - 35)*OK);
Append(~Plist,(3*w - 38)*OK);
Append(~Plist,(383)*OK+(w + 76)*OK);
Append(~Plist,(383)*OK+(w + 306)*OK);
Append(~Plist,(401)*OK+(w + 115)*OK);
Append(~Plist,(401)*OK+(w + 285)*OK);
Append(~Plist,(409)*OK+(w + 54)*OK);
Append(~Plist,(409)*OK+(w + 354)*OK);
Append(~Plist,(-9*w + 100)*OK);
Append(~Plist,(-9*w - 91)*OK);
Append(~Plist,(449)*OK+(w + 48)*OK);
Append(~Plist,(449)*OK+(w + 400)*OK);
Append(~Plist,(457)*OK+(w + 57)*OK);
Append(~Plist,(457)*OK+(w + 399)*OK);
Append(~Plist,(-4*w - 33)*OK);
Append(~Plist,(4*w - 37)*OK);
Append(~Plist,(-3*w + 23)*OK);
Append(~Plist,(3*w + 20)*OK);
Append(~Plist,(509)*OK+(w + 51)*OK);
Append(~Plist,(509)*OK+(w + 457)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(541)*OK+(w + 84)*OK);
Append(~Plist,(541)*OK+(w + 456)*OK);
Append(~Plist,(7*w - 72)*OK);
Append(~Plist,(7*w + 65)*OK);
Append(~Plist,(-13*w - 126)*OK);
Append(~Plist,(13*w - 139)*OK);
Append(~Plist,(587)*OK+(w + 264)*OK);
Append(~Plist,(587)*OK+(w + 322)*OK);
Append(~Plist,(613)*OK+(w + 228)*OK);
Append(~Plist,(613)*OK+(w + 384)*OK);
Append(~Plist,(617)*OK+(w + 56)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("3.1-a",(-w + 11)*OK,[1, 0, -4, 4, -4, -4, 2, -4, 0, 0, -8, -8, -4, -8, -8, -8, 0, -12, 12, -6, -6, -4, -8, 12, 8, 16, -16, 8, 0]);
ECSearch("3.1-b",(-w + 11)*OK,[1, -4, 0, 4, -4, -4, -2, 0, 4, 8, 0, 4, 8, -8, -8, 0, -8, 12, -12, 6, 6, -8, -4, -8, -12, -16, 16, 0, -8]);
ECSearch("3.1-c",(-w + 11)*OK,[1, 0, 4, 4, -4, 4, 2, 4, 0, 0, -8, 8, 4, 8, 8, 8, 0, 12, -12, -6, -6, 4, 8, -12, -8, 16, -16, -8, 0]);
ECSearch("3.1-d",(-w + 11)*OK,[1, 4, 0, 4, -4, 4, -2, 0, -4, 8, 0, -4, -8, 8, 8, 0, 8, -12, 12, 6, 6, 8, 4, 8, 12, -16, 16, 0, 8]);
ECSearch("3.1-e",(-w + 11)*OK,[1, -4, 0, -4, 4, -4, 2, 0, -4, -8, 0, -4, -8, -8, -8, 0, -8, 12, -12, -6, -6, -8, -4, 8, 12, -16, 16, 0, 8]);
ECSearch("3.1-f",(-w + 11)*OK,[1, 0, 4, -4, 4, 4, -2, -4, 0, 0, 8, -8, -4, 8, 8, 8, 0, 12, -12, 6, 6, 4, 8, 12, 8, 16, -16, 8, 0]);
ECSearch("3.1-g",(-w + 11)*OK,[1, 4, 0, -4, 4, 4, 2, 0, 4, -8, 0, 4, 8, 8, 8, 0, 8, -12, 12, -6, -6, 8, 4, -8, -12, -16, 16, 0, -8]);
ECSearch("3.1-h",(-w + 11)*OK,[1, 0, -4, -4, 4, -4, -2, 4, 0, 0, 8, 8, 4, -8, -8, -8, 0, -12, 12, 6, 6, -4, -8, -12, -8, 16, -16, -8, 0]);
ECSearch("4.1-a",(2)*OK,[-2, 3, -3, 1, 1, 0, 4, 0, 0, -2, -2, 3, -3, 6, -6, -9, 9, -12, 12, -11, -11, 0, 0, -18, 18, -13, -13, 15, -15]);
ECSearch("4.1-b",(2)*OK,[-2, -3, 3, 1, 1, 0, 4, 0, 0, -2, -2, -3, 3, -6, 6, 9, -9, 12, -12, -11, -11, 0, 0, 18, -18, -13, -13, -15, 15]);
ECSearch("4.1-c",(2)*OK,[-2, 3, -3, -1, -1, 0, -4, 0, 0, 2, 2, -3, 3, 6, -6, -9, 9, -12, 12, 11, 11, 0, 0, 18, -18, -13, -13, -15, 15]);
ECSearch("4.1-d",(2)*OK,[-2, -3, 3, -1, -1, 0, -4, 0, 0, 2, 2, 3, -3, -6, 6, 9, -9, 12, -12, 11, 11, 0, 0, -18, 18, -13, -13, 15, -15]);
