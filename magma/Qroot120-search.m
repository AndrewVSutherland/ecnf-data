print "Field 2.2.120.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 30);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w)*OK);
Append(~Plist,(3)*OK+(w)*OK);
Append(~Plist,(w + 5)*OK);
Append(~Plist,(7)*OK+(w + 3)*OK);
Append(~Plist,(7)*OK+(w + 4)*OK);
Append(~Plist,(13)*OK+(w + 2)*OK);
Append(~Plist,(13)*OK+(w + 11)*OK);
Append(~Plist,(17)*OK+(w + 8)*OK);
Append(~Plist,(17)*OK+(w + 9)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 7)*OK);
Append(~Plist,(w + 1)*OK);
Append(~Plist,(w - 1)*OK);
Append(~Plist,(37)*OK+(w + 17)*OK);
Append(~Plist,(37)*OK+(w + 20)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(83)*OK+(w + 14)*OK);
Append(~Plist,(83)*OK+(w + 69)*OK);
Append(~Plist,(-3*w - 13)*OK);
Append(~Plist,(3*w - 13)*OK);
Append(~Plist,(103)*OK+(w + 37)*OK);
Append(~Plist,(103)*OK+(w + 66)*OK);
Append(~Plist,(107)*OK+(w + 43)*OK);
Append(~Plist,(107)*OK+(w + 64)*OK);
Append(~Plist,(113)*OK+(w + 16)*OK);
Append(~Plist,(113)*OK+(w + 97)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(127)*OK+(w + 41)*OK);
Append(~Plist,(127)*OK+(w + 86)*OK);
Append(~Plist,(137)*OK+(w + 21)*OK);
Append(~Plist,(137)*OK+(w + 116)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 13)*OK);
Append(~Plist,(-3*w + 11)*OK);
Append(~Plist,(3*w + 11)*OK);
Append(~Plist,(157)*OK+(w + 40)*OK);
Append(~Plist,(157)*OK+(w + 117)*OK);
Append(~Plist,(-4*w - 17)*OK);
Append(~Plist,(4*w - 17)*OK);
Append(~Plist,(5*w - 31)*OK);
Append(~Plist,(-5*w - 31)*OK);
Append(~Plist,(223)*OK+(w + 91)*OK);
Append(~Plist,(223)*OK+(w + 132)*OK);
Append(~Plist,(227)*OK+(w + 22)*OK);
Append(~Plist,(227)*OK+(w + 205)*OK);
Append(~Plist,(233)*OK+(w + 27)*OK);
Append(~Plist,(233)*OK+(w + 206)*OK);
Append(~Plist,(6*w - 29)*OK);
Append(~Plist,(6*w + 29)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(257)*OK+(w + 95)*OK);
Append(~Plist,(257)*OK+(w + 162)*OK);
Append(~Plist,(-3*w - 1)*OK);
Append(~Plist,(3*w - 1)*OK);
Append(~Plist,(277)*OK+(w + 108)*OK);
Append(~Plist,(277)*OK+(w + 169)*OK);
Append(~Plist,(-4*w - 13)*OK);
Append(~Plist,(4*w - 13)*OK);
Append(~Plist,(w + 19)*OK);
Append(~Plist,(w - 19)*OK);
Append(~Plist,(347)*OK+(w + 77)*OK);
Append(~Plist,(347)*OK+(w + 270)*OK);
Append(~Plist,(353)*OK+(w + 33)*OK);
Append(~Plist,(353)*OK+(w + 320)*OK);
Append(~Plist,(-4*w + 11)*OK);
Append(~Plist,(4*w + 11)*OK);
Append(~Plist,(367)*OK+(w + 146)*OK);
Append(~Plist,(367)*OK+(w + 221)*OK);
Append(~Plist,(373)*OK+(w + 75)*OK);
Append(~Plist,(373)*OK+(w + 298)*OK);
Append(~Plist,(7*w - 43)*OK);
Append(~Plist,(-7*w - 43)*OK);
Append(~Plist,(-5*w + 19)*OK);
Append(~Plist,(5*w + 19)*OK);
Append(~Plist,(397)*OK+(w + 53)*OK);
Append(~Plist,(397)*OK+(w + 344)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(-4*w + 7)*OK);
Append(~Plist,(4*w + 7)*OK);
Append(~Plist,(443)*OK+(w + 159)*OK);
Append(~Plist,(443)*OK+(w + 284)*OK);
Append(~Plist,(-5*w + 17)*OK);
Append(~Plist,(-5*w - 17)*OK);
Append(~Plist,(463)*OK+(w + 131)*OK);
Append(~Plist,(463)*OK+(w + 332)*OK);
Append(~Plist,(467)*OK+(w + 214)*OK);
Append(~Plist,(467)*OK+(w + 253)*OK);
Append(~Plist,(-4*w - 1)*OK);
Append(~Plist,(4*w - 1)*OK);
Append(~Plist,(487)*OK+(w + 70)*OK);
Append(~Plist,(487)*OK+(w + 417)*OK);
Append(~Plist,(w + 23)*OK);
Append(~Plist,(w - 23)*OK);
Append(~Plist,(-7*w + 31)*OK);
Append(~Plist,(-7*w - 31)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(563)*OK+(w + 34)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("9.1-a",(3)*OK,[0, 0, 0, 0, 0, 0, 6, -6, -2, -2, 0, 0, 0, 0, 0, 0, -18, 18, 0, 0, 0, 0, 6, -6, 18, -18, -14, 0, 0]);
ECSearch("9.1-b",(3)*OK,[0, 0, 0, 0, 0, 0, -6, 6, -2, -2, 0, 0, 0, 0, 0, 0, 18, -18, 0, 0, 0, 0, -6, 6, -18, 18, -14, 0, 0]);
ECSearch("15.1-a",(15)*OK+(w)*OK,[1, 0, 0, 2, 2, -2, -2, 4, 4, -2, -2, 10, 10, -8, -8, -12, -12, 6, 6, 16, 16, 12, 12, -2, -2, -6, 8, 8]);
ECSearch("15.1-b",(15)*OK+(w)*OK,[-1, 0, 0, 2, 2, 2, 2, 4, 4, 2, 2, 10, 10, 8, 8, 12, 12, -6, -6, 16, 16, -12, -12, 2, 2, -6, 8, 8]);
ECSearch("15.1-c",(15)*OK+(w)*OK,[1, 0, 0, -2, -2, -2, -2, 4, 4, 2, 2, -10, -10, 8, 8, -12, -12, -6, -6, -16, -16, 12, 12, -2, -2, -6, -8, -8]);
ECSearch("15.1-d",(15)*OK+(w)*OK,[-1, 0, 0, -2, -2, 2, 2, 4, 4, -2, -2, -10, -10, -8, -8, 12, 12, 6, 6, -16, -16, -12, -12, 2, 2, -6, -8, -8]);
ECSearch("20.1-a",(2*w + 10)*OK,[2, 2, 2, 2, 2, 6, 6, -4, -4, -6, -6, 2, 2, 12, 12, -6, -6, -6, -6, 14, 14, 6, 6, 6, 6, -22, 2, 2]);
ECSearch("20.1-b",(2*w + 10)*OK,[-2, 2, 2, 2, 2, -6, -6, -4, -4, 6, 6, 2, 2, -12, -12, 6, 6, 6, 6, 14, 14, -6, -6, -6, -6, -22, 2, 2]);
ECSearch("20.1-c",(2*w + 10)*OK,[2, -2, -2, -2, -2, 6, 6, -4, -4, 6, 6, -2, -2, -12, -12, -6, -6, 6, 6, -14, -14, 6, 6, 6, 6, -22, -2, -2]);
ECSearch("20.1-d",(2*w + 10)*OK,[-2, -2, -2, -2, -2, -6, -6, -4, -4, -6, -6, -2, -2, 12, 12, 6, 6, -6, -6, -14, -14, -6, -6, -6, -6, -22, -2, -2]);
ECSearch("21.1-a",(w + 3)*OK,[2, 0, 0, -2, -6, 6, 2, -2, -6, 4, -8, -10, -2, 16, 0, -4, 4, -8, 16, -4, -4, 0, -12, 14, 2, -10, 12, -12]);
ECSearch("21.1-b",(w + 3)*OK,[-2, 0, 0, -2, -6, -6, -2, -2, -6, -4, 8, -10, -2, -16, 0, 4, -4, 8, -16, -4, -4, 0, 12, -14, -2, -10, 12, -12]);
ECSearch("21.1-c",(w + 3)*OK,[2, 0, 0, 2, 6, 6, 2, -2, -6, -4, 8, 10, 2, -16, 0, -4, 4, 8, -16, 4, 4, 0, -12, 14, 2, -10, -12, 12]);
ECSearch("21.1-d",(w + 3)*OK,[-2, 0, 0, 2, 6, -6, -2, -2, -6, 4, -8, 10, 2, 16, 0, 4, -4, -8, 16, 4, 4, 0, 12, -14, -2, -10, -12, 12]);
ECSearch("21.2-a",(-w + 3)*OK,[2, 0, 0, -6, -2, 2, 6, -6, -2, -8, 4, -2, -10, 0, 16, 4, -4, 16, -8, -4, -4, -12, 0, 2, 14, -10, -12, 12]);
ECSearch("21.2-b",(-w + 3)*OK,[-2, 0, 0, -6, -2, -2, -6, -6, -2, 8, -4, -2, -10, 0, -16, -4, 4, -16, 8, -4, -4, 12, 0, -2, -14, -10, -12, 12]);
ECSearch("21.2-c",(-w + 3)*OK,[2, 0, 0, 6, 2, 2, 6, -6, -2, 8, -4, 2, 10, 0, -16, 4, -4, -16, 8, 4, 4, -12, 0, 2, 14, -10, 12, -12]);
ECSearch("21.2-d",(-w + 3)*OK,[-2, 0, 0, 6, 2, -2, -6, -6, -2, -8, 4, 2, 10, 0, 16, -4, 4, 16, -8, 4, 4, 12, 0, -2, -14, -10, 12, -12]);
ECSearch("24.1-a",(-2*w - 12)*OK,[-2, 0, 0, 2, 2, -2, -2, -4, -4, 6, 6, -6, -6, 8, 8, 4, 4, -18, -18, -16, -16, 12, 12, -18, -18, -6, 8, 8]);
ECSearch("24.1-b",(-2*w - 12)*OK,[-2, 0, 0, -2, -2, 2, 2, -4, -4, 6, 6, 6, 6, 8, 8, -4, -4, -18, -18, 16, 16, -12, -12, 18, 18, -6, -8, -8]);
ECSearch("24.1-c",(-2*w - 12)*OK,[2, 0, 0, -2, -2, -2, -2, -4, -4, -6, -6, 6, 6, -8, -8, 4, 4, 18, 18, 16, 16, 12, 12, -18, -18, -6, -8, -8]);
ECSearch("24.1-d",(-2*w - 12)*OK,[2, 0, 0, 2, 2, 2, 2, -4, -4, -6, -6, -6, -6, -8, -8, -4, -4, 18, 18, -16, -16, -12, -12, 18, 18, -6, 8, 8]);
ECSearch("30.1-a",(w)*OK,[-4, -4, 2, 2, -6, -6, -4, -4, 6, 6, 2, 2, 0, 0, -12, -12, -18, -18, -4, -4, 12, 12, 18, 18, -22, 20, 20]);
ECSearch("30.1-b",(w)*OK,[1, -2, -5, 1, 0, -6, -1, 2, 3, 9, 7, -2, 15, -6, 15, 0, 18, 0, 4, 4, -3, 6, 6, -6, 5, -2, 7]);
ECSearch("30.1-c",(w)*OK,[2, -1, -1, 5, -6, 0, 2, -1, -9, -3, 2, -7, 6, -15, 0, 15, 0, -18, -4, -4, 6, -3, -6, 6, 5, -7, 2]);
ECSearch("30.1-d",(w)*OK,[4, 4, -2, -2, -6, -6, -4, -4, -6, -6, -2, -2, 0, 0, -12, -12, 18, 18, 4, 4, 12, 12, 18, 18, -22, -20, -20]);
ECSearch("30.1-e",(w)*OK,[1, -2, -5, 1, 0, 6, -1, 2, -3, -9, 7, -2, -15, 6, -15, 0, -18, 0, 4, 4, 3, -6, -6, 6, 5, -2, 7]);
ECSearch("30.1-f",(w)*OK,[2, -1, -1, 5, 6, 0, 2, -1, 9, 3, 2, -7, -6, 15, 0, -15, 0, 18, -4, -4, -6, 3, 6, -6, 5, -7, 2]);
ECSearch("30.1-g",(w)*OK,[-2, 1, 1, -5, -6, 0, 2, -1, 9, 3, -2, 7, -6, 15, 0, 15, 0, 18, 4, 4, 6, -3, -6, 6, 5, 7, -2]);
ECSearch("30.1-h",(w)*OK,[-1, 2, 5, -1, 0, -6, -1, 2, -3, -9, -7, 2, -15, 6, 15, 0, -18, 0, -4, -4, -3, 6, 6, -6, 5, 2, -7]);
ECSearch("30.1-i",(w)*OK,[-4, -4, 2, 2, 6, 6, -4, -4, -6, -6, 2, 2, 0, 0, 12, 12, 18, 18, -4, -4, -12, -12, -18, -18, -22, 20, 20]);
ECSearch("30.1-j",(w)*OK,[-2, 1, 1, -5, 6, 0, 2, -1, -9, -3, -2, 7, 6, -15, 0, -15, 0, -18, 4, 4, -6, 3, 6, -6, 5, 7, -2]);
ECSearch("30.1-k",(w)*OK,[-1, 2, 5, -1, 0, 6, -1, 2, 3, 9, -7, 2, 15, -6, -15, 0, 18, 0, -4, -4, 3, -6, -6, 6, 5, 2, -7]);
ECSearch("30.1-l",(w)*OK,[4, 4, -2, -2, 6, 6, -4, -4, 6, 6, -2, -2, 0, 0, 12, 12, -18, -18, 4, 4, -12, -12, -18, -18, -22, -20, -20]);
