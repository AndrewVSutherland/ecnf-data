print "Field 2.2.492.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 123);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w - 11)*OK);
Append(~Plist,(3)*OK+(w)*OK);
Append(~Plist,(7)*OK+(w + 2)*OK);
Append(~Plist,(7)*OK+(w + 5)*OK);
Append(~Plist,(17)*OK+(w + 2)*OK);
Append(~Plist,(17)*OK+(w + 15)*OK);
Append(~Plist,(19)*OK+(w + 3)*OK);
Append(~Plist,(19)*OK+(w + 16)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(w - 10)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(29)*OK+(w + 6)*OK);
Append(~Plist,(29)*OK+(w + 23)*OK);
Append(~Plist,(2*w - 23)*OK);
Append(~Plist,(-2*w - 23)*OK);
Append(~Plist,(41)*OK+(w)*OK);
Append(~Plist,(53)*OK+(w + 21)*OK);
Append(~Plist,(53)*OK+(w + 32)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(5*w - 56)*OK);
Append(~Plist,(-5*w - 56)*OK);
Append(~Plist,(67)*OK+(w + 18)*OK);
Append(~Plist,(67)*OK+(w + 49)*OK);
Append(~Plist,(w + 14)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(79)*OK+(w + 26)*OK);
Append(~Plist,(79)*OK+(w + 53)*OK);
Append(~Plist,(-3*w + 32)*OK);
Append(~Plist,(3*w + 32)*OK);
Append(~Plist,(89)*OK+(w + 37)*OK);
Append(~Plist,(89)*OK+(w + 52)*OK);
Append(~Plist,(101)*OK+(w + 27)*OK);
Append(~Plist,(101)*OK+(w + 74)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 4)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(137)*OK+(w + 64)*OK);
Append(~Plist,(137)*OK+(w + 73)*OK);
Append(~Plist,(149)*OK+(w + 47)*OK);
Append(~Plist,(149)*OK+(w + 102)*OK);
Append(~Plist,(151)*OK+(w + 24)*OK);
Append(~Plist,(151)*OK+(w + 127)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(199)*OK+(w + 83)*OK);
Append(~Plist,(199)*OK+(w + 116)*OK);
Append(~Plist,(211)*OK+(w + 40)*OK);
Append(~Plist,(211)*OK+(w + 171)*OK);
Append(~Plist,(233)*OK+(w + 39)*OK);
Append(~Plist,(233)*OK+(w + 194)*OK);
Append(~Plist,(4*w + 47)*OK);
Append(~Plist,(4*w - 47)*OK);
Append(~Plist,(-7*w + 76)*OK);
Append(~Plist,(7*w + 76)*OK);
Append(~Plist,(257)*OK+(w + 61)*OK);
Append(~Plist,(257)*OK+(w + 196)*OK);
Append(~Plist,(w + 20)*OK);
Append(~Plist,(w - 20)*OK);
Append(~Plist,(281)*OK+(w + 70)*OK);
Append(~Plist,(281)*OK+(w + 211)*OK);
Append(~Plist,(293)*OK+(w + 65)*OK);
Append(~Plist,(293)*OK+(w + 228)*OK);
Append(~Plist,(317)*OK+(w + 45)*OK);
Append(~Plist,(317)*OK+(w + 272)*OK);
Append(~Plist,(331)*OK+(w + 139)*OK);
Append(~Plist,(331)*OK+(w + 192)*OK);
Append(~Plist,(-3*w - 38)*OK);
Append(~Plist,(3*w - 38)*OK);
Append(~Plist,(-2*w + 29)*OK);
Append(~Plist,(2*w + 29)*OK);
Append(~Plist,(-9*w + 98)*OK);
Append(~Plist,(9*w + 98)*OK);
Append(~Plist,(7*w + 80)*OK);
Append(~Plist,(7*w - 80)*OK);
Append(~Plist,(-8*w + 91)*OK);
Append(~Plist,(-8*w - 91)*OK);
Append(~Plist,(-10*w + 109)*OK);
Append(~Plist,(10*w + 109)*OK);
Append(~Plist,(-3*w + 26)*OK);
Append(~Plist,(3*w + 26)*OK);
Append(~Plist,(-4*w + 49)*OK);
Append(~Plist,(4*w + 49)*OK);
Append(~Plist,(439)*OK+(w + 92)*OK);
Append(~Plist,(439)*OK+(w + 347)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(-2*w - 7)*OK);
Append(~Plist,(463)*OK+(w + 58)*OK);
Append(~Plist,(463)*OK+(w + 405)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(-2*w - 5)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(499)*OK+(w + 98)*OK);
Append(~Plist,(499)*OK+(w + 401)*OK);
Append(~Plist,(509)*OK+(w + 122)*OK);
Append(~Plist,(509)*OK+(w + 387)*OK);
Append(~Plist,(521)*OK+(w + 57)*OK);
Append(~Plist,(521)*OK+(w + 464)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("2.1-a",(-w - 11)*OK,[-1, -2, 3, 2, -3, 0, 5, 6, 1, -4, 10, 0, -2, 8, 8, -9, -4, 0, 10, -8, 7, -2, -2, 9, -11, 0, -5, 16, 6]);
ECSearch("2.1-b",(-w - 11)*OK,[1, 2, -3, -2, 3, 0, -5, 6, 1, -4, -10, 0, -2, 8, -8, 9, 4, 0, 10, -8, 7, 2, 2, 9, -11, 0, 5, 16, 6]);
ECSearch("2.1-c",(-w - 11)*OK,[1, -3, 2, -3, 2, -5, 0, -1, -6, -4, 0, 10, 8, -2, 8, -4, -9, -10, 0, 7, -8, 2, 2, -11, 9, 5, 0, -6, -16]);
ECSearch("2.1-d",(-w - 11)*OK,[-1, 3, -2, -3, 2, 5, 0, 1, 6, -4, 0, 10, 8, -2, 8, -4, -9, 10, 0, 7, -8, -2, -2, -11, 9, -5, 0, 6, 16]);
ECSearch("2.1-e",(-w - 11)*OK,[1, -3, 2, 3, -2, -5, 0, 1, 6, -4, 0, -10, 8, -2, -8, 4, 9, 10, 0, 7, -8, 2, 2, -11, 9, 5, 0, 6, 16]);
ECSearch("2.1-f",(-w - 11)*OK,[-1, -2, 3, -2, 3, 0, 5, -6, -1, -4, -10, 0, -2, 8, -8, 9, 4, 0, -10, -8, 7, -2, -2, 9, -11, 0, -5, -16, -6]);
ECSearch("2.1-g",(-w - 11)*OK,[-1, 3, -2, 3, -2, 5, 0, -1, -6, -4, 0, -10, 8, -2, -8, 4, 9, -10, 0, 7, -8, -2, -2, -11, 9, -5, 0, -6, -16]);
ECSearch("2.1-h",(-w - 11)*OK,[1, 2, -3, 2, -3, 0, -5, -6, -1, -4, 10, 0, -2, 8, 8, -9, -4, 0, -10, -8, 7, 2, 2, 9, -11, 0, 5, -16, -6]);
