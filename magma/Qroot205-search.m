print "Field 2.2.205.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 51);
OK := Integers(K);
Plist := [];
Append(~Plist,(3)*OK+(w)*OK);
Append(~Plist,(3)*OK+(w + 2)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(7)*OK+(w + 1)*OK);
Append(~Plist,(7)*OK+(w + 5)*OK);
Append(~Plist,(13)*OK+(w + 3)*OK);
Append(~Plist,(13)*OK+(w + 9)*OK);
Append(~Plist,(17)*OK+(w)*OK);
Append(~Plist,(17)*OK+(w + 16)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(-3*w + 22)*OK);
Append(~Plist,(47)*OK+(w + 19)*OK);
Append(~Plist,(47)*OK+(w + 27)*OK);
Append(~Plist,(53)*OK+(w + 14)*OK);
Append(~Plist,(53)*OK+(w + 38)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(w - 11)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(67)*OK+(w + 32)*OK);
Append(~Plist,(67)*OK+(w + 34)*OK);
Append(~Plist,(97)*OK+(w + 18)*OK);
Append(~Plist,(97)*OK+(w + 78)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(137)*OK+(w + 21)*OK);
Append(~Plist,(137)*OK+(w + 115)*OK);
Append(~Plist,(-3*w - 23)*OK);
Append(~Plist,(3*w - 26)*OK);
Append(~Plist,(157)*OK+(w + 65)*OK);
Append(~Plist,(157)*OK+(w + 91)*OK);
Append(~Plist,(167)*OK+(w + 23)*OK);
Append(~Plist,(167)*OK+(w + 143)*OK);
Append(~Plist,(193)*OK+(w + 82)*OK);
Append(~Plist,(193)*OK+(w + 110)*OK);
Append(~Plist,(227)*OK+(w + 40)*OK);
Append(~Plist,(227)*OK+(w + 186)*OK);
Append(~Plist,(233)*OK+(w + 55)*OK);
Append(~Plist,(233)*OK+(w + 177)*OK);
Append(~Plist,(-3*w + 28)*OK);
Append(~Plist,(3*w + 25)*OK);
Append(~Plist,(-3*w - 13)*OK);
Append(~Plist,(3*w - 16)*OK);
Append(~Plist,(257)*OK+(w + 62)*OK);
Append(~Plist,(257)*OK+(w + 194)*OK);
Append(~Plist,(263)*OK+(w + 43)*OK);
Append(~Plist,(263)*OK+(w + 219)*OK);
Append(~Plist,(-4*w - 31)*OK);
Append(~Plist,(4*w - 35)*OK);
Append(~Plist,(-6*w + 49)*OK);
Append(~Plist,(-6*w - 43)*OK);
Append(~Plist,(293)*OK+(w + 30)*OK);
Append(~Plist,(293)*OK+(w + 262)*OK);
Append(~Plist,(313)*OK+(w + 121)*OK);
Append(~Plist,(313)*OK+(w + 191)*OK);
Append(~Plist,(317)*OK+(w + 141)*OK);
Append(~Plist,(317)*OK+(w + 175)*OK);
Append(~Plist,(347)*OK+(w + 72)*OK);
Append(~Plist,(347)*OK+(w + 274)*OK);
Append(~Plist,(-7*w - 43)*OK);
Append(~Plist,(7*w - 50)*OK);
Append(~Plist,(5*w - 43)*OK);
Append(~Plist,(-5*w - 38)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-4*w + 23)*OK);
Append(~Plist,(4*w + 19)*OK);
Append(~Plist,(383)*OK+(w + 155)*OK);
Append(~Plist,(383)*OK+(w + 227)*OK);
Append(~Plist,(-3*w - 7)*OK);
Append(~Plist,(3*w - 10)*OK);
Append(~Plist,(397)*OK+(w + 77)*OK);
Append(~Plist,(397)*OK+(w + 319)*OK);
Append(~Plist,(-6*w + 41)*OK);
Append(~Plist,(6*w + 35)*OK);
Append(~Plist,(-3*w + 31)*OK);
Append(~Plist,(3*w + 28)*OK);
Append(~Plist,(-3*w + 8)*OK);
Append(~Plist,(3*w + 5)*OK);
Append(~Plist,(-3*w - 4)*OK);
Append(~Plist,(3*w - 7)*OK);
Append(~Plist,(-3*w + 5)*OK);
Append(~Plist,(3*w + 2)*OK);
Append(~Plist,(457)*OK+(w + 172)*OK);
Append(~Plist,(457)*OK+(w + 284)*OK);
Append(~Plist,(-3*w + 2)*OK);
Append(~Plist,(3*w - 1)*OK);
Append(~Plist,(463)*OK+(w + 127)*OK);
Append(~Plist,(463)*OK+(w + 335)*OK);
Append(~Plist,(9*w - 65)*OK);
Append(~Plist,(9*w + 56)*OK);
Append(~Plist,(503)*OK+(w + 39)*OK);
Append(~Plist,(503)*OK+(w + 463)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(-9*w + 73)*OK);
Append(~Plist,(-9*w - 64)*OK);
Append(~Plist,(547)*OK+(w + 160)*OK);
Append(~Plist,(547)*OK+(w + 386)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[2, -2, -2, -2, 2, 4, -4, 0, 0, 0, 0, -10, -10, 10, 12, -12, -4, -4, 2, 2, 2, -2, -16, 16, -14, 4, 4, 8, -8]);
ECSearch("4.1-b",(2)*OK,[-2, 2, -2, 2, -2, -4, 4, 0, 0, 0, 0, -10, 10, -10, -12, 12, -4, -4, 2, 2, -2, 2, 16, -16, -14, 4, 4, -8, 8]);
ECSearch("12.1-a",(6)*OK+(2*w)*OK,[0, 2, 2, 2, 2, -2, 0, 0, 0, 8, 2, 6, -2, 6, -14, 0, 0, 10, -6, 0, 4, 4, 12, 6, -4, 20, 12, 12]);
ECSearch("12.1-b",(6)*OK+(2*w)*OK,[0, 2, -2, -2, -2, 2, 0, 0, 0, 8, 2, -6, 2, -6, 14, 0, 0, 10, -6, 0, -4, -4, -12, 6, -4, 20, -12, -12]);
ECSearch("12.2-a",(6)*OK+(2*w + 4)*OK,[0, 2, 2, 2, -2, 2, 0, 0, 8, 0, 2, -2, 6, -14, 6, 0, 0, -6, 10, 4, 0, 12, 4, 6, 20, -4, 12, 12]);
ECSearch("12.2-b",(6)*OK+(2*w + 4)*OK,[0, 2, -2, -2, 2, -2, 0, 0, 8, 0, 2, 2, -6, 14, -6, 0, 0, -6, 10, -4, 0, -12, -4, 6, 20, -4, -12, -12]);
ECSearch("20.1-a",(2*w + 14)*OK,[0, 0, 4, -4, 4, -4, 0, 0, 8, 8, -10, -12, 12, 4, -4, -12, -12, 2, 2, -8, 8, 16, -16, 22, 4, 4, -16, 16]);
ECSearch("20.1-b",(2*w + 14)*OK,[0, 0, -4, 4, -4, 4, 0, 0, 8, 8, -10, 12, -12, -4, 4, -12, -12, 2, 2, 8, -8, -16, 16, 22, 4, 4, 16, -16]);
ECSearch("27.1-a",(9)*OK+(3*w)*OK,[-4, 0, -2, -2, 4, 4, 3, -3, 5, 5, 0, 3, -3, 6, -6, 6, -6, 5, 5, -2, -2, -8, -8, -7, -18, 18, -3, 3]);
ECSearch("27.1-b",(9)*OK+(3*w)*OK,[-4, 0, 2, 2, -4, -4, -3, 3, 5, 5, 0, -3, 3, -6, 6, 6, -6, 5, 5, 2, 2, 8, 8, -7, -18, 18, 3, -3]);
ECSearch("27.2-a",(9)*OK+(3*w + 6)*OK,[-4, 0, -2, -2, 4, 4, -3, 3, 5, 5, 0, -3, 3, -6, 6, -6, 6, 5, 5, -2, -2, -8, -8, -7, 18, -18, 3, -3]);
ECSearch("27.2-b",(9)*OK+(3*w + 6)*OK,[-4, 0, 2, 2, -4, -4, 3, -3, 5, 5, 0, 3, -3, 6, -6, -6, 6, 5, 5, 2, 2, 8, 8, -7, 18, -18, -3, 3]);
ECSearch("28.1-a",(14)*OK+(2*w + 2)*OK,[0, 0, -2, 0, -2, 6, 6, 6, -8, 8, -6, -8, 0, -2, 6, 4, -12, -10, -10, 8, 8, -2, -2, -6, -12, -12, 6, 22]);
ECSearch("28.1-b",(14)*OK+(2*w + 2)*OK,[0, 0, -2, 0, 2, -6, -6, -6, -8, 8, -6, 8, 0, 2, -6, 4, -12, -10, -10, -8, -8, 2, 2, -6, -12, -12, -6, -22]);
ECSearch("28.2-a",(14)*OK+(2*w + 10)*OK,[0, 0, -2, 0, 6, -2, 6, 6, 8, -8, -6, 0, -8, 6, -2, -12, 4, -10, -10, 8, 8, -2, -2, -6, -12, -12, 22, 6]);
ECSearch("28.2-b",(14)*OK+(2*w + 10)*OK,[0, 0, -2, 0, -6, 2, -6, -6, 8, -8, -6, 0, 8, -6, 2, -12, 4, -10, -10, -8, -8, 2, 2, -6, -12, -12, -22, -6]);
ECSearch("36.1-a",(6)*OK,[3, -3, -2, -6, 0, 2, -3, 0, -5, 7, -3, 6, 2, 4, 7, 0, 6, -7, -8, 13, 11, -2, -12, 1, 6, 8, 6]);
ECSearch("36.1-b",(6)*OK,[-4, 2, -2, -6, 6, 2, -2, 8, 8, -2, -8, 8, -6, 6, -10, -10, -2, -2, -8, 8, 8, -8, -18, -18, -18, 18, -18]);
ECSearch("36.1-c",(6)*OK,[0, 0, 4, -6, -2, 4, 0, 8, -8, 6, -6, -6, -6, 6, -10, 6, -6, 2, -4, 12, -14, 18, 10, -6, 2, 16, 12]);
ECSearch("36.1-d",(6)*OK,[1, 4, -5, -2, -2, -7, 2, -1, 8, -7, 0, 9, -14, 4, 6, -3, -3, 6, 15, 6, 2, -7, -14, 8, -1, -20, -2]);
ECSearch("36.1-e",(6)*OK,[0, 4, 0, -2, -6, 0, 4, -8, 8, 6, -6, -6, 6, -6, 6, -10, 2, -6, 12, -4, 18, -14, 10, 2, -6, 12, 16]);
ECSearch("36.1-f",(6)*OK,[1, 2, -2, -1, 1, -3, 3, 3, 3, 8, -8, 8, -6, 6, 5, 5, 8, 8, 7, -7, -2, 2, 22, -8, -8, -2, 2]);
ECSearch("36.1-g",(6)*OK,[3, -2, -3, 0, -6, -3, 2, -5, 0, 7, 6, -3, 4, 2, 0, 7, -7, 6, 13, -8, -2, 11, -12, 6, 1, 6, 8]);
ECSearch("36.1-h",(6)*OK,[1, -5, 4, -2, -2, 2, -7, 8, -1, -7, 9, 0, 4, -14, -3, 6, 6, -3, 6, 15, -7, 2, -14, -1, 8, -2, -20]);
ECSearch("36.1-i",(6)*OK,[3, 2, 3, 0, 6, 3, -2, -5, 0, 7, -6, 3, -4, -2, 0, 7, -7, 6, -13, 8, 2, -11, -12, 6, 1, -6, -8]);
ECSearch("36.1-j",(6)*OK,[1, 5, -4, 2, 2, -2, 7, 8, -1, -7, -9, 0, -4, 14, -3, 6, 6, -3, -6, -15, 7, -2, -14, -1, 8, 2, 20]);
ECSearch("36.1-k",(6)*OK,[1, -2, 2, 1, -1, 3, -3, 3, 3, 8, 8, -8, 6, -6, 5, 5, 8, 8, -7, 7, 2, -2, 22, -8, -8, 2, -2]);
ECSearch("36.1-l",(6)*OK,[0, -4, 0, 2, 6, 0, -4, -8, 8, 6, 6, 6, -6, 6, 6, -10, 2, -6, -12, 4, -18, 14, 10, 2, -6, -12, -16]);
ECSearch("36.1-m",(6)*OK,[1, -4, 5, 2, 2, 7, -2, -1, 8, -7, 0, -9, 14, -4, 6, -3, -3, 6, -15, -6, -2, 7, -14, 8, -1, 20, 2]);
ECSearch("36.1-n",(6)*OK,[0, 0, -4, 6, 2, -4, 0, 8, -8, 6, 6, 6, 6, -6, -10, 6, -6, 2, 4, -12, 14, -18, 10, -6, 2, -16, -12]);
ECSearch("36.1-o",(6)*OK,[3, 3, 2, 6, 0, -2, 3, 0, -5, 7, 3, -6, -2, -4, 7, 0, 6, -7, 8, -13, -11, 2, -12, 1, 6, -8, -6]);
ECSearch("36.1-p",(6)*OK,[-4, -2, 2, 6, -6, -2, 2, 8, 8, -2, 8, -8, 6, -6, -10, -10, -2, -2, 8, -8, -8, 8, -18, -18, -18, -18, 18]);
ECSearch("45.1-a",(3*w + 21)*OK,[-3, 4, -4, -4, 4, -4, 4, 8, 8, -10, -4, 4, -12, 12, 4, 4, -14, -14, -12, 12, 12, -12, 22, -12, -12, 12, -12]);
ECSearch("45.1-b",(3*w + 21)*OK,[-3, 0, 0, 2, 2, -2, -2, 0, 0, 10, -8, -8, 10, 10, -4, -4, -2, -2, -12, -12, -2, -2, -6, -12, -12, 6, 6]);
ECSearch("45.1-c",(3*w + 21)*OK,[-3, 0, 0, -2, -2, 2, 2, 0, 0, 10, 8, 8, -10, -10, -4, -4, -2, -2, 12, 12, 2, 2, -6, -12, -12, -6, -6]);
ECSearch("45.1-d",(3*w + 21)*OK,[-3, -4, 4, 4, -4, 4, -4, 8, 8, -10, 4, -4, 12, -12, 4, 4, -14, -14, 12, -12, -12, 12, 22, -12, -12, -12, 12]);
ECSearch("45.2-a",(w + 2)*OK,[-2, 3, -2, 4, -2, -6, -4, -4, 0, 4, 2, 0, 2, 0, 12, -4, 4, 14, -10, -2, 8, -2, -10, -2, -12, 12, -2, 2]);
ECSearch("45.2-b",(w + 2)*OK,[2, -1, 2, 4, -2, 2, 0, 8, 8, 4, -6, -8, -10, 12, 8, 4, -12, 6, -2, 10, 8, 6, -2, 6, -12, -12, 6, 2]);
ECSearch("45.2-c",(w + 2)*OK,[2, 3, 2, -4, 2, 6, 4, 4, 0, 4, 2, 0, -2, 0, -12, -4, 4, 14, -10, 2, -8, 2, 10, -2, -12, 12, 2, -2]);
ECSearch("45.2-d",(w + 2)*OK,[-2, -1, -2, -4, 2, -2, 0, -8, 8, 4, -6, 8, 10, -12, -8, 4, -12, 6, -2, -10, -8, -6, 2, 6, -12, -12, -6, -2]);
ECSearch("45.3-a",(w - 3)*OK,[-2, 3, 4, -2, -6, -2, -4, -4, 4, 0, 2, 2, 0, 12, 0, 4, -4, -10, 14, 8, -2, -10, -2, -2, 12, -12, 2, -2]);
ECSearch("45.3-b",(w - 3)*OK,[2, -1, 4, 2, 2, -2, 8, 0, 4, 8, -6, -10, -8, 8, 12, -12, 4, -2, 6, 8, 10, -2, 6, 6, -12, -12, 2, 6]);
ECSearch("45.3-c",(w - 3)*OK,[2, 3, -4, 2, 6, 2, 4, 4, 4, 0, 2, -2, 0, -12, 0, 4, -4, -10, 14, -8, 2, 10, 2, -2, 12, -12, -2, 2]);
ECSearch("45.3-d",(w - 3)*OK,[-2, -1, -4, -2, -2, 2, -8, 0, 4, 8, -6, 10, 8, -8, -12, -12, 4, -2, 6, -8, -10, 2, -6, 6, -12, -12, -2, -6]);
