print "Field 2.2.136.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 34);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w - 6)*OK);
Append(~Plist,(3)*OK+(w + 1)*OK);
Append(~Plist,(3)*OK+(w + 2)*OK);
Append(~Plist,(5)*OK+(w + 2)*OK);
Append(~Plist,(5)*OK+(w + 3)*OK);
Append(~Plist,(11)*OK+(w + 1)*OK);
Append(~Plist,(11)*OK+(w + 10)*OK);
Append(~Plist,(-3*w + 17)*OK);
Append(~Plist,(29)*OK+(w + 11)*OK);
Append(~Plist,(29)*OK+(w + 18)*OK);
Append(~Plist,(37)*OK+(w + 16)*OK);
Append(~Plist,(37)*OK+(w + 21)*OK);
Append(~Plist,(w + 9)*OK);
Append(~Plist,(w - 9)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(61)*OK+(w + 20)*OK);
Append(~Plist,(61)*OK+(w + 41)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(-4*w - 21)*OK);
Append(~Plist,(-4*w + 21)*OK);
Append(~Plist,(107)*OK+(w + 26)*OK);
Append(~Plist,(107)*OK+(w + 81)*OK);
Append(~Plist,(109)*OK+(w + 19)*OK);
Append(~Plist,(109)*OK+(w + 90)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(2*w + 3)*OK);
Append(~Plist,(131)*OK+(w + 54)*OK);
Append(~Plist,(131)*OK+(w + 77)*OK);
Append(~Plist,(-3*w - 13)*OK);
Append(~Plist,(3*w - 13)*OK);
Append(~Plist,(139)*OK+(w + 27)*OK);
Append(~Plist,(139)*OK+(w + 112)*OK);
Append(~Plist,(8*w - 45)*OK);
Append(~Plist,(8*w + 45)*OK);
Append(~Plist,(163)*OK+(w + 69)*OK);
Append(~Plist,(163)*OK+(w + 94)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(173)*OK+(w + 42)*OK);
Append(~Plist,(173)*OK+(w + 131)*OK);
Append(~Plist,(181)*OK+(w + 45)*OK);
Append(~Plist,(181)*OK+(w + 136)*OK);
Append(~Plist,(w + 15)*OK);
Append(~Plist,(w - 15)*OK);
Append(~Plist,(197)*OK+(w + 25)*OK);
Append(~Plist,(197)*OK+(w + 172)*OK);
Append(~Plist,(211)*OK+(w + 33)*OK);
Append(~Plist,(211)*OK+(w + 178)*OK);
Append(~Plist,(-3*w - 23)*OK);
Append(~Plist,(3*w - 23)*OK);
Append(~Plist,(227)*OK+(w + 48)*OK);
Append(~Plist,(227)*OK+(w + 179)*OK);
Append(~Plist,(-5*w + 33)*OK);
Append(~Plist,(-5*w - 33)*OK);
Append(~Plist,(-3*w - 7)*OK);
Append(~Plist,(3*w - 7)*OK);
Append(~Plist,(-6*w - 31)*OK);
Append(~Plist,(-6*w + 31)*OK);
Append(~Plist,(269)*OK+(w + 29)*OK);
Append(~Plist,(269)*OK+(w + 240)*OK);
Append(~Plist,(9*w - 55)*OK);
Append(~Plist,(-9*w - 55)*OK);
Append(~Plist,(277)*OK+(w + 119)*OK);
Append(~Plist,(277)*OK+(w + 158)*OK);
Append(~Plist,(-3*w + 5)*OK);
Append(~Plist,(3*w + 5)*OK);
Append(~Plist,(283)*OK+(w + 113)*OK);
Append(~Plist,(283)*OK+(w + 170)*OK);
Append(~Plist,(317)*OK+(w + 44)*OK);
Append(~Plist,(317)*OK+(w + 273)*OK);
Append(~Plist,(347)*OK+(w + 46)*OK);
Append(~Plist,(347)*OK+(w + 301)*OK);
Append(~Plist,(9*w - 49)*OK);
Append(~Plist,(9*w + 49)*OK);
Append(~Plist,(7*w + 45)*OK);
Append(~Plist,(7*w - 45)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(379)*OK+(w + 105)*OK);
Append(~Plist,(379)*OK+(w + 274)*OK);
Append(~Plist,(-6*w + 29)*OK);
Append(~Plist,(6*w + 29)*OK);
Append(~Plist,(397)*OK+(w + 35)*OK);
Append(~Plist,(397)*OK+(w + 362)*OK);
Append(~Plist,(-5*w - 21)*OK);
Append(~Plist,(5*w - 21)*OK);
Append(~Plist,(419)*OK+(w + 156)*OK);
Append(~Plist,(419)*OK+(w + 263)*OK);
Append(~Plist,(12*w - 73)*OK);
Append(~Plist,(-12*w - 73)*OK);
Append(~Plist,(6*w + 41)*OK);
Append(~Plist,(6*w - 41)*OK);
Append(~Plist,(-4*w - 9)*OK);
Append(~Plist,(4*w - 9)*OK);
Append(~Plist,(499)*OK+(w + 212)*OK);
Append(~Plist,(499)*OK+(w + 287)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(541)*OK+(w + 121)*OK);
Append(~Plist,(541)*OK+(w + 420)*OK);
Append(~Plist,(547)*OK+(w + 157)*OK);
Append(~Plist,(547)*OK+(w + 390)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("8.1-a",(-2*w - 12)*OK,[-2, 2, 0, 0, -2, 2, -2, 8, -8, 8, -8, -8, -8, 10, -8, 8, -14, -14, 8, 8, -2, 2, -16, 16, 0, 0, -10, 10, -18]);
ECSearch("8.1-b",(-2*w - 12)*OK,[2, -2, 0, 0, 2, -2, -2, -8, 8, -8, 8, -8, -8, 10, 8, -8, -14, -14, 8, 8, 2, -2, 16, -16, 0, 0, 10, -10, -18]);
ECSearch("9.1-a",(3)*OK,[-2, -3, 3, -5, 5, -8, 6, -6, -2, 2, -2, -2, 10, 10, -10, -10, -10, -9, -9, -3, 3, 4, -4, 7, 7, -5, 5, -8]);
ECSearch("9.1-b",(3)*OK,[-2, 2, -2, 0, 0, 2, 6, -6, 8, -8, -12, -12, -10, 0, 0, -10, -10, 6, 6, 12, -12, 4, -4, 2, 2, 20, -20, -18]);
ECSearch("9.1-c",(3)*OK,[1, 0, 0, -4, 4, -2, 0, 0, 8, -8, -8, -8, -2, 8, -8, -10, -10, 0, 0, 12, -12, 8, -8, -8, -8, -4, 4, 10]);
ECSearch("9.1-d",(3)*OK,[1, 0, 0, 4, -4, -2, 0, 0, -8, 8, -8, -8, -2, -8, 8, -10, -10, 0, 0, -12, 12, -8, 8, -8, -8, 4, -4, 10]);
ECSearch("9.1-e",(3)*OK,[-2, -2, 2, 0, 0, 2, -6, 6, -8, 8, -12, -12, -10, 0, 0, -10, -10, 6, 6, -12, 12, -4, 4, 2, 2, -20, 20, -18]);
ECSearch("9.1-f",(3)*OK,[-2, 3, -3, 5, -5, -8, -6, 6, 2, -2, -2, -2, 10, -10, 10, -10, -10, -9, -9, 3, -3, -4, 4, 7, 7, 5, -5, -8]);
ECSearch("10.1-a",(10)*OK+(w + 2)*OK,[-2, 0, 0, 4, 2, 6, 6, 8, 10, -12, -4, 12, -6, -2, -8, -2, -2, 4, -8, 20, 2, 12, 14, -8, -16, -6, 8, 6]);
ECSearch("10.1-b",(10)*OK+(w + 2)*OK,[2, 0, 0, -4, -2, 6, -6, -8, -10, 12, -4, 12, -6, 2, 8, -2, -2, 4, -8, -20, -2, -12, -14, -8, -16, 6, -8, 6]);
ECSearch("10.2-a",(10)*OK+(w + 8)*OK,[0, -2, 0, 2, 4, 6, 8, 6, -12, 10, 12, -4, -6, -8, -2, -2, -2, -8, 4, 2, 20, 14, 12, -16, -8, 8, -6, 10]);
ECSearch("10.2-b",(10)*OK+(w + 8)*OK,[0, 2, 0, -2, -4, 6, -8, -6, 12, -10, 12, -4, -6, 8, 2, -2, -2, -8, 4, -2, -20, -14, -12, -16, -8, -8, 6, 10]);
ECSearch("16.1-a",(4)*OK,[-2, 2, 0, 0, -2, 2, -2, -8, 8, -8, 8, 8, 8, 10, 8, -8, -14, -14, -8, -8, -2, 2, 16, -16, 0, 0, -10, 10, -18]);
ECSearch("16.1-b",(4)*OK,[2, -2, 0, 0, 2, -2, -2, 8, -8, 8, -8, 8, 8, 10, -8, 8, -14, -14, -8, -8, 2, -2, -16, 16, 0, 0, 10, -10, -18]);
ECSearch("17.1-a",(-3*w + 17)*OK,[-1, 0, 0, -2, -2, 0, 0, 6, 6, -2, -2, 0, 0, 2, -10, -10, 10, 10, 8, 8, 8, 8, 6, 6, 8, 8, 16, 16, -6]);
ECSearch("17.1-b",(-3*w + 17)*OK,[-1, 0, 0, 2, 2, 0, 0, -6, -6, 2, 2, 0, 0, 2, 10, 10, 10, 10, 8, 8, -8, -8, -6, -6, 8, 8, -16, -16, -6]);
ECSearch("18.1-a",(-3*w - 18)*OK,[-2, 2, 0, 0, 2, -6, 6, 2, -2, 8, 8, 10, 10, -10, 10, 10, 16, 16, 8, -8, -14, 14, -8, -8, 0, 0, 2]);
ECSearch("18.1-b",(-3*w - 18)*OK,[-3, -2, -5, 0, -3, -9, 4, 8, -3, -7, 8, -5, 0, 10, -15, 10, -4, -4, 12, 18, 19, 16, 7, 7, 10, -15, 22]);
ECSearch("18.1-c",(-3*w - 18)*OK,[-2, -3, 0, -5, -3, 4, -9, -3, 8, 8, -7, -5, 10, 0, 10, -15, -4, -4, 18, 12, 16, 19, 7, 7, -15, 10, -8]);
ECSearch("18.1-d",(-3*w - 18)*OK,[2, 3, 0, 5, -3, -4, 9, 3, -8, 8, -7, -5, -10, 0, 10, -15, -4, -4, -18, -12, -16, -19, 7, 7, 15, -10, -8]);
ECSearch("18.1-e",(-3*w - 18)*OK,[3, 2, 5, 0, -3, 9, -4, -8, 3, -7, 8, -5, 0, -10, -15, 10, -4, -4, -12, -18, -19, -16, 7, 7, -10, 15, 22]);
ECSearch("18.1-f",(-3*w - 18)*OK,[2, -2, 0, 0, 2, 6, -6, -2, 2, 8, 8, 10, -10, 10, 10, 10, 16, 16, -8, 8, 14, -14, -8, -8, 0, 0, 2]);
ECSearch("18.2-a",(-w - 4)*OK,[0, -2, 0, 2, 2, 2, -8, -2, 8, 2, 0, 4, 6, -8, 10, -2, -10, -16, 20, -18, -2, 12, 14, 0, -20, -18, 6, -22]);
ECSearch("18.2-b",(-w - 4)*OK,[0, 2, 0, -2, -2, 2, 8, 2, -8, -2, 0, 4, 6, 8, -10, -2, -10, -16, 20, 18, 2, -12, -14, 0, -20, 18, -6, -22]);
ECSearch("18.3-a",(w - 4)*OK,[0, 0, -2, 2, 2, 2, -2, -8, 2, 8, 4, 0, 6, 10, -8, -10, -2, 20, -16, -2, -18, 14, 12, -20, 0, 6, -18, 10]);
ECSearch("18.3-b",(w - 4)*OK,[0, 0, 2, -2, -2, 2, 2, 8, -2, -8, 4, 0, 6, -10, 8, -10, -2, 20, -16, 2, 18, -14, -12, -20, 0, -6, 18, 10]);
ECSearch("22.1-a",(22)*OK+(w + 10)*OK,[0, 2, 0, -2, -2, -2, 8, -6, -4, 6, 4, -4, 10, 0, 2, 6, 6, 8, 12, -2, -12, 10, -12, 16, -8, 16, 14, 10]);
ECSearch("22.1-b",(22)*OK+(w + 10)*OK,[0, -2, 0, 2, 2, -2, -8, 6, 4, -6, 4, -4, 10, 0, -2, 6, 6, 8, 12, 2, 12, -10, 12, 16, -8, -16, -14, 10]);
ECSearch("22.2-a",(22)*OK+(w + 12)*OK,[2, 0, -2, 0, -2, -2, -6, 8, 6, -4, -4, 4, 10, 2, 0, 6, 6, 12, 8, -12, -2, -12, 10, -8, 16, 14, 16, -10]);
ECSearch("22.2-b",(22)*OK+(w + 12)*OK,[-2, 0, 2, 0, 2, -2, 6, -8, -6, 4, -4, 4, 10, -2, 0, 6, 6, 12, 8, 12, 2, 12, -10, -8, 16, -14, -16, -10]);
ECSearch("24.1-a",(12)*OK+(2*w + 4)*OK,[0, 4, 0, -4, 0, -2, -4, 0, 4, 8, 8, -8, 14, -4, 0, 6, 6, 8, 8, 12, 16, 8, 12, -16, 0, -8, -4, -6]);
ECSearch("24.1-b",(12)*OK+(2*w + 4)*OK,[-2, 2, 4, 0, 2, 6, 6, -4, 2, -8, 12, -4, -6, -2, 12, 14, -10, 4, -16, 16, 10, 16, -2, 8, 0, -22, 4, 22]);
ECSearch("24.1-c",(12)*OK+(2*w + 4)*OK,[2, -2, -4, 0, -2, 6, -6, 4, -2, 8, 12, -4, -6, 2, -12, 14, -10, 4, -16, -16, -10, -16, 2, 8, 0, 22, -4, 22]);
ECSearch("24.1-d",(12)*OK+(2*w + 4)*OK,[0, -4, 0, 4, 0, -2, 4, 0, -4, -8, 8, -8, 14, 4, 0, 6, 6, 8, 8, -12, -16, -8, -12, -16, 0, 8, 4, -6]);
ECSearch("24.2-a",(12)*OK+(2*w + 8)*OK,[0, 0, 4, 0, -4, -2, 0, -4, 8, 4, -8, 8, 14, 0, -4, 6, 6, 8, 8, 16, 12, 12, 8, 0, -16, -4, -8, 10]);
ECSearch("24.2-b",(12)*OK+(2*w + 8)*OK,[-2, 4, 2, 2, 0, 6, -4, 6, -8, 2, -4, 12, -6, 12, -2, -10, 14, -16, 4, 10, 16, -2, 16, 0, 8, 4, -22, -6]);
ECSearch("24.2-c",(12)*OK+(2*w + 8)*OK,[2, -4, -2, -2, 0, 6, 4, -6, 8, -2, -4, 12, -6, -12, 2, -10, 14, -16, 4, -10, -16, 2, -16, 0, 8, -4, 22, -6]);
ECSearch("24.2-d",(12)*OK+(2*w + 8)*OK,[0, 0, -4, 0, 4, -2, 0, 4, -8, -4, -8, 8, 14, 0, 4, 6, 6, 8, 8, -16, -12, -12, -8, 0, -16, 4, 8, 10]);
ECSearch("25.1-a",(5)*OK,[2, -3, 1, 4, -4, 4, 7, -9, -4, -4, 7, 3, -6, 7, -1, 9, -7, 16, 8, -4, -12, 3, 11, 7, -21, 0, -16, 12]);
ECSearch("25.1-b",(5)*OK,[2, -1, 3, 4, -4, 4, 9, -7, 4, 4, 3, 7, -6, 1, -7, -7, 9, 8, 16, 12, 4, -11, -3, -21, 7, 16, 0, -12]);
ECSearch("25.1-c",(5)*OK,[2, 1, -3, -4, 4, 4, -9, 7, -4, -4, 3, 7, -6, -1, 7, -7, 9, 8, 16, -12, -4, 11, 3, -21, 7, -16, 0, -12]);
ECSearch("25.1-d",(5)*OK,[2, 3, -1, -4, 4, 4, -7, 9, 4, 4, 7, 3, -6, -7, 1, 9, -7, 16, 8, 4, 12, -3, -11, 7, -21, 0, 16, 12]);
