print "Field 2.2.417.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 104);
OK := Integers(K);
Plist := [];
Append(~Plist,(-107*w + 1146)*OK);
Append(~Plist,(-107*w - 1039)*OK);
Append(~Plist,(-1108*w + 11867)*OK);
Append(~Plist,(-38*w + 407)*OK);
Append(~Plist,(-38*w - 369)*OK);
Append(~Plist,(-4*w - 39)*OK);
Append(~Plist,(4*w - 43)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(2*w - 21)*OK);
Append(~Plist,(24*w + 233)*OK);
Append(~Plist,(24*w - 257)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(-894*w - 8681)*OK);
Append(~Plist,(894*w - 9575)*OK);
Append(~Plist,(252*w - 2699)*OK);
Append(~Plist,(-252*w - 2447)*OK);
Append(~Plist,(-1322*w - 12837)*OK);
Append(~Plist,(1322*w - 14159)*OK);
Append(~Plist,(-100*w - 971)*OK);
Append(~Plist,(-100*w + 1071)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(-2*w - 21)*OK);
Append(~Plist,(-18*w + 193)*OK);
Append(~Plist,(-18*w - 175)*OK);
Append(~Plist,(-390*w + 4177)*OK);
Append(~Plist,(390*w + 3787)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(5326*w + 51717)*OK);
Append(~Plist,(5326*w - 57043)*OK);
Append(~Plist,(7542*w + 73235)*OK);
Append(~Plist,(-86*w + 921)*OK);
Append(~Plist,(86*w + 835)*OK);
Append(~Plist,(66*w + 641)*OK);
Append(~Plist,(66*w - 707)*OK);
Append(~Plist,(-604*w + 6469)*OK);
Append(~Plist,(604*w + 5865)*OK);
Append(~Plist,(-4*w + 45)*OK);
Append(~Plist,(-4*w - 41)*OK);
Append(~Plist,(-2896*w + 31017)*OK);
Append(~Plist,(-2896*w - 28121)*OK);
Append(~Plist,(-314*w - 3049)*OK);
Append(~Plist,(-314*w + 3363)*OK);
Append(~Plist,(-44*w + 471)*OK);
Append(~Plist,(44*w + 427)*OK);
Append(~Plist,(-58*w - 563)*OK);
Append(~Plist,(58*w - 621)*OK);
Append(~Plist,(-14*w + 149)*OK);
Append(~Plist,(14*w + 135)*OK);
Append(~Plist,(-22*w - 213)*OK);
Append(~Plist,(22*w - 235)*OK);
Append(~Plist,(26*w - 279)*OK);
Append(~Plist,(-26*w - 253)*OK);
Append(~Plist,(-5754*w - 55873)*OK);
Append(~Plist,(-5754*w + 61627)*OK);
Append(~Plist,(-46*w + 493)*OK);
Append(~Plist,(-46*w - 447)*OK);
Append(~Plist,(-3752*w + 40185)*OK);
Append(~Plist,(-3752*w - 36433)*OK);
Append(~Plist,(5112*w + 49639)*OK);
Append(~Plist,(5112*w - 54751)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(2468*w + 23965)*OK);
Append(~Plist,(2468*w - 26433)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-2*w + 29)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(-1032*w + 11053)*OK);
Append(~Plist,(1032*w + 10021)*OK);
Append(~Plist,(-6*w - 55)*OK);
Append(~Plist,(6*w - 61)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(-7328*w + 78485)*OK);
Append(~Plist,(-7328*w - 71157)*OK);
Append(~Plist,(-36*w - 349)*OK);
Append(~Plist,(-36*w + 385)*OK);
Append(~Plist,(204*w + 1981)*OK);
Append(~Plist,(204*w - 2185)*OK);
Append(~Plist,(-8*w - 75)*OK);
Append(~Plist,(-8*w + 83)*OK);
Append(~Plist,(1184*w + 11497)*OK);
Append(~Plist,(1184*w - 12681)*OK);
Append(~Plist,(-4*w - 33)*OK);
Append(~Plist,(4*w - 37)*OK);
Append(~Plist,(-7970*w - 77391)*OK);
Append(~Plist,(-7970*w + 85361)*OK);
Append(~Plist,(1826*w + 17731)*OK);
Append(~Plist,(1826*w - 19557)*OK);
Append(~Plist,(-452*w - 4389)*OK);
Append(~Plist,(-452*w + 4841)*OK);
Append(~Plist,(-224*w - 2175)*OK);
Append(~Plist,(-224*w + 2399)*OK);
Append(~Plist,(-20*w + 213)*OK);
Append(~Plist,(20*w + 193)*OK);
Append(~Plist,(-1246*w + 13345)*OK);
Append(~Plist,(1246*w + 12099)*OK);
Append(~Plist,(742*w - 7947)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[2, -4, 2, -7, -1, 3, 3, -6, 0, 2, 2, 2, 11, -7, 9, -9, -6, -12, 2, 8, -4, -10, -3, 3, -13, -4, -4, 14]);
ECSearch("4.1-b",(2)*OK,[-2, -4, 2, -7, -1, -3, -3, 6, 0, 2, 2, 2, 11, -7, -9, 9, 6, 12, 2, 8, -4, -10, 3, -3, -13, -4, -4, 14]);
ECSearch("4.1-c",(2)*OK,[2, 2, -4, -1, -7, 3, 3, 0, -6, 2, 2, 2, -7, 11, -9, 9, -12, -6, 8, 2, -10, -4, 3, -3, -13, -4, -4, 14]);
ECSearch("4.1-d",(2)*OK,[-2, 2, -4, -1, -7, -3, -3, 0, 6, 2, 2, 2, -7, 11, 9, -9, 12, 6, 8, 2, -10, -4, -3, 3, -13, -4, -4, 14]);
ECSearch("6.1-a",(-w + 11)*OK,[0, -1, -4, 2, 5, 6, 3, -3, -3, -7, -4, 2, 11, 2, -6, 6, -12, 6, -10, -10, -10, 5, -12, 0, 8, 8, -7, -4]);
ECSearch("6.1-b",(-w + 11)*OK,[1, 2, 2, -3, -3, 3, -1, -2, 6, -2, 4, 4, -11, -3, 9, -11, -10, -10, 14, -10, -10, -2, -7, -11, 3, 12, 4, -4]);
ECSearch("6.1-c",(-w + 11)*OK,[0, -1, -4, 2, 5, -6, -3, 3, 3, -7, -4, 2, 11, 2, 6, -6, 12, -6, -10, -10, -10, 5, 12, 0, 8, 8, -7, -4]);
ECSearch("6.1-d",(-w + 11)*OK,[-1, 2, 2, -3, -3, -3, 1, 2, -6, -2, 4, 4, -11, -3, -9, 11, 10, 10, 14, -10, -10, -2, 7, 11, 3, 12, 4, -4]);
ECSearch("6.2-a",(w + 10)*OK,[0, -4, -1, 5, 2, 3, 6, -3, -3, -7, 2, -4, 2, 11, 6, -6, 6, -12, -10, -10, 5, -10, 0, -12, 8, -7, 8, -4]);
ECSearch("6.2-b",(w + 10)*OK,[1, 2, 2, -3, -3, -1, 3, 6, -2, -2, 4, 4, -3, -11, -11, 9, -10, -10, -10, 14, -2, -10, -11, -7, 3, 4, 12, -4]);
ECSearch("6.2-c",(w + 10)*OK,[0, -4, -1, 5, 2, -3, -6, 3, 3, -7, 2, -4, 2, 11, -6, 6, -6, 12, -10, -10, 5, -10, 0, 12, 8, -7, 8, -4]);
ECSearch("6.2-d",(w + 10)*OK,[-1, 2, 2, -3, -3, 1, -3, -6, 2, -2, 4, 4, -3, -11, 11, -9, 10, 10, -10, 14, -2, -10, 11, 7, 3, 4, 12, -4]);
ECSearch("8.1-a",(-214*w + 2292)*OK,[2, 3, 3, 3, -3, 0, -6, 2, -4, -7, -7, 5, 2, -10, -4, -4, -12, 6, 3, -3, -11, 1, -2, -14, 13, 5, 17, 4]);
ECSearch("8.1-b",(-214*w + 2292)*OK,[-2, 3, 3, 3, -3, 0, 6, -2, 4, -7, -7, 5, 2, -10, 4, 4, 12, -6, 3, -3, -11, 1, 2, 14, 13, 5, 17, 4]);
ECSearch("8.2-a",(-214*w - 2078)*OK,[2, 3, 3, -3, 3, -6, 0, -4, 2, -7, 5, -7, -10, 2, -4, -4, 6, -12, -3, 3, 1, -11, -14, -2, 13, 17, 5, 4]);
ECSearch("8.2-b",(-214*w - 2078)*OK,[-2, 3, 3, -3, 3, 6, 0, 4, -2, -7, 5, -7, -10, 2, 4, 4, -6, 12, -3, 3, 1, -11, 14, 2, 13, 17, 5, 4]);
