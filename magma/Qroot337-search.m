print "Field 2.2.337.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 84);
OK := Integers(K);
Plist := [];
Append(~Plist,(3*w + 26)*OK);
Append(~Plist,(3*w - 29)*OK);
Append(~Plist,(-28*w - 243)*OK);
Append(~Plist,(-28*w + 271)*OK);
Append(~Plist,(-688*w - 5971)*OK);
Append(~Plist,(688*w - 6659)*OK);
Append(~Plist,(-2*w - 17)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(-6852*w - 59467)*OK);
Append(~Plist,(-6852*w + 66319)*OK);
Append(~Plist,(16*w + 139)*OK);
Append(~Plist,(-16*w + 155)*OK);
Append(~Plist,(-2394*w + 23171)*OK);
Append(~Plist,(2394*w + 20777)*OK);
Append(~Plist,(-302*w + 2923)*OK);
Append(~Plist,(-302*w - 2621)*OK);
Append(~Plist,(78*w + 677)*OK);
Append(~Plist,(78*w - 755)*OK);
Append(~Plist,(-6*w - 53)*OK);
Append(~Plist,(-6*w + 59)*OK);
Append(~Plist,(134*w + 1163)*OK);
Append(~Plist,(134*w - 1297)*OK);
Append(~Plist,(-414*w + 4007)*OK);
Append(~Plist,(-414*w - 3593)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(-9934*w - 86215)*OK);
Append(~Plist,(-9934*w + 96149)*OK);
Append(~Plist,(-1734*w - 15049)*OK);
Append(~Plist,(1734*w - 16783)*OK);
Append(~Plist,(-90*w - 781)*OK);
Append(~Plist,(-90*w + 871)*OK);
Append(~Plist,(-744*w - 6457)*OK);
Append(~Plist,(744*w - 7201)*OK);
Append(~Plist,(4*w - 41)*OK);
Append(~Plist,(4*w + 37)*OK);
Append(~Plist,(-1404*w + 13589)*OK);
Append(~Plist,(1404*w + 12185)*OK);
Append(~Plist,(-2724*w + 26365)*OK);
Append(~Plist,(2724*w + 23641)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(20*w - 193)*OK);
Append(~Plist,(-20*w - 173)*OK);
Append(~Plist,(1678*w + 14563)*OK);
Append(~Plist,(1678*w - 16241)*OK);
Append(~Plist,(-470*w + 4549)*OK);
Append(~Plist,(-470*w - 4079)*OK);
Append(~Plist,(-8*w - 71)*OK);
Append(~Plist,(-8*w + 79)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(576*w + 4999)*OK);
Append(~Plist,(576*w - 5575)*OK);
Append(~Plist,(-12*w + 115)*OK);
Append(~Plist,(-12*w - 103)*OK);
Append(~Plist,(29472*w - 285253)*OK);
Append(~Plist,(29472*w + 255781)*OK);
Append(~Plist,(-6522*w + 63125)*OK);
Append(~Plist,(6522*w + 56603)*OK);
Append(~Plist,(52*w + 451)*OK);
Append(~Plist,(-52*w + 503)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(-15768*w - 136847)*OK);
Append(~Plist,(-15768*w + 152615)*OK);
Append(~Plist,(-24*w - 209)*OK);
Append(~Plist,(-24*w + 233)*OK);
Append(~Plist,(6*w - 61)*OK);
Append(~Plist,(6*w + 55)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(12686*w + 110099)*OK);
Append(~Plist,(-12686*w + 122785)*OK);
Append(~Plist,(-184*w + 1781)*OK);
Append(~Plist,(-184*w - 1597)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(36*w - 349)*OK);
Append(~Plist,(36*w + 313)*OK);
Append(~Plist,(-42*w - 365)*OK);
Append(~Plist,(-42*w + 407)*OK);
Append(~Plist,(-1292*w + 12505)*OK);
Append(~Plist,(-1292*w - 11213)*OK);
Append(~Plist,(18*w + 155)*OK);
Append(~Plist,(18*w - 173)*OK);
Append(~Plist,(240*w + 2083)*OK);
Append(~Plist,(240*w - 2323)*OK);
Append(~Plist,(-4430*w + 42877)*OK);
Append(~Plist,(4430*w + 38447)*OK);
Append(~Plist,(-202*w - 1753)*OK);
Append(~Plist,(-202*w + 1955)*OK);
Append(~Plist,(-5806*w - 50389)*OK);
Append(~Plist,(5806*w - 56195)*OK);
Append(~Plist,(-408*w + 3949)*OK);
Append(~Plist,(-408*w - 3541)*OK);
Append(~Plist,(352*w + 3055)*OK);
Append(~Plist,(352*w - 3407)*OK);
Append(~Plist,(-16098*w - 139711)*OK);
Append(~Plist,(-16098*w + 155809)*OK);
Append(~Plist,(-152*w - 1319)*OK);
Append(~Plist,(-152*w + 1471)*OK);
Append(~Plist,(-1460*w - 12671)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[1, 1, 0, 0, 4, 4, 4, 4, 2, 4, 4, -12, -12, 4, 4, 4, 4, -4, -4, 12, 12, 4, 4, -4, -4, 4, 8, 8, 12, 12]);
ECSearch("4.1-a",(2)*OK,[2, 2, -4, -4, -2, -2, 4, -10, -10, 6, 6, 4, 4, 0, 0, 4, 4, 4, 4, 12, 12, 0, 0, 22, 6, 6, 12, 12]);
ECSearch("4.1-b",(2)*OK,[-1, -1, -4, 2, -2, 4, -2, 8, -4, 3, 3, 1, 1, -6, -12, 10, 16, -14, 4, 9, -3, -9, 15, -14, 0, -12, 6, 18]);
ECSearch("4.1-c",(2)*OK,[-1, -1, 2, -4, 4, -2, -2, -4, 8, 3, 3, 1, 1, -12, -6, 16, 10, 4, -14, -3, 9, 15, -9, -14, -12, 0, 18, 6]);
ECSearch("6.2-a",(w - 10)*OK,[1, 2, 2, 0, -2, -4, -2, 8, -2, 12, -12, -8, 4, -4, -6, -10, 4, -10, 8, -12, 8, 6, 10, 8, -4, -10, -14, -14]);
ECSearch("6.2-b",(w - 10)*OK,[-1, 2, 4, -4, 2, 0, 4, 10, 6, 12, -6, 6, -8, -10, 0, 6, -10, -6, 6, 8, 0, -14, -14, 20, 20, -16, 22, 6]);
ECSearch("6.3-a",(-w - 9)*OK,[1, 2, 0, 2, -4, -2, -2, -2, 8, -12, 12, 4, -8, -6, -4, 4, -10, 8, -10, 8, -12, 10, 6, 8, -10, -4, -14, -14]);
ECSearch("6.3-b",(-w - 9)*OK,[-1, 2, -4, 4, 0, 2, 4, 6, 10, -6, 12, -8, 6, 0, -10, -10, 6, 6, -6, 0, 8, -14, -14, 20, -16, 20, 6, 22]);
ECSearch("7.1-a",(-688*w - 5971)*OK,[-2, -2, 0, -3, -2, -2, 1, -4, -2, -5, 0, 6, -5, 4, -5, -2, -10, -10, 15, -6, -5, 1, 11, -13, -5, 14, -7, -6, 6]);
ECSearch("7.2-a",(688*w - 6659)*OK,[-2, -2, -3, 0, -2, 1, -2, -4, -5, -2, 6, 0, 4, -5, -2, -5, -10, -10, -6, 15, 1, -5, -13, 11, -5, -7, 14, 6, -6]);
ECSearch("9.2-a",(3770*w - 36489)*OK,[-1, 1, 0, 4, 4, -4, -4, -2, 4, 4, -12, 12, -4, -4, 4, -4, 4, 4, -12, -12, -4, 4, -4, 4, -4, 8, -8, 12, -12]);
ECSearch("9.3-a",(3770*w + 32719)*OK,[1, -1, 0, 4, 4, -4, -4, -2, 4, 4, 12, -12, -4, -4, -4, 4, 4, 4, -12, -12, 4, -4, 4, -4, -4, -8, 8, -12, 12]);
ECSearch("12.1-a",(-56*w - 486)*OK,[0, -2, -4, -2, 6, 2, -10, -8, -10, 8, 0, 10, 8, 4, -8, 6, -16, -2, 16, -4, 6, 18, -8, -18, -12, 6, -10]);
ECSearch("12.1-b",(-56*w - 486)*OK,[-2, -4, 2, -4, 2, 2, 2, 8, 0, 0, -4, 8, -6, 0, -16, -10, -4, 14, 0, 12, 6, -6, -4, -6, -12, 6, 6]);
ECSearch("12.1-c",(-56*w - 486)*OK,[-2, 0, 0, -4, 2, -4, 6, -6, 6, -12, 0, -6, 4, -2, -10, -10, -18, -6, 8, 8, 2, 2, 4, -8, 4, 6, 6]);
ECSearch("12.1-d",(-56*w - 486)*OK,[0, -2, 2, -2, 2, -4, -2, 2, 0, -8, 4, 12, 2, 6, 2, -2, 14, -14, 8, 0, -2, 14, -4, 12, -8, -6, 18]);
ECSearch("12.1-e",(-56*w - 486)*OK,[0, 4, -4, -2, 2, 2, 10, 2, -6, -2, 4, 0, -4, 0, 8, -8, 8, 16, -4, 12, -2, 14, -10, 12, 4, 6, -18]);
ECSearch("12.1-f",(-56*w - 486)*OK,[0, -2, 2, -2, -6, -4, -10, 10, 8, 8, -12, 4, 2, -2, 10, 6, -10, 10, -8, -16, -18, -18, -20, -12, 0, -6, 2]);
ECSearch("12.1-g",(-56*w - 486)*OK,[0, 2, 0, -2, -2, -2, -2, 8, 2, -4, 8, 2, 12, 0, 12, -6, -4, 10, -8, 4, 6, 2, 20, -2, 4, -2, -10]);
ECSearch("12.1-h",(-56*w - 486)*OK,[2, 4, -2, -4, -2, -6, -2, 0, 8, -8, -4, 8, 6, 8, 8, -6, 4, -14, 8, -4, 2, -18, -20, 6, -12, 2, 18]);
ECSearch("12.1-i",(-56*w - 486)*OK,[0, 0, 4, 4, 0, -6, -8, 4, 8, -8, -4, -4, -12, 0, 8, 4, 8, 20, -20, -12, 20, -4, -8, 0, 4, 12, 12]);
ECSearch("12.1-j",(-56*w - 486)*OK,[2, 2, 2, 4, -2, -2, 2, 2, 12, 6, 4, -2, 6, -12, -8, 4, 4, 4, -12, 12, 18, 6, -14, 0, -12, -6, -6]);
ECSearch("12.3-a",(853*w - 8256)*OK,[1, -2, 0, 0, 4, 4, 6, 2, 2, -6, 4, -2, 0, -8, 8, -4, 2, 4, -14, -2, -4, -14, -12, -8, 0, 0, 6, -8]);
ECSearch("12.2-a",(-56*w + 542)*OK,[0, -4, -2, 6, -2, 2, -8, -10, 8, -10, 10, 0, 4, 8, 6, -8, -2, -16, -4, 16, 18, 6, -8, -12, -18, -10, 6]);
ECSearch("12.2-b",(-56*w + 542)*OK,[-2, 2, -4, 2, -4, 2, 8, 2, 0, 0, 8, -4, 0, -6, -10, -16, 14, -4, 12, 0, -6, 6, -4, -12, -6, 6, 6]);
ECSearch("12.2-c",(-56*w + 542)*OK,[-2, 0, 0, 2, -4, -4, -6, 6, -12, 6, -6, 0, -2, 4, -10, -10, -6, -18, 8, 8, 2, 2, 4, 4, -8, 6, 6]);
ECSearch("12.2-d",(-56*w + 542)*OK,[0, 2, -2, 2, -2, -4, 2, -2, -8, 0, 12, 4, 6, 2, -2, 2, -14, 14, 0, 8, 14, -2, -4, -8, 12, 18, -6]);
ECSearch("12.2-e",(-56*w + 542)*OK,[0, -4, 4, 2, -2, 2, 2, 10, -2, -6, 0, 4, 0, -4, -8, 8, 16, 8, 12, -4, 14, -2, -10, 4, 12, -18, 6]);
ECSearch("12.2-f",(-56*w + 542)*OK,[0, 2, -2, -6, -2, -4, 10, -10, 8, 8, 4, -12, -2, 2, 6, 10, 10, -10, -16, -8, -18, -18, -20, 0, -12, 2, -6]);
ECSearch("12.2-g",(-56*w + 542)*OK,[0, 0, 2, -2, -2, -2, 8, -2, -4, 2, 2, 8, 0, 12, -6, 12, 10, -4, 4, -8, 2, 6, 20, 4, -2, -10, -2]);
ECSearch("12.2-h",(-56*w + 542)*OK,[2, -2, 4, -2, -4, -6, 0, -2, -8, 8, 8, -4, 8, 6, -6, 8, -14, 4, -4, 8, -18, 2, -20, -12, 6, 18, 2]);
ECSearch("12.2-i",(-56*w + 542)*OK,[0, 4, 0, 0, 4, -6, 4, -8, -8, 8, -4, -4, 0, -12, 4, 8, 20, 8, -12, -20, -4, 20, -8, 4, 0, 12, 12]);
ECSearch("12.2-j",(-56*w + 542)*OK,[2, 2, 2, -2, 4, -2, 2, 2, 6, 12, -2, 4, -12, 6, 4, -8, 4, 4, 12, -12, 6, 18, -14, -12, 0, -6, -6]);
ECSearch("12.6-a",(-853*w - 7403)*OK,[1, -2, 0, 0, 4, 4, 6, 2, 2, 4, -6, 0, -2, 8, -8, 2, -4, -14, 4, -4, -2, -12, -14, -8, 0, 0, -8, 6]);
