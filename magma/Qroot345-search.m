print "Field 2.2.345.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 86);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w)*OK);
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(3)*OK+(w + 1)*OK);
Append(~Plist,(14*w + 123)*OK);
Append(~Plist,(7)*OK+(w + 1)*OK);
Append(~Plist,(7)*OK+(w + 5)*OK);
Append(~Plist,(-4*w + 39)*OK);
Append(~Plist,(4*w + 35)*OK);
Append(~Plist,(23)*OK+(w + 11)*OK);
Append(~Plist,(-6*w - 53)*OK);
Append(~Plist,(-6*w + 59)*OK);
Append(~Plist,(37)*OK+(w + 3)*OK);
Append(~Plist,(37)*OK+(w + 33)*OK);
Append(~Plist,(43)*OK+(w)*OK);
Append(~Plist,(43)*OK+(w + 42)*OK);
Append(~Plist,(47)*OK+(w + 21)*OK);
Append(~Plist,(47)*OK+(w + 25)*OK);
Append(~Plist,(67)*OK+(w + 27)*OK);
Append(~Plist,(67)*OK+(w + 39)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(97)*OK+(w + 32)*OK);
Append(~Plist,(97)*OK+(w + 64)*OK);
Append(~Plist,(103)*OK+(w + 48)*OK);
Append(~Plist,(103)*OK+(w + 54)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(34*w + 299)*OK);
Append(~Plist,(-34*w + 333)*OK);
Append(~Plist,(157)*OK+(w + 59)*OK);
Append(~Plist,(157)*OK+(w + 97)*OK);
Append(~Plist,(167)*OK+(w + 20)*OK);
Append(~Plist,(167)*OK+(w + 146)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(173)*OK+(w + 46)*OK);
Append(~Plist,(173)*OK+(w + 126)*OK);
Append(~Plist,(8*w - 77)*OK);
Append(~Plist,(-8*w - 69)*OK);
Append(~Plist,(197)*OK+(w + 49)*OK);
Append(~Plist,(197)*OK+(w + 147)*OK);
Append(~Plist,(-10*w - 89)*OK);
Append(~Plist,(-10*w + 99)*OK);
Append(~Plist,(233)*OK+(w + 23)*OK);
Append(~Plist,(233)*OK+(w + 209)*OK);
Append(~Plist,(60*w + 527)*OK);
Append(~Plist,(60*w - 587)*OK);
Append(~Plist,(257)*OK+(w + 24)*OK);
Append(~Plist,(257)*OK+(w + 232)*OK);
Append(~Plist,(-90*w - 791)*OK);
Append(~Plist,(-90*w + 881)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(283)*OK+(w + 89)*OK);
Append(~Plist,(283)*OK+(w + 193)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(313)*OK+(w + 83)*OK);
Append(~Plist,(313)*OK+(w + 229)*OK);
Append(~Plist,(317)*OK+(w + 140)*OK);
Append(~Plist,(317)*OK+(w + 176)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(337)*OK+(w + 142)*OK);
Append(~Plist,(337)*OK+(w + 194)*OK);
Append(~Plist,(347)*OK+(w + 53)*OK);
Append(~Plist,(347)*OK+(w + 293)*OK);
Append(~Plist,(-12*w - 107)*OK);
Append(~Plist,(-12*w + 119)*OK);
Append(~Plist,(353)*OK+(w + 130)*OK);
Append(~Plist,(353)*OK+(w + 222)*OK);
Append(~Plist,(40*w - 391)*OK);
Append(~Plist,(40*w + 351)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(367)*OK+(w + 124)*OK);
Append(~Plist,(367)*OK+(w + 242)*OK);
Append(~Plist,(373)*OK+(w + 122)*OK);
Append(~Plist,(373)*OK+(w + 250)*OK);
Append(~Plist,(-18*w - 157)*OK);
Append(~Plist,(-18*w + 175)*OK);
Append(~Plist,(6*w + 49)*OK);
Append(~Plist,(-6*w + 55)*OK);
Append(~Plist,(8*w - 81)*OK);
Append(~Plist,(8*w + 73)*OK);
Append(~Plist,(-4*w - 29)*OK);
Append(~Plist,(4*w - 33)*OK);
Append(~Plist,(88*w + 773)*OK);
Append(~Plist,(88*w - 861)*OK);
Append(~Plist,(433)*OK+(w + 110)*OK);
Append(~Plist,(433)*OK+(w + 322)*OK);
Append(~Plist,(-2*w + 29)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(443)*OK+(w + 73)*OK);
Append(~Plist,(443)*OK+(w + 369)*OK);
Append(~Plist,(457)*OK+(w + 113)*OK);
Append(~Plist,(457)*OK+(w + 343)*OK);
Append(~Plist,(8*w + 67)*OK);
Append(~Plist,(8*w - 75)*OK);
Append(~Plist,(54*w + 475)*OK);
Append(~Plist,(-54*w + 529)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("5.1-a",(14*w + 123)*OK,[-1, 1, 0, -4, 4, 4, 4, 0, 8, 8, 10, -10, 4, -4, 12, -12, 12, -12, 6, 6, 2, -2, -8, 8, -4, -4, 2, 2, 8]);
ECSearch("5.1-b",(14*w + 123)*OK,[1, -1, 0, -4, 4, -4, -4, 0, 8, 8, 10, -10, 4, -4, -12, 12, 12, -12, -6, -6, 2, -2, -8, 8, -4, -4, -2, -2, 8]);
ECSearch("5.1-c",(14*w + 123)*OK,[1, -1, 0, 4, -4, 4, 4, 0, 8, 8, -10, 10, -4, 4, -12, 12, -12, 12, 6, 6, -2, 2, 8, -8, -4, -4, 2, 2, 8]);
ECSearch("5.1-d",(14*w + 123)*OK,[-1, 1, 0, 4, -4, -4, -4, 0, 8, 8, -10, 10, -4, 4, 12, -12, -12, 12, -6, -6, -2, 2, 8, -8, -4, -4, -2, -2, 8]);
