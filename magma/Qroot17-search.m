print "Field 2.2.17.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 4);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w + 2)*OK);
Append(~Plist,(-w - 1)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(2*w + 1)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(2*w - 7)*OK);
Append(~Plist,(2*w + 5)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(-4*w + 7)*OK);
Append(~Plist,(4*w + 3)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(4*w - 13)*OK);
Append(~Plist,(4*w + 9)*OK);
Append(~Plist,(-4*w - 1)*OK);
Append(~Plist,(4*w - 5)*OK);
Append(~Plist,(-4*w + 3)*OK);
Append(~Plist,(4*w - 1)*OK);

effort := 400;
print "Isogeny class 4.1-a";
N := (2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -6, -4, -4, 2, -4, -4, 0, 0, 14, 6, 6, 12, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 8.3-a";
N := (-w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 2, 2, 4, 4, -6, -4, 4, 8, 0, -2, -10, 6, -4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 8.4-a";
N := (w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, 2, 4, 4, -6, 4, -4, 0, 8, -2, 6, -10, 4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 9.1-a";
N := (3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 2, 2, -4, -4, 10, -4, -4, -8, -8, -2, 6, 6, -12, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 9.1-b";
N := (3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, -1, 8, 5, 5, 1, -1, -1, -2, -2, 10, -6, -6, 0, 0, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.1-a";
N := (4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, -4, 6, -4, -4, 2, 8, 8, -12, -12, -4, -6, -6, 0, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.4-a";
N := (w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 6, 2, -4, 4, -6, -4, -4, 0, -8, 2, 6, -10, -4, -4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.5-a";
N := (-w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, -2, 2, 4, -4, -6, -4, -4, -8, 0, 2, -10, 6, -4, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 17.1-a";
N := (-2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, -2, -2, -4, -4, -6, 4, 4, 0, 0, 2, 6, 6, -12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 18.1-a";
N := (-3*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -2, -6, 4, -4, -6, -4, 12, 0, -8, -6, -2, -10, -4, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 18.2-a";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, -6, -4, 4, -6, 12, -4, -8, 0, -6, -10, -2, -4, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 26.1-a";
N := (w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -6, 0, 0, -2, -12, 4, -12, 8, 2, 6, -14, 4, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 26.2-a";
N := (-3*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, 2, 4, -4, -6, 4, -12, 0, -8, -2, 6, -10, 4, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 26.4-a";
N := (w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -6, 0, 0, -2, 4, -12, 8, -12, 2, -14, 6, 4, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 26.3-a";
N := (3*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, 2, -4, 4, -6, -12, 4, -8, 0, -2, -10, 6, -4, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.3-a";
N := (-2*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -6, -4, 4, 2, -4, 4, 0, 0, -14, 6, 6, 12, -12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.4-a";
N := (2*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -6, 4, -4, 2, 4, -4, 0, 0, -14, 6, 6, -12, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 34.1-a";
N := (3*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 2, 8, 5, -1, 11, -4, -9, -3, -4, -3, 12, 0, -6, 11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 34.2-a";
N := (3*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -1, 5, 8, -1, -4, 11, -3, -9, -4, 12, -3, -6, 0, -10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.1-a";
N := (6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, -2, 0, 0, 6, 4, 4, 8, 8, 10, -6, -6, 0, 0, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.2-a";
N := (3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 1, 0, 7, -7, -3, -7, -9, 6, 10, 6, -14, 2, 8, 8, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.3-a";
N := (3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -3, 0, -7, 7, -3, -9, -7, 10, 6, 6, 2, -14, 8, 8, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 38.1-a";
N := (w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -1, -1, 3, -1, -4, -10, -10, -12, 9, 2, -6, 3, -3, -6, 5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 38.2-a";
N := (-3*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -6, -2, 4, -6, -8, 8, -4, 8, -10, -10, -2, 0, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 38.4-a";
N := (w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -1, -1, 3, -1, -4, -10, -10, 9, -12, 2, 3, -6, -6, -3, 14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 38.3-a";
N := (3*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -6, -2, 4, -6, 8, -8, 8, -4, -10, -2, -10, 4, 0, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 43.1-a";
N := (-4*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 2, 2, 2, 4, 0, 2, 0, 12, 0, -6, 6, -10, -12, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 43.2-a";
N := (4*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, 2, 2, 2, 0, 4, 2, 0, 0, 12, -6, -10, 6, 12, -12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 47.1-a";
N := (-2*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -3, 0, -3, -4, 0, -2, -10, 7, -11, -5, -1, 9, -6, -8, -12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 47.2-a";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, 0, -3, -3, 0, -4, -2, 7, -10, -11, -5, 9, -1, -8, -6, 1, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.1-a";
N := (-5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, 2, 4, 4, 4, -4, 0, -8, -6, 6, 6, -4, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.1-b";
N := (-5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 5, 3, 3, -2, -9, -4, -8, 2, -11, 9, 4, -4, -9, -10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.1-c";
N := (-5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, -5, 5, -5, -2, 1, 8, 12, -2, -3, -9, 12, 8, -9, 14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.2-a";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, 2, 4, 4, -4, 4, -8, 0, -6, 6, 6, 12, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.2-b";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 5, 0, 3, -2, 3, -4, -9, 2, -8, -11, 4, 9, -9, -4, -5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.2-c";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -5, 4, 5, -2, -5, 8, 1, -2, 12, -3, 12, -9, -9, 8, -3, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.1-a";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 0, -4, 2, 2, 2, -4, 12, 0, -10, -12, -6, -12, 12, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.1-b";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 8, -4, -10, 8, -4, 12, 0, 2, -6, -6, -12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.1-c";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, -8, 6, -2, 2, -12, -8, -8, -6, 12, -2, 4, 4, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.3-a";
N := (w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -3, 2, 5, 8, -4, 8, -3, -6, 2, -12, -6, 6, 3, -7, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.3-b";
N := (w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -4, -7, 4, -7, -6, 10, 6, -3, 10, 4, -6, -4, -8, -1, -7, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.2-a";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 0, 2, -4, 2, -4, 2, 0, 12, -10, -6, -12, 12, -12, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.2-b";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, -4, 8, -10, -4, 8, 0, 12, 2, -6, -6, -12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.2-c";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, 6, -8, -2, -12, 2, -8, -8, -6, -2, 12, 4, 4, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.6-a";
N := (w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -3, 5, 2, 8, 8, -4, -6, -3, 2, -6, -12, 3, 6, 14, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.6-b";
N := (w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -4, -7, -7, 4, -6, 6, 10, 10, -3, 4, -4, -6, -1, -8, -12, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.1-a";
N := (8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, -6, -4, -4, 2, 4, 4, 8, 8, 6, -10, -10, -12, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.1-b";
N := (8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, 4, 4, 10, -12, -12, -8, -8, 10, 6, 6, 4, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.2-a";
N := (4*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 4, 6, 4, -4, 2, -8, 8, -12, 12, 4, -6, -6, 0, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.4-a";
N := (2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 2, -2, 4, 8, 6, 8, 4, -8, 8, -2, -10, -2, 8, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.4-b";
N := (2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -2, -2, -4, 8, 6, -8, 4, -8, -8, 2, -10, -2, -8, -12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.6-a";
N := (5*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 2, -2, -4, 4, 6, -4, -4, 8, 0, -2, -10, -6, -4, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.6-b";
N := (5*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -2, -2, -4, -4, 6, -4, 4, -8, 0, 2, -10, -6, -4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.3-a";
N := (4*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 4, 6, -4, 4, 2, 8, -8, 12, -12, 4, -6, -6, 0, 0, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.5-a";
N := (-2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, -2, 8, 4, 6, 4, 8, 8, -8, -2, -2, -10, -12, 8, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.5-b";
N := (-2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, -2, 8, -4, 6, 4, -8, -8, -8, 2, -2, -10, -12, -8, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.7-a";
N := (5*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 6, -2, 4, -4, 6, -4, -4, 0, 8, -2, -6, -10, -4, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.7-b";
N := (5*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -6, -2, -4, -4, 6, 4, -4, 0, -8, 2, -6, -10, 4, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.1-a";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -4, -4, -10, 8, 8, 0, 0, 2, -6, -6, 0, 0, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.1-a";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 4, -6, 0, -6, -8, 4, 2, 8, -8, 6, 0, -12, 12, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.1-b";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 2, 8, 2, 8, -4, 6, 0, -4, 6, 12, -12, -12, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.3-a";
N := (-3*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -7, -4, 1, -5, -3, -1, -11, 2, -6, -2, 14, -6, -4, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.2-a";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 4, 0, -6, -6, 4, -8, 8, 2, -8, 0, 6, 12, -12, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.2-b";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 0, 8, 2, 2, -4, 8, 0, 6, -4, 12, 6, -12, -12, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.4-a";
N := (3*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -7, -3, -4, -5, 1, -3, -11, -1, -6, 2, -2, -6, 14, 4, -4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 76.1-a";
N := (4*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, -6, 8, -4, 2, 8, 0, 0, 2, 0, -6, 0, -12, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 76.1-b";
N := (4*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 6, -4, 2, 8, 8, 0, -12, -10, 6, 6, -12, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 76.1-c";
N := (4*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 4, -2, 0, -4, -6, 4, 8, -12, 10, 4, -6, 0, 0, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 76.2-a";
N := (4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, -6, 8, -4, 8, 2, 0, 0, 2, -6, 0, -12, 0, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 76.2-b";
N := (4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 6, -4, 2, 8, 8, -12, 0, -10, 6, 6, 0, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 76.2-c";
N := (4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -6, -2, 0, -4, 4, -6, -12, 8, 10, -6, 4, 0, 0, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.1-a";
N := (9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, -1, -8, 5, 5, 1, -1, -1, 2, 2, 10, 6, 6, 0, 0, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.1-b";
N := (9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, -1, 0, 5, 5, -7, 11, 11, 0, 0, 14, 0, 0, 0, 0, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.1-c";
N := (9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, 2, -2, -4, -4, 10, -4, -4, 8, 8, -2, -6, -6, 12, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 83.1-a";
N := (-2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 2, -5, 6, 0, 6, 4, -9, 11, 10, -4, -12, -6, -3, 4, 5, 13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 83.2-a";
N := (2*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -5, 2, 6, 6, 0, 4, 11, -9, -4, 10, -12, -3, -6, 5, 4, -3, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.1-a";
N := (w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, 0, 0, 7, -3, 6, -12, -3, -2, -1, -5, -1, -1, -6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.1-b";
N := (w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -6, 6, -8, -4, -2, -8, 0, 8, -2, 6, 6, -12, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.1-c";
N := (w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -2, 0, 0, 7, -1, -2, 4, -9, -10, -11, 3, -9, -9, -2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.4-a";
N := (w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, -6, 0, -3, 7, 6, -12, -2, -3, -1, -1, -5, -6, -1, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.4-b";
N := (w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, -2, 6, -4, -8, -2, -8, 8, 0, -2, 6, 6, 4, -12, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.4-c";
N := (w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 0, -2, 0, -1, 7, -2, 4, -10, -9, -11, -9, 3, -2, -9, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 89.1-a";
N := (-6*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 0, -1, -3, -1, 1, -1, -2, -4, -6, -8, 1, -10, -8, 8, -6, 7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 89.2-a";
N := (6*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -1, 0, -3, 1, -1, -1, -4, -2, -8, -6, 1, -8, -10, -6, 8, -4, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 94.2-a";
N := (-3*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, -6, -6, 0, -4, -2, 4, 8, -8, -2, 6, 14, 4, 0, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 94.3-a";
N := (3*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, -6, -6, -4, 0, -2, 8, 4, -8, -2, 14, 6, 0, 4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-a";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 2, 1, -3, 1, -4, 1, -7, -8, 0, -6, -1, 2, 6, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-b";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 6, 6, -8, 4, 2, 4, 12, 12, -4, 6, -10, 4, -8, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-c";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, -4, -3, -1, -7, 2, -1, -7, -6, 0, 0, -9, 0, -6, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-d";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, -2, 0, 4, 2, 4, -4, 4, 12, 6, -10, -4, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-e";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -1, -6, 3, -5, -5, -4, -11, 9, -12, 8, -6, -1, 10, 10, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.2-a";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 1, 1, 1, -3, -4, -7, 1, 0, -8, -1, -6, 6, 2, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.2-b";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 2, 6, 4, -8, 2, 12, 4, -4, 12, -10, 6, -8, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.2-c";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -1, -3, -7, -1, 2, -7, -1, 0, -6, -9, 0, -6, 0, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.2-d";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -2, -2, 4, 0, 2, -4, 4, 12, 4, -10, 6, 0, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.2-e";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -6, -1, 3, -5, -5, -4, 9, -11, 8, -12, -1, -6, 10, 10, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-a";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, -2, -2, -8, -8, -8, -8, 0, 0, 10, 10, 10, 4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-b";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -1, 0, -7, 5, 8, -4, 3, -3, 2, -3, -9, -9, 3, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-c";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -5, -5, 8, 3, 3, -4, -4, 7, 7, 14, -1, -1, -9, -9, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-d";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 0, 5, -7, -4, 8, -3, 3, 2, -9, -3, 3, -9, 14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-e";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 1, -8, 7, 7, -8, -8, 9, 9, -2, -11, -11, -5, -5, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.2-a";
N := (5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, 2, -6, 0, -8, 12, -10, 10, 8, -8, -6, -2, -4, -12, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.3-a";
N := (5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -6, -6, -8, 0, -10, 12, 8, 10, -8, -2, -6, -12, -4, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 103.1-a";
N := (-8*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 3, -3, -1, 0, 3, -8, -13, -4, 3, 3, 8, 2, -13, 5, -8, 9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 103.2-a";
N := (8*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -3, 3, -1, 3, 0, -8, -4, -13, 3, 3, 8, -13, 2, -8, 5, -13, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.1-a";
N := (2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 4, 0, 4, -4, -6, -2, 4, 6, 0, -2, 4, -14, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.1-b";
N := (2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 6, -4, 8, 8, -4, 2, 6, 12, 2, -12, 6, 12, -6, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.2-a";
N := (-6*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, -6, -2, 4, 0, -4, -8, 10, -6, 4, 6, -8, 4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.2-b";
N := (-6*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 2, 2, -4, 8, -4, 0, -6, -10, 12, 6, 0, 12, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.5-a";
N := (-5*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, 2, -4, 4, 2, -4, 4, 0, -8, 10, -2, 6, 12, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.6-a";
N := (-5*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, 5, -1, 4, 2, 2, -6, -6, -13, -4, -4, -6, -3, 8, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.6-b";
N := (-5*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 6, -7, 3, -6, -8, -8, -4, -6, 3, -2, 2, 4, -7, -10, 2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.6-c";
N := (-5*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, -4, 4, 2, -4, 12, 0, 8, 2, 14, 6, -12, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.6-d";
N := (-5*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 0, 5, -5, -8, 6, -2, -10, -6, -1, -8, 0, -10, 1, -4, 0, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.4-a";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 0, 4, 4, -6, -4, 4, -2, 6, -2, 0, -14, 4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.4-b";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 6, 8, -4, 8, 2, -4, 12, 6, 2, 6, -12, -6, 12, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.3-a";
N := (6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, -2, -6, 4, -4, 0, 10, -8, -6, 6, 4, 4, -8, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.3-b";
N := (6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 2, 2, -4, -4, 8, -6, 0, -10, 6, 12, 12, 0, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.8-a";
N := (5*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, 2, 4, -4, 2, 4, -4, -8, 0, 10, 6, -2, 12, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.7-a";
N := (5*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, 5, 4, -1, 2, -6, 2, -13, -6, -4, -6, -4, 8, -3, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.7-b";
N := (5*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 6, -7, -6, 3, -8, -4, -8, 3, -6, -2, 4, 2, -10, -7, 5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.7-c";
N := (5*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, 4, -4, 2, 12, -4, 8, 0, 2, 6, 14, -4, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 104.7-d";
N := (5*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 0, 5, -8, -5, 6, -10, -2, -1, -6, -8, -10, 0, -4, 1, 13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 106.2-a";
N := (5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 2, 2, 3, 5, -7, 2, 8, 11, 3, 3, 5, -9, 9, -12, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 106.2-b";
N := (5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, -6, -4, 0, -6, 4, 4, 0, -8, -2, 6, -12, -8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 106.3-a";
N := (5*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 2, 2, 3, -7, 5, 2, 11, 8, 3, 3, 5, -9, -12, 9, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 106.3-b";
N := (5*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, -6, 0, -4, -6, 4, 4, -8, 0, -2, 6, -8, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.1-a";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, -6, 4, 8, 2, 0, 8, 0, 8, -2, -6, 2, 12, 4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.2-a";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, -6, 8, 4, 2, 8, 0, 8, 0, -2, 2, -6, 4, 12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 118.1-a";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, -6, -8, -4, 8, -2, -12, 0, 0, -12, 10, 2, 0, 10, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 118.1-b";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, 2, 4, 4, -4, 6, -12, 0, -4, -4, 2, -14, 4, -6, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 118.4-a";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, -2, -8, 8, -4, -2, 0, -12, -12, 0, 10, 0, 2, 10, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 118.4-b";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, -6, 4, -4, 4, 6, 0, -12, -4, -4, 2, 4, -14, -6, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-a";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, 4, 4, -2, 0, 0, -9, -6, -6, 8, 8, -10, -6, -6, 5, 5, -7, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 127.1-a";
N := (-2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, -6, 2, 2, 4, -4, 2, 12, -12, 0, 4, 6, 6, -10, 0, 12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 127.2-a";
N := (2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 2, -6, 2, -4, 4, 2, -12, 12, 4, 0, 6, -10, 6, 12, 0, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-a";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 2, -4, 4, 10, 12, -12, -8, 8, -10, 6, 6, -4, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-b";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, 2, -4, 4, -6, 4, 4, 8, 0, 2, -10, 6, 4, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-c";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -2, -6, 4, -4, 2, -4, 4, 8, -8, -6, -10, -10, 12, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.3-a";
N := (-4*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, -2, -4, 8, -6, -8, -8, -8, 4, 8, 10, 2, 0, -8, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.3-b";
N := (-4*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, -2, -4, -8, -6, -8, 8, 8, 4, -8, 10, 2, 0, 8, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-a";
N := (-6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 2, -8, -4, -6, 4, 8, -8, -8, 2, -2, 10, -12, 8, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-b";
N := (-6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 6, 4, -4, -2, -4, 4, 0, 0, 14, 6, -6, 12, -12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-c";
N := (-6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 6, 4, 4, -2, -4, -4, 0, 0, -14, 6, -6, 12, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-d";
N := (-6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, -8, 4, -6, 4, -8, 8, -8, -2, -2, 10, -12, -8, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.2-a";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 2, 4, -4, 10, -12, 12, 8, -8, -10, 6, 6, 4, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.2-b";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 2, 4, -4, -6, 4, 4, 0, 8, 2, 6, -10, 4, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.2-c";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -2, -6, -4, 4, 2, 4, -4, -8, 8, -6, -10, -10, -12, 12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.4-a";
N := (4*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, -2, 8, -4, -6, -8, -8, 4, -8, 8, 2, 10, -8, 0, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.4-b";
N := (4*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, -2, -8, -4, -6, 8, -8, 4, 8, -8, 2, 10, 8, 0, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-a";
N := (-6*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 2, -4, -8, -6, 8, 4, -8, -8, 2, 10, -2, 8, -12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-b";
N := (-6*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 6, -4, 4, -2, 4, -4, 0, 0, 14, -6, 6, -12, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-c";
N := (-6*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 6, 4, 4, -2, -4, -4, 0, 0, -14, -6, 6, 12, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-d";
N := (-6*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 2, 4, -8, -6, -8, 4, -8, 8, -2, 10, -2, -8, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 134.1-a";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, -2, -2, 2, -2, 1, -1, 0, -2, -3, 3, 8, 6, -14, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 134.4-a";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, -2, -2, -2, 2, 1, 0, -1, -3, -2, 3, 6, 8, -14, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.1-a";
N := (6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, 5, -4, -7, 8, 5, 9, -3, -4, 0, -9, -6, 0, 14, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.1-b";
N := (6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, -4, 2, 2, -4, -10, -12, 12, 2, -6, -6, -12, -6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.3-a";
N := (-7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 6, 0, -4, 2, 8, 4, 8, -8, 6, 6, -2, 0, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.2-a";
N := (6*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 2, -4, 5, -7, 5, 8, -3, 9, -4, -9, 0, 0, -6, -13, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.2-b";
N := (6*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 2, -4, 2, -10, -4, 12, -12, 2, -6, -6, -6, -12, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.4-a";
N := (-7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 6, -4, 0, 2, 4, 8, -8, 8, 6, -2, 6, -4, 0, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 137.1-a";
N := (-6*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 6, 5, 3, -6, 2, -4, -6, 9, -8, 0, 5, -3, -14, -9, 9, -9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 137.2-a";
N := (6*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 5, 6, 3, 2, -6, -4, 9, -6, 0, -8, 5, -14, -3, 9, -9, 6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-a";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -8, 3, 3, 9, 1, 1, 2, 2, 10, -6, -6, 0, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-a";
N := (6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 0, -4, 2, 4, 4, 4, -8, -2, 14, -6, 4, -4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-b";
N := (6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -4, 4, 2, 4, 12, 0, 0, -10, -10, -2, 12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-c";
N := (6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -2, 0, -4, 2, 4, -12, 12, -8, -6, 6, -6, -4, -12, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-d";
N := (6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 8, 0, -2, -4, 4, -8, -8, 2, 2, -6, 8, 0, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.4-a";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 1, 8, -5, 5, 1, 1, -1, -2, 2, -10, -6, -6, 0, 0, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.4-b";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 7, 3, -4, 5, 1, -3, 11, -1, -6, -2, 2, -6, 14, -4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.4-c";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 4, -4, 10, 4, -4, -8, 8, 2, 6, 6, 12, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.4-d";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 2, -6, -4, -4, -6, 4, 12, 0, 8, 6, -2, -10, 4, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.4-e";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -1, 0, -7, -7, -3, 7, -9, 6, -10, -6, -14, 2, -8, 8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-a";
N := (6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -4, 0, 2, 4, 4, -8, 4, -2, -6, 14, -4, 4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-b";
N := (6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 4, -4, 2, 12, 4, 0, 0, -10, -2, -10, 4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-c";
N := (6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -4, 0, 2, -12, 4, -8, 12, -6, -6, 6, -12, -4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-d";
N := (6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 0, 8, -2, 4, -4, -8, -8, 2, -6, 2, 0, 8, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.5-a";
N := (-3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 1, 8, 5, -5, 1, -1, 1, 2, -2, -10, -6, -6, 0, 0, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.5-b";
N := (-3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 7, -4, 1, 5, -3, -1, 11, -2, -6, 2, 14, -6, -4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.5-c";
N := (-3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, -4, 4, 10, -4, 4, 8, -8, 2, 6, 6, -12, 12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.5-d";
N := (-3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, -6, -4, -4, -6, 12, 4, 8, 0, 6, -10, -2, -4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.5-e";
N := (-3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 3, 0, -7, -7, -3, -9, 7, -10, 6, -6, 2, -14, 8, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.1-a";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, 0, 2, 2, -10, 8, 6, 6, 2, 6, 6, 0, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.1-b";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 4, 6, 2, 6, -8, 2, 6, -2, -2, 6, 0, 0, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.2-a";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, 5, 3, -7, -4, 2, -10, -3, 12, -10, -9, -6, 6, -3, 2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.2-b";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 1, 3, -4, -2, 6, 3, -4, -2, -9, -2, 6, 9, -2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.6-a";
N := (7*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, 6, 2, -2, 6, 4, 2, -6, -4, 10, -6, 2, 4, 14, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.6-b";
N := (7*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, -6, -4, -6, -4, -4, 0, 8, 2, -2, -10, 4, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.6-c";
N := (7*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -1, 3, 7, -5, 4, 6, -2, 12, 1, -6, 10, -5, 9, 2, 13, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.6-d";
N := (7*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -4, 2, -6, 6, 6, -4, -6, 2, -12, 6, -14, 2, -12, -10, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.4-a";
N := (2*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, 0, 2, 2, 8, -10, 6, 6, 2, 6, 6, 0, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.4-b";
N := (2*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 4, 6, 2, -8, 6, 6, 2, -2, 6, -2, 0, 0, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.3-a";
N := (6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, 5, 3, -7, -4, -10, 2, 12, -3, -10, -6, -9, -3, 6, 5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.3-b";
N := (6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 1, 1, 3, -4, 6, -2, -4, 3, -2, -2, -9, 9, 6, 3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.7-a";
N := (7*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, -4, 2, -2, 6, 2, 4, -4, -6, 10, 2, -6, 14, 4, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.7-b";
N := (7*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, -6, -4, -6, -4, -4, 8, 0, 2, -10, -2, 12, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.7-c";
N := (7*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 3, -1, 7, -5, 4, -2, 6, 1, 12, -6, -5, 10, 2, 9, -2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 152.7-d";
N := (7*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, -4, -6, 6, 6, -6, -4, -12, 2, 6, 2, -14, -10, -12, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.1-a";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, -1, -1, -1, -1, -7, -7, -6, -6, 2, -6, -6, 6, 6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-a";
N := (-9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, 6, 4, -4, -6, -4, 12, 0, 8, -6, 2, 10, 4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.2-a";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 6, -4, 4, -6, 12, -4, 8, 0, -6, 10, 2, 4, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 166.1-a";
N := (-5*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, 1, -3, 2, -2, -7, -8, 6, 7, -2, 5, -9, -5, -15, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 166.1-b";
N := (-5*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, -5, -3, -6, 0, 1, -6, -4, -5, -10, 3, -9, 3, -5, 8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 166.2-a";
N := (-7*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -3, -2, -2, 2, -8, -4, 1, -1, 4, -2, 4, 1, -14, -1, -4, 3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 166.4-a";
N := (5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, -3, -3, -2, 2, -7, 6, -8, -2, 7, 5, -5, -9, 10, -15, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 166.4-b";
N := (5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, -1, -3, 0, -6, 1, -4, -6, -10, -5, 3, 3, -9, 8, -5, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 166.3-a";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, -3, -2, -8, 2, -4, -1, 1, -2, 4, 4, -14, 1, -4, -1, -7, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-a";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 2, 8, 8, 6, -4, -4, -4, -4, 14, 2, 2, -8, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.1-a";
N := (-8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 3, -5, 0, 2, -6, 8, 4, -9, 0, 9, 8, 6, -14, -7, -13, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.1-b";
N := (-8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -6, 8, -2, 4, -8, -6, 8, -8, -2, -6, -2, 0, 8, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.1-c";
N := (-8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 7, -3, 4, 6, 6, -8, -4, -5, 0, -11, -4, 6, 2, -3, 11, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.1-d";
N := (-8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -6, -2, 0, 0, -2, -4, 4, 0, 10, -10, 6, -4, -12, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.1-e";
N := (-8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, 0, 2, 8, 8, -10, 12, 0, 2, -6, 6, 0, 0, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.1-f";
N := (-8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 3, -4, -2, -2, 4, 0, -7, 4, -5, -12, 10, -6, 5, 13, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.1-g";
N := (-8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 0, 2, 2, -4, 8, -3, -12, -1, 0, -6, -6, 9, 5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.3-a";
N := (-3*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, -4, 2, -8, -2, -2, 2, -6, 0, -2, -2, 2, 4, -4, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.4-a";
N := (-7*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 2, -4, 6, -7, 5, 8, 8, -6, 9, 11, 9, 3, -6, 3, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.4-b";
N := (-7*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 6, 6, -6, -6, 4, 6, -6, 4, -6, -4, -10, 10, 0, -4, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.2-a";
N := (8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -5, 3, 0, -6, 2, 8, 4, 0, -9, 9, 6, 8, -7, -14, 10, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.2-b";
N := (8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 0, 8, 4, -2, -8, -6, -8, 8, -2, -2, -6, 8, 0, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.2-c";
N := (8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 7, 4, 6, 6, -8, -4, 0, -5, -11, 6, -4, -3, 2, -14, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.2-d";
N := (8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, -2, -2, 0, 0, -2, -4, 0, 4, 10, 6, -10, -12, -4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.2-e";
N := (8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 0, 8, 2, 8, -10, 0, 12, 2, 6, -6, 0, 0, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.2-f";
N := (8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 3, -4, -2, -2, 4, 0, 4, -7, -5, 10, -12, 5, -6, 2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.2-g";
N := (8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -1, 0, 2, 2, -4, 8, -12, -3, -1, -6, 0, 9, -6, 2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.6-a";
N := (3*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 4, 2, -2, -8, -2, 2, 0, -6, -2, 2, -2, -4, 4, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.5-a";
N := (7*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, 2, 6, 5, -7, 8, 8, 9, -6, 11, 3, 9, 3, -6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.5-b";
N := (7*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 6, 6, -6, 4, -6, 6, -6, -6, 4, -4, 10, -10, -4, 0, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 178.1-a";
N := (w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 2, -2, 4, 0, 6, 0, -4, 2, -2, 6, -2, -4, 0, 0, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 178.1-b";
N := (w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, 6, -2, -4, 8, 6, -8, -4, -6, 10, 10, 6, -12, -8, 0, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 178.2-a";
N := (7*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 2, -6, 4, 8, 2, 8, -12, 4, 4, 6, 6, -6, 0, -4, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 178.2-b";
N := (7*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -7, -4, -3, -7, -7, -1, 8, 2, 0, 6, -1, 12, -6, -6, 0, 8, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 178.2-c";
N := (7*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -1, -6, 3, -5, 5, 1, 4, -6, -12, 8, -5, -6, -6, 0, -10, -12, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 178.4-a";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, -2, -2, 0, 4, 6, -4, 0, -2, 2, 6, -4, -2, 0, 0, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 178.4-b";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 6, 2, -2, 8, -4, 6, -4, -8, 10, -6, 10, -12, 6, 0, -8, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 178.3-a";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, -6, 8, 4, 2, -12, 8, 4, 4, 6, -6, 6, -4, 0, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 178.3-b";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -7, -3, -7, -7, -1, 2, 8, 6, 0, -1, -6, 12, 0, -6, -7, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 178.3-c";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -6, -1, 3, 5, -5, 1, -6, 4, 8, -12, -5, -6, -6, -10, 0, 13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.1-a";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -6, -6, 0, -6, 8, 6, 0, 0, -10, -6, 10, -14, -12, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.1-b";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, 4, 0, -4, -2, -8, -4, 0, -6, 2, -6, 0, -6, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.1-c";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, 4, -4, 2, 4, -4, 0, 2, 6, -10, 4, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.3-a";
N := (-9*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 3, 4, 5, 2, 4, -8, -6, 9, 1, -3, 3, 1, -8, 8, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.3-b";
N := (-9*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, -2, 2, 2, 4, -2, 6, 0, 4, 12, -6, 10, -2, -4, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.4-a";
N := (-7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -1, -3, -4, 2, -4, -1, -10, 3, 5, -3, -9, 0, -12, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.2-a";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -2, -6, -6, 0, 8, 0, 6, 0, -10, 10, -6, -12, -14, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.2-b";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 4, -4, 0, -2, -4, -8, 0, -6, -6, 2, -6, 0, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.2-c";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, -4, 4, 2, -4, 4, 0, 2, -10, 6, -4, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.6-a";
N := (9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, 3, 5, 4, 2, -8, 9, -6, 1, -3, 1, 3, 8, -8, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.6-b";
N := (9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 0, 2, 4, 2, -2, 0, 6, 4, 12, 10, -6, -4, -2, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 188.5-a";
N := (7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, -4, -3, 2, -4, -4, -10, -1, 3, 5, -9, -3, -12, 0, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-a";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, 6, -4, 2, -4, 8, -4, 0, 12, -6, -6, 6, 12, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-b";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 6, 2, 2, -10, 8, 8, -12, -12, 6, 6, -6, -6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-c";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 2, -2, 2, 4, 4, -4, 8, 4, -8, 10, -6, 4, -10, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-d";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, 2, 4, 4, 10, -4, -4, -8, -8, -10, -10, -12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-e";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 4, -2, 4, 2, 4, 8, -4, -8, 4, -6, 10, -10, 4, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-f";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, 6, 2, -4, -4, -4, 8, 12, 0, -6, -6, 12, 6, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.1-a";
N := (-10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 2, 0, 0, -4, 2, -2, -8, -4, 2, -10, 12, -12, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.1-b";
N := (-10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, -4, -3, 2, -1, 8, 5, 6, 12, -1, -12, 3, 9, 0, -13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.3-a";
N := (-5*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -1, 4, -3, 6, -1, -8, -11, 6, 4, 1, 4, -9, 15, -8, -3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.3-b";
N := (-5*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 6, -6, -4, -4, 0, 4, 0, -12, 6, 6, -10, -4, -4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.2-a";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 2, 0, 0, 2, -4, -8, -2, -4, -10, 2, -12, 12, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.2-b";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 5, -3, -1, 2, 5, 8, 12, 6, -1, 3, -12, 0, 9, -10, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.4-a";
N := (5*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, -1, -3, -1, 6, -11, -8, 4, 6, 1, -9, 4, -8, 15, -2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.4-b";
N := (5*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, -2, -6, -4, -4, 4, 0, -12, 0, 6, -10, 6, -4, -4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.1-a";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -7, 0, -2, -3, 0, -4, 1, -4, -12, -6, -4, 4, -6, 3, 1, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.4-a";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 0, -7, -2, 0, -3, -4, -4, 1, -6, -12, -4, -6, 4, 1, 3, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 206.1-a";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 6, -4, -3, -3, 7, -7, 2, 0, 0, 2, -10, 11, -13, 7, -12, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 206.1-b";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 6, 2, -6, -6, -8, -4, 8, 0, 0, -10, -4, 2, -4, 4, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 206.4-a";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 6, -4, -3, -3, 7, 2, -7, 0, 0, 2, 11, -10, 7, -13, -13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 206.4-b";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 0, 2, -6, -6, -8, 8, -4, 0, 0, -10, 2, -4, 4, -4, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.1-a";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 1, 1, 6, -8, 8, -12, -2, 13, 6, -6, 4, -5, 10, 6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.1-b";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -4, -3, 5, -4, 2, -10, -10, 6, -3, -4, 12, -6, -9, 0, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.3-a";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 4, 4, 2, 4, -12, -8, 8, 14, -10, -2, 4, -12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.3-b";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, 0, 0, -2, -4, 4, 0, -12, -2, 10, -10, -4, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.3-c";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, -6, 4, 2, 4, 2, -8, 4, 6, -6, -4, -12, 12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.3-d";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -4, 6, 0, -2, -4, 10, 0, 0, 10, -2, -4, -4, -4, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.4-a";
N := (-6*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -6, 8, 0, 6, -12, -4, -8, 12, -6, -6, 6, -12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.4-b";
N := (-6*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, 2, 0, -2, 12, -2, 0, 8, 2, -2, 0, 4, 4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.4-c";
N := (-6*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -4, -4, -2, 0, 4, -8, -4, -10, -2, -6, 0, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.4-d";
N := (-6*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 0, 4, 2, 4, 8, 8, 0, 6, 6, 10, -4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.7-a";
N := (-11*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -6, 2, 4, 4, 2, 4, 4, 0, 8, -10, -2, 6, -12, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.7-b";
N := (-11*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -6, 0, 0, -2, -4, -12, 8, 12, -2, -14, 6, -4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.8-a";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -6, -7, -6, -3, -8, -4, 8, -3, -6, 2, 4, 2, -10, 7, 5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.8-b";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -3, 2, -5, 8, -4, -8, 3, -6, -2, -12, -6, 6, -3, -7, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.8-c";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, 2, 4, 4, -6, 4, 12, 0, -8, 2, 6, -10, 4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.8-d";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 4, -7, 4, 7, -6, 10, -6, 3, 10, -4, -6, -4, -8, 1, -7, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.8-e";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 4, 4, 2, 12, 4, -8, 0, -2, 6, 14, -4, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.8-f";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 5, 4, 1, 2, -6, -2, 13, -6, 4, -6, -4, 8, 3, 5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.8-g";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 0, 5, -8, 5, 6, -10, 2, 1, -6, 8, -10, 0, -4, -1, 13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.2-a";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 1, 6, 1, -8, -12, 8, 13, -2, 6, 4, -6, 10, -5, 11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.2-b";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -4, -3, -4, 5, 2, -10, -10, -3, 6, -4, -6, 12, 0, -9, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.6-a";
N := (2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 4, 4, 2, -12, 4, 8, -8, 14, -2, -10, -12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.6-b";
N := (2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, 0, 0, -2, 4, -4, -12, 0, -2, -10, 10, -4, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.6-c";
N := (2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, 4, -6, 2, 2, 4, 4, -8, 6, -4, -6, 12, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.6-d";
N := (2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -4, 0, 6, -2, 10, -4, 0, 0, 10, -4, -2, -4, -4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.5-a";
N := (6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -6, 0, 8, 6, -4, -12, 12, -8, -6, 6, -6, -12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.5-b";
N := (6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, 0, 2, -2, -2, 12, 8, 0, 2, 0, -2, 4, 4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.5-c";
N := (6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -4, -4, -2, 4, 0, -4, -8, -10, -6, -2, 4, 0, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.5-d";
N := (6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 4, 0, 2, 8, 4, 0, 8, 6, 10, 6, -4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.10-a";
N := (11*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -6, 2, 4, 4, 2, 4, 4, 8, 0, -10, 6, -2, 12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.10-b";
N := (11*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -6, 0, 0, -2, -12, -4, 12, 8, -2, 6, -14, 4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.9-a";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -6, -7, -3, -6, -8, 8, -4, -6, -3, 2, 2, 4, 7, -10, -2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.9-b";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -3, -5, 2, 8, -8, -4, -6, 3, -2, -6, -12, -3, 6, -14, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.9-c";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, 2, 4, 4, -6, 12, 4, -8, 0, 2, -10, 6, 4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.9-d";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 4, -7, 7, 4, -6, -6, 10, 10, 3, -4, -4, -6, 1, -8, 12, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.9-e";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 4, 4, 2, 4, 12, 0, -8, -2, 14, 6, 12, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.9-f";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 5, 1, 4, 2, -2, -6, -6, 13, 4, -4, -6, 3, 8, 4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.9-g";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 0, 5, 5, -8, 6, 2, -10, -6, 1, 8, 0, -10, -1, -4, 0, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.1-a";
N := (8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, 0, 2, -4, -4, -4, 8, 0, 0, -10, 0, -12, -6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.1-b";
N := (8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 0, -2, 7, 2, -11, -5, 10, 8, -1, 1, -6, 4, -3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.1-c";
N := (8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -1, 0, 2, -1, 2, -7, -1, 6, -12, 11, -9, 6, 0, 5, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.1-d";
N := (8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, 4, 6, 1, 2, 1, 11, 10, 0, -11, 1, 2, -8, -9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.1-e";
N := (8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -2, -4, 2, -4, -8, 4, 0, -8, 0, -2, -12, 8, 6, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.2-a";
N := (8*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, 0, -4, 2, -4, 8, -4, 0, 0, -10, 0, -6, -12, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.2-b";
N := (8*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, 0, 7, -2, 2, -5, -11, 8, 10, -1, 1, 4, -6, -8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.2-c";
N := (8*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, 0, -1, 2, 2, -1, -7, -12, 6, 11, -9, 0, 6, -16, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.2-d";
N := (8*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, 4, 1, 6, 2, 11, 1, 0, 10, -11, 1, -8, 2, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.2-e";
N := (8*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -4, -4, -4, 2, -8, 0, 4, 0, -8, -2, -12, 6, 8, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 223.1-a";
N := (-8*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 4, -2, -2, -5, 3, 6, -12, 0, -9, 8, -3, 7, -1, -4, -5, -10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 223.2-a";
N := (-8*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 4, -2, 3, -5, 6, 0, -12, 8, -9, -3, -1, 7, -5, -4, 1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-a";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, -2, 2, 4, 4, 4, 4, 8, 8, -14, -10, -10, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 229.1-a";
N := (-10*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 4, -1, -2, 0, -1, -4, 3, -8, 1, -8, 0, -1, -11, -11, -6, 0, -3, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 229.2-a";
N := (10*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, -2, -1, 0, -4, -1, 3, 1, -8, 0, -8, -1, -11, -11, 0, -6, 1, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.1-a";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -4, 4, -2, 0, -8, 8, 12, 10, 6, 6, 0, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.1-b";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 3, 0, 0, 1, -6, -11, 3, 8, -10, 9, 4, 10, 10, 13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.1-c";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -3, 8, 4, 3, 6, -1, 7, -12, -6, 5, -8, -10, -10, -1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.1-d";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -4, -8, -2, -12, 4, 8, -12, 10, -6, -6, 0, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.1-e";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 7, -4, 4, 7, -6, 7, 5, 0, -2, 3, 0, 6, 2, -13, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.2-a";
N := (-9*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 4, -4, -2, -4, 0, -4, 4, 2, 2, -6, 0, -12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.4-a";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 4, -4, -2, -8, 0, 12, 8, 10, 6, 6, -4, 0, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.4-b";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 3, 0, 0, 1, -11, -6, 8, 3, -10, 4, 9, 10, 10, 3, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.4-c";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -3, 4, 8, 3, -1, 6, -12, 7, -6, -8, 5, -10, -10, -5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.4-d";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -8, -4, -2, 4, -12, -12, 8, 10, -6, -6, -4, 0, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.4-e";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 7, 4, -4, 7, 7, -6, 0, 5, -2, 0, 3, 2, 6, -9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 234.3-a";
N := (9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -4, 4, -2, 0, -4, 4, -4, 2, -6, 2, -12, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.1-a";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 5, 6, -1, -4, -7, 11, 11, -3, 9, -4, -3, 3, 0, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.1-b";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 4, -4, 0, 6, -4, 8, 0, -4, -6, -6, -12, 6, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.1-c";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 1, 2, 1, 0, 1, -11, -1, 7, -7, 8, -5, -3, -4, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.1-d";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -1, -2, 5, 0, -9, -1, -1, 3, -7, 0, 9, 9, 0, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.1-e";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, -4, -8, -6, 4, -4, -4, 8, -10, -2, 6, 0, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.3-a";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 3, 2, 4, 4, 5, 9, -6, 0, 8, -13, -4, 4, 10, -9, -7, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.4-a";
N := (-5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, -2, 2, 2, -4, 6, -4, 4, 8, 2, 4, -2, -6, -6, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.2-a";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, -4, 6, -4, -1, -7, 11, 11, 9, -3, -4, 3, -3, 0, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.2-b";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, 0, -4, 6, 8, -4, -4, 0, -6, -12, -6, 6, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.2-c";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 1, 0, 2, 0, 1, 1, -1, -11, -7, 7, 8, -3, -5, -4, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.2-d";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, -2, 0, 5, -9, -1, -1, -7, 3, 0, 9, 9, 0, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.2-e";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 2, -8, -4, -6, -4, 4, 8, -4, -10, 6, -2, 0, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.6-a";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, 3, 4, 5, 4, 9, 0, -6, -13, 8, -4, 10, 4, -9, -9, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 236.5-a";
N := (5*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, 4, 2, -4, 2, 6, 4, -4, 2, 8, 4, -6, -2, -6, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 242.1-a";
N := (-11*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -4, 0, 2, 2, -1, 8, -10, 9, -3, 5, -9, -9, 15, -12, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 242.2-a";
N := (-11*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -4, 0, 2, 2, -1, -10, 8, -3, 9, 5, -9, -9, -12, 15, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 247.1-a";
N := (-8*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, 2, -6, 8, -6, 4, -4, -8, 12, 2, 6, 2, 0, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 247.2-a";
N := (-6*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 0, 4, 1, -6, 1, 1, 3, -6, 2, -3, 0, -5, -4, 11, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 247.4-a";
N := (8*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 2, -6, 8, -6, -4, 4, 12, -8, 2, 2, 6, 4, 0, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 247.3-a";
N := (6*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 0, 4, 1, -6, 1, 1, -6, 3, 2, 0, -3, -4, -5, 3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 254.1-a";
N := (9*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 5, -6, 2, 2, -1, -1, -10, 3, -6, 14, -6, 12, -12, -15, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 254.1-b";
N := (9*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 2, 6, -4, 4, -2, 4, 4, -12, 4, -2, 6, 6, -8, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 254.2-a";
N := (-7*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -1, 2, 0, 5, 2, 8, -4, -4, -3, 6, 14, 9, -6, 15, -12, -7, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 254.4-a";
N := (9*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 5, -4, -6, 2, 2, -1, -10, -1, -6, 3, 14, 12, -6, -15, -12, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 254.4-b";
N := (9*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, 6, 4, -4, -2, 4, 4, 4, -12, -2, 6, 6, 4, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 254.3-a";
N := (7*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 2, -1, 0, 2, 5, 8, -4, -4, 6, -3, 14, -6, 9, -12, 15, -1, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-a";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, -6, 4, 4, 2, -4, -4, -8, -8, 6, -10, -10, 12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-b";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -6, 4, 4, 2, 4, 4, 0, 0, 14, 6, 6, -12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-c";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, -4, -4, 10, 12, 12, 8, 8, 10, 6, 6, -4, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-d";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, -4, 6, 4, 4, 2, -8, -8, 12, 12, -4, -6, -6, 0, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-e";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, 2, -4, -4, -6, 4, -4, -8, 0, -2, -10, 6, 4, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-f";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 2, -4, -4, -6, -4, 4, 0, -8, -2, 6, -10, -4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-a";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, -6, 8, 4, -6, 4, -4, 0, -4, 2, 6, -10, 12, 4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-b";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 2, 0, -4, 2, 4, -4, 0, -4, -10, -10, 6, 12, -12, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-c";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 6, -4, 0, -2, -8, 12, 0, -8, -2, 6, -2, 8, 12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-d";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 6, 4, 0, -2, 8, 12, 0, 8, 2, 6, -2, -8, 12, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-e";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, 0, -4, 2, -4, -4, 0, 4, 10, -10, 6, -12, -12, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-f";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, -6, -8, 4, -6, -4, -4, 0, 4, -2, 6, -10, -12, 4, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.4-a";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -4, -6, 4, 4, -2, 8, 8, -12, 12, 4, 6, -6, 0, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.4-b";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, 2, 8, 4, 6, 8, -8, 4, -8, 8, -2, 10, 8, 0, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.4-c";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, 2, -8, 4, 6, -8, -8, 4, 8, -8, -2, 10, -8, 0, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.4-d";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 4, -6, -4, 4, -2, -8, 8, -12, -12, -4, 6, -6, 0, 0, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-a";
N := (10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -6, 0, -2, -4, 8, 12, -6, 4, -12, 6, 2, 6, 4, -6, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-b";
N := (10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, 0, 2, -4, -8, 12, 6, 4, -12, 6, 2, -6, 4, 6, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-c";
N := (10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, 2, -4, -4, 4, 10, 4, 12, -6, -6, 14, -4, 10, 6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-d";
N := (10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -4, -2, -4, 4, 4, -10, 4, 12, -6, -6, -14, -4, -10, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-e";
N := (10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -4, -2, 4, 4, 4, 10, -4, 12, 6, -6, -14, -4, 10, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-f";
N := (10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 4, 2, 4, -4, 4, -10, -4, 12, 6, -6, 14, -4, -10, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-g";
N := (10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 6, 0, 2, 4, -8, 12, -6, -4, -12, -6, 2, -6, 4, -6, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-h";
N := (10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 6, 0, -2, 4, 8, 12, 6, -4, -12, -6, 2, 6, 4, 6, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.8-a";
N := (9*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 4, 4, -4, 8, 4, 8, 4, -8, 0, 14, -4, -6, 8, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.8-b";
N := (9*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, -4, 4, 4, 8, 4, -8, 4, -8, 0, -14, -4, -6, -8, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.8-c";
N := (9*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, -4, -4, -4, -8, -4, -8, 4, -8, 0, 14, 4, -6, -8, 4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.8-d";
N := (9*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 4, -4, 4, -8, -4, 8, 4, -8, 0, -14, 4, -6, 8, 4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-a";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, -6, 4, 8, -6, -4, 4, -4, 0, 2, -10, 6, 4, 12, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-b";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 2, -4, 0, 2, -4, 4, -4, 0, -10, 6, -10, -12, 12, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-c";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 6, 0, -4, -2, 12, -8, -8, 0, -2, -2, 6, 12, 8, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-d";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 6, 0, 4, -2, 12, 8, 8, 0, 2, -2, 6, 12, -8, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-e";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 2, -4, 0, 2, -4, -4, 4, 0, 10, 6, -10, -12, -12, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-f";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, -6, 4, -8, -6, -4, -4, 4, 0, -2, -10, 6, 4, -12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.5-a";
N := (-4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 4, -6, 4, 4, -2, 8, 8, 12, -12, 4, -6, 6, 0, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.5-b";
N := (-4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 2, 4, 8, 6, -8, 8, -8, 4, 8, 10, -2, 0, 8, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.5-c";
N := (-4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, 2, 4, -8, 6, -8, -8, 8, 4, -8, 10, -2, 0, -8, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.5-d";
N := (-4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -4, -6, 4, -4, -2, 8, -8, -12, -12, -4, -6, 6, 0, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-a";
N := (10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 6, 0, -4, -2, 8, -6, 12, -12, 4, 6, 6, 2, -6, 4, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-b";
N := (10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, 0, -4, 2, -8, 6, 12, -12, 4, 6, -6, 2, 6, 4, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-c";
N := (10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 4, -4, 2, -4, 10, 4, 12, 4, -6, 14, -6, 10, -4, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-d";
N := (10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -4, -4, -2, 4, -10, 4, 12, 4, -6, -14, -6, -10, -4, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-e";
N := (10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -4, 4, -2, 4, 10, 4, 12, -4, 6, -14, -6, 10, -4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-f";
N := (10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, 4, 2, -4, -10, 4, 12, -4, 6, 14, -6, -10, -4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-g";
N := (10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 6, 0, 4, 2, -8, -6, 12, -12, -4, -6, -6, 2, -6, 4, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-h";
N := (10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -6, 0, 4, -2, 8, 6, 12, -12, -4, -6, 6, 2, 6, 4, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.9-a";
N := (-9*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, -2, 4, 8, -4, 4, 4, 8, 0, -8, 14, -6, -4, 4, 8, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.9-b";
N := (-9*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -4, 2, 4, 8, 4, 4, 4, -8, 0, -8, -14, -6, -4, 4, -8, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.9-c";
N := (-9*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, -2, -4, -8, -4, -4, 4, -8, 0, -8, 14, -6, 4, 4, -8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.9-d";
N := (-9*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 4, 2, -4, -8, 4, -4, 4, 8, 0, -8, -14, -6, 4, 4, 8, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 257.1-a";
N := (-8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, 4, 2, -2, 7, -6, 8, -2, -5, 1, 0, 2, 9, -4, 0, 0, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 257.1-b";
N := (-8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 4, -4, 4, 1, 6, 2, 4, -8, 7, 12, -4, 6, -4, 6, 12, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 257.2-a";
N := (8*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 2, 4, -2, -6, 7, 8, -5, -2, 0, 1, 2, -4, 9, 0, 0, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 257.2-b";
N := (8*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -4, 4, 4, 6, 1, 2, -8, 4, 12, 7, -4, -4, 6, 12, 6, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 263.1-a";
N := (-8*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, 4, 4, 2, 0, -8, -2, 4, 6, -6, 8, 8, 2, -14, 8, 4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 263.2-a";
N := (8*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 4, 4, 2, -8, 0, -2, 6, 4, 8, -6, 8, -14, 2, 4, 8, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-a";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, 8, -8, -2, 6, 4, 0, 8, 12, -2, -2, 6, 6, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-b";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 6, 4, 0, 2, 12, -4, -8, 0, -2, -10, -10, 0, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-c";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -5, -1, 2, -7, -3, 3, 2, -3, -6, -3, -1, -9, 6, -5, 7, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-d";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 0, 8, 6, 6, 4, 0, -8, 12, -2, -2, 6, -2, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-e";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -7, -1, -6, -1, 5, -7, 2, -1, 6, -3, -13, 3, -6, -9, -3, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-f";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, 5, -6, -1, 5, -1, -10, -7, -6, -9, 5, -9, 6, -15, 3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-a";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, 8, -2, -8, 6, 0, 4, 12, 8, -2, 6, -2, -4, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-b";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 6, 0, 4, 2, -4, 12, 0, -8, -2, -10, -10, 4, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-c";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, -5, 2, -3, -7, 3, -3, 2, -3, -6, -1, 6, -9, 7, -5, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-d";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 0, 6, 8, 6, 0, 4, 12, -8, -2, 6, -2, 12, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-e";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -1, -7, -6, 5, -1, -7, -1, 2, -3, 6, -13, -6, 3, -3, -9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-f";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, 5, -6, 5, -1, -1, -7, -10, -9, -6, 5, 6, -9, 3, -15, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 271.1-a";
N := (-8*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -4, -1, 3, 2, 5, 2, -10, -4, 0, 6, 5, 0, -12, -15, 0, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 271.2-a";
N := (-8*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -1, -4, 3, 5, 2, 2, -4, -10, 6, 0, 5, -12, 0, 0, -15, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.2-a";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -4, 0, 2, 4, -8, -8, 8, 10, 6, -2, -4, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.2-b";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -7, -7, -8, -3, -12, 5, -3, -11, -8, -4, 11, -10, 0, 6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.2-c";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, -4, 4, -6, 12, -4, 0, -8, -2, -10, -10, -4, 12, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.2-d";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -6, -3, -1, -4, 3, -8, -1, -7, -3, 0, 0, 5, 10, 8, 2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-a";
N := (-9*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, 2, -4, 4, -6, 4, -4, 0, 0, -2, 6, 6, -12, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-b";
N := (-9*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 1, 5, -8, -1, -4, -11, 3, -9, 4, 12, -3, -6, 0, -10, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-c";
N := (-9*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -6, 0, 4, 2, 8, -4, -8, -8, -6, 6, -2, 0, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.3-a";
N := (2*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 0, -4, 2, -8, 4, 8, -8, 10, -2, 6, 0, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.3-b";
N := (2*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, 6, -8, -7, -3, 5, -12, -11, -3, -8, 11, -4, 0, -10, 7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.3-c";
N := (2*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 4, -4, -6, -4, 12, -8, 0, -2, -10, -10, 12, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.3-d";
N := (2*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -3, -6, -4, -1, 3, -1, -8, -3, -7, 0, 5, 0, 8, 10, -5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-a";
N := (-9*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, 2, 4, -4, -6, -4, 4, 0, 0, -2, 6, 6, 12, -12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-b";
N := (-9*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 1, -2, -8, 5, -1, -11, -4, -9, 3, 4, -3, 12, 0, -6, -11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-c";
N := (-9*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -6, 4, 0, 2, -4, 8, -8, -8, -6, -2, 6, 4, 0, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 274.1-a";
N := (-11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 5, -3, -4, 8, 2, 8, -1, 6, -12, 5, -3, -6, -9, 3, 5, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 274.4-a";
N := (11*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 5, 2, -3, 8, -4, 2, -1, 8, -12, 6, 5, -6, -3, 3, -9, -16, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 281.1-a";
N := (-10*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -2, -1, 6, 4, 1, 7, -12, 7, 2, 7, 9, 2, -5, -9, -15, 9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 281.2-a";
N := (-10*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, -1, -2, 6, 1, 4, 7, 7, -12, 7, 2, 9, -5, 2, -15, -9, 10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-a";
N := (-12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 0, 0, 2, 2, 4, -8, -8, -2, 4, -4, 6, 4, -4, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-b";
N := (-12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -1, -5, -7, -11, 9, 6, -6, 2, 2, -2, -12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-a";
N := (-6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, -2, 0, 0, 6, 4, -4, -8, 8, -10, -6, -6, 0, 0, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-b";
N := (-6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, -4, 0, 2, -12, -4, 8, 12, 6, -6, 6, -12, 4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-c";
N := (-6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -6, 4, 4, -6, -4, -12, 0, -8, 6, -2, -10, -4, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-d";
N := (-6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 0, 8, -2, 2, -4, -8, 0, 6, 4, 12, 6, -12, 12, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-e";
N := (-6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 0, -8, -2, 4, 4, 8, -8, -2, -6, 2, 0, -8, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-f";
N := (-6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, -4, 0, 2, 4, -4, 8, 4, 2, -6, 14, -4, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-g";
N := (-6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 4, 4, 2, 12, -4, 0, 0, 10, -2, -10, 4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-h";
N := (-6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 4, 0, 6, -6, 4, 8, -8, 2, 8, 0, 6, 12, 12, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-a";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 6, -8, 0, 2, 4, -12, 8, 8, -10, -10, -6, 4, -4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-b";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 6, 4, 4, -6, 4, -8, 0, 4, 2, 14, -6, 0, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-c";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -5, 2, 1, 5, -3, -1, -5, -10, -12, 10, -4, 6, 6, -10, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-d";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 6, 4, -4, -6, 4, 8, 0, 4, -2, 14, -6, 0, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-e";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 6, -8, 0, 2, 4, 12, -8, 8, 10, -10, -6, 4, 4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-f";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 5, 2, 1, -5, -3, -1, 5, 10, -12, -10, -4, 6, 6, 10, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-g";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -1, -6, -3, -7, 1, -9, -5, -2, 4, 10, -4, -2, -10, 6, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-h";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 1, -6, -3, 7, 1, -9, 5, 2, 4, -10, -4, -2, -10, -6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.2-a";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 2, 0, 2, -8, 4, -2, -8, 4, 6, -4, -4, 4, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.2-b";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -5, -1, -7, 9, -11, -6, 6, 2, -2, 2, 4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-a";
N := (6*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, -2, 0, 0, 6, -4, 4, 8, -8, -10, -6, -6, 0, 0, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-b";
N := (6*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -2, 0, -4, 2, -4, -12, 12, 8, 6, 6, -6, 4, -12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-c";
N := (6*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -6, 4, 4, -6, -12, -4, -8, 0, 6, -10, -2, 4, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-d";
N := (6*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, -2, 8, 2, -8, -4, 6, 0, 4, 6, 12, 12, -12, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-e";
N := (6*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -8, 0, -2, 4, 4, -8, 8, -2, 2, -6, -8, 0, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-f";
N := (6*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 0, -4, 2, -4, 4, 4, 8, 2, 14, -6, -4, -4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-g";
N := (6*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 4, 4, 2, -4, 12, 0, 0, 10, -10, -2, -12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-h";
N := (6*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 4, 6, 0, -6, 8, 4, 2, -8, 8, 6, 0, 12, 12, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-a";
N := (-9*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 6, 0, -8, 2, -12, 4, 8, 8, -10, -6, -10, -4, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-b";
N := (-9*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 6, 4, 4, -6, -8, 4, 4, 0, 2, -6, 14, -4, 0, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-c";
N := (-9*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -5, 2, 5, 1, -3, -5, -1, -12, -10, 10, 6, -4, -10, 6, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-d";
N := (-9*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 6, -4, 4, -6, 8, 4, 4, 0, -2, -6, 14, 4, 0, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-e";
N := (-9*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, 6, 0, -8, 2, 12, 4, 8, -8, 10, -6, -10, 4, 4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-f";
N := (-9*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 5, 2, -5, 1, -3, 5, -1, -12, 10, -10, 6, -4, 10, 6, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-g";
N := (-9*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 3, -6, -7, -3, 1, -5, -9, 4, -2, 10, -2, -4, 6, -10, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-h";
N := (-9*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, -6, 7, -3, 1, 5, -9, 4, 2, -10, -2, -4, -6, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-a";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 6, -2, -2, 4, 4, 6, -4, -4, 0, 0, -2, -6, -6, 12, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.1-a";
N := (-13*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 4, 4, 0, 2, 4, 2, -12, 2, 0, -4, 5, 11, -4, -4, -8, -6, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.1-b";
N := (-13*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -4, 0, 2, -4, 2, -4, 2, 0, 12, 5, -9, 12, 12, 0, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.1-c";
N := (-13*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 2, -6, -4, -4, 2, 4, -8, -4, 8, -10, -6, -2, -4, 0, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.2-a";
N := (7*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, -2, 2, 8, 4, 10, 8, 4, -8, -12, 6, -2, 14, 0, -4, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.2-b";
N := (7*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -2, -5, -3, -5, -1, -7, -6, 1, -3, 5, -10, 12, -8, 0, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.4-a";
N := (13*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 4, 4, 0, 4, 2, 2, 2, -12, -4, 0, 5, -4, 11, -8, -4, -5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.4-b";
N := (13*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -4, 0, -4, 2, 2, 2, -4, 12, 0, 5, 12, -9, 0, 12, -1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.4-c";
N := (13*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 6, -6, -4, -4, 2, -8, 4, 8, -4, -10, -2, -6, 0, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.3-a";
N := (7*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -6, 2, 4, 8, 10, 4, 8, -12, -8, 6, 14, -2, -4, 0, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.3-b";
N := (7*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -1, -5, -5, -3, -1, -6, -7, -3, 1, 5, 12, -10, 0, -8, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.1-a";
N := (w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -6, -2, -4, 0, 2, -8, -4, 8, -8, 6, -10, 2, 0, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.1-b";
N := (w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -3, 4, 2, 0, -7, -2, 8, 8, 7, -6, 11, 2, 6, -7, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.2-a";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, -4, -1, 0, 7, -2, -2, -2, -8, 3, -1, 2, -4, 8, 6, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.2-b";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -2, 8, 0, 2, 6, 6, 0, 8, -12, 2, -10, 10, -6, 4, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.2-c";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -4, 2, -4, 0, -2, -2, -2, -8, -8, -12, -10, 14, 2, 2, -12, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.2-d";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 4, -7, 0, 5, 6, -6, -6, 8, 3, 5, 14, 4, 0, 10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.2-e";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, 6, 0, -4, -6, -2, 10, -8, -8, 12, -2, 6, -6, -10, 4, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.4-a";
N := (w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, 2, -2, 0, -4, 2, -4, -8, -8, 8, 6, 2, -10, -4, 0, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.4-b";
N := (w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -4, 4, 0, 2, -7, 8, -2, 7, 8, -6, 2, 11, -7, 6, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.3-a";
N := (9*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 2, -1, 7, 0, -2, -2, -2, 3, -8, -1, -4, 2, 6, 8, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.3-b";
N := (9*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 0, 8, 2, 0, 6, 0, 6, -12, 8, 2, 10, -10, 4, -6, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.3-c";
N := (9*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, -4, -4, -2, 0, -2, -8, -2, -12, -8, -10, 2, 14, -12, 2, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.3-d";
N := (9*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, -6, -7, 5, 0, 6, -6, -6, 3, 8, 5, 4, 14, 10, 0, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 302.3-e";
N := (9*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 4, 0, -6, -4, -2, -8, 10, 12, -8, -2, -6, 6, 4, -10, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.1-a";
N := (8*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -2, 0, 2, 0, 4, 8, 12, 4, 10, -6, 0, -12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.1-b";
N := (8*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -6, 2, -10, -4, 2, -6, 0, -4, -6, 6, -12, 6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.3-a";
N := (10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 6, -2, 2, 4, 10, 4, -4, 8, 0, 2, 6, -2, -12, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.3-b";
N := (10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 2, 4, -2, 4, 0, -8, -8, 6, 14, -6, -4, -12, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.3-c";
N := (10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -3, -1, -7, -5, -8, 10, 6, 7, -8, -6, -1, 6, -10, -3, 2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.3-d";
N := (10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -2, 4, 6, 0, -4, -4, 8, -2, -2, -6, 0, -4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.4-a";
N := (10*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 2, 6, 0, -8, -4, 6, -12, 0, -6, 2, 0, 0, 0, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.4-b";
N := (10*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, -2, 4, -2, -8, 12, 4, 0, 6, -2, -14, 8, -12, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.4-c";
N := (10*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 4, -2, -2, -2, 6, -8, 0, 10, -6, -6, 2, -6, -12, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.4-d";
N := (10*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, -6, 0, 10, 8, 12, 0, -12, -6, -10, 6, 0, 12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.4-e";
N := (10*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -6, -8, -6, 0, -4, -8, -12, -10, -10, -2, -8, 12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.4-f";
N := (10*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -4, -2, -2, -2, -2, 0, -8, -6, 6, 10, 10, 2, -12, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.7-a";
N := (-3*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 1, 1, 3, -1, -4, -10, 10, -9, -12, -2, 3, -6, -6, 3, 14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.7-b";
N := (-3*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 4, -6, 6, 6, -6, 4, 12, 2, -6, 2, -14, -10, 12, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.7-c";
N := (-3*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -6, -4, -6, -4, 4, -8, 0, -2, -10, -2, 12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.7-d";
N := (-3*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, 4, 2, -2, 6, 2, -4, 4, -6, -10, 2, -6, 14, -4, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.7-e";
N := (-3*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -3, 1, 7, -5, 4, -2, -6, -1, 12, 6, -5, 10, 2, -9, -2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.8-a";
N := (-11*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 6, -2, -4, -6, 8, 8, -8, -4, 10, -2, -10, 4, 0, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.2-a";
N := (8*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, -2, 0, 2, 4, 0, 12, 8, 4, -6, 10, -12, 0, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.2-b";
N := (8*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, -6, 2, -10, 2, -4, 0, -6, -4, 6, -6, 6, -12, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.6-a";
N := (10*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 6, 2, 4, 10, -4, 4, 0, 8, 2, -2, 6, -4, -12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.6-b";
N := (10*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 2, 4, -2, 0, 4, -8, -8, 6, -6, 14, -12, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.6-c";
N := (10*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, -3, -7, -5, -8, 6, 10, -8, 7, -6, 6, -1, -3, -10, 7, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.6-d";
N := (10*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, 4, 6, -4, 0, 8, -4, -2, -6, -2, -4, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.5-a";
N := (10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 0, 6, 0, -8, 6, -4, 0, -12, -6, 0, 2, 0, 0, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.5-b";
N := (10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, -2, 4, -2, 12, -8, 0, 4, 6, -14, -2, -12, 8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.5-c";
N := (10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -2, -2, -2, -2, -8, 6, 10, 0, -6, 2, -6, -12, -6, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.5-d";
N := (10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, -6, 0, 10, 12, 8, -12, 0, -6, 6, -10, 12, 0, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.5-e";
N := (10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -6, -8, -6, -4, 0, -12, -8, -10, -2, -10, 12, -8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.5-f";
N := (10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -6, -2, -2, -2, 0, -2, -6, -8, 6, 10, 10, -12, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.10-a";
N := (3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 1, 1, 3, -1, -4, 10, -10, -12, -9, -2, -6, 3, 3, -6, -5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.10-b";
N := (3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, -2, -6, 6, 6, 4, -6, 2, 12, -6, -14, 2, 12, -10, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.10-c";
N := (3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -6, -4, -6, 4, -4, 0, -8, -2, -2, -10, -4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.10-d";
N := (3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 4, -6, 2, -2, 6, -4, 2, -6, 4, -10, -6, 2, -4, 14, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.10-e";
N := (3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 1, -3, 7, -5, 4, -6, -2, 12, -1, 6, 10, -5, -9, 2, -13, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 304.9-a";
N := (-11*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 6, -2, -4, -6, 8, 8, -4, -8, 10, -10, -2, 0, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-a";
N := (9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, -2, 0, -4, -8, -12, -10, 0, -6, -6, 0, 2, 12, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-b";
N := (9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, -8, -4, 6, -4, -12, 12, -8, -6, -2, 2, 8, -4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-c";
N := (9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 0, -4, -2, 4, -4, 4, 0, -10, -2, -6, 0, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.2-a";
N := (9*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 0, -2, -4, -12, -8, 0, -10, -6, 0, -6, 12, 2, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.2-b";
N := (9*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -4, -8, 6, -12, -4, -8, 12, -6, 2, -2, -4, 8, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.2-c";
N := (9*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -4, 0, -2, -4, 4, 0, 4, -10, -6, -2, -4, 0, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.1-a";
N := (-9*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 6, 5, -3, 5, 6, 4, -1, -8, -9, 6, 7, -12, 7, 8, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.1-b";
N := (-9*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -2, 2, 4, 0, 2, -4, 8, 4, 8, -6, 6, 6, -4, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.1-c";
N := (-9*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 1, 0, -7, -1, -6, -8, -2, -7, 0, -10, -3, -11, -2, 5, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.1-d";
N := (-9*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -1, 0, 5, -7, 2, -4, 2, -9, -6, 14, 9, -3, 0, -9, 14, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.1-e";
N := (-9*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -2, 1, -5, -3, 2, 8, -13, 8, 13, 6, -9, -12, -11, -4, -14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.1-f";
N := (-9*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -7, -4, -5, -1, -2, 4, -6, -7, -6, 2, -7, -5, 4, 7, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.2-a";
N := (-5*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 6, -4, -3, 5, 1, -2, 7, -4, -13, 8, -2, -4, -9, -8, 3, 14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.2-b";
N := (-5*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, -2, -2, -6, 0, -8, 4, -8, 8, 12, -2, -6, -14, 4, 6, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.2-c";
N := (-5*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, -2, -8, 3, 0, -2, -2, 10, 2, -6, 10, -12, -14, -5, -12, -2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.2-d";
N := (-5*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 5, -4, -6, -7, 2, -10, -10, 8, 6, -6, -4, -6, 0, 3, 0, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.2-e";
N := (-5*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 2, -2, -2, -8, -8, -8, -8, 0, -8, -6, 10, 10, -12, 14, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.4-a";
N := (9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, -4, 5, 5, -3, 6, -1, 4, -9, -8, 6, -12, 7, 8, 7, 14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.4-b";
N := (9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 6, 2, 0, 4, 2, 8, -4, 8, 4, -6, 6, 6, 4, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.4-c";
N := (9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, -2, 0, -1, -7, -6, -2, -8, 0, -7, -10, -11, -3, 5, -2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.4-d";
N := (9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, -4, 0, -7, 5, 2, 2, -4, -6, -9, 14, -3, 9, -9, 0, -16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.4-e";
N := (9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, 0, 1, -3, -5, 2, -13, 8, 13, 8, 6, -12, -9, -4, -11, -2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.4-f";
N := (9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -7, 0, -4, -1, -5, -2, -6, 4, -6, -7, 2, -5, -7, 7, 4, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.3-a";
N := (-5*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -4, 6, -3, 1, 5, -2, -4, 7, 8, -13, -2, -9, -4, 3, -8, 10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.3-b";
N := (-5*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -4, -2, 0, -6, -8, -8, 4, 12, 8, -2, -14, -6, 6, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.3-c";
N := (-5*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -1, -8, 0, 3, -2, 10, -2, -6, 2, 10, -14, -12, -12, -5, 7, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.3-d";
N := (-5*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, 5, -6, 2, -7, -10, 8, -10, -6, 6, -4, 0, -6, 0, 3, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.3-e";
N := (-5*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 0, -2, -8, -2, -8, -8, -8, -8, 0, -6, 10, 10, 14, -12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-a";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 2, 0, 0, 6, 4, 4, -8, -8, 10, 6, 6, 0, 0, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-b";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, 2, 2, 8, -4, -4, -12, -12, -4, 6, 6, 6, 6, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-c";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, -4, -4, -10, -4, -4, 0, 0, 8, -12, 12, -12, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-d";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 2, 2, 8, -4, -4, 12, 12, -4, -6, -6, -6, -6, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-e";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, -4, -4, 2, -4, -4, 0, 0, 14, -6, -6, -12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-f";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, -4, -4, -10, -4, -4, 0, 0, 8, 12, -12, 12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-a";
N := (9*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -7, 0, -1, -7, 5, 5, -13, 0, 0, 2, 0, 0, 0, 0, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-b";
N := (9*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 1, 0, 7, -7, -3, -7, -9, -6, -10, 6, 14, -2, -8, -8, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-a";
N := (9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -7, 5, 0, -7, -1, 5, -13, 5, 0, 0, 2, 0, 0, 0, 0, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-b";
N := (9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, 0, -7, 7, -3, -9, -7, -10, -6, 6, -2, 14, -8, -8, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 331.1-a";
N := (-6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, 1, -6, 0, -2, 3, -2, 8, 5, -8, 7, 10, 8, -8, 0, 12, -16, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 331.2-a";
N := (6*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -6, 1, 0, 3, -2, -2, 5, 8, 7, -8, 10, -8, 8, 12, 0, 3, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.1-a";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 0, -1, 1, 2, 4, -6, 10, -2, -4, -9, 10, 3, -8, -14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.1-b";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -6, -8, 4, -4, -4, 8, 10, -8, -8, -2, 10, -2, -4, -10, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.1-c";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 7, 0, 4, -1, -1, -2, -12, 2, 6, 6, 8, 5, -2, -3, 4, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.1-d";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 0, -4, 4, -4, -8, 6, -8, -8, -10, -6, -2, -12, -14, 10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.1-e";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -1, -4, 0, 5, -7, 2, 8, 2, 6, 6, -4, 9, -6, -3, 0, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.1-f";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 2, -4, -4, 2, -12, -8, 8, 0, -10, 6, -10, 4, 8, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.2-a";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 3, 0, 1, -1, 2, -6, 4, -2, 10, -4, 10, -9, -8, 3, -2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.2-b";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 4, -8, -4, 4, -4, 10, 8, -8, -8, -2, -2, 10, -10, -4, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.2-c";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 7, 4, -1, -1, -2, 2, -12, 6, 6, 8, -2, 5, 4, -3, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.2-d";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 0, 4, -4, -4, 6, -8, -8, -8, -10, -2, -6, -14, -12, 16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.2-e";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, -1, 0, -7, 5, 2, 2, 8, 6, 6, -4, -6, 9, 0, -3, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.2-f";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, -4, -4, 2, -8, -12, 0, 8, -10, -10, 6, 8, 4, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-a";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 4, -4, 2, 4, 4, 0, 8, -2, -2, -2, 4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-b";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, -4, -1, -4, 2, -1, -12, 6, 5, 6, 3, 9, -6, 8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-c";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, -2, -2, -8, 8, -8, 10, -6, -10, 4, -12, 6, 6, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.3-a";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -2, 2, -4, -4, 6, 12, -4, 8, 0, 2, 10, -6, -4, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.4-a";
N := (9*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, -2, 6, 6, -6, 0, -12, -4, 6, -6, 6, 0, 0, 8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.4-b";
N := (9*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 4, -6, -2, -4, 4, -11, 1, 3, 0, 4, -12, -3, -9, -9, 2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.4-c";
N := (9*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -6, 0, 0, 2, -4, 12, 8, 12, -2, 14, -6, -4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.4-d";
N := (9*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 0, 0, -6, 8, 5, -3, -13, 6, -8, -10, 9, 11, 7, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.4-e";
N := (9*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 0, 0, -6, -8, -5, 3, -13, -6, 8, 10, -9, -11, 7, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.4-f";
N := (9*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, -6, 2, -4, -4, 11, -1, 3, 0, -4, 12, 3, 9, -9, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.4-g";
N := (9*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -2, -6, 6, 6, 0, 12, -4, -6, 6, -6, 0, 0, 8, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.2-a";
N := (-13*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -4, 4, 2, 4, 4, 8, 0, -2, -2, -2, 12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.2-b";
N := (-13*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, -1, -4, -4, -1, 2, 6, -12, 5, 3, 6, -6, 9, 5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.2-c";
N := (-13*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, -2, -2, -8, -8, 8, -6, 10, -10, -12, 4, 6, 6, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.6-a";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -2, 2, -4, -4, 6, -4, 12, 0, 8, 2, -6, 10, -4, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.5-a";
N := (9*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, -2, 6, 6, -6, -12, 0, 6, -4, -6, 0, 6, 8, 0, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.5-b";
N := (9*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 4, -6, -4, -2, 4, 1, -11, 0, 3, 4, -3, -12, -9, -9, -14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.5-c";
N := (9*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -6, 0, 0, 2, 12, -4, 12, 8, -2, -6, 14, 4, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.5-d";
N := (9*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 0, -6, 0, 8, -3, 5, 6, -13, -8, 9, -10, 7, 11, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.5-e";
N := (9*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 0, -6, 0, -8, 3, -5, -6, -13, 8, -9, 10, 7, -11, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.5-f";
N := (9*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, -6, -4, 2, -4, -1, 11, 0, 3, -4, 3, 12, -9, 9, 14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.5-g";
N := (9*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -2, 6, -6, 6, 12, 0, -6, -4, 6, 0, -6, 8, 0, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-a";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 2, 4, -6, 4, -12, 0, 0, 6, 6, 6, 4, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-b";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -7, -5, 6, 4, -6, -12, 3, 0, -6, 9, -5, 0, -7, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-c";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, 2, -8, -6, 4, -6, 0, -6, -6, 6, -6, 10, 12, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-d";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 7, -3, -1, -6, 8, -6, -12, 7, 12, 10, -7, -13, -4, 13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-a";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, -4, -7, 6, 8, -2, -3, 0, 0, -11, -7, 11, -10, -10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-b";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 0, -1, -6, -12, -6, 13, -4, 4, -9, 1, -1, -14, -2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-c";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 2, -6, 4, 10, 4, -4, 8, 8, -10, 6, 14, 4, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-d";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 4, -2, -5, -4, 4, 4, -7, -12, -10, 9, -11, 5, 10, -12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.4-a";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 2, 4, -6, -12, 4, 0, 0, 6, 6, 6, 12, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.4-b";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -7, -5, 6, -6, 4, 3, -12, 0, 9, -6, 0, -5, -2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.4-c";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, 2, -8, -6, -6, 4, -6, 0, -6, -6, 6, 12, 10, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.4-d";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 7, 3, -3, -1, -6, -6, 8, 7, -12, 12, -7, 10, -4, -13, -10, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.3-a";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, -4, -7, 6, -2, 8, 0, -3, 0, -7, -11, -10, 11, -9, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.3-b";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 0, -1, -6, -6, -12, -4, 13, 4, 1, -9, -14, -1, 5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.3-c";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, -6, 4, 10, -4, 4, 8, 8, -10, 14, 6, 12, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.3-d";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -6, -2, -5, -4, 4, 4, -12, -7, -10, -11, 9, 10, 5, 3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.1-a";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 6, -4, 2, 2, -10, 6, 0, 8, -6, 6, -12, 0, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.1-b";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -2, 0, -4, 0, -4, -2, -6, 6, -6, 2, -6, 4, -4, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.2-a";
N := (-10*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -2, -8, -3, -3, -2, -4, -6, 1, 1, -9, -1, -6, -7, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.2-b";
N := (-10*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 6, 6, -4, 2, -2, 0, -6, -6, -6, 14, -4, 4, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.2-c";
N := (-10*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, 0, 2, 2, -4, 8, 0, 6, 2, 6, -6, 12, 0, 14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.6-a";
N := (9*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 6, -4, 1, -5, -6, 4, 6, -7, -5, 3, -13, -14, -1, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.4-a";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 6, 2, -4, 2, -10, 0, 6, 8, 6, -6, 0, -12, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.4-b";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -6, 0, 0, -4, -4, -2, 6, -6, -6, -6, 2, -4, 4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.3-a";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 0, -8, -3, -3, -2, -4, 1, -6, 1, -1, -9, -7, -6, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.3-b";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 6, -4, 6, 2, -2, -6, 0, -6, 14, -6, 4, -4, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.3-c";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 0, 2, 2, -4, 8, 6, 0, 2, -6, 6, 0, 12, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.7-a";
N := (9*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 6, -4, -4, -5, 1, -6, 4, -7, 6, -5, -13, 3, -1, -14, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 349.1-a";
N := (-14*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, 6, 2, 2, -8, -4, -6, -4, 12, 8, 0, -6, -10, 6, -8, -12, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 349.1-b";
N := (-14*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, -3, -4, 2, -5, 2, 3, 2, 6, -4, 6, -9, -4, -9, -8, -3, -7, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 349.2-a";
N := (14*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, 2, 6, 2, -4, -8, -6, 12, -4, 0, 8, -6, 6, -10, -12, -8, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 349.2-b";
N := (14*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 4, -4, -3, 2, 2, -5, 3, 6, 2, 6, -4, -9, -9, -4, -3, -8, 10, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 356.1-a";
N := (-12*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 2, 4, 4, -6, 4, -12, 12, 12, -10, -2, 2, -12, 12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 356.1-b";
N := (-12*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -6, 2, -4, -10, -4, -10, -12, 0, -10, 12, 0, 0, 6, 14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 356.1-c";
N := (-12*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, 2, -4, 8, 8, -10, 0, -12, 2, 6, 12, 12, -6, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 356.3-a";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 1, -4, -3, 1, -7, -1, -10, -6, -8, -2, -9, 12, 12, -12, -10, -6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 356.4-a";
N := (-11*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -1, 4, 1, 3, 1, 3, 8, -6, -8, 2, 9, -4, 10, 6, 0, 8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 356.2-a";
N := (12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 2, 4, 4, -6, -12, 4, 12, 12, -10, 2, -2, 12, -12, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 356.2-b";
N := (12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, -6, -4, 2, -10, -10, -4, 0, -12, -10, 0, 12, 6, 0, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 356.2-c";
N := (12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, -4, 2, 8, -10, 8, -12, 0, 2, 12, 6, -6, 12, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 356.6-a";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -4, 1, -3, -7, 1, -1, -6, -10, -2, -8, -9, 12, 12, -10, -12, -11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 356.5-a";
N := (11*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 4, -1, 1, 1, 3, 3, -6, 8, 2, -8, 9, 10, -4, 0, 6, 9, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 359.1-a";
N := (-10*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, 6, 3, -2, 6, -5, -1, 7, 4, 8, -11, -2, -3, 10, 4, 6, 14, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 359.2-a";
N := (10*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 3, 6, -2, -5, 6, -1, 4, 7, -11, 8, -2, 10, -3, 6, 4, -15, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-a";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 2, 2, -6, 10, 4, 4, 8, 8, 14, 6, 6, 4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-b";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -4, -4, -3, -1, -1, -1, -3, -3, -13, 12, 12, -6, -6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-c";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -2, -2, 2, -6, 4, 4, 8, 8, 10, 6, 6, -12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-d";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 5, 4, 4, -2, 6, -11, -11, 13, 13, 10, -6, -6, 0, 0, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-a";
N := (-10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -1, -5, -3, -1, -8, -11, -1, 6, 12, -7, -9, 12, -12, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-b";
N := (-10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 5, 3, -1, -1, 8, -1, -1, -6, -4, 9, -9, 12, -12, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-c";
N := (-10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, 6, 2, 2, 8, -4, -4, 0, -4, -6, 6, 0, 12, 14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-d";
N := (-10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 5, -3, -7, 5, -4, -1, -1, 0, -4, -9, 3, -12, 6, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.5-a";
N := (w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, 4, 1, -4, 0, -6, 2, 5, 5, -3, -9, -11, 6, -4, -4, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.5-b";
N := (w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, 0, -3, 2, -4, 4, -2, 1, 9, -3, -5, 9, -4, -12, 4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.5-c";
N := (w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -1, 5, 1, -5, -4, -1, -7, -12, 4, 3, -9, 12, 6, 4, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.5-d";
N := (w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -3, -3, -1, -1, 4, 1, -11, 0, -12, -5, -9, -4, -6, 4, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.6-a";
N := (-13*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -1, -7, -8, 4, 6, -1, -2, -1, 1, -7, 3, -4, 10, -11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.6-b";
N := (-13*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, -6, 8, 4, -2, 4, -8, 0, -6, 6, -2, 4, 0, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.4-a";
N := (10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, -2, -5, -1, -3, -8, -1, -11, 6, 12, -9, -7, -12, 12, -3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.4-b";
N := (10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, 2, 3, -1, -1, 8, -1, -1, -6, -4, -9, 9, -12, 12, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.4-c";
N := (10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 6, 2, 2, 8, -4, -4, 0, -4, 6, -6, 12, 0, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.4-d";
N := (10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -4, -3, 5, -7, -4, -1, -1, 0, -4, 3, -9, 6, -12, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.8-a";
N := (w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 4, -1, 1, 0, -4, -6, 5, 2, 5, -3, -11, -9, -4, 6, 7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.8-b";
N := (w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -5, -3, -4, 2, 4, 1, -2, 9, -3, 9, -5, -12, -4, -5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.8-c";
N := (w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, 0, 5, -5, 1, -4, -7, -1, -12, 4, -9, 3, 6, 12, -7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.8-d";
N := (w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, 4, -3, -1, -1, 4, -11, 1, 0, -12, -9, -5, -6, -4, 13, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.7-a";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 0, -7, 4, -8, 6, -2, -1, -1, 1, 3, -7, 10, -4, 0, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.7-b";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, -6, 4, 8, -2, -8, 4, 0, -6, -2, 6, 0, 4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.1-a";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -3, -6, -6, -3, 1, 4, -4, -6, -13, 0, -8, 0, -4, 12, 5, 8, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.1-b";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -4, 6, 4, -8, -6, -2, 4, 4, 12, 6, -10, -6, -12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.1-c";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 5, 2, -6, 5, -1, 8, -4, 2, 3, -12, -4, 0, 0, 0, -3, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.1-d";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 0, 6, 4, 0, 2, -6, -4, -12, 4, -6, -10, 2, 4, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.4-a";
N := (11*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, -3, -6, 1, -3, 4, -6, -4, 0, -13, -8, -4, 0, 5, 12, -13, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.4-b";
N := (11*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, -6, 6, -8, 4, -6, 4, -2, 12, 4, 6, -6, -10, -12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.4-c";
N := (11*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 5, -6, -1, 5, 8, 2, -4, -12, 3, -4, 0, 0, -3, 0, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.4-d";
N := (11*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, -2, 6, 0, 4, 2, -4, -6, 4, -12, -6, 2, -10, -12, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 383.1-a";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -2, 2, 2, 8, 4, 2, 8, -4, 0, 8, 2, 6, 6, 4, 4, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 383.2-a";
N := (2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, 2, -2, 2, 4, 8, 2, -4, 8, 8, 0, 2, 6, 6, 4, 4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.1-a";
N := (-12*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -4, -4, 4, -6, 2, 6, 0, 12, 6, -6, 14, 6, -12, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.1-b";
N := (-12*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 4, 0, -4, 2, -6, 6, 4, 12, 10, -6, 6, -10, 12, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.2-a";
N := (12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, -4, -4, -6, 4, 2, 6, 12, 0, 6, 14, -6, -12, 6, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.2-b";
N := (12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 4, 0, 2, -4, -6, 6, 12, 4, 10, 6, -6, 12, -10, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.1-a";
N := (-14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -7, 3, 5, -1, 8, -1, -7, 0, 0, 3, 6, 6, 6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.1-b";
N := (-14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -1, -7, 7, 1, -8, -1, 5, -8, 4, -13, -10, -6, 6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.1-c";
N := (-14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -5, -5, 1, -7, -2, -1, -1, -8, 10, 3, 4, 2, -8, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.3-a";
N := (-7*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 4, -7, -1, 3, 1, -2, 9, 11, 0, -2, -1, 4, -10, 0, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.2-a";
N := (-14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, 2, 3, -1, 5, 8, -7, -1, 0, 0, 6, 3, 6, 6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.2-b";
N := (-14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 2, -7, 1, 7, -8, 5, -1, 4, -8, -10, -13, 6, -6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.2-c";
N := (-14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -4, -5, -7, 1, -2, -1, -1, 10, -8, 4, 3, -8, 2, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.4-a";
N := (7*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -7, 4, -1, 1, 3, -2, 11, 9, -2, 0, 4, -1, 0, -10, -14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-a";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -6, -4, -4, -10, -10, -6, -6, -10, -6, -6, 12, 12, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-a";
N := (10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 0, 7, 3, 4, -4, -13, 7, -2, -5, -5, 3, 7, 2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-b";
N := (10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, -4, -1, -2, -5, -8, -5, 2, 0, -1, 0, 1, -3, 4, 5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.4-a";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, 5, 5, 5, -2, -1, 8, 12, 2, 3, -9, 12, -8, -9, -14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.4-b";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, 2, -6, 4, -4, -4, 0, -12, 0, -6, -10, 6, 4, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.4-c";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 6, -2, -6, 0, -8, -12, -10, 10, -8, 8, -6, -2, 4, -12, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.4-d";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -5, 3, -3, -2, 9, -4, -8, -2, 11, 9, 4, 4, -9, 10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.4-e";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 2, -4, 4, -4, -4, 0, 8, 6, 6, 6, 4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.4-f";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 1, -3, 1, 6, 11, -8, 4, -6, -1, -9, 4, 8, 15, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-a";
N := (10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 0, 3, 7, -4, 4, 7, -13, -2, -5, -5, 7, 3, 10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-b";
N := (10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -1, -1, -5, -2, -5, -8, 0, 2, -1, 1, 0, 4, -3, -2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.5-a";
N := (-5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 5, -4, 5, -2, 5, 8, -1, 2, 12, 3, 12, -9, -9, -8, -3, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.5-b";
N := (-5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -6, -6, -4, 4, 0, -4, 0, -12, -6, 6, -10, -4, 4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.5-c";
N := (-5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 6, -6, -8, 0, -10, -12, -8, 10, 8, -2, -6, -12, 4, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.5-d";
N := (-5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -5, 0, 3, -2, -3, -4, 9, -2, -8, 11, 4, 9, -9, 4, -5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.5-e";
N := (-5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 2, 4, -4, -4, -4, 8, 0, 6, 6, 6, 12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.5-f";
N := (-5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 1, -4, -3, 6, 1, -8, 11, -6, 4, -1, 4, -9, 15, 8, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-a";
N := (-8*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 4, -2, 4, -4, 12, -4, 0, 8, 6, -6, 8, -4, -10, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-b";
N := (-8*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 1, -4, -6, 5, -8, -4, 1, 4, 0, 8, 11, -1, -14, -8, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-c";
N := (-8*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, -2, 1, -8, -4, 9, -4, -12, 2, -12, -12, 2, 11, 11, 4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-d";
N := (-8*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -4, -1, 0, 2, 5, 8, 8, 5, 0, -12, -4, -9, -9, -6, 0, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-e";
N := (-8*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, 4, -4, -2, -4, 4, 8, 0, 10, 14, 10, -12, 0, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-f";
N := (-8*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 6, -1, -4, -4, -7, -4, 0, -6, -4, 12, -6, 3, -3, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.4-a";
N := (-11*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 5, 3, 3, -2, 4, -9, -4, -1, 7, -7, -6, 0, -11, -2, 9, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-a";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, 4, 4, -2, -4, -4, 12, 8, 0, 6, 8, -6, -10, -4, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-b";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -4, -4, 5, -6, -8, 1, -4, 0, 4, 8, -1, 11, -8, -14, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-c";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -5, -2, -8, 1, -4, -4, 9, 2, -12, -12, 2, -12, 11, 11, -11, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-d";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -1, -4, 0, 5, 2, 8, 5, 8, -12, 0, -4, -9, -9, 0, -6, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-e";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -2, -4, 4, -2, 4, -4, 0, 8, 10, 10, 14, 0, -12, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-f";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, 6, -4, -1, -4, -4, -7, -6, 0, -4, -6, 12, -3, 3, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.5-a";
N := (-11*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 3, 5, 3, 4, -2, -9, -1, -4, -7, 7, -6, -11, 0, 9, -2, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-a";
N := (-16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, -6, -6, -4, -6, -4, -8, 12, -6, 12, 6, -6, -10, 0, -12, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-b";
N := (-16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 2, -4, 8, -2, -12, -4, -4, -8, -2, -10, -10, 4, 12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-c";
N := (-16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -2, 2, 4, 2, -4, 0, 4, -6, -12, 10, 10, 6, -8, -12, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-d";
N := (-16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 6, 2, 2, 2, 8, 2, 0, 0, 2, 0, 6, 12, 12, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-e";
N := (-16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, -6, -4, 2, 8, 8, 8, -6, 12, 2, -6, 6, 0, 12, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-f";
N := (-16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 2, -6, 0, -2, -8, 8, -12, 2, -12, -2, -2, -2, 0, -4, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-g";
N := (-16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 6, 2, -4, 2, 4, 0, -4, 2, 4, 10, 2, -10, -8, -12, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-a";
N := (16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, -4, -6, -6, -4, -4, 12, -8, 12, -6, 6, -10, -6, -12, 0, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-b";
N := (16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, 2, 8, -4, -2, -4, -12, -8, -4, -2, -10, -10, 12, 4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-c";
N := (16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 4, 2, 2, 4, -4, 4, 0, -12, -6, 10, 6, 10, -12, -8, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-d";
N := (16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 6, 2, 2, 2, 2, 8, 0, 0, 2, 6, 0, 12, 12, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-e";
N := (16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, -6, 2, -4, 8, 8, 8, 12, -6, 2, 6, -6, 12, 0, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-f";
N := (16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 0, -6, -2, 0, -8, -12, 8, -12, 2, -2, -2, -2, -4, 0, -14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-g";
N := (16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 4, 2, 2, -4, 4, -4, 0, 4, 2, 10, -10, 2, -12, -8, 6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.1-a";
N := (4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 1, -6, -4, -4, -8, -6, 5, -6, -2, -12, 11, 2, -2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.1-b";
N := (4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, -3, -4, -6, -10, 6, -6, -11, 12, -12, 6, -9, -12, 16, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.2-a";
N := (-12*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, -6, -5, -4, -8, -4, 7, -2, 6, 0, -10, 6, -3, -9, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.2-b";
N := (-12*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -7, 4, -5, 2, -2, -6, -5, -10, -4, 2, 4, -8, -3, 7, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.5-a";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, -6, -8, -2, 12, 2, -8, 8, 6, -2, 12, -4, 4, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.5-b";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 6, -8, -4, 8, -2, -4, 12, -6, -2, 6, -12, 6, 12, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.5-c";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 4, -4, -2, 0, 4, -8, 4, 10, -2, -6, 0, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.5-d";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 4, 8, -10, 4, 8, 0, -12, -2, -6, -6, 12, -12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.5-e";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, -2, 0, -2, -12, -2, 0, -8, -2, -2, 0, -4, 4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.5-f";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 0, 4, 2, -4, 8, 8, 0, -6, 6, 10, 4, -4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.5-g";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 0, 4, 4, 6, -4, 4, 2, -6, -2, 0, 14, 4, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.5-h";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, -2, -4, 2, 4, 2, 0, -12, 10, -6, -12, -12, -12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.5-i";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -6, -8, 0, 6, 12, -4, -8, -12, 6, -6, 6, 12, -12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.5-j";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 2, -4, -4, -6, -4, -12, 0, 8, 2, 6, -10, -4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.6-a";
N := (-10*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, 8, 6, -2, -2, -12, -8, 8, 6, 12, -2, -4, 4, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.6-b";
N := (-10*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, 4, 2, 2, -2, -4, 12, 0, 10, -12, -6, 12, 12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.6-c";
N := (-10*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 0, 0, -2, -4, -4, -12, 0, 2, -10, 10, 4, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.6-d";
N := (-10*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -2, 2, -4, 4, 8, -6, 0, 10, 6, 12, -12, 0, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.6-e";
N := (-10*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, 0, 6, -2, -10, -4, 0, 0, -10, -4, -2, 4, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.6-f";
N := (-10*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -4, 4, 2, 12, 4, 8, 8, -14, -2, -10, 12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.6-g";
N := (-10*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 0, 0, -2, 12, 4, -12, -8, -2, 6, -14, -4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.6-h";
N := (-10*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -8, -4, -10, -8, -4, 12, 0, -2, -6, -6, 12, -12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.6-i";
N := (-10*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 2, -6, 4, 4, 0, 10, 8, 6, 6, 4, -4, -8, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.6-j";
N := (-10*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, -4, -6, 2, -2, 4, 4, 8, -6, -4, -6, -12, -12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.9-a";
N := (w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, 8, 0, 10, -4, 8, 8, -12, -6, -10, -2, 4, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.9-b";
N := (w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -8, 0, 10, 4, 8, 8, 12, 6, -10, -2, -4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.10-a";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -6, 0, 4, 6, -4, -8, -4, 12, 14, 10, 6, -4, 0, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.10-b";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -6, 0, 4, 6, 4, -8, -4, -12, -14, 10, 6, 4, 0, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.4-a";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, -6, 1, -4, -8, -4, 5, -6, -6, -12, -2, 2, 11, 3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.4-b";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, -4, -3, -6, 6, -10, -11, -6, 12, 6, -12, -12, -9, 7, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.3-a";
N := (12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, -5, -6, -4, -4, -8, -2, 7, 6, -10, 0, -3, 6, -10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.3-b";
N := (12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -7, -5, 4, 2, -6, -2, -10, -5, -4, 4, 2, -3, -8, 12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.8-a";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, -8, -6, -2, 2, 12, 8, -8, 6, 12, -2, 4, -4, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.8-b";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 6, -4, -8, 8, -4, -2, -6, 12, -2, -12, 6, 12, 6, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.8-c";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -4, 4, -2, 4, 0, 4, -8, 10, -6, -2, 4, 0, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.8-d";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 8, 4, -10, 8, 4, -12, 0, -2, -6, -6, -12, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.8-e";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, 0, -2, -2, -2, -12, -8, 0, -2, 0, -2, 4, -4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.8-f";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 4, 0, 2, 8, -4, 0, 8, -6, 10, 6, -4, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.8-g";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 4, 0, 4, -4, 6, 2, 4, -6, 0, -2, 4, 14, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.8-h";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, -4, -2, 2, 2, 4, -12, 0, 10, -12, -6, -12, -12, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.8-i";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -6, 0, -8, 6, -4, 12, -12, -8, 6, 6, -6, -12, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.8-j";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 2, -4, -4, -6, -12, -4, 8, 0, 2, -10, 6, -4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.7-a";
N := (10*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, 6, 8, -2, -12, -2, 8, -8, 6, -2, 12, 4, -4, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.7-b";
N := (10*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, 2, 4, 2, -4, -2, 0, 12, 10, -6, -12, 12, 12, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.7-c";
N := (10*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 0, 0, -2, -4, -4, 0, -12, 2, 10, -10, -4, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.7-d";
N := (10*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 2, -2, -4, 8, 4, 0, -6, 10, 12, 6, 0, -12, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.7-e";
N := (10*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, 6, 0, -2, -4, -10, 0, 0, -10, -2, -4, -4, 4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.7-f";
N := (10*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 4, -4, 2, 4, 12, 8, 8, -14, -10, -2, 4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.7-g";
N := (10*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 0, 0, -2, 4, 12, -8, -12, -2, -14, 6, 4, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.7-h";
N := (10*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -4, -8, -10, -4, -8, 0, 12, -2, -6, -6, -12, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.7-i";
N := (10*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -6, 2, 4, 0, 4, 8, 10, 6, 4, 6, -8, -4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.7-j";
N := (10*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, -6, -4, 2, 4, -2, 8, 4, -6, -6, -4, -12, -12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.12-a";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, 0, 8, 10, 8, -4, -12, 8, -6, -2, -10, 12, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.12-b";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 0, -8, 10, 8, 4, 12, 8, 6, -2, -10, 12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.11-a";
N := (11*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -6, 4, 0, 6, -8, -4, 12, -4, 14, 6, 10, 0, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 416.11-b";
N := (11*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -6, 4, 0, 6, -8, 4, -12, -4, -14, 6, 10, 0, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.1-a";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, -5, 0, -4, -4, -2, -4, -8, 10, 4, -2, 4, -1, 12, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.2-a";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -5, 0, 0, -4, -4, -2, -8, -4, 10, 4, 4, -2, 12, -1, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.1-a";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 0, -4, -4, 8, 8, -4, 0, 0, -10, 0, 6, -6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.1-b";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -7, 5, 5, -2, 13, 12, 7, 9, -5, 9, -4, 3, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.1-c";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, 0, -4, -4, -4, 8, -4, 12, 12, 14, 0, 6, -12, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.1-d";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -2, 0, -8, 4, -4, -8, 4, 4, -4, 2, -8, 6, -8, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.1-e";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, 4, 0, 4, -4, -8, -4, -8, 0, -2, 4, -10, 10, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.2-a";
N := (10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 6, -2, -8, 6, 2, -4, -8, 0, -8, -8, 10, 4, -10, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.5-a";
N := (-11*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, 0, 2, 4, -8, 6, 4, 8, 0, 8, -2, 14, 4, -10, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.5-b";
N := (-11*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -4, 0, -6, 0, 0, -2, -4, 0, 0, -8, -6, 6, 0, -6, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.5-c";
N := (-11*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 2, -6, 8, 4, 2, 12, -4, 8, 0, 14, -2, 0, 8, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.4-a";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, 0, -4, -4, 8, -4, 8, 0, 0, -10, 0, -6, 6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.4-b";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -7, 5, 5, -2, 12, 13, 9, 7, -5, 9, 3, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.4-c";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, 0, -4, -4, -4, -4, 8, 12, 12, 14, 0, -12, 6, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.4-d";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -4, 0, 4, -8, -4, 4, -8, -4, 4, 2, -8, -8, 6, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.4-e";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 4, 4, 0, -4, -4, -8, 0, -8, -2, 4, 10, -10, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.3-a";
N := (10*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -6, -2, 6, -8, 2, -8, -4, -8, 0, -8, 10, -10, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.8-a";
N := (-11*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, -4, 2, -8, 4, 6, 8, 4, 8, 0, -2, 14, -10, 4, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.8-b";
N := (-11*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, -4, -6, 0, 0, -2, 0, -4, -8, 0, -6, 6, -6, 0, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.8-c";
N := (-11*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, -6, 4, 8, 2, -4, 12, 0, 8, 14, -2, 8, 0, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 425.1-a";
N := (-10*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 2, 2, 0, 0, 4, 4, 12, 12, -10, -10, -10, 8, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-a";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -7, -3, 6, -5, 7, -7, 7, 3, 12, 2, 6, -4, -14, 4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-b";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -7, 5, -2, -5, -1, 9, -5, -1, -6, 12, -4, -10, 4, 10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-c";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, -2, -6, 4, 4, -6, -4, -4, 0, 0, 6, 6, 12, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-d";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -3, -7, 6, 7, -5, -7, 3, 7, 2, 12, -4, 6, 4, -14, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-e";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 5, -7, -2, -1, -5, 9, -1, -5, 12, -6, -10, -4, 10, 4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 442.2-a";
N := (-11*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 4, -4, -6, -4, 4, 0, 0, 14, -2, 6, -4, -12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 442.2-b";
N := (-11*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -5, 7, 0, 1, -12, -11, -7, -9, 8, -8, 11, -6, 0, 6, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 442.2-c";
N := (-11*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -5, -3, -6, 1, 6, 7, -3, -1, -10, 0, -5, 4, 4, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 442.3-a";
N := (-11*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -4, 4, -6, 4, -4, 0, 0, 14, 6, -2, -12, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 442.3-b";
N := (-11*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -5, 0, 7, 1, -11, -12, -9, -7, 8, 11, -8, 0, -6, -5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 442.3-c";
N := (-11*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -5, -6, -3, 1, 7, 6, -1, -3, -10, -5, 0, 4, 4, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.1-a";
N := (-5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 3, 1, -6, -3, -7, -9, 4, 7, -8, -13, 2, 2, -3, -3, -14, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.1-b";
N := (-5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -6, -2, -4, 0, -2, 8, 4, -8, 0, 2, -2, -10, -8, -12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.1-c";
N := (-5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 0, 0, -4, -6, -4, -2, -4, -12, 0, -2, 2, 6, 6, 0, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.1-d";
N := (-5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 1, -3, -2, 5, -3, 1, -4, -11, 4, 3, 2, -14, 5, -5, 6, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.2-a";
N := (-13*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, -3, -1, -2, 7, -5, 10, -4, 2, 0, -5, -14, -9, -4, -9, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.4-a";
N := (5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 1, 3, -6, -7, -3, -9, 7, 4, -13, -8, 2, -3, 2, -14, -3, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.4-b";
N := (5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -2, -2, 0, -4, -2, 4, 8, 0, -8, 2, -10, -2, -12, -8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.4-c";
N := (5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -2, 0, -6, -4, -4, -4, -2, 0, -12, -2, 6, 2, 0, 6, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.4-d";
N := (5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -3, 1, -2, -3, 5, 1, -11, -4, 3, 4, 2, 5, -14, 6, -5, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.3-a";
N := (-13*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, -1, -1, 7, -2, -5, -4, 10, 0, 2, -5, -9, -14, -9, -4, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-a";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, -7, 1, 2, 5, 10, -6, 12, -1, 7, -6, -14, 1, -12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-b";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -2, -4, -4, 8, 8, 8, 0, 2, -6, 10, 12, -12, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-c";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 2, 4, -6, 4, -10, 4, -12, 4, 10, -4, 0, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-d";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 5, -5, -3, -6, -9, 6, -2, -8, -5, -11, 10, -14, 13, 12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-a";
N := (-15*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -7, 2, 1, 10, 5, 12, -6, -1, -6, 7, 1, -14, -5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-b";
N := (-15*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, -2, -4, -4, 8, 8, 0, 8, 2, 10, -6, -12, 12, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-c";
N := (-15*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, -6, 4, -10, 4, -12, 4, 4, -4, 10, -12, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-d";
N := (-15*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -4, -5, -6, -3, 6, -9, -8, -2, -5, 10, -11, 13, -14, -3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.1-a";
N := (w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -1, 4, 6, 5, -6, 9, -6, 1, -10, 4, -3, 9, 7, 10, -14, -13, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.2-a";
N := (11*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 0, 3, -1, 0, -6, -7, -10, 9, 2, 4, 13, 0, -10, 0, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.4-a";
N := (w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, -1, 6, -6, 5, 9, 1, -6, 4, -10, -3, 7, 9, -14, 10, 7, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.3-a";
N := (11*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -4, 3, 0, -1, -6, -10, -7, 2, 9, 4, 0, 13, 0, -10, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-a";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 8, 4, 2, 4, -12, 0, -12, -2, -2, 14, -4, 0, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-b";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 4, 0, -2, -4, 12, -8, 4, -6, -6, 10, -8, 4, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-c";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 4, 6, 0, 12, -4, -8, 2, 2, -6, 4, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-d";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, 0, -6, 4, 4, 12, 6, 6, -2, 14, -4, 6, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-e";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, -2, -4, 4, 12, -2, -6, 10, 2, 0, 10, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-f";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, -6, -4, -4, 0, 0, 2, -10, 6, 12, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-g";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, -8, 6, 8, -4, 0, -6, 2, 2, -6, -12, 14, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-h";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 0, -6, -8, 4, 0, 0, 6, -14, -10, -4, -12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-i";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -4, 4, 2, 4, 12, 0, 0, -2, -2, -10, -4, 12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-j";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, -2, -8, 0, -8, -12, -6, 6, 6, -8, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-k";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 4, 0, -6, 8, -8, -8, 0, -2, 2, 2, 4, 12, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-l";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 2, -4, 2, 8, -4, 0, 6, -10, 6, 6, 0, 6, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-m";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -8, -8, -2, -4, 4, -4, 8, -6, -2, 10, -12, -12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.4-a";
N := (-9*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -6, 0, -2, 10, 6, 8, 12, 2, -8, 12, 4, 4, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.4-b";
N := (-9*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, -2, 8, 6, -10, 6, 0, 4, 6, -8, -4, -4, -4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-a";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 4, 8, 2, -12, 4, -12, 0, -2, 14, -2, 0, -4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-b";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 0, 4, -2, 12, -4, 4, -8, -6, 10, -6, 4, -8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-c";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 0, 6, 12, 0, -8, -4, 2, -6, 2, -4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-d";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 0, -2, -6, 4, 4, 6, 12, 6, 14, -2, 6, -4, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-e";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -2, -2, 4, -4, -2, 12, -6, 2, 10, 10, 0, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-f";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, -6, -4, -4, 0, 0, 2, 6, -10, -4, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-g";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -8, -2, 6, -4, 8, -6, 0, 2, -6, 2, 14, -12, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-h";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 4, -6, 4, -8, 0, 0, 6, -10, -14, -12, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-i";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 4, -4, 2, 12, 4, 0, 0, -2, -10, -2, 12, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-j";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, -2, 0, -8, -12, -8, -6, 6, 6, -4, -8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-k";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 0, 4, -6, -8, 8, 0, -8, -2, 2, 2, 12, 4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-l";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -4, 2, 2, -4, 8, 6, 0, -10, 6, 6, 6, 0, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-m";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -8, -8, -2, 4, -4, 8, -4, -6, 10, -2, -12, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.5-a";
N := (9*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 0, -6, -2, 6, 10, 12, 8, 2, 12, -8, 4, 4, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.5-b";
N := (9*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, 8, -2, 6, 6, -10, 4, 0, 6, -4, -8, -4, -4, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.1-a";
N := (-14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 7, -1, 4, 0, 4, 4, 5, -2, 2, -4, -11, 0, -4, -2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.1-b";
N := (-14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, 2, -4, 2, 8, 8, 6, 0, 14, -12, 6, 6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.1-c";
N := (-14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 3, -4, 8, -4, -4, 5, 6, -6, -4, 9, 0, 12, 14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.1-d";
N := (-14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 1, -3, -1, 8, 4, -6, -2, -7, -4, 8, 2, 1, -6, -6, -10, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.2-a";
N := (-6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -6, -4, -6, -8, -2, -4, 4, -4, -2, 8, -12, -2, 8, -2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.2-b";
N := (-6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, -6, 2, -4, -10, -4, -4, 0, -6, -4, 6, -6, -6, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.2-c";
N := (-6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -1, 0, -7, 2, -1, -10, 8, 9, -12, -4, 0, -6, -3, -13, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.6-a";
N := (-17*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, -6, -6, 0, -4, 10, 4, 4, 8, -4, -6, -2, -2, 8, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.6-b";
N := (-17*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 5, -8, 1, 2, -1, 2, 4, 3, -4, -12, 4, -2, -3, -13, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.4-a";
N := (14*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 7, 3, -1, 0, 4, 4, 5, 4, 2, -2, -4, 0, -11, -4, 1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.4-b";
N := (14*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, -4, 2, 2, 8, 8, 0, 6, 14, 6, -12, 6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.4-c";
N := (14*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 3, 8, -4, -4, 5, -4, -6, 6, -4, 0, 9, 12, 5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.4-d";
N := (14*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -3, 1, -1, 4, 8, -6, -7, -2, 8, -4, 2, -6, 1, -6, -7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.3-a";
N := (6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 4, -4, -8, -6, -2, 4, -4, -2, -4, 8, -2, -12, 8, 10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.3-b";
N := (6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, -6, -4, 2, -10, -4, -4, -6, 0, -4, -6, 6, -6, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.3-c";
N := (6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 0, 2, -7, -1, 8, -10, -12, 9, -4, -6, 0, -3, -7, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.7-a";
N := (-17*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 6, -6, -4, 0, 10, 4, 4, -4, 8, -6, -2, -2, 8, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 472.7-b";
N := (-17*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 5, -2, -8, 2, 1, -1, 4, 2, -4, 3, -12, -2, 4, -3, -9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.1-a";
N := (10*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, -6, 2, 6, 0, -8, 4, 0, 4, 6, 10, 6, 4, 0, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.2-a";
N := (10*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 2, -6, 6, 0, 4, -8, 4, 0, 6, 6, 10, 0, 4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-a";
N := (-13*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -1, -3, 0, -7, 5, -5, 4, 4, 7, 8, 2, -6, -4, -11, -5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-b";
N := (-13*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, 5, -3, -2, -1, -7, -5, -2, 0, 11, -4, 6, 0, -8, -13, 15, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-c";
N := (-13*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -6, -7, -3, -6, -5, 1, -5, 10, 8, 3, -8, -10, 0, 12, -9, -9, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.2-a";
N := (-11*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 2, -8, -4, 2, -4, 4, 0, -8, -14, -2, -2, 4, 0, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-a";
N := (-13*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 0, -3, -7, 0, 5, 4, -5, 7, 4, 8, -6, 2, -11, -4, 4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-b";
N := (-13*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, -6, -3, -1, -2, -7, -2, -5, 11, 0, -4, 0, 6, -13, -8, 8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-c";
N := (-13*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -7, -6, -3, -5, -6, 1, 10, -5, 3, 8, -8, 0, -10, -9, 12, -16, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.3-a";
N := (11*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 2, -4, -8, 2, 4, -4, -8, 0, -14, -2, -2, 0, 4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-a";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -7, 3, -1, 2, 2, -4, 5, 6, -6, -13, -6, 9, 3, -6, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-b";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -7, 2, 3, 2, -1, 2, 5, -4, -6, 6, -13, 9, -6, -6, 3, -1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-c";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -2, -5, -6, -5, -2, -1, 4, 10, -2, -3, -3, -10, -6, -9, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-d";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 3, -5, -5, -6, -2, 4, -1, -2, 10, -3, -10, -3, -9, -6, -6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.2-a";
N := (11*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -6, -2, -2, 6, 7, -2, 2, -8, -8, -6, -10, 6, -9, 9, 3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.3-a";
N := (11*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -2, -2, 6, -2, 7, 2, -2, -8, -8, -6, 6, -10, 9, -9, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.1-a";
N := (-15*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 4, -2, 0, -4, -1, 4, 8, -2, -5, 4, 9, 0, -15, -2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.1-b";
N := (-15*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 4, 0, 8, 8, 4, 8, -2, -8, -14, 6, -6, -6, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.1-c";
N := (-15*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 2, 8, 2, 12, -12, 0, 12, 6, 6, 2, 0, 4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.2-a";
N := (-11*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 6, 0, 6, 12, -12, 0, 0, 2, -10, -2, -12, 4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.2-b";
N := (-11*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -2, 4, -6, 4, 4, 0, 0, -10, 6, 6, 4, -4, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.2-c";
N := (-11*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 5, 3, 2, -1, 8, -1, 0, -6, -4, 12, -6, 6, 3, -13, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.2-d";
N := (-11*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -4, 2, -8, 12, 0, 0, 12, 6, 6, 10, 0, 8, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.2-e";
N := (-11*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 0, -6, 4, -4, 8, 8, -4, 10, -2, 2, -8, 0, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.2-f";
N := (-11*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -7, -6, 1, 0, -5, 8, -6, -8, 4, -2, 2, -1, -5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.2-g";
N := (-11*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, 5, -2, 3, -6, 1, 4, -6, -2, 8, 0, -4, -11, -9, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.2-h";
N := (-11*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -5, 3, -6, -5, 2, -1, -4, 2, -2, -8, -4, 4, 3, -3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.4-a";
N := (7*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, 0, -2, 8, -8, 4, -2, 8, -2, 2, 4, -10, -4, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.4-b";
N := (7*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -1, -3, -8, -1, -8, 4, 7, -1, -5, -1, 7, -4, 8, 5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.4-c";
N := (7*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -5, -5, 0, -7, 8, -12, -3, 7, 1, 7, 1, 0, 4, -13, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.4-d";
N := (7*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 4, -6, -4, 8, 12, -6, -8, 10, -14, -8, 6, 4, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.4-e";
N := (7*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, 4, 2, 4, 4, -8, 8, -2, -10, -2, -4, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.4-f";
N := (7*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -3, -4, -7, -4, 8, -3, -3, -1, 9, -3, -6, -12, 5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.8-a";
N := (15*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 4, -2, 0, -4, 4, -1, -2, 8, -5, 9, 4, -15, 0, 13, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.8-b";
N := (15*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 4, 0, 8, 4, 8, -2, 8, -8, 6, -14, -6, -6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.8-c";
N := (15*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 2, 8, 2, -12, 12, 12, 0, 6, 2, 6, 4, 0, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.7-a";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 6, 0, 6, -12, 12, 0, 0, 2, -2, -10, 4, -12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.7-b";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -2, 4, -6, 4, 4, 0, 0, -10, 6, 6, -4, 4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.7-c";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 5, 3, 2, -1, -1, 8, -6, 0, -4, -6, 12, 3, 6, 14, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.7-d";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -4, 2, -8, 0, 12, 12, 0, 6, 10, 6, 8, 0, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.7-e";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 0, -6, 4, 8, -4, -4, 8, 10, 2, -2, 0, -8, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.7-f";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -7, -6, 1, -5, 0, -6, 8, -8, -2, 4, -1, 2, -6, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.7-g";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, 5, -2, 3, 1, -6, -6, 4, -2, 0, 8, -11, -4, -16, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.7-h";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -5, 3, -6, -5, -1, 2, 2, -4, -2, -4, -8, 3, 4, -8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.5-a";
N := (7*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, 0, -2, 8, 4, -8, 8, -2, -2, 4, 2, -4, -10, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.5-b";
N := (7*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -1, -3, -8, -1, 4, -8, -1, 7, -5, 7, -1, 8, -4, -7, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.5-c";
N := (7*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -5, -5, 0, -7, -12, 8, 7, -3, 1, 1, 7, 4, 0, -5, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.5-d";
N := (7*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 4, -6, -4, 12, 8, -8, -6, 10, -8, -14, 4, 6, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.5-e";
N := (7*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, 4, 2, 4, 4, 8, -8, -2, -2, -10, -4, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 494.5-f";
N := (7*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -3, -4, -7, 8, -4, -3, -3, -1, -3, 9, -12, -6, -7, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 502.1-a";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 3, 6, -8, -8, -8, -8, 6, -8, -6, 4, -2, -6, -4, 10, -3, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 502.1-b";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 2, -4, 0, 2, 5, -4, -10, -1, 0, 0, -4, -12, -12, 0, 12, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 502.2-a";
N := (11*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, -3, -6, 0, 0, 4, 4, 6, -7, -4, -1, -9, -9, -4, -8, 5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 502.4-a";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, 3, -8, -8, -8, -8, -8, 6, 4, -6, -2, -4, -6, -3, 10, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 502.4-b";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, 2, 0, 5, 2, -4, -1, -10, 0, 0, -4, -12, -12, 12, 0, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 502.3-a";
N := (11*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -3, -6, -6, 0, 0, 4, 6, 4, -4, -7, -1, -9, -9, -8, -4, -2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.1-a";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 2, -4, 0, -6, 0, -6, -4, -4, -10, -12, -2, 10, -12, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.1-b";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, 4, 4, -6, -4, 4, 0, 8, 10, 14, -10, -4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.1-c";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 0, 8, -4, -4, -4, -4, -6, 12, -4, -6, 6, 0, -12, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.3-a";
N := (-11*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 7, 2, -4, 3, 6, 6, -6, -4, -13, -10, 6, 1, 4, 3, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.2-a";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 2, 0, -4, -6, -6, 0, -4, -4, -10, -2, -12, -12, 10, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.2-b";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, 4, 4, -6, 4, -4, 8, 0, 10, -10, 14, -4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.2-c";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, 0, -4, 8, -4, -4, -4, 12, -6, -4, 6, -6, -12, 0, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.6-a";
N := (-11*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 7, 2, 2, 3, -4, 6, -6, 6, -13, -4, -10, 1, 6, 3, 4, 3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-a";
N := (-16*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 2, 0, 4, 2, -4, 4, 0, 4, -10, -10, 6, -12, 12, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-b";
N := (-16*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, -6, -8, -4, -6, -4, 4, 0, 4, 2, 6, -10, -12, -4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-c";
N := (-16*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, -2, -8, 4, -6, 8, 8, -4, 8, 8, 2, 10, 8, 0, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-d";
N := (-16*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 6, 4, 0, -2, 8, -12, 0, 8, -2, 6, -2, -8, -12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-e";
N := (-16*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -2, -2, 4, -8, 6, 8, -4, 8, 8, 2, -10, -2, 8, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-f";
N := (-16*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 2, -2, -4, -8, 6, -8, -4, 8, -8, -2, -10, -2, -8, 12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-g";
N := (-16*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 6, -4, 0, -2, -8, -12, 0, -8, 2, 6, -2, 8, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-h";
N := (-16*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, -2, 8, 4, -6, -8, 8, -4, -8, -8, 2, 10, -8, 0, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-i";
N := (-16*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, -6, 8, -4, -6, 4, 4, 0, -4, -2, 6, -10, 12, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-j";
N := (-16*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, 0, 4, 2, 4, 4, 0, -4, 10, -10, 6, 12, 12, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-a";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, -2, 4, 0, -2, -4, 4, 4, 0, 10, 6, 10, -12, 12, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-b";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -2, 6, 4, 4, -2, 4, 4, -8, 8, -6, -10, 10, -12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-c";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -6, 0, 4, 2, 12, -8, 8, 0, 2, -2, -6, 12, 8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-d";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -2, -4, 4, -10, -12, 12, -8, -8, 10, 6, -6, 4, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-e";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, -2, -4, 4, 6, 4, 4, 0, 8, -2, 6, 10, 4, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-f";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 6, -4, -8, 6, -4, 4, 4, 0, -2, -10, -6, 4, 12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-g";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 6, -4, 8, 6, -4, -4, -4, 0, 2, -10, -6, 4, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-h";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, -2, -4, -4, 6, 4, -4, 0, 8, 2, 6, 10, 4, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-i";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -2, -4, -4, -10, -12, -12, 8, -8, -10, 6, -6, 4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-j";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -6, 0, -4, 2, 12, 8, -8, 0, -2, -2, -6, 12, -8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-k";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 2, 6, 4, -4, -2, 4, -4, 8, 8, 6, -10, 10, -12, 12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-l";
N := (-8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, -2, 4, 0, -2, -4, -4, -4, 0, -10, 6, 10, -12, -12, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-a";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 6, 6, 4, 2, 2, -12, 0, -2, 0, -6, -10, -6, -8, 12, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-b";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 2, 4, -2, -2, 4, -8, 2, 0, 6, 6, -2, 8, 4, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-c";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, -2, -4, 2, 2, 4, -8, -2, 0, -6, 6, 2, 8, 4, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-d";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -6, -6, -4, -2, -2, -12, 0, 2, 0, 6, -10, 6, -8, 12, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-e";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 6, -6, -4, 2, -2, -12, 0, -2, 0, -6, -10, 6, -8, -12, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-f";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, -2, -4, -2, 2, 4, 8, 2, 0, 6, 6, 2, 8, -4, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-g";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, 2, 4, 2, -2, 4, 8, -2, 0, -6, 6, -2, 8, -4, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-h";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -6, 6, 4, -2, 2, -12, 0, 2, 0, 6, -10, -6, -8, -12, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-a";
N := (-2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 6, -6, -6, 0, -6, -8, 10, 0, 0, -6, -6, -12, 0, -6, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-b";
N := (-2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 2, 4, 0, -4, 4, -12, 0, -8, 8, 2, -6, -12, 4, 0, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-c";
N := (-2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 6, 6, 6, 0, 6, -8, -10, 0, 0, -6, -6, 12, 0, 6, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-d";
N := (-2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -2, -4, 0, 4, -4, -12, 0, 8, 8, -2, -6, 12, 4, 0, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-e";
N := (-2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 2, -4, 0, -4, -4, -12, 0, -8, 8, 2, -6, 12, 4, 0, 16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-f";
N := (-2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -6, 6, 6, 0, 6, -8, 10, 0, 0, 6, -6, 12, 0, -6, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-g";
N := (-2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -2, 4, 0, 4, 4, -12, 0, 8, 8, -2, -6, -12, 4, 0, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-h";
N := (-2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -6, -6, -6, 0, -6, -8, -10, 0, 0, 6, -6, -12, 0, 6, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-a";
N := (-16*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 2, 4, 0, 2, 4, -4, 4, 0, -10, 6, -10, 12, -12, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-b";
N := (-16*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, -6, -4, -8, -6, 4, -4, 4, 0, 2, -10, 6, -4, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-c";
N := (-16*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, -2, 4, -8, -6, 8, 8, 8, -4, 8, 10, 2, 0, 8, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-d";
N := (-16*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 6, 0, 4, -2, -12, 8, 8, 0, -2, -2, 6, -12, -8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-e";
N := (-16*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, -2, -8, 4, 6, -4, 8, 8, 8, 2, -2, -10, 12, 8, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-f";
N := (-16*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, -2, -8, -4, 6, -4, -8, -8, 8, -2, -2, -10, 12, -8, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-g";
N := (-16*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 6, 0, -4, -2, -12, -8, -8, 0, 2, -2, 6, -12, 8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-h";
N := (-16*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, -2, 4, 8, -6, 8, -8, -8, -4, -8, 10, 2, 0, -8, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-i";
N := (-16*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, -6, -4, 8, -6, 4, 4, -4, 0, -2, -10, 6, -4, 12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-j";
N := (-16*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 2, 4, 0, 2, 4, 4, -4, 0, 10, 6, -10, 12, 12, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-a";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -2, 0, 4, -2, 4, -4, 0, 4, 10, 10, 6, 12, -12, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-b";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 2, 6, 4, 4, -2, 4, 4, 8, -8, -6, 10, -10, -12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-c";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -6, 4, 0, 2, -8, 12, 0, 8, 2, -6, -2, 8, 12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-d";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -2, 4, -4, -10, 12, -12, -8, -8, 10, -6, 6, -4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-e";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, -2, 4, -4, 6, 4, 4, 8, 0, -2, 10, 6, 4, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-f";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, 6, -8, -4, 6, 4, -4, 0, 4, -2, -6, -10, 12, 4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-g";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, 6, 8, -4, 6, -4, -4, 0, -4, 2, -6, -10, -12, 4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-h";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, -2, -4, -4, 6, -4, 4, 8, 0, 2, 10, 6, -4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-i";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, -4, -4, -10, -12, -12, -8, 8, -10, -6, 6, 4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-j";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -6, -4, 0, 2, 8, 12, 0, -8, -2, -6, -2, -8, 12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-k";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -2, 6, -4, 4, -2, -4, 4, 8, 8, 6, 10, -10, 12, -12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-l";
N := (8*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -2, 0, 4, -2, -4, -4, 0, -4, -10, 10, 6, -12, -12, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-a";
N := (-12*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 0, 6, 2, 4, 2, 0, -12, 0, -2, -6, -6, -10, 12, -8, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-b";
N := (-12*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 2, -2, 4, -2, -8, 4, 0, 2, 6, -2, 6, 4, 8, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-c";
N := (-12*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, -2, 2, -4, 2, -8, 4, 0, -2, -6, 2, 6, 4, 8, -14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-d";
N := (-12*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 0, -6, -2, -4, -2, 0, -12, 0, 2, 6, 6, -10, 12, -8, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-e";
N := (-12*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 0, -6, 2, -4, -2, 0, -12, 0, -2, -6, 6, -10, -12, -8, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-f";
N := (-12*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -2, -2, -4, 2, 8, 4, 0, 2, 6, 2, 6, -4, 8, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-g";
N := (-12*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 2, 2, 4, -2, 8, 4, 0, -2, -6, -2, 6, -4, 8, -14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-h";
N := (-12*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 0, 6, -2, 4, 2, 0, -12, 0, 2, 6, -6, -10, -12, -8, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-a";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -4, -6, 0, -6, -6, 10, -8, 0, 0, -6, -12, -6, -6, 0, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-b";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 4, 4, -4, 0, 4, 0, -12, 8, -8, 2, -12, -6, 0, 4, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-c";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 4, 6, 0, 6, 6, -10, -8, 0, 0, -6, 12, -6, 6, 0, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-d";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 4, -4, 4, 0, -4, 0, -12, 8, 8, -2, 12, -6, 0, 4, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-e";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -4, -4, -4, 0, -4, 0, -12, 8, -8, 2, 12, -6, 0, 4, -12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-f";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -4, 6, 0, 6, 6, 10, -8, 0, 0, 6, 12, -6, -6, 0, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-g";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -4, 4, 4, 0, 4, 0, -12, 8, 8, -2, -12, -6, 0, 4, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-h";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 4, -6, 0, -6, -6, -10, -8, 0, 0, 6, -12, -6, 6, 0, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 514.2-a";
N := (-3*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, -6, 8, -2, -1, -8, -9, 0, 2, -7, -6, 0, 3, 8, 4, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 514.3-a";
N := (3*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 0, 8, -1, -2, -8, 0, -9, -7, 2, -6, 3, 0, 4, 8, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-a";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -3, 4, -3, 7, -8, -6, -1, -12, -2, 12, 2, 0, 2, -4, -1, 11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-b";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -5, -6, -4, -4, -2, -2, -1, 0, 3, 9, 3, -9, 0, 8, 10, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-c";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, -2, 6, 4, 4, 6, -4, 0, -8, -12, -10, 6, -10, -4, 8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.3-a";
N := (9*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, -3, -3, -8, 7, -6, -12, -1, 12, -2, 2, 2, 0, -1, -4, -10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.3-b";
N := (9*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, -5, -4, -2, -4, -2, 0, -1, 9, 3, 3, 0, -9, 10, 8, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.3-c";
N := (9*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -6, 6, 4, 4, 6, 0, -4, -12, -8, -10, -10, 6, 8, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-a";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, 4, 0, 0, -6, 1, -1, 4, 3, 2, -1, -4, 0, -6, 13, -12, 16, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-b";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 0, 4, 0, 1, -6, -1, 3, 4, -1, 2, -4, -6, 0, -12, 13, 5, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 531.1-a";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 5, -4, 2, 2, -1, 1, -10, -4, -8, -11, -8, 0, -6, 15, -3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 531.1-b";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, 6, 0, 2, 8, -2, 2, -12, -6, -8, 10, 4, -4, 10, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 531.1-c";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 6, 7, 5, 2, 7, 3, -9, 0, 3, -8, 11, 3, 7, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 531.1-d";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -5, 0, 6, 2, -7, 1, 2, 0, 0, 1, -8, 4, -10, -11, 13, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 531.2-a";
N := (12*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 5, 2, -1, 2, 1, -4, -10, -11, -8, -8, -6, 0, 15, 9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 531.2-b";
N := (12*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 6, 4, 0, 8, 2, -2, -12, 2, -8, -6, 10, -4, 4, 10, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 531.2-c";
N := (12*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, -2, 7, 2, 5, 7, -9, 3, 3, 0, -8, 3, 11, 7, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 531.2-d";
N := (12*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -5, 6, -7, 2, 1, 0, 2, 1, 0, -8, -10, 4, -11, 7, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.1-a";
N := (-18*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 7, -5, 8, 1, 7, 3, -8, -9, 8, -9, 1, 1, -6, 3, 5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.1-b";
N := (-18*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -6, -4, -4, -4, -4, 2, 0, 6, -4, -6, 0, 6, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.1-c";
N := (-18*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -6, 4, 0, -4, 0, -4, -2, 6, -2, 2, -4, -6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.1-d";
N := (-18*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, 0, -7, -1, -1, 8, 11, 0, 3, 5, 9, -6, -9, 9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.2-a";
N := (-10*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, 5, -6, 2, -1, -1, 8, 8, -6, 6, -4, 12, -12, 12, 9, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.2-b";
N := (-10*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -5, 1, 2, -2, -5, 9, -12, -8, -6, -10, -8, 0, 4, -4, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.2-c";
N := (-10*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -5, 0, -6, 5, -9, 12, -2, 0, -2, -8, 6, -14, -6, 7, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.2-d";
N := (-10*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 0, 0, 1, -1, -10, -12, 6, 4, -8, -4, -4, -2, 3, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.2-e";
N := (-10*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 6, 2, 2, -7, 8, -1, 9, -6, 5, 6, 0, 6, -6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.2-f";
N := (-10*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, -4, 0, 5, 3, 6, 8, -6, -12, 8, 0, 0, -14, -5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.2-g";
N := (-10*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -1, 0, 2, -7, 5, -4, 2, 0, -6, -4, -6, 6, 6, 9, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.5-a";
N := (13*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 2, -4, 4, -2, -12, -8, 0, 4, 2, -10, -6, 8, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.6-a";
N := (-15*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 2, -4, 4, -6, -8, -4, -8, 12, 6, 6, -10, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.6-b";
N := (-15*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, -6, 6, 0, 4, -2, 6, 4, 0, -6, 8, 6, 6, 2, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.4-a";
N := (18*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 7, 8, 7, 1, 3, -9, -8, -9, 8, 1, -6, 1, 5, 3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.4-b";
N := (18*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, -6, -4, -4, -4, 2, -4, 6, 0, -4, 0, -6, -6, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.4-c";
N := (18*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -6, 0, 4, -4, -4, 0, 6, -2, -2, -4, 2, -8, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.4-d";
N := (18*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, 0, -1, -7, -1, 11, 8, 3, 0, 5, -6, 9, 9, -9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.3-a";
N := (10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -7, -6, -1, 2, -1, 8, 8, 6, -6, -4, -12, 12, 9, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.3-b";
N := (10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 1, -5, 2, -5, -2, 9, -8, -12, -10, -6, -8, 4, 0, 3, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.3-c";
N := (10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -5, 0, 5, -6, -9, -2, 12, -2, 0, -8, -14, 6, 7, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.3-d";
N := (10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 0, 1, 0, -1, -12, -10, 4, 6, -8, -4, -4, 3, -2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.3-e";
N := (10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 6, 2, 2, -7, -1, 8, -6, 9, 5, 0, 6, -6, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.3-f";
N := (10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -1, -4, 5, 0, 3, 8, 6, -12, -6, 8, 0, 0, -5, -14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.3-g";
N := (10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 0, -7, 2, 5, 2, -4, -6, 0, -4, 6, -6, 9, 6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.8-a";
N := (13*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 2, 4, -4, -2, -8, -12, 4, 0, 2, -6, -10, 8, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.7-a";
N := (-15*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 2, 4, -4, -6, -4, -8, 12, -8, 6, -10, 6, 4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.7-b";
N := (-15*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, 0, 6, 4, 0, -2, 4, 6, -6, 0, 8, 6, 6, -8, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 542.2-a";
N := (-13*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 4, -2, -8, -6, -6, -1, 9, 0, -13, -1, 0, -10, 2, -10, -7, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 542.2-b";
N := (-13*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 4, 4, -2, 0, 0, -4, -1, 9, -2, 3, -5, 14, -6, 0, 0, 13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 542.3-a";
N := (13*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 6, -2, -6, -8, -6, 9, -1, -13, 0, -1, -10, 0, -10, 2, 2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 542.3-b";
N := (13*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 4, 4, -2, 0, 0, -4, 9, -1, 3, -2, -5, -6, 14, 0, 0, -12, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.1-a";
N := (12*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 2, 8, -2, 6, 0, 2, 0, -8, -8, 2, -10, -4, 6, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.1-b";
N := (12*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 6, 4, 2, -6, 4, -4, 4, 6, -6, -6, 6, -4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.1-c";
N := (12*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, -4, 6, -2, -4, -6, 0, 0, -4, 2, -2, 0, 6, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.1-d";
N := (12*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -2, 0, -5, -1, 3, 4, 5, 1, 12, 9, -12, 0, 14, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.1-e";
N := (12*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 2, -4, -6, -2, -4, -4, 12, -6, -6, 2, -14, -4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.1-f";
N := (12*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, 0, -6, 6, 8, -2, -8, -8, -8, -6, 14, -4, -6, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.3-a";
N := (-14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 4, 4, -6, -4, -12, 8, 0, 2, -10, -10, 12, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.3-b";
N := (-14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -2, -4, -5, -7, 5, -8, 3, 9, 4, -9, 0, 0, 6, -13, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.3-c";
N := (-14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 3, 6, -4, 1, 3, -1, 8, 3, -7, 0, 5, 0, 8, -10, -5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.3-d";
N := (-14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -4, 4, -10, 8, -8, 0, 0, -2, -6, -6, 0, 0, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.3-e";
N := (-14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 0, 4, 2, -8, -4, -8, -8, -10, -2, 6, 0, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.3-f";
N := (-14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 2, 4, 2, -10, 4, -12, -12, -2, -6, -6, -6, 12, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.3-g";
N := (-14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, 8, -5, -1, 11, 4, 9, -3, 4, -3, 12, 0, 6, 11, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.3-h";
N := (-14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 7, -6, -8, 7, -3, 5, 12, 11, -3, 8, 11, -4, 0, 10, 7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-a";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, -4, -4, 2, -6, 4, -10, -4, 4, -10, -2, -10, 4, -6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-b";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 4, -4, -6, 8, -4, -8, 4, 10, -10, -2, -8, 12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-c";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 1, -2, -4, 7, -3, 7, 4, -1, -13, -8, -1, -8, 8, 6, 13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-d";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -1, 2, 4, 7, -3, -7, 4, -1, 13, 8, -1, -8, -8, 6, -13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-e";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 2, -4, -4, -6, -8, -4, -8, -4, -10, -10, -2, 8, 12, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-f";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 4, 4, 2, -6, -4, -10, -4, -4, 10, -2, -10, -4, -6, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.2-a";
N := (12*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 6, -2, 8, 6, 2, 0, -8, 0, -8, -10, 2, 6, -4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.2-b";
N := (12*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 4, 6, 2, 4, -6, 4, -4, 6, -6, -6, -4, 6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.2-c";
N := (12*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -2, 6, -4, -2, -6, -4, 0, 0, -4, -2, 2, 6, 0, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.2-d";
N := (12*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 5, -5, 0, -1, 4, 3, 1, 5, 12, -12, 9, 14, 0, 2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.2-e";
N := (12*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -4, 2, -6, -4, -2, 12, -4, -6, 2, -6, -4, -14, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.2-f";
N := (12*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, -6, 0, 6, -2, 8, -8, -8, -8, 14, -6, -6, -4, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.4-a";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, 4, 4, -6, -12, -4, 0, 8, 2, -10, -10, 4, 12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.4-b";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, -5, -4, -7, -8, 5, 9, 3, 4, 0, -9, 6, 0, -14, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.4-c";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 6, 3, 1, -4, 3, 8, -1, -7, 3, 0, 0, 5, -10, 8, -2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.4-d";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 4, -4, -10, -8, 8, 0, 0, -2, -6, -6, 0, 0, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.4-e";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 4, 0, 2, -4, -8, -8, -8, -10, 6, -2, 4, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.4-f";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 4, 2, 2, 4, -10, -12, -12, -2, -6, -6, 12, -6, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.4-g";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, -5, 8, -1, 4, 11, -3, 9, 4, 12, -3, 6, 0, 10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.4-h";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 7, 7, -8, -3, 12, 5, -3, 11, 8, -4, 11, 10, 0, -6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-a";
N := (-5*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 4, 2, -4, -6, -10, 4, 4, -4, -10, -10, -2, -6, 4, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-b";
N := (-5*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, -4, 4, -6, -4, 8, 4, -8, 10, -2, -10, 12, -8, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-c";
N := (-5*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 1, 7, -4, -3, 4, 7, -13, -1, -8, -8, -1, 6, 8, -10, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-d";
N := (-5*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -1, 7, 4, -3, 4, -7, 13, -1, 8, -8, -1, 6, -8, -10, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-e";
N := (-5*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, -4, -4, -6, -4, -8, -4, -8, -10, -2, -10, 12, 8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-f";
N := (-5*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -4, 2, 4, -6, -10, -4, -4, -4, 10, -10, -2, -6, -4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.1-a";
N := (-12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -6, 6, -4, 4, 6, -8, 4, 0, 8, -6, -2, 2, -4, 12, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.1-b";
N := (-12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 4, -6, 5, -6, 3, -8, -6, -3, 0, -5, -12, 6, 9, -4, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.1-c";
N := (-12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 0, -6, -1, -2, -3, 4, -2, -3, -4, -3, 4, -10, 5, -12, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.3-a";
N := (w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -3, 6, 2, -2, 2, -6, 12, 8, 1, 5, 5, -4, 12, 7, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.3-b";
N := (w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -6, 3, 8, -2, -4, -6, -3, -2, -1, -1, -2, 4, 9, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.4-a";
N := (7*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, -3, 3, -4, -8, 6, -8, 1, 6, -13, -6, 1, -10, 11, 3, 1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.4-b";
N := (7*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 2, 3, -4, 2, -4, 2, 11, 6, -3, -1, 6, 0, -9, -12, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.2-a";
N := (12*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 6, 6, 4, -4, 6, 4, -8, 8, 0, -6, 2, -2, 12, -4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.2-b";
N := (12*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, -6, -6, 5, 3, -6, -8, 0, -3, -5, 6, -12, -4, 9, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.2-c";
N := (12*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -6, -2, -1, -3, -2, 4, -4, -3, -3, -10, 4, -12, 5, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.6-a";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -3, 2, 6, -2, 2, 2, 12, -6, 1, 8, 5, -4, 5, 7, 12, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.6-b";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -4, 3, -2, 8, -4, -3, -6, -1, -2, -1, 4, -2, -4, 9, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.5-a";
N := (7*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, 6, 3, -8, -4, 6, 1, -8, -13, 6, -6, -10, 1, 3, 11, -2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.5-b";
N := (7*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -4, 3, 2, -4, -4, 11, 2, -3, 6, -1, 0, 6, -12, -9, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 559.1-a";
N := (-16*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 5, -2, 4, -7, -3, 6, -8, -8, -7, -9, -9, -3, -8, -5, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 559.2-a";
N := (-2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -4, 6, 2, 2, -1, -1, 6, -9, 14, -12, 6, -12, 3, 14, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 559.2-b";
N := (-2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -4, 8, -5, -3, -4, 12, -3, 0, 9, 9, -13, -3, 0, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 559.4-a";
N := (16*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 5, -2, 4, -3, -7, 6, -8, -7, -8, -9, -3, -9, -5, -8, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 559.3-a";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -4, 6, 2, 2, -1, -1, -9, 6, 14, 6, -12, 3, -12, -13, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 559.3-b";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, -4, 8, -3, -5, -4, 12, 0, -3, 9, -13, 9, 0, -3, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 562.1-a";
N := (-13*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -6, -1, 3, 5, 0, -4, 4, -6, 8, 8, -5, 9, -6, -5, 0, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 562.1-b";
N := (-13*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 3, 5, 3, 8, 8, 12, 10, 12, -8, -1, -7, -10, -5, 12, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 562.2-a";
N := (-3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 7, 6, -4, 8, -1, 1, 0, -4, 0, -9, 1, 5, 3, -6, -4, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 562.2-b";
N := (-3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -1, -2, 0, 4, 1, 1, -8, -12, 4, -7, 9, -11, -13, -6, 0, -5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 562.4-a";
N := (-13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -1, -6, 3, 0, 5, -4, -6, 4, 8, 8, -5, -6, 9, 0, -5, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 562.4-b";
N := (-13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 3, -2, 5, 8, 3, 8, 10, 12, -8, 12, -1, -10, -7, 12, -5, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 562.3-a";
N := (3*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 6, 7, -4, -1, 8, 1, -4, 0, -9, 0, 1, 3, 5, -4, -6, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 562.3-b";
N := (3*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, -1, 0, 1, 4, 1, -12, -8, -7, 4, 9, -13, -11, 0, -6, 12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-a";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 4, 0, 2, -4, 4, 0, 12, -2, 2, -2, 12, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-b";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 0, 4, 2, 4, -4, 12, 0, -2, -2, 2, -4, 12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-c";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -4, -4, -6, 4, 4, 0, 0, -14, -2, -2, 4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-a";
N := (12*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 0, -8, 2, 2, 4, 8, 0, -6, 4, 12, 6, 12, -12, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-b";
N := (12*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 1, -5, -7, 11, 9, 6, 6, -2, 2, -2, 12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-c";
N := (12*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 4, 0, -6, -6, -4, -8, 8, -2, 8, 0, 6, -12, -12, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-d";
N := (12*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 7, 7, -3, 9, -7, 10, -6, -6, 2, -14, -8, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-e";
N := (12*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -8, -3, 3, 9, -1, 1, 2, -2, -10, -6, -6, 0, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-f";
N := (12*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 0, 0, 2, 2, -4, -8, -8, 2, -4, -4, 6, -4, -4, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-a";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -2, -4, -4, -6, -8, 4, 4, -8, -10, 2, -2, 4, 0, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-b";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 6, 4, 0, -2, 8, -12, -8, 8, 2, -2, -10, 0, -4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-c";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, 2, -8, -6, 4, -4, -6, 8, -8, -6, -4, -4, 0, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-d";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -4, 4, 6, 4, -4, 0, 8, -2, 6, 2, 8, 0, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-e";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 4, 4, 6, -4, -4, 0, -8, 2, 6, 2, -8, 0, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-f";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -2, -8, -6, -4, -4, -6, -8, 8, -6, -4, 4, 0, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-g";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 6, -4, 0, -2, -8, -12, -8, -8, -2, -2, -10, 0, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-h";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -2, 4, -4, -6, 8, 4, 4, 8, 10, 2, -2, -4, 0, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-a";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 7, 4, -1, 5, 3, -1, -11, -2, -6, 2, 14, 6, -4, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-b";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, -8, -5, -5, -1, -1, -1, 2, -2, -10, -6, 6, 0, 0, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-c";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -6, 8, 0, -2, 4, -12, -8, 8, 10, -10, 6, 4, -4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-d";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -3, 0, 7, 7, 3, -9, 7, 10, 6, 6, 2, 14, 8, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-e";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -2, 4, -4, -10, -4, 4, -8, -8, -2, 6, -6, -12, 12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-f";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -6, -4, 4, 6, 4, 8, 0, 4, 2, 14, 6, 0, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-g";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 5, -2, -1, -5, 3, -1, -5, 10, -12, -10, -4, -6, 6, -10, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-h";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 6, 4, -4, 6, 12, -4, 8, 0, 6, -10, 2, -4, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-i";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 1, 6, 3, 7, -1, -9, -5, 2, 4, -10, -4, 2, -10, 6, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-j";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, 6, 3, -7, -1, -9, 5, -2, 4, 10, -4, 2, -10, -6, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-k";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 6, 4, 4, 6, 12, 4, -8, 0, -6, -10, 2, -4, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-l";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -5, -2, -1, 5, 3, -1, 5, -10, -12, 10, -4, -6, 6, 10, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-m";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -6, -4, -4, 6, 4, -8, 0, 4, -2, 14, 6, 0, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-n";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, 4, 4, -10, -4, -4, 8, -8, 2, 6, -6, -12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-o";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 3, 0, 7, -7, 3, -9, -7, -10, 6, -6, 2, 14, 8, 8, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-p";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -6, 8, 0, -2, 4, 12, 8, 8, -10, -10, 6, 4, 4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-q";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, -8, -5, 5, -1, -1, 1, -2, -2, 10, -6, 6, 0, 0, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-r";
N := (15*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -7, 4, -1, -5, 3, -1, 11, 2, -6, -2, 14, 6, -4, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-a";
N := (12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 2, -8, 2, 8, 4, -6, 0, 4, 6, 12, -12, 12, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-b";
N := (12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -5, 1, -7, 9, 11, 6, 6, -2, -2, 2, 4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-c";
N := (12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 4, -6, 0, -6, -8, -4, -2, 8, 8, 6, 0, -12, -12, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-d";
N := (12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 0, 7, 7, -3, -7, 9, -6, 10, -6, -14, 2, 8, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-e";
N := (12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -8, 3, -3, 9, 1, -1, -2, 2, -10, -6, -6, 0, 0, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-f";
N := (12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 2, 0, 2, -8, -4, 2, -8, -4, 6, -4, -4, -4, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-a";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -4, -4, -6, 4, -8, -8, 4, -10, -2, 2, 0, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-b";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 6, 0, 4, -2, -12, 8, 8, -8, 2, -10, -2, -4, 0, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-c";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -4, -8, 2, -6, -4, 4, 8, -6, -8, -4, -6, 0, -4, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-d";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 4, -4, 6, -4, 4, 8, 0, -2, 2, 6, 0, 8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-e";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 4, 4, 6, -4, -4, -8, 0, 2, 2, 6, 0, -8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-f";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -4, -8, -2, -6, -4, -4, -8, -6, 8, -4, -6, 0, 4, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-g";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 6, 0, -4, -2, -12, -8, -8, -8, -2, -10, -2, -4, 0, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-h";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, -4, 4, -6, 4, 8, 8, 4, 10, -2, 2, 0, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-a";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 7, -3, 4, 5, -1, 3, -11, -1, -6, -2, 2, 6, 14, 4, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-b";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, -8, -5, -5, -1, -1, -1, -2, 2, -10, 6, -6, 0, 0, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-c";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, -6, 0, 8, -2, -12, 4, 8, -8, 10, 6, -10, -4, 4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-d";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -1, 0, 7, 7, 3, 7, -9, 6, 10, 6, 14, 2, -8, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-e";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -2, -4, 4, -10, 4, -4, -8, -8, -2, -6, 6, 12, -12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-f";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -6, 4, -4, 6, 8, 4, 4, 0, 2, 6, 14, 4, 0, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-g";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -5, -2, -5, -1, 3, -5, -1, -12, 10, -10, -6, -4, -10, 6, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-h";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -2, 6, -4, 4, 6, -4, 12, 0, 8, 6, 2, -10, -4, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-i";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 6, 7, 3, -1, -5, -9, 4, 2, -10, 2, -4, 6, -10, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-j";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, 6, -7, 3, -1, 5, -9, 4, -2, 10, 2, -4, -6, -10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-k";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 2, 6, 4, 4, 6, 4, 12, 0, -8, -6, 2, -10, 4, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-l";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 5, -2, 5, -1, 3, 5, -1, -12, -10, 10, -6, -4, 10, 6, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-m";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -6, -4, -4, 6, -8, 4, 4, 0, -2, 6, 14, -4, 0, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-n";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 4, 4, -10, -4, -4, -8, 8, 2, -6, 6, -12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-o";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 1, 0, -7, 7, 3, -7, -9, 6, -10, -6, 14, 2, 8, 8, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-p";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, -6, 0, 8, -2, 12, 4, 8, 8, -10, 6, -10, 4, 4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-q";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, -8, 5, -5, -1, 1, -1, -2, -2, 10, 6, -6, 0, 0, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-r";
N := (15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -7, 3, 4, -5, -1, 3, 11, -1, -6, 2, -2, 6, 14, -4, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 577.1-a";
N := (14*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -2, -2, 7, 1, -4, 8, 5, 12, 7, 4, -10, 9, 1, -9, 12, 5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 577.2-a";
N := (14*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, -2, -2, 7, -4, 1, 8, 12, 5, 4, 7, -10, 1, 9, 12, -9, 10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-a";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, -4, -6, -1, -7, -1, -6, 7, 7, 4, -9, 6, -4, -14, 13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-b";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, -4, 6, 1, 7, 1, 6, 7, 7, -4, 9, -6, 4, 14, 13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-c";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, 2, -8, -5, 1, -11, 4, -9, -3, 4, 3, -12, 0, 6, 11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-d";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -1, -4, 2, 8, -1, -7, 0, -12, 2, 6, -6, -9, 12, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-e";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, -1, 4, -2, -8, 1, 7, 0, -12, -2, -6, 6, 9, -12, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-a";
N := (-17*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 1, -1, -6, -7, -6, -1, 7, 7, 4, 6, -9, -14, -4, -12, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-b";
N := (-17*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, 1, 1, 6, 7, 6, 1, 7, 7, -4, -6, 9, 14, 4, -12, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-c";
N := (-17*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -1, -5, -8, 1, 4, -11, -3, -9, 4, -12, 3, 6, 0, -10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-d";
N := (-17*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, -4, 2, -4, 8, -7, -1, -12, 0, 2, -6, 6, 12, -9, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-e";
N := (-17*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -4, -2, 4, -8, 7, 1, -12, 0, -2, 6, -6, -12, 9, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.2-a";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 5, -3, 4, 6, 4, -2, -8, -5, 10, -4, -10, -1, -6, 4, -12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.2-b";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, -6, -4, 4, -2, 12, -12, -8, 8, -2, -6, -2, -4, 4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.2-c";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, 4, 3, -7, 4, 4, -6, -6, 7, -4, 4, -12, 4, -10, -8, 7, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.2-d";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -3, -4, 3, -1, -4, 4, -2, 2, 3, 12, 4, 4, 12, 2, 0, -7, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.3-a";
N := (-13*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, -3, 5, 4, 4, 6, -2, -5, -8, -4, 10, -10, -6, -1, -12, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.3-b";
N := (-13*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 2, -6, 4, -4, -2, -12, 12, 8, -8, -2, -2, -6, 4, -4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.3-c";
N := (-13*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, -1, 3, 4, -7, 4, -6, -6, -4, 7, 4, 4, -12, -8, -10, 1, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.3-d";
N := (-13*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -4, -3, 3, -4, -1, 4, 2, -2, 12, 3, 4, 12, 4, 0, 2, -3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 593.1-a";
N := (-18*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -2, 4, -6, 4, -2, -2, 4, 6, 4, 4, 8, 10, -2, 4, 8, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 593.2-a";
N := (18*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 4, -2, -6, -2, 4, -2, 6, 4, 4, 4, 8, -2, 10, 8, 4, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-a";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 4, -1, 3, 0, -5, 1, -1, -1, -12, -7, -10, -6, -6, -5, 5, 8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-b";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -5, 7, 2, 1, -3, -11, 9, 6, 7, 8, -10, -6, 5, -5, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-c";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, -3, 2, -1, -1, -7, 5, -6, -3, -4, -6, -6, -15, -9, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-d";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, -3, -4, -7, -1, -1, 11, 0, 3, -10, 6, -6, 3, 9, -16, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-e";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, -3, 2, 1, -1, 9, -13, -6, -1, -4, -10, -10, -7, 1, 0, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-f";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -6, 2, -4, -2, -6, 4, -4, 0, -12, 10, -4, -6, -12, 4, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-g";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 1, 3, -1, -5, -1, -6, -1, -9, -7, -1, -4, 2, 8, -8, -3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-h";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 3, -1, -7, 7, 3, -2, -1, -9, -9, 1, -4, -6, 0, -8, -5, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-i";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -4, -5, -7, 0, -1, 3, -9, 1, 4, -7, -10, -6, 6, 3, 11, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.3-a";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -1, 5, -1, 7, -3, -12, -11, 3, 3, 9, 10, 6, -10, 4, 5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.4-a";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 4, -2, -6, 4, -10, -10, 12, -8, -6, -10, -10, -6, 10, 12, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-a";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -1, 4, 3, -5, 0, 1, -1, -1, -7, -12, -10, -6, -6, 5, -5, 3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-b";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 6, 7, 1, 2, -3, 9, -11, 7, 6, 8, -6, -10, -5, 5, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-c";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, -3, -1, 2, -1, 5, -7, -3, -6, -4, -6, -6, -9, -15, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-d";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -3, -7, -4, -1, 11, -1, 3, 0, -10, -6, 6, 9, 3, -7, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-e";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -2, -3, 1, 2, -1, -13, 9, -1, -6, -4, -10, -10, 1, -7, 13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-f";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 6, 2, -2, -4, -6, -4, 4, -12, 0, 10, -6, -4, 4, -12, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-g";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 1, -2, 3, -5, -1, -1, -1, -6, -7, -9, -1, 2, -4, -8, 8, -8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-h";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 3, -6, -1, 7, -7, 3, -1, -2, -9, -9, 1, -6, -4, -8, 0, 16, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-i";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -5, -4, -7, -1, 0, 3, 1, -9, -7, 4, -10, 6, -6, 11, 3, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.6-a";
N := (w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, 0, 5, 7, -1, -3, -11, -12, 3, 3, 9, 6, 10, 4, -10, 8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.5-a";
N := (5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 2, -2, 4, -6, -10, 12, -10, -6, -8, -10, -6, -10, 12, 10, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.1-a";
N := (-12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -5, 1, 6, -7, -3, -1, -9, 1, -4, -8, -2, 12, -8, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.1-b";
N := (-12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, -3, -4, 5, 1, 3, -5, 5, 2, -8, -2, 2, 0, 0, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.2-a";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, -5, 6, -3, -7, -1, 1, -9, -8, -4, -2, -8, 12, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.2-b";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -1, -4, 1, 5, 3, 5, -5, -8, 2, -2, 0, 2, 12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.1-a";
N := (-16*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -6, 6, 2, -6, 2, -2, 0, 8, -6, -6, 8, -6, -6, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.1-b";
N := (-16*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -4, 0, -4, 2, -1, 8, 8, 6, 3, -1, 6, -9, 3, 0, 11, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.1-c";
N := (-16*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 0, -4, 6, 9, 8, 4, -2, -9, 1, -2, 5, -5, 4, -3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.1-d";
N := (-16*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, -2, 0, 4, 2, 12, 8, 8, 0, -10, -2, 6, -12, 0, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.1-e";
N := (-16*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -6, 2, 8, 2, -10, 8, 0, 0, 8, -6, -12, -6, 0, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.4-a";
N := (-19*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -1, -4, 0, -4, 2, -1, -4, -4, 3, 6, -10, 0, 3, -3, 12, 14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.2-a";
N := (16*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, -6, 2, 6, -6, -2, 2, 8, 0, -6, 8, -6, -6, -6, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.2-b";
N := (16*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 5, 0, 2, -4, -1, 8, 8, 3, 6, -1, -9, 6, 0, 3, 5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.2-c";
N := (16*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 1, 0, 6, -4, 9, 4, 8, -9, -2, 1, 5, -2, 4, -5, 3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.2-d";
N := (16*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, -2, 4, 0, 2, 8, 12, 0, 8, -10, 6, -2, 0, -12, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.2-e";
N := (16*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -6, 8, 2, 2, 8, -10, 0, 0, 8, -12, -6, 0, -6, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.5-a";
N := (-19*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, -1, 0, 2, -4, -1, -4, -4, 6, 3, -10, 3, 0, 12, -3, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.2-a";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -4, 4, -6, -6, -4, 6, -2, 6, 14, -2, 6, 12, 0, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.5-a";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -2, -6, -8, -4, -8, 2, 0, 0, -2, -6, 0, 12, 0, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.5-b";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 1, 1, 3, 1, -4, 10, -10, 9, 12, -2, 3, -6, 6, -3, -14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.5-c";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -2, -4, 6, 0, -4, -4, -8, 2, -2, -6, 0, -4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.5-d";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -5, -5, 3, 7, -4, -2, -10, -3, -12, 10, -9, -6, -6, -3, -2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.5-e";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, 1, -3, -4, 2, 6, 3, 4, 2, -9, -2, -6, 9, 2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.5-f";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 2, -4, -2, -4, 0, -8, 8, -6, 14, -6, 4, -12, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.5-g";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 6, -2, 0, -4, -4, -6, -12, -8, -10, -6, 4, 0, 0, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.5-h";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 3, 1, -7, 5, -8, -10, 6, 7, 8, 6, -1, 6, 10, -3, -2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.5-i";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 6, 4, 2, -8, 8, -12, 0, 10, 6, 6, 0, -12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.5-j";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 2, 2, -4, 10, -4, -4, 8, 0, -2, 6, -2, 12, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-a";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 6, -2, -2, -2, 0, -2, -6, 8, -6, 10, 10, 12, 2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-b";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, -2, -2, -2, 8, 6, 10, 0, 6, 2, -6, 12, -6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-c";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 6, -2, 4, -6, -8, -8, 8, 4, 10, -2, -10, -4, 0, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-d";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 6, -4, 2, -8, 8, 0, 12, 10, 6, 6, 12, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-e";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, -6, 0, 10, -12, 8, -12, 0, 6, 6, -10, -12, 0, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-f";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 4, 6, 2, -6, -8, 2, -6, 2, -2, 6, 0, 0, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-g";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -4, -2, 0, -4, 6, 4, 8, 12, -10, 4, -6, 0, 0, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-h";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -6, -8, -6, 4, 0, -12, 8, 10, -2, -10, -12, -8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-i";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -2, 4, -2, -12, -8, 0, -4, -6, -14, -2, 12, 8, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-j";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 4, -6, 8, -4, -2, 8, 0, 0, -2, 0, -6, 0, -12, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-k";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 0, 6, 0, -8, -6, -4, 0, 12, 6, 0, 2, 0, 0, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.6-l";
N := (14*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -2, 0, 2, 2, 10, 8, 6, -6, -2, 6, 6, 0, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.9-a";
N := (-11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 2, -2, 0, 2, -4, 4, 0, 0, -2, 6, 2, 4, 0, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.9-b";
N := (-11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, -5, -3, 1, -8, -6, -10, 5, 8, -10, 11, 6, 6, 15, -2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.9-c";
N := (-11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 2, 2, -2, 4, 2, 8, -4, 0, 4, 10, 6, -6, 8, 0, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.9-d";
N := (-11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -2, -2, -2, 4, 2, 8, 4, 0, 4, -10, 6, -6, 8, 0, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.9-e";
N := (-11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -5, 5, -3, 1, -8, -6, 10, -5, 8, 10, 11, 6, 6, -15, -2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.9-f";
N := (-11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -2, -2, 0, 2, -4, -4, 0, 0, 2, 6, 2, 4, 0, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.10-a";
N := (13*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -2, 2, 4, 2, 4, 0, 0, 0, 2, -2, 6, 4, 0, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.10-b";
N := (13*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, -2, 4, 2, -8, -12, 0, -12, 2, -10, 6, -4, 12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.10-c";
N := (13*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -2, -4, 2, -8, 12, 0, -12, -2, -10, 6, -4, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.10-d";
N := (13*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 2, 2, -4, 2, 4, 0, 0, 0, -2, -2, 6, 4, 0, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.3-a";
N := (12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 6, 4, -6, -6, 6, -4, 6, -2, 14, 6, -2, 0, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.8-a";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 4, -6, -8, -4, 2, -8, 0, 0, -2, 0, -6, 0, 12, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.8-b";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 1, 1, 3, 1, -4, -10, 10, 12, 9, -2, -6, 3, -3, 6, 5, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.8-c";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -2, -4, 6, -4, 0, -8, -4, 2, -6, -2, -4, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.8-d";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -5, -5, 3, 7, -4, -10, -2, -12, -3, 10, -6, -9, -3, -6, 5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.8-e";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, 1, -3, -4, 6, 2, 4, 3, 2, -2, -9, 9, -6, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.8-f";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, -4, -2, 0, -4, 8, -8, -6, -6, 14, -12, 4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.8-g";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -4, -2, 0, -4, -6, -4, -8, -12, -10, 4, -6, 0, 0, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.8-h";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 1, 3, -7, 5, -8, 6, -10, 8, 7, 6, 6, -1, -3, 10, 7, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.8-i";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 6, 4, 2, 8, -8, 0, -12, 10, 6, 6, -12, 0, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.8-j";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -6, 2, -4, 10, -4, -4, 0, 8, -2, -2, 6, -4, 12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-a";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 4, -2, -2, -2, -2, 0, 8, -6, -6, 10, 10, 2, 12, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-b";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, -2, -2, -2, 6, 8, 0, 10, 6, -6, 2, -6, 12, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-c";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 6, -2, 4, -6, -8, -8, 4, 8, 10, -10, -2, 0, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-d";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 6, -4, 2, 8, -8, 12, 0, 10, 6, 6, 0, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-e";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, -6, 0, 10, 8, -12, 0, -12, 6, -10, 6, 0, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-f";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 4, 6, 2, -8, -6, -6, 2, 2, 6, -2, 0, 0, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-g";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 6, -2, 0, -4, 4, 6, 12, 8, -10, -6, 4, 0, 0, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-h";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -6, -8, -6, 0, 4, 8, -12, 10, -10, -2, -8, -12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-i";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -2, 4, -2, -8, -12, -4, 0, -6, -2, -14, 8, 12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-j";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -2, -6, 8, -4, 8, -2, 0, 0, -2, -6, 0, -12, 0, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-k";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -2, 6, 0, -8, -4, -6, 12, 0, 6, 2, 0, 0, 0, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.7-l";
N := (14*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 4, 0, 2, 2, 8, 10, -6, 6, -2, 6, 6, 0, 0, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.12-a";
N := (11*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 6, -2, 0, 2, 4, -4, 0, 0, -2, 2, 6, 0, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.12-b";
N := (11*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -5, 5, -3, 1, -8, -10, -6, 8, 5, -10, 6, 11, 15, 6, -15, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.12-c";
N := (11*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 2, 2, -2, 4, 2, -4, 8, 4, 0, 10, -6, 6, 0, 8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.12-d";
N := (11*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -2, -2, -2, 4, 2, 4, 8, 4, 0, -10, -6, 6, 0, 8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.12-e";
N := (11*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, -5, -3, 1, -8, 10, -6, 8, -5, 10, 6, 11, -15, 6, 15, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.12-f";
N := (11*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -6, -2, 0, 2, -4, -4, 0, 0, 2, 2, 6, 0, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.11-a";
N := (13*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -2, 2, 4, 2, 0, 4, 0, 0, 2, 6, -2, 0, 4, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.11-b";
N := (13*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, -2, 4, 2, -12, -8, -12, 0, 2, 6, -10, 12, -4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.11-c";
N := (13*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -2, -4, 2, 12, -8, -12, 0, -2, 6, -10, -12, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 608.11-d";
N := (13*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 2, 2, -4, 2, 0, 4, 0, 0, -2, 6, -2, 0, 4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 611.2-a";
N := (-12*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 2, 2, 4, -4, 2, 4, -4, 8, -2, -10, -10, 4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 611.2-b";
N := (-12*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -4, -2, -2, 0, 4, 6, 2, 12, -4, -6, -14, 6, 4, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 611.2-c";
N := (-12*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, -1, -7, -8, -4, 2, 4, -7, -13, 1, -7, -13, 10, -6, -2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 611.3-a";
N := (12*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 2, 2, -4, 4, 2, -4, 4, 8, -2, -10, -10, 12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 611.3-b";
N := (12*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -4, -2, 0, -2, 4, 2, 6, 12, -4, -14, -6, 4, 6, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 611.3-c";
N := (12*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, -1, -7, -4, -8, 2, -7, 4, -13, 1, -13, -7, -6, 10, 15, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-a";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 4, 4, 6, -4, -4, 4, 4, -10, -2, -2, 12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-b";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 6, -8, -4, 8, -4, -6, -8, 6, -6, -8, -6, -4, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-c";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -4, -8, 6, -4, -4, 8, -8, -6, 6, -8, -6, -4, -6, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-d";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -4, 4, 2, 4, 4, 0, -8, -2, -10, 14, -12, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-e";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 4, -6, 12, 12, 0, 0, -14, 6, 6, 12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-f";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -4, 8, 8, -4, 6, 0, 2, 6, 0, -6, 0, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-g";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 4, -4, 2, 4, 4, -8, 0, -2, 14, -10, -4, -12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-h";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -2, -4, -4, -8, 8, -2, -10, -12, -10, 0, 6, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-i";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -4, -4, -8, -4, -2, 8, -10, -10, -12, 6, 0, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-j";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 4, -4, 2, -4, -4, 0, -8, 2, -2, 6, -4, -12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-k";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 2, 8, -4, 8, 0, 6, 2, 0, 6, 0, -6, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-l";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, -4, -10, -4, -4, 12, 12, -10, 6, 6, -12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-m";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 6, 2, -2, 6, -2, 0, -4, 2, -10, 6, 0, 4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-n";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, -4, 4, 2, -4, -4, -8, 0, 2, 6, -2, -12, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-o";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, 6, -2, -2, 6, -4, 0, 2, 6, -10, 4, 0, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.2-a";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 4, 2, 6, -4, -6, 12, -8, 6, -2, 2, -4, 2, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.3-a";
N := (3*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, 2, 4, 6, -6, -4, -8, 12, 6, 2, -2, 2, -4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 614.1-a";
N := (-13*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -5, -4, -3, 3, 0, -6, -7, 12, 9, -9, -10, 0, 6, -6, -12, -3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 614.1-b";
N := (-13*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, -6, 2, 4, -4, -6, 12, -8, -4, 8, 6, 6, 6, 12, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 614.1-c";
N := (-13*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -2, 0, -4, -4, 1, 0, -8, -4, -1, -5, 9, -2, -13, 13, 7, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 614.1-d";
N := (-13*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 0, 5, -5, -4, -6, 9, 4, -1, -1, 6, -12, -6, -6, 0, -3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 614.4-a";
N := (13*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -5, -3, 0, 3, -6, 12, -7, -9, 9, -10, 6, 0, -12, -6, 3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 614.4-b";
N := (13*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 6, 2, -4, 4, -6, -8, 12, 8, -4, 6, 6, 6, -12, 12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 614.4-c";
N := (13*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -2, 0, -4, -4, 1, -8, 0, -1, -4, -5, -2, 9, 13, -13, -5, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 614.4-d";
N := (13*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -3, 5, -4, -5, -6, 4, 9, -1, -1, 6, -6, -12, 0, -6, 5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.1-a";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, -6, 2, -4, 4, -2, 4, 0, 12, -8, -6, 14, 6, 0, 12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.1-b";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -3, -1, 5, -4, 2, -1, -12, 3, -4, -3, -12, 9, -6, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.1-c";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -2, -4, -3, -7, -7, 4, -2, 11, -4, -3, 4, 5, 4, -9, 2, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.3-a";
N := (-17*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 0, 2, 0, 2, 6, 4, -10, -2, 12, -12, 10, 6, 4, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.2-a";
N := (8*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, -2, 2, 4, -4, -2, 0, 4, -8, 12, -6, 6, 14, 12, 0, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.2-b";
N := (8*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -3, 5, -1, -4, -1, 2, 3, -12, -4, -12, -3, -6, 9, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.2-c";
N := (8*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -4, -2, -3, -7, -7, 4, 11, -2, -3, -4, 4, 4, 5, 2, -9, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.6-a";
N := (17*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -4, 2, 2, 0, 6, -10, 4, 12, -2, -12, 6, 10, -4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 631.1-a";
N := (-6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 2, 1, -4, 5, -2, -7, 4, 1, 0, 0, -12, 1, -2, 6, -4, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 631.1-b";
N := (-6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -4, -3, -2, -7, -6, -7, -8, -11, 12, -8, 12, 13, -6, -10, -4, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 631.2-a";
N := (6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 1, 2, -4, -2, 5, -7, 1, 4, 0, 0, -12, -2, 1, -4, 6, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 631.2-b";
N := (6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -3, -4, -2, -6, -7, -7, -11, -8, -8, 12, 12, -6, 13, -4, -10, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.1-a";
N := (w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 4, 4, 4, 8, 2, 8, 6, 10, 8, 0, 4, -10, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.1-b";
N := (w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, -4, -2, -8, -4, 12, -8, 2, 2, 2, -4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.1-c";
N := (w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -1, -4, 2, -4, 5, -4, -3, 6, 5, 9, 12, 6, 6, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.1-d";
N := (w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -3, 4, -2, 4, 1, -4, -13, 6, -9, -3, 12, 14, 10, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.1-e";
N := (w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 0, -4, -8, 4, -2, 8, -6, 10, 8, 4, 12, 10, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.2-a";
N := (13*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -6, -6, -4, 2, -4, 12, 8, 0, -2, -10, 6, -4, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.2-b";
N := (13*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 6, 4, -2, 4, 4, -12, 0, 10, 14, -6, 12, 0, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.2-c";
N := (13*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, -1, -1, 1, 0, 5, -11, 3, 12, -12, -1, -6, -8, -6, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.2-d";
N := (13*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 4, 2, 4, -4, 8, -12, 2, -10, -10, -12, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.2-e";
N := (13*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, -3, 5, -7, 8, -9, -1, -3, -8, 2, -3, -4, -12, -2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.4-a";
N := (w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 4, 4, 4, 2, 8, 6, 8, 10, 0, 8, -10, 4, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.4-b";
N := (w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, -4, -2, -4, -8, -8, 12, 2, 2, 2, 12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.4-c";
N := (w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, -1, 2, -4, -4, 5, 6, -3, 5, 12, 9, 6, 6, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.4-d";
N := (w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, -3, -2, 4, -4, 1, 6, -13, -9, 12, -3, 10, 14, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.4-e";
N := (w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -4, -4, -8, -2, 4, -6, 8, 10, 4, 8, 10, 12, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.3-a";
N := (13*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -6, -6, -4, 2, 12, -4, 0, 8, -2, 6, -10, 12, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.3-b";
N := (13*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 2, 4, -2, 4, 4, 0, -12, 10, -6, 14, 0, 12, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.3-c";
N := (13*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -6, -1, 1, 5, 0, 3, -11, 12, -1, -12, -8, -6, -5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.3-d";
N := (13*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 4, 2, -4, 4, -12, 8, 2, -10, -10, -4, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 646.3-e";
N := (13*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, 0, 5, -7, -9, 8, -3, -1, -8, -3, 2, -12, -4, 1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 647.1-a";
N := (-16*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 5, 0, 2, -5, 2, 1, -6, -8, -1, -4, -3, -10, 6, -12, -7, 4, -7, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 647.2-a";
N := (-16*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 5, 2, 0, -5, 1, 2, -6, -1, -8, -3, -4, -10, -12, 6, 4, -7, -11, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-a";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -6, 2, -4, 2, 8, 8, 6, -12, -10, 0, -6, 0, 12, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-b";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 6, 2, -4, 2, 8, 8, -6, 12, -10, 0, 6, 0, -12, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-c";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 2, 8, 2, 8, -4, -6, 0, -4, -6, -12, 12, 12, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-d";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, -4, -6, 0, -6, -8, 4, -2, -8, -8, -6, 0, 12, -12, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.3-a";
N := (-9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -7, 4, 1, -5, -3, -1, -11, -2, 6, -2, -14, 6, 4, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.3-b";
N := (-9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -4, 4, -8, 6, -4, 4, 8, 12, 4, 8, 12, -4, 4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.3-c";
N := (-9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 4, 4, -8, 6, -4, 4, -8, -12, 4, -8, -12, 4, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.3-d";
N := (-9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, -2, 4, 4, -6, -4, 4, -8, 0, -2, 10, -6, 4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.2-a";
N := (-18*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -6, -4, 2, 2, 8, 8, -12, 6, -10, -6, 0, 12, 0, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.2-b";
N := (-18*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 6, -4, 2, 2, 8, 8, 12, -6, -10, 6, 0, -12, 0, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.2-c";
N := (-18*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 0, 8, 2, 2, -4, 8, 0, -6, -4, -12, -6, 12, 12, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.2-d";
N := (-18*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -4, 0, -6, -6, 4, -8, -8, -2, -8, 0, -6, -12, 12, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.4-a";
N := (9*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -7, -3, 4, -5, 1, -3, -11, -1, 6, -2, -2, 6, -14, -4, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.4-b";
N := (9*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, -4, -8, 4, 6, 4, -4, 12, 8, 4, 12, 8, 4, -4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.4-c";
N := (9*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 4, -8, 4, 6, 4, -4, -12, -8, 4, -12, -8, -4, 4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.4-d";
N := (9*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -2, 4, 4, -6, 4, -4, 0, -8, -2, -6, 10, -4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.1-a";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -2, 4, 0, 4, -4, 0, 0, 6, 10, 10, -4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.1-b";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, 0, -2, 0, -4, -12, -10, -8, -8, 4, -6, 0, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.1-c";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, 4, 4, -4, -4, -8, 8, -10, -2, 6, -4, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.2-a";
N := (-15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 5, -3, -4, -1, -4, -1, 12, 0, 11, -6, 9, -3, -6, 5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.2-b";
N := (-15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -6, -3, 4, 1, -9, -5, 3, -5, -5, 14, -2, 9, 15, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.2-c";
N := (-15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 6, 5, 2, 11, -1, -9, 9, 5, -3, 6, -6, 3, -7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.2-d";
N := (-15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 0, 0, 4, 8, -2, 6, -12, -2, 0, -6, -14, -4, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.2-e";
N := (-15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 2, 7, 4, -1, 1, 7, -3, 9, -3, 6, -6, -7, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.4-a";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -2, 0, 4, -4, 4, 0, 0, 6, 10, 10, -4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.4-b";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, 0, 0, -2, -12, -4, -8, -10, -8, -6, 4, -4, 0, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.4-c";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, 4, 4, -4, -4, 8, -8, -10, 6, -2, 4, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.3-a";
N := (15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 5, -3, -1, -4, -1, -4, 0, 12, 11, 9, -6, -6, -3, 14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.3-b";
N := (15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -6, 4, -3, -9, 1, 3, -5, -5, 14, -5, 9, -2, -2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.3-c";
N := (15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 6, 2, 5, -1, 11, 9, -9, 5, 6, -3, 3, -6, -4, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.3-d";
N := (15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 0, 4, 0, -2, 8, -12, 6, -2, -6, 0, -4, -14, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 650.3-e";
N := (15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 2, 4, 7, 1, -1, -3, 7, 9, 6, -3, -7, -6, 2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 659.1-a";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, -4, -2, -3, -6, 7, 1, -12, 5, 8, 6, 6, -6, -6, -4, 4, 14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 659.2-a";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -2, -4, -3, 7, -6, 1, 5, -12, 6, 8, 6, -6, -6, 4, -4, -14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 661.1-a";
N := (-4*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -4, 1, -8, 0, -7, -3, -11, -4, -2, -7, -11, 3, -6, 3, 6, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 661.2-a";
N := (4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 1, -4, -8, -7, 0, -3, -4, -11, -7, -2, -11, -6, 3, 6, 3, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 662.1-a";
N := (-13*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -1, 4, 0, -6, 7, 1, -2, 1, 3, 0, -3, 0, 0, -1, 5, 6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 662.2-a";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, -2, 2, 4, 0, -1, 7, 0, -3, 9, -1, 12, -4, 5, -9, -3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 662.2-b";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 2, 5, 0, -5, 6, -2, 5, 0, 3, 8, -6, 0, 0, -4, 8, 3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 662.2-c";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, -1, 6, -5, 0, 9, -4, -6, -7, 7, -5, 10, 4, 3, 3, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 662.2-d";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 2, 2, -4, 0, 3, -1, -8, 7, -7, -11, 4, 12, 13, -15, 9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 662.4-a";
N := (13*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 4, -1, 0, 7, -6, 1, 1, -2, 0, 3, -3, 0, 0, 5, -1, 5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 662.3-a";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 4, 2, 0, 4, -1, 0, 7, 9, -3, -1, -4, 12, -9, 5, 12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 662.3-b";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 5, 2, 0, 6, -5, -2, 0, 5, 8, 3, -6, 0, 0, 8, -4, -8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 662.3-c";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -4, 6, 0, -5, 9, -6, -4, 7, -7, -5, 4, 10, 3, 3, -14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 662.3-d";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, -4, 2, 0, -4, 3, -8, -1, -7, 7, -11, 12, 4, -15, 13, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.1-a";
N := (-10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -1, 6, 8, 2, -4, -7, 5, 6, 12, -4, -6, 9, -12, 3, -13, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.1-b";
N := (-10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 0, 0, 4, 8, 8, 0, -8, 0, 4, 14, -2, -4, -12, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.1-c";
N := (-10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, 6, -4, 8, 2, -4, -10, -12, 0, -4, -6, 6, 12, 6, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.1-d";
N := (-10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 1, -6, -4, -2, -4, 1, 3, -2, -8, 8, 6, 1, 0, -11, -5, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.2-a";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, -1, 3, 2, 2, -1, 2, 8, -6, -3, -13, -9, -3, -6, -9, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.2-b";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 3, -1, -3, -2, -6, -7, 6, -4, 6, -11, -5, 7, 11, -6, -7, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.2-c";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, 5, -4, 2, -7, -8, 6, 6, -7, 5, -1, 3, -4, -5, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.2-d";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -2, 2, 7, -1, -8, -7, 4, 7, -8, 1, 7, 14, -4, 3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.2-e";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -6, 8, -7, -1, -4, 11, 0, -9, -10, -3, 3, 0, 6, -13, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.2-f";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -2, 2, -1, 7, 8, 9, -12, -9, 8, 1, -1, -2, 12, -5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.2-g";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 4, -4, -2, -4, 10, -4, 10, 4, 10, 10, -8, 14, 8, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.2-h";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, 3, 8, 2, -1, 8, 2, -6, 9, 5, -9, -3, 0, -3, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.2-i";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, 0, -4, 2, 8, 2, -4, 6, -12, -10, -6, -12, 6, 0, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.2-j";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -6, 4, -2, -4, -5, -7, -8, -1, -8, 7, -2, 13, -11, -4, 2, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.5-a";
N := (-19*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, 5, -1, -6, 4, 3, 6, -4, -5, -6, -1, 5, 3, 5, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.6-a";
N := (-3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -2, 6, -4, -4, -2, -4, -4, 0, -8, -10, 6, 6, 4, -12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.6-b";
N := (-3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -7, 4, 4, -2, 2, 8, -1, -5, -10, 4, -10, -1, 0, -15, -10, -1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.4-a";
N := (10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -1, 2, 6, 2, 8, -4, 5, -7, 12, 6, -4, 9, -6, 3, -12, -13, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.4-b";
N := (10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 0, 4, 0, 8, 0, 8, 0, -8, 4, -2, 14, -12, -4, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.4-c";
N := (10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, 6, 8, -4, 2, -10, -4, 0, -12, -4, 6, -6, 6, 12, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.4-d";
N := (10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -6, -2, -4, -4, 3, 1, -8, -2, 8, 1, 6, -11, 0, -11, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.3-a";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -1, 5, 3, 2, 2, -1, 8, 2, -3, -6, -13, -3, -9, -9, -6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.3-b";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, 3, -3, -6, -2, -7, -4, 6, -11, 6, -5, 11, 7, -7, -6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.3-c";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 1, 5, 2, -4, -7, 6, -8, -7, 6, 5, 3, -1, -5, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.3-d";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, -2, 7, 2, -1, -7, -8, 7, 4, -8, 7, 1, -4, 14, 8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.3-e";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -6, -7, 8, -1, 11, -4, -9, 0, -10, 3, -3, 6, 0, 2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.3-f";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, -2, -1, 2, 7, 9, 8, -9, -12, 8, -1, 1, 12, -2, -8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.3-g";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 4, -2, -4, -4, -4, 10, 4, 10, 10, -8, 10, 8, 14, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.3-h";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -1, 3, 2, 8, -1, 2, 8, 9, -6, 5, -3, -9, -3, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.3-i";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 0, 2, -4, 8, -4, 2, -12, 6, -10, -12, -6, 0, 6, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.3-j";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 4, -6, -2, -5, -4, -7, -1, -8, 7, -8, -2, -11, 13, 2, -4, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.8-a";
N := (19*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 5, -5, -1, 4, -6, 3, -4, 6, -6, -5, -1, 3, 5, 4, 5, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.7-a";
N := (3*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -2, 6, -4, -4, -2, -4, -4, -8, 0, -10, 6, 6, -12, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 664.7-b";
N := (3*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, -7, 4, 2, -2, 8, -5, -1, 4, -10, -10, 0, -1, -10, -15, -5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-a";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 6, 6, -9, -5, -5, 13, 13, -13, 12, 12, -10, -10, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-b";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, -4, -6, 4, 4, 8, 8, 10, 6, 6, 12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-c";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 2, 2, 8, 8, 8, -6, -6, 14, 0, 0, -6, -6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-d";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -4, -6, 4, 8, 0, -8, -10, -10, 10, 4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-e";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 0, -6, 8, 4, -8, 0, -10, 10, -10, -4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-f";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 6, 2, -3, 7, 11, -3, -5, 5, 8, 4, -2, 2, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-g";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -4, -4, 2, -4, -4, 0, -12, 2, -6, 6, 0, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-h";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 2, 6, -3, 11, 7, -5, -3, 5, 4, 8, 2, -2, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-i";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 2, 4, -8, -8, 6, -10, 2, -4, 0, -6, -10, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-j";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -3, 2, 2, -1, -1, -1, 3, 3, -13, 0, 0, -6, -6, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-k";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -4, -4, 2, -4, -4, -12, 0, 2, 6, -6, 0, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-l";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, -2, 4, -8, -8, -10, 6, 2, 0, -4, -10, -6, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.2-a";
N := (13*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, -7, 2, -4, -4, -4, 6, 9, 2, -6, 0, -9, -6, -10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.2-b";
N := (13*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 5, 7, -4, -4, -8, -2, 0, -1, -8, -8, -8, -11, -6, -8, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-a";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, -4, -2, -2, -2, 4, -12, 0, 10, 12, 6, -12, -12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-b";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -2, 0, 6, 6, 12, 6, 0, -6, -6, 6, -12, 0, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-c";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 3, -4, -8, 1, -8, -8, -12, 0, -5, -6, -3, 0, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-d";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -2, 0, -6, -6, -12, -6, 0, 6, 6, -6, -12, 0, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-e";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 3, -4, 8, -1, 8, 8, 12, 0, 5, 6, 3, 0, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-f";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -5, 4, 0, 7, 8, 0, 4, -8, 3, 6, -5, -8, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-g";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 8, 4, 10, -8, 4, -12, 0, -2, 6, 6, -12, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-h";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -5, 4, 0, -7, -8, 0, -4, -8, -3, -6, 5, -8, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-i";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -4, 4, -2, 4, 4, 0, 0, -14, -6, -6, 12, -12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-j";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -6, -2, 6, 6, 0, 0, -6, 12, 6, -12, -6, 0, 0, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-k";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, -8, -6, 2, -2, 12, 8, -8, 6, -12, 2, 4, -4, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.4-l";
N := (-20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, -2, -6, -6, 0, 0, 6, 12, -6, 12, 6, 0, 0, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.6-a";
N := (-11*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, 3, -6, -6, 7, 6, -2, -6, -4, 11, -6, -11, -8, 10, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.6-b";
N := (-11*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 3, -6, 6, -7, -6, 2, 6, -4, -11, 6, 11, -8, -10, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.7-a";
N := (-17*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 4, -7, -4, -7, 6, -10, -6, -3, -10, -4, 6, 4, 8, -1, -7, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.7-b";
N := (-17*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -1, -1, 4, 2, 3, -8, 0, 6, -2, 1, 9, -10, -14, -10, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.7-c";
N := (-17*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -3, -2, 5, -8, 4, -8, -3, 6, -2, 12, 6, -6, 3, -7, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.7-d";
N := (-17*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, -1, -4, 2, -3, 8, 0, 6, 2, -1, -9, 10, 14, -10, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.3-a";
N := (13*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 2, -7, -4, -4, -4, 9, 6, 2, 0, -6, -6, -9, 5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.3-b";
N := (13*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 5, -4, 7, -4, -2, -8, -1, 0, -8, -8, -8, -6, -11, -9, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-a";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, -2, -4, -2, 4, -2, 0, -12, 10, 6, 12, -12, -12, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-b";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 0, -2, 6, 12, 6, 0, 6, -6, 6, -6, 0, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-c";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 3, -8, -4, 1, -8, -8, 0, -12, -5, -3, -6, 12, 0, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-d";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 0, -2, -6, -12, -6, 0, -6, 6, -6, 6, 0, -12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-e";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 3, 8, -4, -1, 8, 8, 0, 12, 5, 3, 6, -12, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-f";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -5, 0, 4, 7, 0, 8, -8, 4, 3, -5, 6, 4, -8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-g";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 4, 8, 10, 4, -8, 0, -12, -2, 6, 6, 12, -12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-h";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -5, 0, 4, -7, 0, -8, -8, -4, -3, 5, -6, -4, -8, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-i";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 4, -4, -2, 4, 4, 0, 0, -14, -6, -6, -12, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-j";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -6, 6, -2, 6, 0, 0, 12, -6, 6, -6, -12, 0, 0, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-k";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, -6, -8, 2, 12, -2, -8, 8, 6, 2, -12, -4, 4, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.5-l";
N := (20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, -6, -2, -6, 0, 0, 12, 6, -6, 6, 12, 0, 0, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.9-a";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, 3, -6, -6, 7, -2, 6, -4, -6, 11, -11, -6, 10, -8, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.9-b";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 3, 6, -6, -7, 2, -6, -4, 6, -11, 11, 6, -10, -8, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.8-a";
N := (-17*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 4, -7, -7, -4, 6, -6, -10, -10, -3, -4, 4, 6, -1, 8, 12, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.8-b";
N := (-17*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -1, -1, 2, 4, 3, 0, -8, -2, 6, 1, -10, 9, -10, -14, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.8-c";
N := (-17*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -3, 5, -2, -8, -8, 4, 6, -3, -2, 6, 12, 3, -6, -14, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.8-d";
N := (-17*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, -1, 2, -4, -3, 0, 8, 2, 6, -1, 10, -9, -10, 14, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-a";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 2, 0, 2, -4, 2, 0, -6, -6, -10, -6, -6, -12, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-b";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -4, -2, -4, -4, -8, 8, -2, 10, 6, 8, -8, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-c";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, 3, 5, -7, -10, -1, 3, -6, 2, 12, -3, -6, 6, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-d";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -4, -6, 4, 8, 0, 12, 6, -10, -2, 8, -4, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-e";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 6, -8, -2, 12, -10, -8, -10, 2, -6, 2, -2, -8, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-f";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -1, 3, 5, -9, -6, 9, -7, -2, 10, 4, 9, 10, -10, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-g";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 4, -6, 8, 4, 8, 12, 2, -10, -2, 12, -4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-h";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -1, -1, -5, 3, 2, -5, 5, -6, 2, -4, 7, 6, 14, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-i";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 4, -2, 0, -4, -8, 8, -10, -6, -10, 4, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-j";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -4, -6, 0, 0, 8, -8, -2, -2, 6, -8, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-k";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, -4, 2, -4, 8, 0, 12, 2, 6, 6, 0, 12, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-l";
N := (12*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -2, 0, 6, 4, -6, 8, -2, -10, -6, -6, -10, 0, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.3-a";
N := (15*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, -5, -2, -9, 10, -7, 8, -1, 8, -10, 1, -9, 7, -11, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.3-b";
N := (15*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 0, -2, 6, -10, -12, -12, 4, -12, 10, -4, -4, 2, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.3-c";
N := (15*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -3, 3, -6, 7, 10, 7, 4, -1, 4, -2, 9, -9, -7, 5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-a";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 2, 0, 2, 2, -4, -6, 0, -6, -6, -10, -12, -6, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-b";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -2, -4, -2, -4, -4, 8, -8, -2, 6, 10, -8, 8, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-c";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 3, 5, -7, -1, -10, -6, 3, 2, -3, 12, 6, -6, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-d";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -4, -6, 8, 4, 12, 0, 6, -2, -10, -4, 8, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-e";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 6, -8, -2, -10, 12, -10, -8, 2, 2, -6, -8, -2, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-f";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 3, 5, -9, 9, -6, -2, -7, 10, 9, 4, -10, 10, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-g";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 4, -6, 4, 8, 12, 8, 2, -2, -10, -4, 12, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-h";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -1, -5, 3, -5, 2, -6, 5, 2, 7, -4, 14, 6, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-i";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 4, -2, -4, 0, 8, -8, -10, -10, -6, 4, 4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-j";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, -4, -6, 0, 0, -8, 8, -2, 6, -2, -4, -8, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-k";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, -4, 2, 8, -4, 12, 0, 2, 6, 6, 12, 0, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-l";
N := (12*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -2, 0, 6, -6, 4, -2, 8, -10, -6, -6, 0, -10, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.6-a";
N := (15*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, -5, -2, -9, -7, 10, -1, 8, 8, 1, -10, 7, -9, -9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.6-b";
N := (15*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 0, -2, 6, -12, -10, 4, -12, -12, -4, 10, 2, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.6-c";
N := (15*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, 3, -6, 7, 7, 10, -1, 4, 4, 9, -2, -7, -9, 1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.1-a";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, 2, 7, 7, 4, 0, -13, -2, -5, -9, 1, -3, -10, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.3-a";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, -4, 6, -4, -4, -10, 8, 0, 2, -6, -2, -8, 0, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.3-b";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -5, 1, -4, -2, 6, -8, -4, -1, 8, -3, 12, 6, 10, 5, -5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.4-a";
N := (-14*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 4, 6, -8, 4, 8, -10, 0, -12, -6, 10, -12, -12, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.4-b";
N := (-14*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, -4, -2, 8, -4, -8, -2, 0, 12, -6, -6, 4, 4, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.4-c";
N := (-14*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -2, -4, -4, -2, -8, -12, -12, -2, -10, -2, -4, -4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.4-d";
N := (-14*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -5, -1, 4, 6, 6, 4, 8, 4, -7, -5, -6, -4, 9, 2, 2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.4-e";
N := (-14*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -8, 6, 0, -8, 8, 10, 8, -8, -6, 2, 12, -4, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.4-f";
N := (-14*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 2, -8, -4, 2, 0, -8, -12, 6, 6, -10, -12, 4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.4-g";
N := (-14*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, 4, -4, 2, 4, -2, 0, 0, -2, 14, 10, 8, 8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.7-a";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 4, 2, 8, -2, -2, 2, -6, 0, 2, -2, 2, -4, -4, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.7-b";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 2, -4, 0, 2, 0, 12, 0, 6, 6, -10, 12, 12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.8-a";
N := (-13*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 2, 0, 0, 7, 1, -2, -4, 9, -10, 11, 3, -9, -9, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.8-b";
N := (-13*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -6, 4, -4, -5, -1, -6, -4, 7, 6, 5, -13, 3, -1, 14, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.8-c";
N := (-13*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 4, -2, 6, 5, 7, 8, -8, -9, -6, -11, 3, 9, 3, 6, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.8-d";
N := (-13*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, -6, -6, 4, 6, 6, 6, 6, 4, 4, 10, -10, -4, 0, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.8-e";
N := (-13*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 6, 6, -8, 4, -2, 8, 0, 8, 2, 6, 6, -12, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.8-f";
N := (-13*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, 2, 4, 0, 2, 0, -12, 0, 6, 6, -10, -12, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.8-g";
N := (-13*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 6, 0, 0, 7, 3, 6, 12, 3, -2, 1, -5, -1, -1, 6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.2-a";
N := (16*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 0, 2, 7, 7, 4, 0, -2, -13, -5, 1, -9, -10, -3, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.6-a";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, -4, -4, 6, -4, -10, 0, 8, 2, -2, -6, 0, -8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.6-b";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 1, -5, -4, 6, -2, -8, -4, 8, -1, -3, 6, 12, 5, 10, 2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.5-a";
N := (14*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 4, -8, 6, 4, 8, 0, -10, -12, 10, -6, -12, -12, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.5-b";
N := (14*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, -4, 8, -2, -4, -8, 0, -2, 12, -6, -6, 4, 4, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.5-c";
N := (14*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -2, -4, -4, -2, -8, -12, -12, -2, -2, -10, -4, -4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.5-d";
N := (14*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -1, -5, 4, 6, 6, 4, 8, -7, 4, -5, -4, -6, 2, 9, 9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.5-e";
N := (14*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -8, 0, 6, -8, 8, 8, 10, -8, 2, -6, -4, 12, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.5-f";
N := (14*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 2, -4, -8, 2, 0, -12, -8, 6, -10, 6, 4, -12, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.5-g";
N := (14*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, 4, 2, -4, 4, -2, 0, 0, -2, 10, 14, 8, 8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.10-a";
N := (13*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, -4, 2, -2, 8, -2, 2, 0, -6, 2, 2, -2, -4, -4, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.10-b";
N := (13*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 2, 0, -4, 2, 0, 0, 12, 6, -10, 6, 12, 12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.9-a";
N := (-13*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 0, 2, 0, 1, 7, -2, -4, -10, 9, 11, -9, 3, 2, -9, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.9-b";
N := (-13*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, -6, -4, -1, -5, -6, -4, 6, 7, 5, 3, -13, 14, -1, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.9-c";
N := (-13*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -2, 4, 6, 7, 5, 8, -8, -6, -9, -11, 9, 3, 6, 3, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.9-d";
N := (-13*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, -6, -6, 6, 4, 6, 6, 4, 6, 4, -10, 10, 0, -4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.9-e";
N := (-13*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 2, 6, 4, -8, -2, 8, 8, 0, 2, 6, 6, -4, -12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.9-f";
N := (-13*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, 2, 0, 4, 2, 0, 0, -12, 6, -10, 6, -12, -12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.9-g";
N := (-13*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 6, 0, 3, 7, 6, 12, -2, 3, 1, -1, -5, 6, -1, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 698.1-a";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -1, -1, -8, -6, -2, 8, -1, 7, 1, -2, -6, 11, -9, -6, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 698.1-b";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 1, 7, 4, 2, 6, 12, -7, 9, 1, 10, -6, 3, -9, -10, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 698.2-a";
N := (13*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -1, -2, 0, -5, -4, -11, 4, 3, 8, -10, 4, -6, 0, 10, 8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 698.4-a";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, 1, -1, -6, -8, -2, -1, 8, 1, 7, -2, 11, -6, -6, -9, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 698.4-b";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, -1, 7, 2, 4, 6, -7, 12, 1, 9, 10, 3, -6, -10, -9, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 698.3-a";
N := (13*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -1, -2, -5, 0, -4, 4, -11, 8, 3, -10, -6, 4, 10, 0, 3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 706.1-a";
N := (-5*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 3, -2, 0, 0, -4, -2, 7, 12, -10, 8, 12, 1, -9, 15, 9, 4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 706.4-a";
N := (5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, -2, 3, 0, -4, 0, -2, 12, 7, 8, -10, 12, -9, 1, 9, 15, 9, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 712.1-a";
N := (2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 5, -3, -1, -1, -1, -10, -4, -6, 0, -1, 6, -12, -12, -6, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 712.1-b";
N := (2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, -1, -5, 1, -3, -2, 0, 0, -12, 11, -2, 2, 6, -12, -5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 712.5-a";
N := (-9*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, 2, -1, 7, -5, -3, -4, -2, -4, 12, -11, -10, -6, -4, -2, 4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 712.6-a";
N := (13*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 6, -6, 4, 4, 2, 12, 4, -4, -4, -6, 10, 6, -12, 4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 712.4-a";
N := (2*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -4, -3, -1, -1, -1, -4, -10, 0, -6, -1, -12, 6, -6, -12, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 712.4-b";
N := (2*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -1, 1, -5, -3, 0, -2, -12, 0, 11, 2, -2, -12, 6, 8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 712.8-a";
N := (9*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -3, -1, -5, 7, -3, -2, -4, 12, -4, -11, -6, -10, -2, -4, 3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 712.7-a";
N := (13*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 6, -6, 4, 4, 2, 4, 12, -4, -4, -6, 6, 10, 4, -12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.1-a";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -1, 4, -7, 0, 0, -4, 9, -1, 3, 8, 5, -1, -1, 10, -10, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.1-b";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -3, 2, 0, -2, -1, 4, 6, 7, 9, 4, -9, -8, -5, 12, -7, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.1-c";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -3, -4, -4, -4, 5, -1, 3, 12, 5, 3, -9, -6, -6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.1-d";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -7, 7, 4, -6, 0, 5, -6, 2, 9, -5, -4, -11, -2, -13, -8, -9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.1-e";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -2, 4, 0, 6, 4, 12, 8, -8, -6, 2, 6, 12, 8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.1-f";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -1, 5, 0, 2, -4, -7, -10, -10, -3, -9, 8, -9, -6, -3, 0, 5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.1-g";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -3, -5, -2, 4, -6, -3, 4, -6, -1, 1, -12, -7, 0, -3, -4, 5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.2-a";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 4, -1, -7, 0, 0, -4, -1, 9, 8, 3, 5, -1, -1, -10, 10, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.2-b";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 1, 2, -2, 0, -1, 6, 4, 9, 7, 4, -8, -9, 12, -5, 11, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.2-c";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, -3, -4, -4, -4, -1, 5, 12, 3, 5, -9, 3, -6, -6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.2-d";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 7, -7, 4, 0, -6, 5, 2, -6, -5, 9, -4, -2, -11, -8, -13, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.2-e";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -2, 0, 4, 6, 12, 4, -8, 8, -6, 6, 2, 8, 12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.2-f";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 5, -1, 0, -4, 2, -7, -10, -10, -9, -3, 8, -6, -9, 0, -3, 5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.2-g";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -5, -3, -2, -6, 4, -3, -6, 4, 1, -1, -12, 0, -7, -4, -3, -3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 718.1-a";
N := (13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -1, -6, 2, -7, -7, -1, -10, 0, 3, 8, -9, 0, -12, 0, 8, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 718.1-b";
N := (13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 2, 1, -6, 0, -2, -4, -8, 3, 3, 6, 0, 6, 0, -4, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 718.4-a";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 2, -6, -7, 2, -7, -10, -1, 3, 0, 8, 0, -9, 0, -12, -13, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 718.4-b";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 2, 1, 0, -6, -2, -8, -4, 3, 3, 6, 6, 0, -4, 0, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-a";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 2, -2, 2, 4, 0, -12, 8, -10, 2, -2, 0, 12, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-b";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 4, 4, 3, 1, -1, 4, -7, 8, 5, 4, -6, 0, 0, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-c";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -2, -6, 2, 8, 4, 8, -8, -6, -6, -10, 12, 4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-d";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, -4, 7, -7, -5, -12, -3, 8, 5, 8, -2, 12, -12, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-e";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 4, 6, -2, 2, 4, 8, -4, 8, -8, 6, 0, 12, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.3-a";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 1, -5, -3, 1, 4, -10, -12, -11, -8, -2, -13, -2, -8, -1, -12, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.3-b";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 1, 5, 3, -1, 4, 10, 12, 11, 8, -2, -13, 2, 8, -1, -12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.3-c";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -1, 1, -3, 1, -4, 10, 10, -9, 12, 2, 3, 6, 6, -3, 14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.4-a";
N := (17*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 0, 7, -2, 9, -7, -8, 8, -7, 2, 13, -1, -5, 6, -3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.4-b";
N := (17*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, 6, -6, -8, 2, -2, -2, 8, 6, 10, 4, 6, -4, -6, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.4-c";
N := (17*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -6, 2, -4, -6, -8, 8, -8, 4, -10, 2, -10, 4, 0, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.4-d";
N := (17*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 2, 3, -2, -1, 7, 10, -6, 3, -4, -9, -3, 3, -6, 13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.4-e";
N := (17*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 2, -3, 2, -1, -7, -10, 6, -3, -4, 9, -3, 3, 6, -13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.4-f";
N := (17*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -4, 6, 6, 8, 2, 2, 2, -8, -6, 10, -4, 6, -4, 6, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.4-g";
N := (17*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 0, -7, 2, 9, 7, 8, -8, 7, 2, -13, -1, -5, -6, 3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.2-a";
N := (-19*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 6, -2, 2, 0, 4, 8, -12, -10, -2, 2, 12, 0, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.2-b";
N := (-19*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 4, 4, 3, 1, 4, -1, 8, -7, 5, -6, 4, 0, 0, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.2-c";
N := (-19*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 2, -6, 2, 4, 8, -8, 8, -6, -10, -6, 4, 12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.2-d";
N := (-19*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 0, 7, -7, -12, -5, 8, -3, 5, -2, 8, -12, 12, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.2-e";
N := (-19*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -2, 6, -2, 4, 2, -4, 8, 8, 6, -8, 12, 0, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.6-a";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -5, 1, -3, 1, 4, -12, -10, -8, -11, -2, -2, -13, -1, -8, 5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.6-b";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 5, 1, 3, -1, 4, 12, 10, 8, 11, -2, 2, -13, -1, 8, -5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.6-c";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 1, -1, -3, 1, -4, 10, 10, 12, -9, 2, 6, 3, -3, 6, -5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.5-a";
N := (17*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 0, 7, -2, 9, -8, -7, -7, 8, 2, -1, 13, 6, -5, -2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.5-b";
N := (17*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 4, -6, -8, 2, -2, -2, 6, 8, 10, 6, 4, -6, -4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.5-c";
N := (17*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, 6, 2, -4, -6, 8, -8, 4, -8, -10, -10, 2, 0, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.5-d";
N := (17*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 4, 3, -2, -1, 10, 7, 3, -6, -4, -3, -9, -6, 3, -10, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.5-e";
N := (17*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -4, -3, 2, -1, -10, -7, -3, 6, -4, -3, 9, 6, 3, -10, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.5-f";
N := (17*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, -4, 6, 8, 2, 2, 2, -6, -8, 10, 6, -4, 6, -4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.5-g";
N := (17*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 0, -7, 2, 9, 8, 7, 7, -8, 2, -1, -13, -6, -5, -2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-a";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 5, 5, 4, -4, 5, 1, -4, 8, 2, 8, -5, -6, -12, -12, 6, -3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-b";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 5, 5, -4, 5, -4, 1, 8, -4, -8, -2, -5, 12, 6, -6, 12, 12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-c";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, 5, 0, -7, -7, -10, 8, 8, 0, 0, -13, 0, 0, 0, 0, 5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-d";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 5, 5, 4, 5, -4, 1, 8, -4, 8, 2, -5, -12, -6, 6, -12, 12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-e";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 5, 5, -4, -4, 5, 1, -4, 8, -2, -8, -5, 6, 12, 12, -6, -3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-f";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -7, 0, 8, -1, 5, -13, 5, 0, 0, -13, 0, 0, 0, 0, -16, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-g";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -7, 2, 0, -1, 8, 5, 5, -13, 0, 0, -13, 0, 0, 0, 0, 11, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 746.1-a";
N := (-15*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, 2, -4, 4, 6, 12, 4, -8, 0, -10, 2, -10, -4, 12, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 746.1-b";
N := (-15*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -4, -2, 2, 0, -1, 7, 1, -8, 0, -8, -4, -9, 14, 15, 3, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 746.4-a";
N := (-15*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 2, 2, 4, -4, 6, 4, 12, 0, -8, -10, -10, 2, 12, -4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 746.4-b";
N := (-15*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, -4, 2, -1, 0, 7, -8, 1, -8, 0, -4, 14, -9, 3, 15, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 747.1-a";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 1, -2, -7, 7, -4, 4, -4, 4, 2, -10, -9, 2, 6, 0, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 747.1-b";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, 1, 0, 3, -3, 7, -9, -7, 4, -4, -6, -12, 12, -14, -10, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 747.2-a";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 1, 0, -2, 7, -7, -4, -4, 4, 2, 4, -10, 2, -9, 0, 6, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 747.2-b";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 1, -1, 0, -3, 3, 7, -7, -9, -4, 4, -6, 12, -12, -10, -14, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-a";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 5, -3, 5, 5, 2, -1, -1, 6, -4, 3, 3, 0, 0, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-b";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 1, 5, 1, 5, 2, -5, -1, 6, -4, 3, -13, -8, 8, -12, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-c";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -3, 0, 0, 2, -6, 9, -9, 11, 3, 13, 10, 0, -4, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-d";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 1, 6, -4, -8, -2, -7, 3, -9, -1, 9, 0, 0, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.3-a";
N := (-18*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 6, -4, 0, -8, -6, 4, 4, 8, -2, -6, 2, 4, 6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.3-b";
N := (-18*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -2, -2, -4, 0, 6, 8, -4, 8, -6, 6, -2, 0, 8, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.3-c";
N := (-18*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 1, 1, -5, 7, 4, 9, 9, -12, -12, -1, 7, 4, 6, -12, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.3-d";
N := (-18*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, -6, 4, 2, -4, -10, -8, -8, -2, -6, -6, -6, 4, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.3-e";
N := (-18*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, 2, -8, -8, -2, -12, 12, 0, 6, -2, -10, -4, 12, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.3-f";
N := (-18*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 1, -3, -5, -1, -4, 5, 13, -8, 4, 3, -9, -12, -14, 12, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.3-g";
N := (-18*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 1, -1, 1, 1, -8, 5, -11, -2, 4, 9, 11, -4, -12, -12, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.3-h";
N := (-18*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -6, 2, 0, 4, -6, -8, 4, 8, 10, 6, -10, -8, 12, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.3-i";
N := (-18*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -5, -1, -5, 1, -8, -9, -3, -6, -12, 1, 11, -4, 12, -12, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.4-a";
N := (-14*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -4, 0, 0, 0, 2, 12, 12, 0, -10, -6, 2, -6, -4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.4-b";
N := (-14*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, 2, -2, 8, 8, -8, -2, 8, 2, -6, -6, -4, 10, -6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.7-a";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, 3, -3, 0, 4, -2, 7, 10, 11, 5, 9, -1, -8, 6, 1, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.7-b";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, 1, -7, -8, -4, 6, -1, 2, 1, -1, -7, 3, -4, -10, -11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.7-c";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 2, -6, 8, -4, -2, 4, 8, 0, 6, 6, -2, 4, 0, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.7-d";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 1, -3, -4, -2, -4, -1, 10, -3, -5, -3, -9, 0, 12, 5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.7-e";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 6, -6, 0, 4, -2, 4, -8, 8, 2, 6, 14, 4, 0, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.8-a";
N := (-21*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, -4, -3, 1, -1, 4, 11, 1, 0, 12, -9, -5, 6, -4, -13, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.8-b";
N := (-21*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 0, 2, -4, 2, -2, 0, 6, 4, -12, 10, -6, 4, -2, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.8-c";
N := (-21*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 3, -3, 0, -4, -2, -7, -10, -11, 5, 9, -1, 8, -6, -1, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.8-d";
N := (-21*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, 0, 5, 5, 1, -4, 7, -1, -12, -4, -9, 3, -6, 12, 7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.8-e";
N := (-21*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -4, 1, 1, 0, -4, -6, -5, 2, 5, 3, -11, -9, 4, 6, -7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.8-f";
N := (-21*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, 5, -3, 4, 2, 4, -1, -2, 9, 3, 9, -5, 12, -4, 5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.8-g";
N := (-21*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, -3, 5, -4, 2, -8, -9, -6, 1, 3, 1, 3, -8, -8, 13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-a";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, -4, -3, 5, 5, 2, -1, -1, 6, -4, 3, 3, 0, 0, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-b";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 1, 4, 5, 5, 1, 2, -1, -5, 6, -4, -13, 3, 8, -8, 11, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-c";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 1, -3, 0, 0, 2, 9, -6, -9, 11, 13, 3, 0, 10, 7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-d";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 1, 1, -4, 6, -8, -7, -2, 3, -9, 9, -1, 0, 0, -9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.6-a";
N := (18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 0, -4, -8, 0, -6, 4, 4, 8, -2, 2, -6, 6, 4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.6-b";
N := (18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 2, -2, 0, -4, 6, -4, 8, 8, -6, -2, 6, 8, 0, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.6-c";
N := (18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, 1, 7, -5, 4, 9, 9, -12, -12, 7, -1, 6, 4, 5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.6-d";
N := (18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, -6, 2, 4, -4, -8, -10, -8, -2, -6, -6, 4, -6, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.6-e";
N := (18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 2, -8, -8, -2, 12, -12, 0, 6, -10, -2, 12, -4, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.6-f";
N := (18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, -3, -1, -5, -4, 13, 5, -8, 4, -9, 3, -14, -12, -11, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.6-g";
N := (18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 1, 2, -1, 1, 1, -8, -11, 5, -2, 4, 11, 9, -12, -4, 11, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.6-h";
N := (18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 6, 2, 4, 0, -6, 4, -8, 8, 10, -10, 6, 12, -8, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.6-i";
N := (18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -5, 6, -1, 1, -5, -8, -3, -9, -6, -12, 11, 1, 12, -4, -13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.5-a";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 6, 0, 0, 0, 2, 12, 12, 0, -10, 2, -6, -4, -6, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.5-b";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, 2, 8, -2, 8, -2, -8, 8, 2, -6, -6, 10, -4, 16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.10-a";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 3, 0, -3, 4, 0, -2, 10, 7, 11, 5, -1, 9, 6, -8, 12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.10-b";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 0, -7, -4, -8, 6, 2, -1, 1, -1, 3, -7, -10, -4, 0, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.10-c";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 2, -6, -4, 8, -2, 8, 4, 0, 6, -2, 6, 0, 4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.10-d";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 1, 4, -3, -2, -4, -4, 10, -1, -3, -5, -9, -3, 12, 0, 4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.10-e";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 6, -6, 4, 0, -2, -8, 4, 8, 2, 14, 6, 0, 4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.9-a";
N := (-21*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 3, -3, -1, 1, 4, 1, 11, 0, 12, -5, -9, -4, 6, 4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.9-b";
N := (-21*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 2, 2, 2, -4, -2, 6, 0, 4, -12, -6, 10, -2, 4, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.9-c";
N := (-21*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 0, -3, -4, 0, -2, -10, -7, -11, 5, -1, 9, -6, 8, -12, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.9-d";
N := (-21*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 1, 5, 1, 5, -4, -1, 7, -12, -4, 3, -9, 12, -6, 4, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.9-e";
N := (-21*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 1, -4, 1, -4, 0, -6, 2, -5, 5, 3, -9, -11, 6, 4, -4, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.9-f";
N := (-21*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 5, 0, -3, 2, 4, 4, -2, -1, 9, 3, -5, 9, -4, 12, 4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.9-g";
N := (-21*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -3, -4, 5, 2, -4, -8, -6, -9, 1, 3, 3, 1, -8, -8, -4, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 757.1-a";
N := (12*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 5, 1, 5, 0, 4, 6, 2, 4, -12, -7, -2, 3, -5, 3, -6, -8, 12, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 757.1-b";
N := (12*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -1, -1, 0, 4, -2, 2, -12, 4, -7, -6, 5, -1, 11, -10, -8, 4, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 757.2-a";
N := (12*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 5, 5, 1, 0, 6, 4, 2, -12, 4, -2, -7, 3, 3, -5, -8, -6, -13, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 757.2-b";
N := (12*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -1, -1, 0, -2, 4, 2, 4, -12, -6, -7, 5, 11, -1, -8, -10, 7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 761.1-a";
N := (-16*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 2, 1, -3, 1, 5, -9, 9, -4, 3, 9, 4, -12, -6, -1, 3, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 761.2-a";
N := (16*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 1, 2, -3, 5, 1, -9, -4, 9, 9, 3, 4, -6, -12, 3, -1, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-a";
N := (16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 4, 2, -5, -4, 1, 7, -7, -9, 9, 6, -2, 12, 5, -6, -6, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-b";
N := (16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -6, 6, 0, -4, -2, 8, -8, 0, 8, -14, -2, 2, 4, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-c";
N := (16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 2, 4, 4, -6, -12, -4, 0, 0, -14, -10, 6, -4, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-d";
N := (16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, 3, 6, -1, 7, -1, -11, 3, -10, 4, -2, -7, -2, 8, -5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-e";
N := (16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -7, -2, 1, -3, 9, -7, 3, -6, 4, 2, -3, -10, -4, 7, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-f";
N := (16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 2, 4, -4, 2, 8, 12, -8, 8, 2, 6, 6, 12, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-g";
N := (16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 0, -3, 6, -5, 1, -1, -9, -1, -6, -8, 6, -1, 6, 8, 5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-h";
N := (16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -4, -2, -3, -4, 1, -7, -7, 1, 5, 2, -2, 0, -1, -6, 10, -5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.3-a";
N := (-13*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 5, 2, -6, 2, -7, -7, -10, -4, -6, 9, -4, 6, -3, 15, -9, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-a";
N := (16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 2, 4, -5, 1, -4, 7, -9, -7, 6, 9, -2, 5, 12, -6, -6, 3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-b";
N := (16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 2, 6, -4, 0, -2, -8, 8, 8, 0, -14, 2, -2, -4, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-c";
N := (16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, 2, 4, 4, -6, -4, -12, 0, 0, -14, 6, -10, -4, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-d";
N := (16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 3, -1, 6, 7, -11, -1, -10, 3, 4, -7, -2, 8, -2, 9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-e";
N := (16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -7, 1, -2, -3, -7, 9, -6, 3, 4, -3, 2, -4, -10, 7, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-f";
N := (16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 2, -4, 4, 2, 12, 8, 8, -8, 2, 6, 6, -4, 12, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-g";
N := (16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -3, -5, 6, 1, -9, -1, -6, -1, -8, -1, 6, 8, 6, 5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-h";
N := (16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -2, -4, -3, 1, -4, -7, 1, -7, 2, 5, -2, -1, 0, 10, -6, 3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.6-a";
N := (13*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 5, -6, -7, 2, -7, -4, -10, 9, -6, -4, -3, 6, -9, 15, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 766.2-a";
N := (-15*w + 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -2, 0, -4, -6, -4, 2, 4, 0, -2, -2, 6, 4, 14, 12, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 766.2-b";
N := (-15*w + 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -1, -6, -2, 6, 0, 4, 10, 5, 0, 0, 6, 11, 6, -6, 4, -16, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 766.3-a";
N := (15*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 0, 0, -6, -4, -4, 4, 2, -2, 0, -2, 4, 6, 12, 14, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 766.3-b";
N := (15*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -6, -1, -2, 0, 6, 4, 5, 10, 0, 0, 6, 6, 11, 4, -6, -13, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 767.1-a";
N := (-14*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 5, 3, 0, -8, 1, 2, -4, -11, -10, -12, 8, -9, -1, -2, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 767.2-a";
N := (-2*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -2, -6, 4, 4, 2, -4, -4, 8, -8, 10, -6, 10, -4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 767.4-a";
N := (14*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 5, 3, 0, 1, -8, 2, -11, -4, -12, -10, 8, -1, -9, -2, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 767.3-a";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -2, -6, 4, 4, 2, -4, -4, -8, 8, 10, 10, -6, -4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-a";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, 4, 0, -6, -2, -6, 0, -4, -6, -6, -10, -6, 12, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-b";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -6, 6, -6, 4, -12, -4, -8, 6, 2, 6, 6, 0, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-c";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -6, 6, 4, 0, -6, 0, 0, -8, 2, -2, -10, 8, -12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-a";
N := (-15*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, -6, -4, 4, 6, 4, 0, -8, 10, 6, -6, 4, 4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-b";
N := (-15*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 0, -4, 1, -9, -11, 3, -2, -5, -12, -9, -11, 4, 2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-c";
N := (-15*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -6, 0, -4, 1, -3, -3, 1, -6, 3, -4, 7, -1, -4, 2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-d";
N := (-15*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 5, -8, -8, 4, 10, 2, -3, -11, 10, 14, 14, 9, 12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-e";
N := (-15*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 4, 0, 6, -4, 2, 2, -4, 4, -2, 6, 2, 4, 6, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.4-a";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 4, -6, 0, -2, -6, -4, 0, -6, -10, -6, 12, -6, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.4-b";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -6, -6, 6, 4, -12, -8, -4, 6, 6, 2, 0, 6, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.4-c";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -6, 6, 0, 4, -6, 0, -8, 0, 2, -10, -2, -12, 8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.3-a";
N := (-15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -6, 4, -4, 6, 4, -8, 0, 10, -6, 6, 4, 4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.3-b";
N := (-15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 0, 1, -4, -9, -11, -2, 3, -5, -9, -12, 4, -11, -2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.3-c";
N := (-15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 1, 0, 1, -4, -3, -3, -6, 1, 3, 7, -4, -4, -1, -14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.3-d";
N := (-15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 5, -8, -8, 4, 10, -3, 2, -11, 14, 10, 9, 14, -5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.3-e";
N := (-15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -4, 0, -4, 6, 2, 2, 4, -4, -2, 2, 6, 6, 4, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.1-a";
N := (-19*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, -4, 7, -8, 1, 8, -4, -11, -11, -10, -9, 1, 2, -5, -4, 5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.1-b";
N := (-19*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -1, 4, -7, 0, 5, -4, 4, -1, -7, -2, -5, 9, 14, -5, 0, 3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.2-a";
N := (9*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -2, 6, -2, 8, 4, -6, 4, 4, -4, 8, -2, 6, -2, -4, 12, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.2-b";
N := (9*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -1, -5, -4, 0, -6, -9, -6, -12, -7, 3, -4, -6, 2, 4, -12, 4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.4-a";
N := (19*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, -3, 7, 1, -8, 8, -11, -4, -10, -11, -9, 2, 1, -4, -5, -8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.4-b";
N := (19*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 4, -1, -7, 5, 0, -4, -1, 4, -2, -7, -5, 14, 9, 0, -5, -12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.3-a";
N := (9*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 6, -2, -2, 4, 8, -6, 4, 4, 8, -4, -2, -2, 6, 12, -4, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.3-b";
N := (9*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -5, -1, -4, -6, 0, -9, -12, -6, 3, -7, -4, 2, -6, -12, 4, 3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.2-a";
N := (14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 0, 3, -1, -3, -7, -2, -1, 11, -8, -2, 3, -4, -14, 0, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.2-b";
N := (14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -4, 0, 2, -2, -4, -4, 10, -2, -6, -10, -2, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.2-c";
N := (14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 2, 4, 0, -2, -4, 12, -8, 0, -2, 14, 0, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.2-d";
N := (14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 1, -7, -5, 3, -2, -1, -9, -8, 6, -5, -4, 6, -4, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.2-e";
N := (14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 6, 2, -6, -4, 4, -4, 8, -8, 4, -6, 2, 4, 6, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.2-f";
N := (14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, 8, -8, 6, -2, -4, -12, -2, 6, 10, -10, 6, 8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.4-a";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, -2, 1, 3, 1, -4, -1, -7, -8, 0, -6, -1, -2, 6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.4-b";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -6, 6, 8, 4, 2, -4, 12, 12, 4, 6, -10, -4, -8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.4-c";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 1, 6, 3, 5, -5, -4, 11, 9, -12, -8, -6, -1, -10, 10, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.4-d";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 1, 4, -3, 1, -7, 2, 1, -7, -6, 0, 0, -9, 0, -6, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.4-e";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -2, -2, 0, 4, 2, -4, -4, 4, -12, 6, -10, 4, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.4-f";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 7, -4, -1, -1, 3, -2, -11, 9, -2, 0, 4, -1, 0, -10, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.3-a";
N := (14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 3, 0, -1, -7, -3, -2, 11, -1, -2, -8, -4, 3, 0, -14, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.3-b";
N := (14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, -4, 2, 0, -2, -4, -4, -2, 10, -10, -6, 0, -2, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.3-c";
N := (14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 2, 0, 4, -2, 12, -4, 0, -8, 14, -2, -4, 0, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.3-d";
N := (14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, -7, 3, -5, -2, -9, -1, 6, -8, -4, -5, -4, 6, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.3-e";
N := (14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 0, 2, -4, -6, 4, 8, -4, 4, -8, 2, -6, 6, 4, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.3-f";
N := (14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 8, 6, -8, -2, -12, -4, 6, -2, -10, 10, 8, 6, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.5-a";
N := (-7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -1, 1, 1, 3, -4, -7, -1, 0, -8, -1, -6, 6, -2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.5-b";
N := (-7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -2, 6, 4, 8, 2, 12, -4, 4, 12, -10, 6, -8, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.5-c";
N := (-7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 6, 1, 3, -5, 5, -4, 9, 11, -8, -12, -1, -6, 10, -10, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.5-d";
N := (-7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 1, -3, -7, 1, 2, -7, 1, 0, -6, -9, 0, -6, 0, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.5-e";
N := (-7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 2, -2, 4, 0, 2, -4, -4, -12, 4, -10, 6, 0, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.5-f";
N := (-7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, 7, -1, 3, -1, -2, 9, -11, 0, -2, -1, 4, -10, 0, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 799.1-a";
N := (-16*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, 4, 1, 8, 2, 3, -8, -2, 0, 2, 0, 0, 0, 3, 4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 799.1-b";
N := (-16*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -2, 6, -4, -4, 10, -12, 4, 0, -6, 6, -10, -12, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 799.2-a";
N := (16*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, 1, 4, 2, 8, 3, -2, -8, 0, 2, 0, 0, 3, 0, 1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 799.2-b";
N := (16*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, 6, -2, -4, -4, 10, 4, -12, 0, -6, -10, 6, 4, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-a";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 2, 4, 0, 0, 10, -2, -4, 10, -14, 6, -4, 8, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-b";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 2, 4, -8, -8, -2, 2, 12, 2, -6, -2, 12, -8, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-c";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, 4, 0, 4, 2, -10, -8, -2, 10, -2, -12, -8, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-a";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 5, 5, 8, 3, -3, -4, 4, -7, 7, -14, -1, -1, -9, 9, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-b";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 2, -2, -8, 8, -8, 8, 0, 0, -10, 10, 10, 4, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-c";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -5, -3, -1, -2, 5, -8, -12, 6, 1, 3, -12, 0, -9, -10, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-d";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 2, 4, -4, 4, 4, 0, -8, 6, 6, 6, -4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-e";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 0, 5, 7, -4, -8, 3, 3, -2, -9, -3, 3, 9, 14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-f";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -5, 3, 3, 2, -9, 4, 8, 2, 11, 9, 4, -4, 9, -10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-g";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, 0, 3, -7, -4, -4, -7, -13, 2, -5, -5, 7, -3, 10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-h";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 1, 0, -7, -5, 8, 4, -3, -3, -2, -3, -9, -9, -3, 2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-i";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 1, -1, -5, 2, -5, 8, 0, 2, 1, 1, 0, 4, 3, -2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-j";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 2, 0, 0, 2, 4, 8, -2, 4, -10, 2, -12, -12, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-k";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -1, -8, 7, -7, -8, 8, -9, 9, 2, -11, -11, -5, 5, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-l";
N := (-10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 5, 5, -5, 2, 1, -8, -12, -2, 3, -9, 12, 8, 9, 14, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-a";
N := (-20*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 2, 0, 4, 10, 0, -4, -2, 10, 6, -14, 8, -4, -14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-b";
N := (-20*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 2, -8, 4, -2, -8, 12, 2, 2, -2, -6, -8, 12, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-c";
N := (-20*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, 0, 4, 2, 4, -8, -10, -2, -2, 10, -8, -12, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-a";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 5, 5, 8, -3, 3, 4, -4, 7, -7, -14, -1, -1, 9, -9, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-b";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 2, -2, 8, -8, 8, -8, 0, 0, -10, 10, 10, -4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-c";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -5, 4, -3, -2, -1, -8, 5, 6, -12, 1, -12, 3, -9, 0, 13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-d";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 2, -4, 4, 4, 4, -8, 0, 6, 6, 6, -12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-e";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 1, 0, 7, 5, -8, -4, 3, 3, -2, -3, -9, 9, 3, -2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-f";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 0, 3, 2, 3, 4, -9, 2, 8, 11, 4, 9, 9, -4, 5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-g";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, 0, -7, 3, -4, -4, -13, -7, 2, -5, -5, -3, 7, -2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-h";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 0, -5, -7, 4, 8, -3, -3, -2, -9, -3, -3, -9, -14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-i";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 1, 4, -1, 2, -5, 8, -5, 2, 0, 1, 0, 1, 3, 4, -5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-j";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 2, 0, 0, 4, 2, -2, 8, 4, 2, -10, -12, -12, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-k";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -1, -8, -7, 7, 8, -8, 9, -9, 2, -11, -11, 5, -5, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.4-l";
N := (10*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, -4, 5, 2, -5, -8, 1, -2, -12, 3, 12, -9, 9, 8, 3, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.1-a";
N := (-14*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 5, 6, -4, 5, 8, 2, -1, 6, -6, -10, 9, -9, -12, 0, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.2-a";
N := (-6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, -4, 2, -4, 6, -2, 4, -4, 12, 4, -10, -10, 14, 4, 4, 10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.2-b";
N := (-6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -5, 1, -8, -2, -7, 8, -3, -1, 9, 12, -4, -9, 2, -1, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.2-c";
N := (-6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, 0, 2, -7, 2, -10, -1, -6, 0, -10, -12, -12, -9, 9, 11, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.2-d";
N := (-6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 5, -4, 2, 3, -2, -2, -13, -6, 4, 2, -4, -4, 7, -11, -11, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.2-e";
N := (-6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 1, -1, -5, 2, -8, 7, 4, -13, 3, -7, -2, -8, 5, 6, -3, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.5-a";
N := (w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -6, 6, 2, -8, 4, 2, 4, -12, 0, 0, 2, 6, 6, -4, 4, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.6-a";
N := (-17*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -3, -1, -1, -8, -2, 3, 11, 4, -1, 3, 10, 5, 0, 5, 10, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.4-a";
N := (14*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -4, 6, 5, -4, 8, -1, 2, -6, 6, -10, -9, 9, 0, -12, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.3-a";
N := (6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -4, -2, 2, 6, -4, -2, -4, 4, 4, 12, -10, 14, -10, 4, 4, -2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.3-b";
N := (6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 3, 1, -2, -8, -7, -3, 8, 9, -1, 12, -9, -4, -1, 2, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.3-c";
N := (6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 0, -7, 2, 2, -1, -10, 0, -6, -10, -12, -12, 9, -9, -4, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.3-d";
N := (6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 5, -2, -4, 3, 2, -2, -13, -2, 4, -6, 2, -4, -4, -11, 7, 4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.3-e";
N := (6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, 1, -5, -8, 2, 7, -13, 4, -7, 3, -2, 5, -8, -3, 6, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.8-a";
N := (w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 6, -6, 2, 4, -8, 2, -12, 4, 0, 0, 2, 6, 6, 4, -4, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 808.7-a";
N := (17*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -1, -3, -1, -2, -8, 3, 4, 11, 3, -1, 10, 0, 5, 10, 5, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.1-a";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 5, 2, 6, -1, 2, -1, 11, 8, -6, -3, -1, 6, -6, -3, 6, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.1-b";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -4, -7, -4, 1, -9, -4, -10, -11, -11, 2, 2, 1, -12, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.1-c";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, -6, -7, 6, -7, -5, 0, -6, -3, 3, -6, -10, -3, -6, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.1-d";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -1, 3, 0, -5, -8, 5, -12, -1, 9, -8, 10, -5, 3, 8, 3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.1-e";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -2, -4, 1, -4, -7, 3, 4, 0, -3, -5, -8, -12, 13, 6, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.2-a";
N := (14*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -4, 5, -5, -7, 10, 9, 0, 0, -2, -9, 10, 9, -5, 11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.5-a";
N := (-15*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, 4, -2, 4, 6, 2, -12, 2, 2, -8, -6, 6, -10, -4, 8, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.5-b";
N := (-15*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -2, 2, 0, -8, 6, -4, -4, 8, -8, -6, 2, -10, -12, -12, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.5-c";
N := (-15*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, 5, 3, -4, 1, -8, -11, -12, 5, 1, 4, -2, 11, 3, -12, 3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.5-d";
N := (-15*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -5, 1, -5, 4, -3, 8, -3, -4, -7, 1, 12, 6, 11, 11, -4, -5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.6-a";
N := (-5*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, -6, -6, 0, 2, 4, 0, -4, -2, 12, -2, -10, -2, 8, 4, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.6-b";
N := (-5*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 2, -4, 0, -2, 4, -4, 12, -8, -14, 6, 6, 4, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.6-c";
N := (-5*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 2, 2, -8, -2, -4, 8, 0, 10, 4, 10, 6, -2, 0, -4, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.4-a";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 2, 5, 6, 2, -1, -1, 8, 11, -3, -6, -1, -6, 6, 6, -3, -10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.4-b";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 1, -4, -4, -7, 1, -4, -9, -11, -10, -11, 2, 2, -12, 1, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.4-c";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -1, -6, 6, -7, -7, 0, -5, -3, -6, 3, -10, -6, -6, -3, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.4-d";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -3, 3, -5, 0, -8, -12, 5, 9, -1, -8, -5, 10, 8, 3, -5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.4-e";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -5, -4, -4, 1, -7, 4, 3, -3, 0, -5, -12, -8, 6, 13, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.3-a";
N := (14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -4, -5, 5, -7, 9, 10, 0, 0, -2, 10, -9, -5, 9, 0, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.8-a";
N := (-15*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, 4, -2, 6, 4, 2, 2, -12, -8, 2, -6, -10, 6, 8, -4, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.8-b";
N := (-15*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, 2, -8, 0, 6, -4, -4, -8, 8, -6, -10, 2, -12, -12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.8-c";
N := (-15*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 5, -1, 3, 1, -4, -8, -12, -11, 1, 5, 4, 11, -2, -12, 3, -7, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.8-d";
N := (-15*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, -5, -5, -3, 4, 8, -4, -3, 1, -7, 12, 11, 6, -4, 11, -3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.7-a";
N := (-5*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -4, -6, 2, 0, 4, -4, 0, 12, -2, -2, -2, -10, 4, 8, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.7-b";
N := (-5*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 2, 0, -4, -2, -4, 4, -8, 12, -14, 6, 6, 4, 4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 824.7-c";
N := (-5*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, 0, 2, -2, -8, -4, 0, 8, 4, 10, 10, -2, 6, -4, 0, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.1-a";
N := (-16*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, -4, 4, -2, 4, 8, -12, 0, -6, 2, 14, 12, 8, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.1-b";
N := (-16*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -4, 8, 2, 0, -4, 8, 0, -10, 2, 6, 4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.1-c";
N := (-16*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -7, 7, 0, -2, -10, 2, 10, -9, 0, 0, -6, -7, 8, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.1-d";
N := (-16*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -8, 0, -2, -4, -4, 4, 0, 6, 6, -6, -4, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.1-e";
N := (-16*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -3, -1, 2, -4, 4, -8, 2, -13, 6, -10, -4, 9, -6, -6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.1-f";
N := (-16*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -8, 4, 6, 8, 4, 4, -8, 10, 2, -6, -4, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.3-a";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 4, -3, -4, -5, 2, -10, 10, 3, 6, 4, -6, 12, 0, 9, -13, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.3-b";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 6, 8, 4, 8, 2, 4, -12, 6, -2, 6, -12, -6, -12, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.3-c";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -7, 4, 5, 2, -2, 6, 5, -10, 4, 2, 4, -8, 3, 7, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.3-d";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, -6, 5, -4, -8, 4, -7, -2, -6, 0, -10, 6, 3, -9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.3-e";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 1, 6, -1, -8, -12, -8, -13, -2, -6, 4, -6, 10, 5, 11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.3-f";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 0, -4, 4, -6, 4, -4, -2, -6, -2, 0, -14, -4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.4-a";
N := (-12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 4, -3, 4, 5, 2, 10, -10, -3, -6, 4, -6, 12, 0, -9, 13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.4-b";
N := (-12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -7, -4, -7, -6, -10, 6, -3, -10, -4, -6, -4, 8, -1, 7, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.4-c";
N := (-12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, 6, 1, -4, 8, -4, 5, 6, 6, -12, -2, -2, 11, -3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.4-d";
N := (-12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 4, -3, -6, -6, -10, -11, 6, -12, 6, -12, 12, -9, -7, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.4-e";
N := (-12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -2, 2, -4, -8, -4, 0, 6, 10, 12, 6, 0, 12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.4-f";
N := (-12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, -2, 5, 8, 4, 8, -3, 6, -2, -12, -6, -6, 3, 7, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.4-g";
N := (-12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 1, -6, 1, -8, 12, 8, 13, 2, -6, 4, -6, -10, -5, -11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.4-h";
N := (-12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 6, -2, 4, 0, -4, -8, -10, 6, 4, 6, 8, 4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.7-a";
N := (-22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 4, 4, -2, 4, -8, 0, 0, 10, 2, -10, 12, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.7-b";
N := (-22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, 2, -4, 6, 4, -2, -8, 4, 2, 14, 4, 4, -12, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.7-c";
N := (-22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 4, -8, -2, 0, 4, 8, 0, -2, -10, 6, 0, 4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.7-d";
N := (-22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -6, 0, 0, -8, 2, -4, -4, 2, 2, -2, 0, -6, -4, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.7-e";
N := (-22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 0, 0, -8, -2, -4, -4, -2, -2, -2, 0, 6, -4, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.7-f";
N := (-22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -4, -8, -2, 0, 4, 8, 0, 2, -10, 6, 0, 4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.7-g";
N := (-22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, -2, -4, 6, -4, -2, -8, -4, -2, 14, 4, -4, -12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.7-h";
N := (-22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, -4, 4, -2, -4, -8, 0, 0, -10, 2, -10, -12, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.8-a";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, 6, 4, -4, 2, -8, 8, -12, 0, -2, 2, 6, 8, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.8-b";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 4, -2, 0, 2, 4, -6, 0, 8, 2, -10, -8, 12, 0, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.8-c";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, -6, -4, 4, -12, -12, 2, -2, 8, 10, -12, -12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.8-d";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, -4, 0, -2, -8, -4, 4, 4, -2, -2, -6, 0, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.8-e";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -2, 6, -4, 4, 12, 12, 2, 2, 8, 10, -12, 12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.8-f";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -4, 0, -2, -8, 4, -4, 4, 2, -2, -6, 0, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.8-g";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 4, -2, 0, 2, 4, 6, 0, 8, -2, -10, -8, 12, 0, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.8-h";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 6, 4, 4, 2, -8, -8, 12, 0, 2, 2, 6, 8, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-a";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 0, -5, 8, -5, -6, -10, 2, -1, -6, -8, -10, 0, -4, -1, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-b";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 4, 7, -4, -7, 6, 10, -6, -3, 10, 4, -6, 4, -8, 1, 7, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-c";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 2, -2, -4, 4, 6, 4, -12, 0, -8, 2, 6, 10, 4, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-d";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 4, -5, -4, 1, -2, -6, 2, 13, -6, 4, -6, 4, 8, -3, -5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-e";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 6, -4, 0, -6, -8, -4, -12, -4, -14, 6, -10, 0, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-f";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -6, 7, 6, 3, 8, -4, 8, 3, -6, -2, 4, -2, -10, 7, -5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-g";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, -4, -4, -2, 12, 4, 8, 0, 2, 6, -14, -4, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-h";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 3, -2, -5, -8, -4, 8, 3, -6, -2, -12, 6, 6, 3, 7, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-i";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 3, -2, 5, -8, -4, -8, -3, -6, 2, -12, 6, 6, -3, 7, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-j";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -2, -4, 4, -2, 12, -4, -8, 0, -2, 6, -14, -4, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-k";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 6, 7, 6, -3, 8, -4, -8, -3, -6, 2, 4, -2, -10, -7, -5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-l";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 6, -4, 0, -6, -8, 4, 12, -4, 14, 6, -10, 0, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-m";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -4, -5, -4, -1, -2, -6, -2, -13, -6, -4, -6, 4, 8, 3, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-n";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -2, -2, -4, -4, 6, 4, 12, 0, -8, -2, 6, 10, 4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-o";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -4, 7, -4, 7, 6, 10, 6, 3, 10, -4, -6, 4, -8, -1, 7, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.11-p";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 0, -5, 8, 5, -6, -10, -2, 1, -6, 8, -10, 0, -4, 1, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.12-a";
N := (-19*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 6, -2, -4, -4, -2, 4, 4, -8, 0, 10, 6, 2, 12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.12-b";
N := (-19*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, 0, -8, -10, 8, -4, 12, 8, 6, -2, 10, 12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.12-c";
N := (-19*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 6, 0, 0, 2, -12, 4, 12, 8, -2, 6, 14, 4, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.12-d";
N := (-19*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 6, 0, 0, 2, -12, -4, -12, 8, 2, 6, 14, 4, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.12-e";
N := (-19*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, 0, 8, -10, 8, 4, -12, 8, -6, -2, 10, 12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.12-f";
N := (-19*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -6, -2, -4, 4, -2, 4, -4, 8, 0, -10, 6, 2, 12, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.2-a";
N := (16*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, 4, -4, -2, 8, 4, 0, -12, -6, 14, 2, 8, 12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.2-b";
N := (16*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 8, -4, 2, -4, 0, 0, 8, -10, 6, 2, 4, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.2-c";
N := (16*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -7, 0, 7, -2, 2, -10, -9, 10, 0, -6, 0, 8, -7, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.2-d";
N := (16*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, -8, -2, -4, -4, 0, 4, 6, -6, 6, -4, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.2-e";
N := (16*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -3, 2, -1, -4, -8, 4, -13, 2, 6, -4, -10, -6, 9, -9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.2-f";
N := (16*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 4, -8, 6, 4, 8, -8, 4, 10, -6, 2, 12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.6-a";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 4, -3, -5, -4, 2, 10, -10, 6, 3, 4, 12, -6, 9, 0, 4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.6-b";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 6, 4, 8, 8, 4, 2, 6, -12, -2, -12, 6, -12, -6, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.6-c";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -7, 5, 4, 2, 6, -2, -10, 5, 4, 4, 2, 3, -8, -12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.6-d";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, 5, -6, -4, 4, -8, -2, -7, -6, -10, 0, 3, 6, 10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.6-e";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 1, -1, 6, -8, -8, -12, -2, -13, -6, -6, 4, 5, 10, -6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.6-f";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -4, 0, 4, 4, -6, -2, -4, -6, 0, -2, -4, -14, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.5-a";
N := (12*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 4, -3, 5, 4, 2, -10, 10, -6, -3, 4, 12, -6, -9, 0, -4, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.5-b";
N := (12*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -7, -7, -4, -6, 6, -10, -10, -3, -4, -4, -6, -1, 8, -12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.5-c";
N := (12*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, 1, 6, -4, -4, 8, 6, 5, 6, -2, -12, 11, -2, -2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.5-d";
N := (12*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, -3, 4, -6, -10, -6, 6, -11, -12, -12, 6, -9, 12, 16, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.5-e";
N := (12*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 2, -2, -4, -4, -8, 6, 0, 10, 6, 12, 12, 0, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.5-f";
N := (12*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, 5, -2, 8, 8, 4, 6, -3, -2, -6, -12, 3, -6, 14, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.5-g";
N := (12*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 1, 1, -6, -8, 8, 12, 2, 13, -6, -6, 4, -5, -10, 6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.5-h";
N := (12*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -2, 6, 4, -4, 0, -10, -8, 6, 6, 4, 4, 8, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.10-a";
N := (22*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 4, 4, -2, -8, 4, 0, 0, 10, -10, 2, 4, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.10-b";
N := (22*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, -4, 2, 6, -2, 4, 4, -8, 2, 4, 14, -12, 4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.10-c";
N := (22*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -8, 4, -2, 4, 0, 0, 8, -2, 6, -10, 4, 0, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.10-d";
N := (22*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -6, 0, 0, -8, -4, 2, 2, -4, 2, 0, -2, -4, -6, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.10-e";
N := (22*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 0, 0, -8, -4, -2, -2, -4, -2, 0, -2, -4, 6, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.10-f";
N := (22*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -8, -4, -2, 4, 0, 0, 8, 2, 6, -10, 4, 0, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.10-g";
N := (22*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, -4, -2, 6, -2, -4, -4, -8, -2, 4, 14, -12, -4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.10-h";
N := (22*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, 4, -4, -2, -8, -4, 0, 0, -10, -10, 2, 4, -12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.9-a";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, 6, -4, 4, 2, 8, -8, 0, -12, -2, 6, 2, -4, 8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.9-b";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 4, 0, -2, 2, -6, 4, 8, 0, 2, -8, -10, 0, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.9-c";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -6, -2, -4, -12, 4, 2, -12, -2, 10, 8, -12, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.9-d";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, 0, -4, -2, -4, -8, 4, 4, -2, -6, -2, 4, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.9-e";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 6, -2, -4, 12, 4, 2, 12, 2, 10, 8, 12, -12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.9-f";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 0, -4, -2, 4, -8, 4, -4, 2, -6, -2, -4, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.9-g";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 4, 0, -2, 2, 6, 4, 8, 0, -2, -8, -10, 0, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.9-h";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 6, 4, 4, 2, -8, -8, 0, 12, 2, 6, 2, 4, 8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-a";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 0, -5, -5, 8, -6, 2, -10, -6, -1, -8, 0, -10, -1, -4, 0, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-b";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 4, 7, -7, -4, 6, -6, 10, 10, -3, 4, 4, -6, 1, -8, -12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-c";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 2, -2, 4, -4, 6, -12, 4, -8, 0, 2, 10, 6, -4, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-d";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 4, -5, 1, -4, -2, 2, -6, -6, 13, 4, 4, -6, -3, 8, 4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-e";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 6, 0, -4, -6, -4, -8, -4, -12, -14, -10, 6, -4, 0, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-f";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -6, 7, 3, 6, 8, 8, -4, -6, 3, -2, -2, 4, 7, -10, 2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-g";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, -4, -4, -2, 4, 12, 0, 8, 2, -14, 6, 12, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-h";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 3, -5, -2, -8, 8, -4, -6, 3, -2, 6, -12, 3, 6, -14, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-i";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 3, 5, -2, -8, -8, -4, -6, -3, 2, 6, -12, -3, 6, 14, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-j";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -2, 4, -4, -2, -4, 12, 0, -8, -2, -14, 6, -12, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-k";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 6, 7, -3, 6, 8, -8, -4, -6, -3, 2, -2, 4, -7, -10, -2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-l";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 6, 0, -4, -6, 4, -8, -4, 12, 14, -10, 6, 4, 0, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-m";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -4, -5, -1, -4, -2, -2, -6, -6, -13, -4, 4, -6, 3, 8, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-n";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -2, -2, -4, -4, 6, 12, 4, -8, 0, -2, 10, 6, 4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-o";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -4, 7, 7, -4, 6, 6, 10, 10, 3, -4, 4, -6, -1, -8, 12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.14-p";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 0, -5, 5, 8, -6, -2, -10, -6, 1, 8, 0, -10, 1, -4, 0, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.13-a";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 6, -2, -4, -4, -2, 4, 4, 0, -8, 10, 2, 6, -12, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.13-b";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, -8, 0, -10, -4, 8, 8, 12, 6, 10, -2, 4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.13-c";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 6, 0, 0, 2, 4, -12, 8, 12, -2, 14, 6, 4, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.13-d";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 6, 0, 0, 2, -4, -12, 8, -12, 2, 14, 6, -4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.13-e";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, 8, 0, -10, 4, 8, 8, -12, -6, 10, -2, -4, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.13-f";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -6, -2, 4, -4, -2, -4, 4, 0, 8, -10, 2, 6, 12, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 833.1-a";
N := (-14*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -6, 2, 1, -5, 2, 0, 4, 2, -12, -4, -6, -5, 4, 3, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 833.1-b";
N := (-14*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 2, -6, -5, 1, 2, 4, 0, -12, 2, -6, -4, 4, -5, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 833.1-c";
N := (-14*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 2, 0, 4, 1, -4, 10, -6, 0, 8, 0, -4, -5, 1, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 833.1-d";
N := (-14*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, 0, 2, 1, 4, -4, -6, 10, 8, 0, -4, 0, 1, -5, 0, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 842.1-a";
N := (-13*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 4, -1, 3, 0, 5, 1, 9, 4, -2, -7, -5, 4, -6, 0, 5, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 842.1-b";
N := (-13*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -1, 3, -4, 5, -7, -7, -10, -6, -3, -13, 6, -6, 6, 9, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 842.1-c";
N := (-13*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, 5, -3, 4, 3, -5, 11, 0, 6, -7, -5, -4, 2, 6, 1, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 842.4-a";
N := (13*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -1, 4, 3, 5, 0, 1, 4, 9, -7, -2, -5, -6, 4, 5, 0, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 842.4-b";
N := (13*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 2, 3, 5, -4, -7, -10, -7, -3, -6, -13, -6, 6, 9, 6, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 842.4-c";
N := (13*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 5, -4, -3, 3, 4, -5, 0, 11, -7, 6, -5, 2, -4, 1, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.1-a";
N := (-15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 0, 0, 4, 4, -4, 10, 8, -10, 6, 2, 12, 4, 4, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.1-b";
N := (-15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 6, 0, -4, 6, 4, -4, 12, 6, -2, -6, 12, -12, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-a";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 6, 0, 0, 2, -8, 4, -4, -2, 10, 6, -4, 4, -12, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-b";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 2, 0, -4, 6, 4, 0, 0, -10, -10, 6, 4, 0, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-c";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 0, 6, -4, -2, -8, -4, 10, 4, -6, 8, -8, -6, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-d";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 6, -4, -4, 6, -4, -8, -12, -2, -2, -14, 12, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.4-a";
N := (15*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, 0, 4, 4, -4, 8, 10, -10, 6, 12, 2, 4, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.4-b";
N := (15*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 6, -4, 0, 6, -4, 4, 12, 6, -6, -2, -12, 12, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.3-a";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 6, 0, 2, 0, -8, -4, 4, -2, 10, -4, 6, -12, 4, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.3-b";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 2, -4, 0, 6, 0, 4, 0, -10, 6, -10, 0, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.3-c";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 0, -4, 6, -2, -4, -8, 10, 4, 8, -6, -6, -8, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.3-d";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 6, -4, -4, 6, -8, -4, -12, -2, -14, -2, -4, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.3-a";
N := (-14*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 6, 4, 4, -2, -4, -12, 0, -8, 6, 2, 0, 0, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.3-b";
N := (-14*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, 4, -6, -7, 2, 5, 11, 6, 4, 1, 3, 6, -12, -13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.3-c";
N := (-14*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 2, 8, -4, 2, 4, -4, 0, 0, 2, -2, 8, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.4-a";
N := (-18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 4, -4, -4, 6, -8, -8, -4, 8, 0, -2, 4, 2, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.4-b";
N := (-18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -6, 0, -4, -6, 8, 4, -4, -8, -8, -2, -12, 0, -4, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.4-c";
N := (-18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 6, -4, 4, -2, -4, 4, 0, 8, 2, -6, 8, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.4-d";
N := (-18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 4, -2, 0, 0, 2, -8, -4, 8, 0, 6, -6, 6, 4, 6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.4-e";
N := (-18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 1, 4, -3, 6, 2, -5, 5, 8, -6, -3, -3, 0, 10, -12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.4-f";
N := (-18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -2, 0, 4, -6, -8, 4, 0, 0, -2, -14, -10, -8, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.4-g";
N := (-18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -4, -4, -2, 4, -12, 4, 0, -8, -6, 0, -12, 0, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.4-h";
N := (-18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 6, 4, -8, -2, -4, -4, -8, 0, -2, 2, -12, 12, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.7-a";
N := (-7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, -2, -6, -8, 4, 2, -12, -4, 8, 0, -14, -2, 0, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.7-b";
N := (-7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, 0, -6, 0, 0, -2, 4, 0, 0, 8, 6, 6, 0, -6, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.7-c";
N := (-7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 4, 0, 2, -4, -8, 6, -4, 8, 0, -8, 2, 14, -4, -10, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.8-a";
N := (17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -6, 4, 0, -6, -4, 4, 0, 8, 2, 6, 12, -8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.8-b";
N := (17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -2, -2, 3, -5, -7, 2, -8, 11, 3, -3, -5, -9, -9, -12, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.6-a";
N := (14*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, 6, 4, 4, -2, -12, -4, -8, 0, 6, 2, 0, 0, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.6-b";
N := (14*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, 4, -7, -6, 2, 11, 5, 4, 6, 1, 3, -12, 6, -12, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.6-c";
N := (14*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 2, -4, 8, 2, -4, 4, 0, 0, 2, -2, 4, 8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.5-a";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 6, -4, 6, -4, -8, -4, -8, 0, 8, -2, 4, 12, 2, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.5-b";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 4, 0, -6, -4, 8, -4, 4, -8, -8, -2, -12, -4, 0, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.5-c";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 6, 4, -4, -2, 4, -4, 8, 0, 2, -6, 0, 8, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.5-d";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -4, -2, 0, 0, 2, -4, -8, 0, 8, 6, -6, 4, 6, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.5-e";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 5, 4, 6, -3, 2, 5, -5, -6, 8, -3, -3, 10, 0, 7, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.5-f";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -2, 4, 0, -6, 4, -8, 0, 0, -2, -14, -8, -10, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.5-g";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -4, -2, -4, 4, 4, -12, -8, 0, -6, 0, 0, -12, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.5-h";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 6, -8, 4, -2, -4, -4, 0, -8, -2, 2, 12, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.10-a";
N := (7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 6, -6, 4, -8, 2, -4, -12, 0, 8, -14, -2, 8, 0, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.10-b";
N := (7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 4, -6, 0, 0, -2, 0, 4, 8, 0, 6, 6, -6, 0, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.10-c";
N := (7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 4, 2, -8, -4, 6, 8, -4, -8, 0, 2, 14, -10, -4, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.9-a";
N := (17*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -6, 0, 4, -6, 4, -4, 8, 0, 2, 6, -8, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.9-b";
N := (17*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -2, -2, 3, -7, -5, 2, 11, -8, -3, 3, -5, -9, -12, -9, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 850.1-a";
N := (15*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, 0, 2, 4, 8, 10, -12, -4, -10, 2, 0, 6, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 850.1-b";
N := (15*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 0, 0, -4, -4, -4, -8, 2, -6, 2, -4, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 850.1-c";
N := (15*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -4, -6, 4, 0, -4, 4, -10, 4, 6, 10, 2, 0, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 850.2-a";
N := (15*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, 2, 0, 8, 4, -12, 10, -4, 2, -10, 6, 0, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 850.2-b";
N := (15*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 0, 0, -4, -4, -8, -4, 2, 2, -6, -12, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 850.2-c";
N := (15*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 0, 4, -6, -4, 0, -10, 4, 4, 10, 6, 0, 2, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 866.1-a";
N := (w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 5, -4, -3, 5, -4, -1, -4, -1, 9, 3, 5, 6, 3, 0, 0, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 866.1-b";
N := (w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -7, -4, 7, 7, 0, -3, -4, 11, -9, -13, -5, 2, 1, 4, 4, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 866.2-a";
N := (15*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, 6, -4, -8, -2, 4, -4, 8, -12, 10, 6, -6, 0, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 866.4-a";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 5, -3, -4, 5, -1, -1, -4, 3, 9, 5, 3, 6, 0, 0, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 866.4-b";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, -7, 7, 0, 7, -3, 11, -4, -13, -9, -5, 1, 2, 4, 4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 866.3-a";
N := (15*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, 6, -8, -4, -2, -4, 4, -12, 8, 10, -6, 6, 12, 0, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-a";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 4, 6, -2, -10, -8, -8, -4, -4, -10, 6, 0, 8, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-b";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -1, 4, 6, 4, 2, -2, 11, -8, 9, 9, 2, 8, -3, -5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-c";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -2, -4, -2, 6, -4, 4, 6, 6, -10, 14, -8, 10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.2-a";
N := (-21*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 4, -2, 6, -10, -8, -8, -4, -4, 6, -10, 8, 0, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.2-b";
N := (-21*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 4, 4, 6, 2, 11, -2, 9, -8, 2, 9, -3, 8, 8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.2-c";
N := (-21*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -2, -2, -4, 6, 4, -4, 6, 6, 14, -10, 10, -8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-a";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 5, -7, -1, -4, 2, -1, -6, -12, -1, -3, 0, 6, -12, -13, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-b";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 4, -4, 2, 10, 4, -12, 2, 6, -2, -8, 6, -14, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-c";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 0, 8, -2, 2, 4, 4, -2, 2, 2, 0, 14, -10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-d";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -8, -2, -8, -12, 0, 8, 2, 2, 10, 0, 0, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-e";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 1, 5, -8, -10, 5, -10, 4, 11, -9, 0, -10, -8, -11, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-f";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, -7, 8, 2, -1, -6, -12, -13, -3, 0, -6, 0, -1, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-g";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, 2, 5, -7, -4, 2, 9, -6, -1, -6, 6, -6, -3, 8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-h";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -8, -4, -2, -4, -4, 8, -8, -10, 6, 6, -4, 4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-i";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 8, 0, -6, 6, -8, -12, 2, -2, -10, -4, -6, 2, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-j";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 4, -4, -6, 0, 4, 8, -4, -2, 6, 2, -8, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-k";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -1, 2, 5, -1, -4, -10, -3, 6, -1, -6, 6, 6, 3, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-l";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -5, -6, 7, 1, -8, 6, 9, 2, 5, -10, 10, -6, 9, -8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-m";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -7, 2, -1, -1, 8, 2, -3, 6, 5, 6, -6, 6, 15, -4, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.3-a";
N := (-15*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, 6, -6, -8, -2, 8, -12, 0, -6, 8, 0, 2, 10, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.4-a";
N := (-19*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -4, 2, -1, 5, 11, 3, -6, 5, 6, -9, 3, -6, 5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.4-b";
N := (-19*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, 0, -6, 1, -5, 9, -1, 6, -1, 10, -3, -11, -2, -15, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-a";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 5, -1, -7, -4, -1, 2, -12, -6, -1, 0, -3, -12, 6, 5, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-b";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -4, 4, 2, 4, 10, 2, -12, 6, -8, -2, -14, 6, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-c";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 8, 0, -2, 4, 2, -2, 4, 2, 0, 2, -10, 14, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-d";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -8, 0, -2, -12, -8, 8, 0, 2, 10, 2, 0, 0, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-e";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 5, 1, -8, 5, -10, 4, -10, 11, 0, -9, -8, -10, 9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-f";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -7, 5, 8, -1, 2, -12, -6, -13, 0, -3, 0, -6, -13, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-g";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, 5, 2, -7, 2, -4, -6, 9, -1, 6, -6, -3, -6, 5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-h";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, -8, -2, -4, -4, -8, 8, -10, 6, 6, 4, -4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-i";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 0, 8, -6, -8, 6, 2, -12, -2, -4, -10, 2, -6, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-j";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -4, 4, -6, 4, 0, -4, 8, -2, 2, 6, 8, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-k";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -1, 5, 2, -1, -10, -4, 6, -3, -1, 6, -6, 3, 6, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-l";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -5, 7, -6, 1, 6, -8, 2, 9, 5, 10, -10, 9, -6, 9, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-m";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -7, -1, 2, -1, 2, 8, 6, -3, 5, -6, 6, 15, 6, -7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.6-a";
N := (15*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, -6, 6, -8, 8, -2, 0, -12, -6, 0, 8, 10, 2, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.5-a";
N := (-19*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 2, -4, -1, 11, 5, -6, 3, 5, -9, 6, -6, 3, -10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.5-b";
N := (-19*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, -6, 0, 1, 9, -5, 6, -1, -1, -3, 10, -2, -11, -8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 886.1-a";
N := (-5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 3, -1, -3, -2, 5, 4, -1, -12, -4, -5, -12, 2, 1, -9, 3, -3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 886.1-b";
N := (-5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -1, 0, -2, 2, 1, -10, -6, 2, 4, 6, -10, -2, -12, -12, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 886.2-a";
N := (-17*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -5, 4, 0, 4, -2, -2, -7, -6, 9, -6, -11, -2, -13, 10, 14, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 886.4-a";
N := (5*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -1, 3, -3, 5, -2, 4, -12, -1, -5, -4, -12, 1, 2, 3, -9, -7, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 886.4-b";
N := (5*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 0, 0, 2, -2, 1, -6, -10, 4, 2, 6, -2, -10, -12, -12, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 886.3-a";
N := (17*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, -5, 0, -2, 4, -2, -6, -7, -6, 9, -11, -13, -2, 14, 10, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.1-a";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 3, -3, -1, 2, -7, -4, 2, -12, 10, -1, -9, -6, -3, -4, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.1-b";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -3, -5, -7, -6, -1, 4, -2, 8, 6, 1, -9, 2, -11, 12, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.1-c";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -5, -5, -2, 1, 3, -3, 12, -9, -12, 11, 6, 10, -7, -13, 10, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.1-d";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 6, -2, 2, 0, 2, 4, -2, 8, 0, 10, -6, -10, 4, 0, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.1-e";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 3, -1, -4, -1, -4, -4, -6, 12, 11, 9, 12, -9, 0, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.1-f";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, -3, -5, 0, 1, 4, -8, 6, -12, 3, 1, -12, 5, -8, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.1-g";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 1, -5, -5, 1, 0, -9, -12, 0, -6, -4, 9, 13, -4, -7, -8, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.1-h";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 1, 3, 7, 0, 7, 4, 8, -2, 0, -5, -11, 0, -1, 0, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.1-i";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 4, 3, -2, -4, 6, 2, -2, -5, -7, -6, -2, 12, 2, 4, -6, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.1-j";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -5, -2, 4, 6, -6, 6, -9, 9, 2, 6, 4, 2, -4, 10, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.4-a";
N := (-3*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, 2, 0, -1, 5, 8, 2, 2, -3, 0, 11, 3, -9, 0, 9, 2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.2-a";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -5, -3, 2, -1, -7, 2, -4, 10, -12, -1, -6, -9, -4, -3, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.2-b";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -5, -5, -6, -7, -1, -2, 4, 6, 8, 1, 2, -9, 12, -11, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.2-c";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -5, -5, -2, 3, 1, -3, -9, 12, 11, -12, 6, -7, 10, 10, -13, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.2-d";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -2, -2, 0, 2, 2, -2, 4, 0, 8, 10, -10, -6, 0, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.2-e";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -1, 3, -4, -1, -1, -4, -4, 12, -6, 11, 12, 9, 0, -9, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.2-f";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, -3, 0, -5, 1, -8, 4, -12, 6, 3, -12, 1, -8, 5, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.2-g";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -5, 1, -5, 0, 1, -9, 0, -12, -4, -6, 9, -4, 13, -8, -7, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.2-h";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 3, 0, 7, 7, 8, 4, 0, -2, -5, 0, -11, 0, -1, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.2-i";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 3, 4, -2, 6, -4, 2, -5, -2, -6, -7, -2, 2, 12, -6, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.2-j";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 4, -2, 6, 4, -6, -9, 6, 2, 9, 6, 2, 4, 10, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 892.5-a";
N := (3*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, -4, 0, 5, -1, 8, 2, 2, 0, -3, 11, -9, 3, 9, 0, -13, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.1-a";
N := (-4*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, -4, 5, 3, 8, 2, 5, 8, 3, -1, 3, 3, -12, -6, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.1-b";
N := (-4*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -5, 0, 5, 5, -2, 4, -5, -2, 5, -1, 1, 3, 0, 8, 5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.2-a";
N := (-18*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 2, -3, 0, -3, 8, -3, 1, -12, 4, 4, -3, -4, 10, 5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.2-b";
N := (-18*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 5, -1, -6, 3, 0, -4, -6, -11, 3, -5, -11, 9, -10, 10, 8, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.4-a";
N := (4*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 5, -4, 3, 8, 2, 8, 5, 3, -1, 3, 3, -6, -12, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.4-b";
N := (4*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -5, 5, 0, 5, -2, 4, -2, -5, 5, -1, 3, 1, 8, 0, -8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.3-a";
N := (18*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, -3, 2, 0, -3, 8, 1, -3, -12, 4, -3, 4, 10, -4, 8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.3-b";
N := (18*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 5, -6, -1, 3, 0, -4, -11, -6, 3, -5, 9, -11, 10, -10, -7, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-a";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, -8, 4, -8, 12, 8, -8, -10, 2, -2, -12, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-b";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 2, -4, 4, 4, -4, 0, 0, -10, 6, -2, 4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-c";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -6, -4, 2, -4, -10, -12, -12, 8, -6, 0, 0, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-d";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, -4, -4, -4, -4, 0, 0, 2, -6, -6, 0, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-e";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, -6, 0, -6, 0, 4, 4, 4, -8, -2, 4, -8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-f";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 0, 0, 12, 12, -8, -8, 10, 10, 10, -8, -8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-g";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, 0, -6, 0, -6, 4, 4, 4, -2, -8, -8, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-h";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 2, 4, 4, -8, 0, 8, -8, 2, 14, -2, 0, -8, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-i";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, 4, -8, 12, -8, -8, 8, -10, -2, 2, 4, -12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-j";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 8, 8, 6, 6, -8, -8, 14, -6, -6, 6, 6, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-k";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -6, 2, -4, -10, -4, -12, -12, 8, 0, -6, -12, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-l";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 2, 4, 4, 0, -8, -8, 8, 2, -2, 14, -8, 0, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-m";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 2, 4, -4, -4, 4, 0, 0, -10, -2, 6, 4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-a";
N := (15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, -4, -8, 4, 10, 8, 6, -8, 6, 0, -12, -4, 0, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-b";
N := (15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -4, 0, 0, -4, -6, 12, 6, 0, 10, 12, 0, 4, 8, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-a";
N := (15*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, -4, 4, -8, 8, 10, -8, 6, 6, -12, 0, 0, -4, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-b";
N := (15*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -4, 0, -4, 0, 12, -6, 0, 6, 10, 0, 12, 8, 4, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.1-a";
N := (-15*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 0, -5, 5, -3, 1, -2, -8, 7, 12, 6, -4, 0, 11, -14, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.1-b";
N := (-15*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 0, -7, 4, -8, -1, 12, 0, -6, 7, 10, -10, 4, 0, 0, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.1-c";
N := (-15*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, 0, 1, 2, 0, 7, 4, 4, 4, 3, 12, 2, 6, -10, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.2-a";
N := (7*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 5, -4, 0, 2, -7, 8, -1, -1, -6, -3, -4, 0, -6, 0, 6, -13, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.2-b";
N := (7*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, 4, -4, -2, 1, -4, 9, -9, 10, 3, -8, -8, 2, 12, -6, 5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.2-c";
N := (7*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -1, -4, -2, 4, 3, 4, -9, 3, -2, 11, 6, -2, 6, -14, -10, -3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.4-a";
N := (15*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 4, -5, -3, 5, 1, -8, -2, 12, 7, 6, 0, -4, -14, 11, 14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.4-b";
N := (15*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -2, -7, -8, 4, -1, 0, 12, 7, -6, 10, 4, -10, 0, 0, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.4-c";
N := (15*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 4, 1, 0, 2, 7, 4, 4, 3, 4, 12, 6, 2, 4, -10, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.3-a";
N := (7*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 5, 0, -7, 2, 8, -1, -1, -3, -6, -4, -6, 0, 6, 0, 14, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.3-b";
N := (7*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 3, -4, 1, -2, -4, -9, 9, 3, 10, -8, 2, -8, -6, 12, -2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 914.3-c";
N := (7*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, -1, -2, 3, 4, 4, 3, -9, 11, -2, 6, 6, -2, -10, -14, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.1-a";
N := (-20*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, -2, 0, 8, 8, -10, 4, 0, 0, -10, 2, 10, -6, 0, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.1-b";
N := (-20*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 4, 0, 2, 0, 6, 9, 1, 5, -2, 0, 12, -2, -11, -8, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.1-c";
N := (-20*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 6, 8, 4, 2, 4, -4, -8, -8, 2, 6, -10, 12, -4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.1-d";
N := (-20*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, -3, -4, -3, 6, 6, -11, -10, -5, 0, 12, -11, 4, -14, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.1-e";
N := (-20*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 7, -4, 0, 2, 4, 2, 1, -1, 1, -2, 8, 0, 2, -3, 8, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.1-f";
N := (-20*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, -3, 8, -1, 2, 2, -1, 6, 3, -4, 0, 9, 12, -6, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.1-g";
N := (-20*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -1, -4, 0, 2, -4, 2, 5, -1, 9, 6, 8, 0, -6, 9, 0, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.3-a";
N := (9*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -4, -6, -7, -4, 5, -10, 2, -6, -3, 8, 6, 3, 0, -6, -4, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.2-a";
N := (20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, -2, 8, 0, 8, 4, -10, 0, 0, -10, 10, 2, 0, -6, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.2-b";
N := (20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 5, 0, 0, 2, 6, 1, 9, -2, 5, 0, -2, 12, -8, -11, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.2-c";
N := (20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 6, 4, 8, 2, -4, 4, -8, -8, 2, -10, 6, -4, 12, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.2-d";
N := (20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -3, -3, -4, 6, -11, 6, -5, -10, 0, -11, 12, -14, 4, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.2-e";
N := (20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 7, 0, 4, 2, 2, -1, 1, -2, 1, 8, 2, 0, 8, -3, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.2-f";
N := (20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, -3, -1, 8, 2, -1, 2, 3, 6, -4, 9, 0, -6, 12, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.2-g";
N := (20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -4, -1, 0, -4, 2, 2, -1, 5, 6, 9, 8, -6, 0, 0, 9, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 916.6-a";
N := (9*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, -1, -6, -4, -7, 5, 2, -10, -3, -6, 8, 3, 6, -6, 0, 11, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 919.1-a";
N := (16*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 2, -3, 7, 4, 1, -1, -12, -6, 6, -10, 2, 6, 9, 4, 4, 8, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 919.2-a";
N := (16*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -3, 2, 7, 1, 4, -1, -6, -12, -10, 6, 2, 9, 6, 4, 4, 13, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.2-a";
N := (-13*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 5, -4, 0, 2, -6, -1, 1, 7, -9, -6, -4, -2, -2, -14, -14, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.2-b";
N := (-13*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 4, -6, -2, 0, 5, -4, 4, -1, -2, 8, 0, -6, -1, -5, 0, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.2-c";
N := (-13*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 6, 4, 0, -4, 2, -8, -10, -8, 8, 6, -6, 8, 4, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.2-d";
N := (-13*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -5, -3, 7, 3, -1, 8, 4, -1, 4, 2, -6, 0, 5, 4, 6, -7, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.3-a";
N := (-13*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 5, 0, -6, 2, -1, 7, 1, -6, -9, -4, -2, -2, -14, -14, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.3-b";
N := (-13*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -6, 4, -2, 5, 0, -4, -1, 4, 8, -2, 0, -1, -6, 0, -5, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.3-c";
N := (-13*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, -2, 4, -4, 0, 2, -10, -8, 8, -8, 6, 8, -6, 0, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.3-d";
N := (-13*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -3, -5, 7, -1, 3, 8, -1, 4, 2, 4, -6, 5, 0, 6, 4, 5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.1-a";
N := (w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -3, 6, -4, 1, -7, 0, -8, 0, -2, 1, 6, -12, -6, -4, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.1-b";
N := (w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -1, 0, 2, -1, -1, -4, 2, 0, 0, 5, -6, -6, -12, -6, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.1-c";
N := (w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, -2, -2, -4, 6, 6, -8, -6, 12, 0, -8, -6, 6, 4, -10, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.2-a";
N := (15*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 6, -6, -4, -4, -2, -8, 0, 8, -8, -10, -6, -10, 0, -8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.2-b";
N := (15*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -6, -6, -7, -7, -8, 7, 0, -11, -4, 5, 0, -11, -12, 8, 6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.2-c";
N := (15*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, -2, 4, 4, 4, 6, 2, -4, -8, -8, -8, 6, -14, 14, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.4-a";
N := (w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -3, 2, 6, 1, -4, -7, -8, 0, -2, 0, 1, -12, 6, -4, -6, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.4-b";
N := (w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, 2, 0, -1, 2, -1, 2, -4, 0, 0, 5, -6, -6, -6, -12, 14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.4-c";
N := (w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, 0, -2, 6, -4, 6, -6, -8, 0, 12, -8, 6, -6, -10, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.3-a";
N := (15*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, -2, -6, -4, -4, -2, 0, -8, -8, 8, -10, -10, -6, -8, 0, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.3-b";
N := (15*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, -2, -6, -7, -7, -8, 0, 7, -4, -11, 5, -11, 0, 8, -12, 7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 926.3-c";
N := (15*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 2, -2, 4, 4, 4, 2, 6, -8, -4, -8, 6, -8, 14, -14, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-a";
N := (-24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -7, -5, -3, -2, -7, 4, -9, -8, -9, 9, 4, 6, 1, 11, -10, -3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-a";
N := (24*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, -7, -3, -7, -2, 4, -8, -9, 9, -9, 4, 1, 6, -10, 11, -7, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 934.1-a";
N := (-17*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 3, -6, 4, -6, -9, 6, 2, -7, 0, -10, 0, -2, 6, -6, -9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 934.2-a";
N := (19*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 1, -2, 4, -8, 5, 7, 9, 10, -9, 4, -8, 3, -9, 7, -3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 934.4-a";
N := (17*w - 55)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, -2, -6, -6, 4, -9, 2, 6, 0, -7, -10, -2, 0, -6, 6, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 934.3-a";
N := (19*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 0, -2, -8, 4, 5, 9, 7, -9, 10, 4, 3, -8, 7, -9, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.1-a";
N := (6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -2, -6, -6, -6, 8, -8, 2, -4, 12, 4, 8, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.1-b";
N := (6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -8, -6, -6, 10, -2, 0, 0, 6, 4, -4, -4, 0, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.2-a";
N := (-18*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 8, -8, -4, -4, -6, 10, 6, 0, 4, -10, 10, 0, -10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.2-b";
N := (-18*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, 4, 4, -6, 2, -2, -8, 12, 10, 6, -8, -2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.2-c";
N := (-18*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -2, -2, -8, -8, -4, -8, -6, 6, -4, -2, -8, -12, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.2-d";
N := (-18*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, -4, 8, 2, -10, -6, 0, 8, -6, 6, 0, -6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.2-e";
N := (-18*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 4, -3, 1, 2, 12, 13, -2, -4, -1, 6, -2, 3, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.2-f";
N := (-18*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -8, 4, -6, 6, -12, 0, -8, 2, -4, 0, -10, -4, 4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.5-a";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, -4, 4, 6, 8, -8, -4, -8, -6, 6, 6, 12, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.5-b";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 3, -4, 4, 3, -1, 10, 8, 1, 6, 0, 3, -6, 6, -5, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.5-c";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 2, 4, -4, 2, -4, 4, 0, 0, 6, 6, -2, 4, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.5-d";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, 4, -4, 2, -12, -4, 8, 0, 2, 6, -10, 12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.6-a";
N := (-15*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, 4, 4, -6, 4, -4, 0, -4, 10, -6, 2, -8, -4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.6-b";
N := (-15*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -6, -4, 0, 2, 0, 8, -8, 12, 10, -10, -10, 0, 12, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.6-c";
N := (-15*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -4, -4, 2, 4, 4, 0, -4, -10, 2, -14, 8, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.4-a";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 0, -6, -6, -6, -8, 8, 2, 12, -4, 8, 4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.4-b";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -8, -6, -2, 10, 0, 0, 6, -4, 4, 0, -4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.3-a";
N := (18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 8, -4, -8, -4, 10, -6, 0, 6, 4, 10, -10, -10, 0, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.3-b";
N := (18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 0, 4, 2, -6, -8, -2, 12, 6, 10, -2, -8, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.3-c";
N := (18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -2, -2, -8, -4, -8, -6, -8, 6, -2, -4, -12, -8, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.3-d";
N := (18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, -4, 8, -10, 2, 0, -6, 8, 6, -6, -6, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.3-e";
N := (18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 4, 0, -3, 2, 1, 13, 12, -2, -1, -4, -2, 6, 7, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.3-f";
N := (18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -8, -6, 4, 6, 0, -12, 2, -8, -4, -10, 0, 4, -4, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.8-a";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 4, -4, 6, -8, 8, -8, -4, -6, 6, 6, 0, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.8-b";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 3, 4, -4, 3, 10, -1, 1, 8, 6, 3, 0, 6, -6, 7, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.8-c";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 2, -4, 4, 2, 4, -4, 0, 0, 6, -2, 6, 12, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.8-d";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -4, 4, 2, -4, -12, 0, 8, 2, -10, 6, 4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.7-a";
N := (15*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, 4, 4, -6, -4, 4, -4, 0, 10, 2, -6, -4, -8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.7-b";
N := (15*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -6, 0, -4, 2, 8, 0, 12, -8, 10, -10, -10, 12, 0, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 936.7-c";
N := (15*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -4, -4, 2, 4, 4, -4, 0, -10, -14, 2, 12, 8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.1-a";
N := (-16*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 1, 1, 0, 1, -5, 6, 6, -7, -12, -7, 0, -9, -9, 6, -12, 5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.2-a";
N := (16*w - 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 3, 1, 1, 0, -5, 1, 6, -7, 6, -7, -12, 0, -9, -9, -12, 6, -8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.1-a";
N := (-16*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 1, 6, -4, -4, 1, -3, -2, 8, 8, -7, -4, 4, -6, 15, 11, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.1-b";
N := (-16*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 2, 4, 8, 3, -3, 2, -4, 0, -7, 12, 0, 6, -3, 11, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.3-a";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 2, 6, 0, 8, 2, 12, -12, 0, -8, 6, -6, -10, 12, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.3-b";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, -4, 2, -6, -6, 8, -4, 0, 12, 6, 4, 6, -4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.3-c";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -2, -4, 0, -6, -4, -4, -12, 0, 6, 14, -6, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.3-d";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -5, 3, 0, -4, -6, 6, 3, -4, 0, -10, -7, -6, -10, 14, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.3-e";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -1, -3, 0, -4, 2, -6, -9, 0, -8, -6, -9, 2, 6, -2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.3-f";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 5, -3, -4, -8, -4, -4, 11, 2, 10, -8, -5, -4, 0, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.3-g";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, 4, 2, -2, 2, -8, -4, 8, 12, -6, 4, -2, 12, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.4-a";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, 0, 2, 0, 1, -7, -1, 13, -3, 11, -8, 1, -9, -4, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.4-b";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -2, 6, -4, 4, -6, 4, -4, 0, 0, 10, 2, 6, 0, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.4-c";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 1, -4, -5, 6, 3, 10, 0, -7, -12, -8, -4, -10, -13, -7, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.7-a";
N := (-21*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, 2, 2, 2, 4, 6, -4, -4, -8, 2, -4, -2, -6, -6, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.8-a";
N := (-15*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, -2, 4, 4, 4, 6, -12, 0, 4, -4, -2, -14, 4, 6, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.8-b";
N := (-15*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, 6, -8, -4, -8, -2, -12, 0, 0, -12, -10, 2, 0, -10, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.8-c";
N := (-15*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -6, -6, -4, 0, 10, 4, -4, 4, 8, 6, -2, -2, -8, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.8-d";
N := (-15*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -3, -2, 4, 4, -5, 9, -6, 0, -8, -13, 4, 4, 10, 9, -7, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.8-e";
N := (-15*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -5, 2, -8, 2, -1, -1, 4, -2, 4, 3, 12, -2, 4, 3, -9, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.2-a";
N := (16*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 1, -4, 1, -4, -3, 8, -2, -7, 8, -4, -6, 4, 15, 11, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.2-b";
N := (16*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -5, 4, 3, 8, -3, -4, 2, -7, 0, 12, 6, 0, -3, 1, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.6-a";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -2, 6, 8, 0, 2, -12, 12, -8, 0, 6, -10, -6, 12, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.6-b";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -4, -6, 2, -6, -4, 8, 12, 0, 6, 6, 4, -4, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.6-c";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, 0, -4, -6, -4, -4, 0, -12, 6, -6, 14, 4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.6-d";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -5, 3, -4, 0, -6, 3, 6, 0, -4, -10, -6, -7, -10, 7, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.6-e";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 1, -3, -4, 0, 2, -9, -6, -8, 0, -6, 2, -9, 6, -11, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.6-f";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -5, -3, -8, -4, -4, 11, -4, 10, 2, -8, -4, -5, 0, -3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.6-g";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, 4, -2, 2, 2, -4, -8, 12, 8, -6, -2, 4, 12, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.5-a";
N := (10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 5, 2, 1, 0, -7, 13, -1, 11, -3, -8, -9, 1, -4, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.5-b";
N := (10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 6, 4, -4, -6, -4, 4, 0, 0, 10, 6, 2, 0, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.5-c";
N := (10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -6, -4, 6, -5, 3, 0, 10, -12, -7, -8, -10, -4, -13, 13, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.10-a";
N := (21*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -4, 2, 4, 2, 6, -4, -4, 2, -8, -4, -6, -2, -6, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.9-a";
N := (-15*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 6, 4, 4, 4, 6, 0, -12, -4, 4, -2, 4, -14, 6, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.9-b";
N := (-15*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 2, -8, -8, -4, -2, 0, -12, -12, 0, -10, 0, 2, -10, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.9-c";
N := (-15*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 6, -6, 0, -4, 10, -4, 4, 8, 4, 6, -2, -2, -8, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.9-d";
N := (-15*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, -3, 4, -5, 4, 9, 0, -6, -13, -8, 4, 10, 4, 9, 9, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 944.9-e";
N := (-15*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -5, -8, -1, 2, -1, -2, 4, 3, 4, 12, 4, -2, 3, 13, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-a";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, -6, -8, -2, -10, -12, -4, -6, -10, 12, 6, -12, 2, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-b";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 5, -5, 3, 1, -6, -4, 6, 3, -10, -14, -3, -9, 4, 7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-a";
N := (-15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, -5, 4, 5, 4, -8, -1, 3, -2, 6, 0, -6, -1, -9, 5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-b";
N := (-15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 2, 2, -8, 4, 4, 0, 0, 6, 14, 6, 0, 12, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-c";
N := (-15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, 5, 6, 6, 12, 2, 10, -7, 4, -3, 1, -13, 12, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-d";
N := (-15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 1, 1, -5, 7, -10, 10, 0, -9, 5, -4, -4, -9, -8, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-e";
N := (-15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, -4, 5, 4, -8, 7, 3, -6, -6, 8, -6, -3, -9, -1, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-f";
N := (-15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -5, 1, 2, -2, -8, 2, 6, 1, -12, -9, 9, -7, 12, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-g";
N := (-15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 6, 6, -4, -12, 0, -12, 8, 10, -2, -6, -4, -12, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.4-a";
N := (5*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, -2, -8, -2, -12, -10, -6, -4, -10, 6, 12, 2, -12, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.4-b";
N := (5*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -5, 5, 3, 1, -4, -6, 3, 6, -10, -3, -14, 4, -9, -10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-a";
N := (15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 4, -5, 5, 4, -1, -8, -2, 3, 6, -6, 0, -9, -1, -12, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-b";
N := (15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, 2, -8, 4, 4, 0, 0, 6, 6, 14, 12, 0, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-c";
N := (15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 5, -3, 6, 6, 2, 12, -7, 10, 4, 1, -3, 12, -13, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-d";
N := (15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 1, 2, 1, -5, -10, 7, 0, 10, -9, -4, 5, -9, -4, -7, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-e";
N := (15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 1, 5, 4, 7, -8, -6, 3, -6, -6, 8, -9, -3, -12, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-f";
N := (15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 1, -5, 2, -2, 2, -8, 1, 6, -12, 9, -9, 12, -7, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-g";
N := (15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, 2, 6, -4, 0, -12, 8, -12, 10, -6, -2, -12, -4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 954.1-a";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 2, 2, 4, 4, -8, 2, 0, 8, 4, 10, -8, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 954.4-a";
N := (3*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 2, 2, 4, -8, 4, 0, 2, 8, 4, -8, 10, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.1-a";
N := (-4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 5, 6, 2, 6, -7, -4, -8, 9, -9, 9, -5, 14, -4, 9, -2, 13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.1-b";
N := (-4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 1, -5, 0, -6, -6, -5, 1, 4, -2, -3, 2, -9, 2, 6, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.1-c";
N := (-4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 0, -6, -4, 2, 6, -8, 4, 8, -8, 2, -6, -6, -10, 0, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.1-d";
N := (-4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 5, 3, 6, -4, 2, 1, -5, -8, -8, 5, -4, -9, -4, -8, 13, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.1-e";
N := (-4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, 0, 0, 8, -4, 4, -2, -8, 4, 2, 2, 12, 8, 4, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.1-f";
N := (-4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -7, -3, -8, 6, -2, -5, -5, -8, 6, 1, -2, 5, -10, -10, 5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.1-g";
N := (-4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -3, -1, 6, -4, 2, 1, -9, 0, 0, -11, -4, 11, 12, -8, 1, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.1-h";
N := (-4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -4, 0, -4, 8, 4, 6, 0, 12, -2, 2, -4, 12, 4, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.1-i";
N := (-4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -6, 2, -2, 3, 4, 8, -9, -7, 1, -11, 6, -12, -3, -6, -11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.3-a";
N := (-17*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, -4, 6, -2, -4, 2, 4, 4, 0, 8, -10, 6, -6, -14, -4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.3-b";
N := (-17*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, -1, 3, 2, 5, -1, -1, 2, 12, -9, 2, 6, -6, 6, 3, -7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.2-a";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 6, 5, 2, -7, 6, -4, 9, -8, 9, -9, -5, -4, 14, -2, 9, 0, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.2-b";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 1, -4, -5, -6, 0, -6, 1, -5, -2, 4, -3, -9, 2, 6, 2, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.2-c";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 2, -6, 2, -4, 6, 4, -8, -8, 8, 2, -6, -6, 0, -10, -14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.2-d";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -6, 3, -4, 6, 2, -5, 1, -8, -8, 5, -9, -4, -8, -4, -2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.2-e";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 0, 8, 0, -4, -2, 4, 4, -8, 2, 12, 2, 4, 8, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.2-f";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -7, 0, -3, 6, -8, -2, -5, -5, 6, -8, 1, 5, -2, -10, -10, 12, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.2-g";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, -1, -4, 6, 2, -9, 1, 0, 0, -11, 11, -4, -8, 12, 6, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.2-h";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, -4, -4, 0, 8, 6, 4, 12, 0, -2, -4, 2, 4, 12, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.2-i";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -5, 2, 3, -2, 4, -9, 8, 1, -7, -11, -12, 6, -6, -3, -8, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.6-a";
N := (-17*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, 6, 6, -4, -2, 2, 4, 4, 8, 0, -10, -6, 6, -4, -14, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 956.6-b";
N := (-17*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -1, -4, 3, 5, 2, -1, 2, -1, -9, 12, 2, -6, 6, 3, 6, -4, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 967.1-a";
N := (16*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -2, -1, -6, -4, -3, -6, 1, 0, -9, 0, 0, -4, 6, -1, 11, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 967.2-a";
N := (16*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -1, -2, -6, -3, -4, -6, 0, 1, 0, -9, 0, 6, -4, 11, -1, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.1-a";
N := (-22*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 1, 6, 1, -8, 3, 4, 1, -4, -2, 4, -9, 11, 0, 0, -15, -3, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.1-b";
N := (-22*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -6, 4, -4, 2, 6, 12, 0, 12, -12, 4, 2, 2, -4, -4, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.1-c";
N := (-22*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -4, 2, 2, -9, 6, 0, 9, 3, -5, -5, -5, 4, 7, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.3-a";
N := (-11*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 2, 2, -2, 4, 3, 8, 4, -7, -3, 1, 11, -9, -4, 7, 4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.3-b";
N := (-11*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 4, -8, 6, -2, -1, -4, -2, -5, 9, 3, -13, 3, 7, -12, 3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.3-c";
N := (-11*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, -4, -2, -2, -1, 10, 0, 3, -7, 11, -1, 7, -4, -7, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.3-d";
N := (-11*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -4, -2, -6, -6, -8, -5, 8, -4, 3, -11, 3, 11, -1, 4, -3, 12, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.2-a";
N := (-22*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 1, 1, 3, -8, 4, -4, 1, 4, -2, -9, 0, 11, -15, 0, 14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.2-b";
N := (-22*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 6, 4, 2, -4, 6, 0, 12, -12, 12, 4, 2, 2, -4, -4, -16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.2-c";
N := (-22*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -4, 2, 2, -9, 0, 6, 3, 9, -5, -5, -5, 7, 4, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.4-a";
N := (11*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 0, 2, 4, -2, 3, 4, 8, -3, -7, 1, -9, 11, 7, -4, 3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.4-b";
N := (11*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, 0, -8, -2, 6, -1, -2, -4, 9, -5, 3, 3, -13, -12, 7, -12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.4-c";
N := (11*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, -4, -2, -2, -1, 0, 10, -7, 3, 11, 7, -1, -7, -4, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.4-d";
N := (11*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -2, -4, -6, -8, -6, -5, -4, 8, -11, 3, 3, -1, 11, -3, 4, -15, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 971.1-a";
N := (20*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -2, -3, 4, -2, 3, 6, -9, 4, -2, 0, -2, -11, -1, -7, 1, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 971.2-a";
N := (20*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -3, -2, 4, 3, -2, 6, 4, -9, 0, -2, -2, -1, -11, 1, -7, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 982.1-a";
N := (19*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 0, -3, -4, 6, -4, -1, -7, 0, -9, -1, -3, -10, -4, 14, -11, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 982.4-a";
N := (19*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 5, -3, 6, -4, -4, -7, -1, -9, 0, -1, -10, -3, 14, -4, -4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.1-a";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, 0, 6, -4, 4, 0, -12, 6, 2, 6, -12, 8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.1-b";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 0, 6, 0, -4, -4, 0, -6, -6, -6, -4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.1-c";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 2, -10, -10, -10, -6, 6, 14, 6, -12, 12, 0, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.1-d";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 4, -2, -4, -12, -8, 0, 10, 2, 4, 10, 8, 10, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.1-e";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 0, 2, -4, -4, 8, 0, -6, 2, 0, 6, 0, 6, 14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.1-f";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -4, -6, -4, 4, 8, 0, -2, 6, -2, -4, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.1-g";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 8, 8, 8, -4, 0, 6, -4, 6, -6, 6, -6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.1-h";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -4, 2, -4, -4, 0, -12, -10, -6, -6, 12, -12, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.1-i";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -6, -6, 6, 2, -6, 10, -6, -6, 8, 0, -8, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.1-j";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -8, 6, -4, 4, 0, 0, 2, 10, 12, -2, 12, -6, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-a";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -4, -6, 4, -4, 8, 0, 6, 14, 6, 4, -12, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-b";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -2, -4, -8, 10, -8, -8, -8, 10, 8, 2, 8, 12, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-c";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 0, 2, 8, -11, 10, -11, 7, -1, -4, 1, 11, -2, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-d";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -6, 4, 4, 6, -4, -8, 12, 2, 0, 2, 0, 8, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-e";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 2, 8, -1, -10, 3, 3, 5, 0, 9, 15, 6, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-f";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -6, 4, 11, 6, 7, 7, -3, 0, 7, -5, -2, 9, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-g";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, 0, -2, -4, 4, 8, 8, -6, -2, 6, 12, 12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-h";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 2, 8, 8, 8, 0, -12, 2, -6, -6, 0, 0, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-i";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -4, -6, -8, -4, -8, 8, -4, 6, -2, -6, 0, 0, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-j";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, 2, -6, 10, -4, -4, 0, 6, -4, -6, 4, 12, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-k";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -4, 6, -2, -6, 4, -4, 0, -2, 4, 10, -4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.2-l";
N := (-12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -6, -4, 2, 4, 4, -8, -8, 2, -10, -2, -4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.5-a";
N := (w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, -2, 6, 2, 8, 4, -4, -2, 10, -2, -12, 6, -12, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.5-b";
N := (w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 0, 4, 6, 6, -1, 4, -6, 0, 9, 2, 3, 0, 5, -2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.5-c";
N := (w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 6, -2, -6, 4, 4, 4, -10, -10, -10, -4, 6, -12, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.6-a";
N := (-23*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 2, -3, -2, 3, 1, -1, 12, -8, -11, -2, -7, -4, -11, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.7-a";
N := (-9*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, 3, -1, 2, 2, 8, 3, 6, -4, -6, 6, -12, 9, 11, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.8-a";
N := (17*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, 2, -1, -2, 1, -5, 9, 12, 0, 5, 6, -9, 12, 7, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.4-a";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, 0, 6, 4, -4, -12, 0, 6, 6, 2, 8, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.4-b";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 0, 6, -4, 0, 0, -4, -6, -6, -6, 4, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.4-c";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 2, -10, -10, -10, 6, -6, 14, -12, 6, 0, 12, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.4-d";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 4, -2, -4, -8, -12, 10, 0, 2, 10, 4, 10, 8, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.4-e";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 0, 2, -4, 8, -4, -6, 0, 2, 6, 0, 6, 0, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.4-f";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -4, -6, 4, -4, 0, 8, -2, -2, 6, -12, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.4-g";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 8, 8, -4, 8, 6, 0, -4, -6, 6, -6, 6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.4-h";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -4, 2, -4, -4, -12, 0, -10, -6, -6, -12, 12, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.4-i";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -6, -6, 2, 6, 10, -6, -6, 8, -6, -8, 0, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.4-j";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -8, 6, -4, 0, 4, 2, 0, 10, -2, 12, -6, 12, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-a";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -4, -6, -4, 4, 0, 8, 6, 6, 14, -12, 4, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-b";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -2, -4, -8, -8, 10, -8, -8, 10, 2, 8, 12, 8, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-c";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 0, 2, 8, 10, -11, 7, -11, -1, 1, -4, -2, 11, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-d";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -6, 4, 4, -4, 6, 12, -8, 2, 2, 0, 8, 0, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-e";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 2, 8, -10, -1, 3, 3, 5, 9, 0, 6, 15, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-f";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -6, 4, 6, 11, 7, 7, -3, 7, 0, -2, -5, 8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-g";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, 0, -2, 4, -4, 8, 8, -6, 6, -2, 12, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-h";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 2, 8, 8, 8, -12, 0, 2, -6, -6, 0, 0, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-i";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -4, -6, -8, -8, -4, -4, 8, 6, -6, -2, 0, 0, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-j";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, 2, -6, -4, 10, 0, -4, 6, -6, -4, 12, 4, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-k";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -4, 6, -2, 4, -6, 0, -4, -2, 10, 4, -4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.3-l";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -6, -4, 2, 4, 4, -8, -8, 2, -2, -10, 4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.12-a";
N := (w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, -2, 6, 2, 4, 8, -2, -4, 10, -12, -2, -12, 6, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.12-b";
N := (w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 0, 4, 6, 6, 4, -1, 0, -6, 9, 3, 2, 5, 0, -9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.12-c";
N := (w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 6, -2, -6, 4, 4, -10, 4, -10, -4, -10, -12, 6, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.11-a";
N := (23*w - 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 2, -3, -2, 1, 3, 12, -1, -8, -2, -11, -4, -7, 3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.10-a";
N := (-9*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, 3, -1, 2, 8, 2, 6, 3, -4, 6, -6, 9, -12, 2, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 988.9-a";
N := (-17*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, 2, -1, -2, -5, 1, 12, 9, 0, 6, 5, 12, -9, -11, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

