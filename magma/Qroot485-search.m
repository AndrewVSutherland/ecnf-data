print "Field 2.2.485.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 121);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK);
Append(~Plist,(5)*OK+(w + 2)*OK);
Append(~Plist,(7)*OK+(w + 1)*OK);
Append(~Plist,(7)*OK+(w + 5)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-w + 11)*OK);
Append(~Plist,(-w - 10)*OK);
Append(~Plist,(13)*OK+(w + 5)*OK);
Append(~Plist,(13)*OK+(w + 7)*OK);
Append(~Plist,(17)*OK+(w + 1)*OK);
Append(~Plist,(17)*OK+(w + 15)*OK);
Append(~Plist,(23)*OK+(w + 2)*OK);
Append(~Plist,(23)*OK+(w + 20)*OK);
Append(~Plist,(w + 9)*OK);
Append(~Plist,(w - 10)*OK);
Append(~Plist,(37)*OK+(w + 17)*OK);
Append(~Plist,(37)*OK+(w + 19)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(67)*OK+(w + 31)*OK);
Append(~Plist,(67)*OK+(w + 35)*OK);
Append(~Plist,(w + 6)*OK);
Append(~Plist,(w - 7)*OK);
Append(~Plist,(83)*OK+(w + 26)*OK);
Append(~Plist,(83)*OK+(w + 56)*OK);
Append(~Plist,(w + 14)*OK);
Append(~Plist,(w - 15)*OK);
Append(~Plist,(97)*OK+(w + 48)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(107)*OK+(w + 29)*OK);
Append(~Plist,(107)*OK+(w + 77)*OK);
Append(~Plist,(w + 3)*OK);
Append(~Plist,(w - 4)*OK);
Append(~Plist,(127)*OK+(w + 27)*OK);
Append(~Plist,(127)*OK+(w + 99)*OK);
Append(~Plist,(137)*OK+(w + 49)*OK);
Append(~Plist,(137)*OK+(w + 87)*OK);
Append(~Plist,(w + 16)*OK);
Append(~Plist,(w - 17)*OK);
Append(~Plist,(157)*OK+(w + 46)*OK);
Append(~Plist,(157)*OK+(w + 110)*OK);
Append(~Plist,(173)*OK+(w + 36)*OK);
Append(~Plist,(173)*OK+(w + 136)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(223)*OK+(w + 91)*OK);
Append(~Plist,(223)*OK+(w + 131)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(233)*OK+(w + 93)*OK);
Append(~Plist,(233)*OK+(w + 139)*OK);
Append(~Plist,(-3*w - 35)*OK);
Append(~Plist,(3*w - 38)*OK);
Append(~Plist,(257)*OK+(w + 37)*OK);
Append(~Plist,(257)*OK+(w + 219)*OK);
Append(~Plist,(263)*OK+(w + 59)*OK);
Append(~Plist,(263)*OK+(w + 203)*OK);
Append(~Plist,(4*w - 49)*OK);
Append(~Plist,(4*w + 45)*OK);
Append(~Plist,(277)*OK+(w + 69)*OK);
Append(~Plist,(277)*OK+(w + 207)*OK);
Append(~Plist,(317)*OK+(w + 132)*OK);
Append(~Plist,(317)*OK+(w + 184)*OK);
Append(~Plist,(337)*OK+(w + 42)*OK);
Append(~Plist,(337)*OK+(w + 294)*OK);
Append(~Plist,(347)*OK+(w + 50)*OK);
Append(~Plist,(347)*OK+(w + 296)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(367)*OK+(w + 142)*OK);
Append(~Plist,(367)*OK+(w + 224)*OK);
Append(~Plist,(373)*OK+(w + 70)*OK);
Append(~Plist,(373)*OK+(w + 302)*OK);
Append(~Plist,(-5*w + 54)*OK);
Append(~Plist,(5*w + 49)*OK);
Append(~Plist,(383)*OK+(w + 94)*OK);
Append(~Plist,(383)*OK+(w + 288)*OK);
Append(~Plist,(-3*w - 25)*OK);
Append(~Plist,(3*w - 28)*OK);
Append(~Plist,(-4*w - 37)*OK);
Append(~Plist,(4*w - 41)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(-2*w - 7)*OK);
Append(~Plist,(w + 23)*OK);
Append(~Plist,(w - 24)*OK);
Append(~Plist,(433)*OK+(w + 86)*OK);
Append(~Plist,(433)*OK+(w + 346)*OK);
Append(~Plist,(443)*OK+(w + 128)*OK);
Append(~Plist,(443)*OK+(w + 314)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(-2*w - 5)*OK);
Append(~Plist,(457)*OK+(w + 130)*OK);
Append(~Plist,(457)*OK+(w + 326)*OK);
Append(~Plist,(-4*w - 47)*OK);
Append(~Plist,(4*w - 51)*OK);
Append(~Plist,(w + 24)*OK);
Append(~Plist,(w - 25)*OK);
Append(~Plist,(-3*w + 26)*OK);
Append(~Plist,(3*w + 23)*OK);
Append(~Plist,(-5*w - 57)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[4, -2, 3, 3, 2, 3, 3, -3, -3, -2, -2, 1, 1, -9, -9, -3, -3, 3, 3, 15, 15, -1, -1, -8, -8, -15, -15, 18, 15, 15]);
ECSearch("1.1-b",(1)*OK,[4, 2, -3, -3, 2, 3, 3, 3, 3, 2, 2, -1, -1, -9, -9, 3, 3, 3, 3, -15, -15, -1, -1, 8, 8, -15, -15, -18, 15, 15]);
ECSearch("4.1-a",(2)*OK,[-1, 0, 0, -4, 3, -6, -3, 6, -7, 2, 8, -1, 6, -3, 3, 3, -12, 6, -6, 12, 17, -10, -7, -16, -12, 6, 15, -6, -6]);
ECSearch("4.1-b",(2)*OK,[1, 0, 0, -4, 3, -6, 3, -6, 7, -2, -8, 1, 6, -3, -3, -3, -12, 6, 6, -12, 17, -10, 7, 16, -12, 6, -15, -6, -6]);
ECSearch("4.1-c",(2)*OK,[-1, 0, 0, -4, -6, 3, 6, -3, 2, -7, -1, 8, -3, 6, 3, 3, 6, -12, 12, -6, -10, 17, -16, -7, 6, -12, 15, -6, -6]);
ECSearch("4.1-d",(2)*OK,[1, 0, 0, -4, -6, 3, -6, 3, -2, 7, 1, -8, -3, 6, -3, -3, 6, -12, -12, 6, -10, 17, 16, 7, 6, -12, -15, -6, -6]);
