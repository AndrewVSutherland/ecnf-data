print "Field 2.2.353.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 88);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w + 10)*OK);
Append(~Plist,(w + 9)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-10*w + 99)*OK);
Append(~Plist,(10*w + 89)*OK);
Append(~Plist,(66*w + 587)*OK);
Append(~Plist,(66*w - 653)*OK);
Append(~Plist,(28*w - 277)*OK);
Append(~Plist,(28*w + 249)*OK);
Append(~Plist,(8*w + 71)*OK);
Append(~Plist,(8*w - 79)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(2*w - 19)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(6*w + 53)*OK);
Append(~Plist,(6*w - 59)*OK);
Append(~Plist,(4*w - 39)*OK);
Append(~Plist,(4*w + 35)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(-2*w - 19)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(12*w + 107)*OK);
Append(~Plist,(12*w - 119)*OK);
Append(~Plist,(-48*w + 475)*OK);
Append(~Plist,(-48*w - 427)*OK);
Append(~Plist,(142*w + 1263)*OK);
Append(~Plist,(142*w - 1405)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(-4*w + 41)*OK);
Append(~Plist,(-4*w - 37)*OK);
Append(~Plist,(46*w + 409)*OK);
Append(~Plist,(-46*w + 455)*OK);
Append(~Plist,(14*w + 125)*OK);
Append(~Plist,(14*w - 139)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(-86*w + 851)*OK);
Append(~Plist,(-86*w - 765)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(180*w + 1601)*OK);
Append(~Plist,(180*w - 1781)*OK);
Append(~Plist,(-160*w - 1423)*OK);
Append(~Plist,(160*w - 1583)*OK);
Append(~Plist,(-122*w + 1207)*OK);
Append(~Plist,(122*w + 1085)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(-32*w - 285)*OK);
Append(~Plist,(32*w - 317)*OK);
Append(~Plist,(4*w + 39)*OK);
Append(~Plist,(-4*w + 43)*OK);
Append(~Plist,(64*w + 569)*OK);
Append(~Plist,(-64*w + 633)*OK);
Append(~Plist,(-22*w - 195)*OK);
Append(~Plist,(22*w - 217)*OK);
Append(~Plist,(-8*w + 81)*OK);
Append(~Plist,(-8*w - 73)*OK);
Append(~Plist,(44*w - 435)*OK);
Append(~Plist,(-44*w - 391)*OK);
Append(~Plist,(-124*w + 1227)*OK);
Append(~Plist,(-124*w - 1103)*OK);
Append(~Plist,(18*w + 161)*OK);
Append(~Plist,(18*w - 179)*OK);
Append(~Plist,(218*w + 1939)*OK);
Append(~Plist,(218*w - 2157)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(-2*w - 5)*OK);
Append(~Plist,(-20*w + 197)*OK);
Append(~Plist,(20*w + 177)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(-34*w + 337)*OK);
Append(~Plist,(34*w + 303)*OK);
Append(~Plist,(-102*w - 907)*OK);
Append(~Plist,(-102*w + 1009)*OK);
Append(~Plist,(-14*w + 137)*OK);
Append(~Plist,(14*w + 123)*OK);
Append(~Plist,(20*w + 179)*OK);
Append(~Plist,(20*w - 199)*OK);
Append(~Plist,(-2*w + 29)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(106*w + 943)*OK);
Append(~Plist,(-106*w + 1049)*OK);
Append(~Plist,(292*w + 2597)*OK);
Append(~Plist,(292*w - 2889)*OK);
Append(~Plist,(62*w - 613)*OK);
Append(~Plist,(-62*w - 551)*OK);
Append(~Plist,(-88*w + 871)*OK);
Append(~Plist,(88*w + 783)*OK);
Append(~Plist,(-254*w - 2259)*OK);
Append(~Plist,(254*w - 2513)*OK);
Append(~Plist,(-2*w + 31)*OK);
Append(~Plist,(2*w + 29)*OK);
Append(~Plist,(-4*w + 31)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("2.1-a",(-w + 10)*OK,[-1, -2, 4, -4, 2, 2, -8, 4, -8, 0, 2, 2, -2, 6, -2, -12, -8, 12, -8, 2, -6, -10, 14, -2, -4, 8, 18, -14, -18]);
ECSearch("2.2-a",(w + 9)*OK,[-1, -2, -4, 4, 2, 2, 4, -8, 0, -8, 2, -2, 2, -2, 6, -8, -12, -8, 12, 2, -10, -6, -2, 14, 8, -4, -14, 18, 6]);
ECSearch("4.1-a",(2)*OK,[2, 5, -3, -3, -7, -4, 4, -2, 0, -3, -6, 0, -5, 3, -5, -1, 6, 2, -6, -8, 6, -11, -7, 11, -5, 5, -7, 14]);
ECSearch("4.1-b",(2)*OK,[-2, -4, -4, 2, 2, -4, -4, 8, 8, 10, -6, -6, -2, -2, 4, 4, 8, 8, 6, -6, -6, -2, -2, 12, 12, 2, 2, 14]);
ECSearch("4.1-c",(2)*OK,[4, 0, 0, 0, 0, 8, 8, 0, 0, 8, -6, -6, 0, 0, -4, -4, -6, -6, 14, -10, -10, -4, -4, -12, -12, 2, 2, -10]);
ECSearch("4.1-d",(2)*OK,[2, -3, 5, -7, -3, 4, -4, 0, -2, -3, 0, -6, 3, -5, -1, -5, 2, 6, -6, 6, -8, -7, -11, -5, 11, -7, 5, -10]);
ECSearch("8.1-a",(-2*w + 20)*OK,[2, -1, 6, -3, 2, -4, -5, -8, 3, 3, 0, 6, 10, 0, -11, 8, -12, -7, -12, -8, -12, 10, -4, 17, 10, -7, -7, -10]);
ECSearch("8.1-b",(-2*w + 20)*OK,[2, -1, 2, 7, -2, -2, 1, 6, 3, 1, 0, 0, -12, -6, 3, 6, 8, -13, -8, 14, 2, -4, 8, -1, 8, 5, 5, 18]);
ECSearch("8.2-a",(2*w + 18)*OK,[2, 6, -1, 2, -3, -5, -4, 3, -8, 3, 6, 0, 0, 10, 8, -11, -7, -12, -12, -12, -8, -4, 10, 10, 17, -7, -7, 17]);
ECSearch("8.2-b",(2*w + 18)*OK,[2, 2, -1, -2, 7, 1, -2, 3, 6, 1, 0, 0, -6, -12, 6, 3, -13, 8, -8, 2, 14, 8, -4, 8, -1, 5, 5, -3]);
ECSearch("11.1-a",(-10*w + 99)*OK,[-1, 1, -4, 0, 2, -2, -2, 4, 2, -8, 6, -10, 4, -10, -8, 4, 8, 2, 8, 2, 10, 4, -6, -16, -16, 6, -2, -18, 14]);
ECSearch("11.2-a",(10*w + 89)*OK,[1, -1, -4, 0, -2, 2, 4, -2, -8, 2, 6, 4, -10, -8, -10, 8, 4, 8, 2, 2, 4, 10, -16, -6, 6, -16, -18, -2, -14]);
