print "Field 2.2.236.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 59);
OK := Integers(K);
Plist := [];
Append(~Plist,(-3*w - 23)*OK);
Append(~Plist,(-w + 8)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(4*w - 31)*OK);
Append(~Plist,(4*w + 31)*OK);
Append(~Plist,(w + 6)*OK);
Append(~Plist,(w - 6)*OK);
Append(~Plist,(10*w - 77)*OK);
Append(~Plist,(10*w + 77)*OK);
Append(~Plist,(-5*w + 38)*OK);
Append(~Plist,(-5*w - 38)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(w - 10)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 4)*OK);
Append(~Plist,(-3*w - 22)*OK);
Append(~Plist,(3*w - 22)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(-2*w - 17)*OK);
Append(~Plist,(w)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(-11*w + 84)*OK);
Append(~Plist,(-11*w - 84)*OK);
Append(~Plist,(-4*w - 29)*OK);
Append(~Plist,(4*w - 29)*OK);
Append(~Plist,(-3*w + 20)*OK);
Append(~Plist,(3*w + 20)*OK);
Append(~Plist,(w + 14)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(-17*w + 130)*OK);
Append(~Plist,(-17*w - 130)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(-5*w - 36)*OK);
Append(~Plist,(5*w - 36)*OK);
Append(~Plist,(-15*w - 116)*OK);
Append(~Plist,(15*w - 116)*OK);
Append(~Plist,(-20*w + 153)*OK);
Append(~Plist,(-20*w - 153)*OK);
Append(~Plist,(8*w + 63)*OK);
Append(~Plist,(8*w - 63)*OK);
Append(~Plist,(w + 16)*OK);
Append(~Plist,(w - 16)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(2*w + 5)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(-24*w - 185)*OK);
Append(~Plist,(24*w - 185)*OK);
Append(~Plist,(-11*w + 86)*OK);
Append(~Plist,(11*w + 86)*OK);
Append(~Plist,(-6*w + 49)*OK);
Append(~Plist,(-6*w - 49)*OK);
Append(~Plist,(-4*w - 35)*OK);
Append(~Plist,(4*w - 35)*OK);
Append(~Plist,(-26*w + 199)*OK);
Append(~Plist,(-26*w - 199)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(-14*w - 109)*OK);
Append(~Plist,(-14*w + 109)*OK);
Append(~Plist,(18*w + 137)*OK);
Append(~Plist,(-18*w + 137)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-13*w - 98)*OK);
Append(~Plist,(13*w - 98)*OK);
Append(~Plist,(-17*w + 132)*OK);
Append(~Plist,(17*w + 132)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(21*w - 160)*OK);
Append(~Plist,(-21*w - 160)*OK);
Append(~Plist,(-3*w - 10)*OK);
Append(~Plist,(3*w - 10)*OK);
Append(~Plist,(-13*w + 102)*OK);
Append(~Plist,(13*w + 102)*OK);
Append(~Plist,(-6*w + 41)*OK);
Append(~Plist,(6*w + 41)*OK);
Append(~Plist,(-8*w + 65)*OK);
Append(~Plist,(-8*w - 65)*OK);
Append(~Plist,(-5*w - 44)*OK);
Append(~Plist,(5*w - 44)*OK);
Append(~Plist,(16*w - 121)*OK);
Append(~Plist,(16*w + 121)*OK);
Append(~Plist,(-3*w + 8)*OK);
Append(~Plist,(3*w + 8)*OK);
Append(~Plist,(-4*w - 21)*OK);
Append(~Plist,(4*w - 21)*OK);
Append(~Plist,(-16*w + 125)*OK);
Append(~Plist,(16*w + 125)*OK);
Append(~Plist,(-29*w - 224)*OK);
Append(~Plist,(-29*w + 224)*OK);
Append(~Plist,(19*w + 144)*OK);
Append(~Plist,(19*w - 144)*OK);
Append(~Plist,(10*w - 73)*OK);
Append(~Plist,(10*w + 73)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[-3, 1, -1, -4, 0, -2, 6, 0, 4, -3, 1, 10, 2, -5, -5, -6, -6, 10, 6, -5, -3, 9, -4, -4, 0, -6, 6, 8, -12]);
ECSearch("4.1-b",(2)*OK,[1, -3, -1, 0, -4, 6, -2, 4, 0, 1, -3, 2, 10, -5, -5, -6, -6, 6, 10, -5, 9, -3, -4, 0, -4, 6, -6, -12, 8]);
ECSearch("4.1-c",(2)*OK,[-3, 1, -1, 4, 0, -2, 6, 0, -4, -3, 1, -10, -2, -5, -5, 6, 6, -10, -6, -5, -3, 9, 4, 4, 0, 6, -6, -8, 12]);
ECSearch("4.1-d",(2)*OK,[1, -3, -1, 0, 4, 6, -2, -4, 0, 1, -3, -2, -10, -5, -5, 6, 6, -6, -10, -5, 9, -3, 4, 0, 4, -6, 6, 12, -8]);
ECSearch("9.1-a",(3)*OK,[-1, -2, 4, -3, 3, 3, 3, 4, -2, 6, 0, 2, 2, 5, 5, 1, 7, 8, 2, -11, 14, 2, -4, 0, -12, -9, 9, 4, -14]);
ECSearch("9.1-b",(3)*OK,[1, -2, 4, 3, -3, 3, 3, -4, 2, 6, 0, -2, -2, 5, 5, -1, -7, -8, -2, -11, 14, 2, 4, 0, 12, 9, -9, -4, 14]);
ECSearch("9.1-c",(3)*OK,[-1, 4, -2, 3, -3, 3, 3, -2, 4, 0, 6, 2, 2, 5, 5, 7, 1, 2, 8, -11, 2, 14, -4, -12, 0, 9, -9, -14, 4]);
ECSearch("9.1-d",(3)*OK,[1, 4, -2, -3, 3, 3, 3, 2, -4, 0, 6, -2, -2, 5, 5, -7, -1, -2, -8, -11, 2, 14, 4, 12, 0, -9, 9, 14, -4]);
ECSearch("10.1-a",(w - 7)*OK,[-2, 2, 3, 1, 3, 1, 2, 6, 10, 0, 10, -4, 7, 7, -9, 3, 6, 8, -5, 6, -6, 4, 12, -8, 9, 9, -6, 4]);
ECSearch("10.1-b",(w - 7)*OK,[-2, 2, -3, -1, 3, 1, -2, -6, 10, 0, -10, 4, 7, 7, 9, -3, -6, -8, -5, 6, -6, -4, -12, 8, -9, -9, 6, -4]);
ECSearch("10.2-a",(-w - 7)*OK,[-2, 2, 1, 3, 1, 3, 6, 2, 0, 10, -4, 10, 7, 7, 3, -9, 8, 6, -5, -6, 6, 4, -8, 12, 9, 9, 4, -6]);
ECSearch("10.2-b",(-w - 7)*OK,[-2, 2, -1, -3, 1, 3, -6, -2, 0, 10, 4, -10, 7, 7, -3, 9, -8, -6, -5, -6, 6, -4, 8, -12, -9, -9, -4, 6]);
ECSearch("16.1-a",(4)*OK,[3, 3, -5, -6, 6, 6, 6, 6, -6, 3, 3, 0, 0, 3, 3, 0, 0, 6, -6, -13, 3, 3, 0, -6, 6, 6, -6, -6, 6]);
ECSearch("16.1-b",(4)*OK,[0, 0, -2, -3, 3, -3, -3, -6, 6, 0, 0, 0, 0, 9, 9, 9, -9, 12, -12, -13, 6, 6, 0, -12, 12, -15, 15, 6, -6]);
ECSearch("16.1-c",(4)*OK,[3, 3, -5, -2, 2, -2, -2, -6, 6, -5, -5, 4, -4, -5, -5, -12, 12, -2, 2, -13, 3, 3, 0, -2, 2, 6, -6, -2, 2]);
ECSearch("16.1-d",(4)*OK,[3, 3, -5, 2, -2, -2, -2, 6, -6, -5, -5, -4, 4, -5, -5, 12, -12, 2, -2, -13, 3, 3, 0, 2, -2, -6, 6, 2, -2]);
ECSearch("16.1-e",(4)*OK,[0, 0, -2, 3, -3, -3, -3, 6, -6, 0, 0, 0, 0, 9, 9, -9, 9, -12, 12, -13, 6, 6, 0, 12, -12, 15, -15, -6, 6]);
ECSearch("16.1-f",(4)*OK,[3, 3, -5, 6, -6, 6, 6, -6, 6, 3, 3, 0, 0, 3, 3, 0, 0, -6, 6, -13, 3, 3, 0, 6, -6, -6, 6, 6, -6]);
ECSearch("17.1-a",(4*w - 31)*OK,[1, -1, 3, -1, 0, 0, 2, 4, 0, 3, -1, 0, -4, -9, -5, -8, -4, 4, 8, -1, 7, -9, -4, -8, 8, 8, -16, 0, 4]);
ECSearch("17.1-b",(4*w - 31)*OK,[1, -2, 0, 2, -6, 0, -2, -8, 0, 6, 4, 0, -8, -6, -10, 8, 4, 4, 8, -10, -4, 0, -10, -10, -2, 2, 2, 0, -16]);
ECSearch("17.1-c",(4*w - 31)*OK,[-1, -1, 3, -1, 0, 0, 2, -4, 0, 3, -1, 0, 4, -9, -5, 8, 4, -4, -8, -1, 7, -9, 4, 8, -8, -8, 16, 0, -4]);
ECSearch("17.1-d",(4*w - 31)*OK,[-1, -2, 0, 2, 6, 0, -2, 8, 0, 6, 4, 0, 8, -6, -10, -8, -4, -4, -8, -10, -4, 0, 10, 10, 2, -2, -2, 0, 16]);
ECSearch("17.2-a",(4*w + 31)*OK,[1, 3, -1, -1, 0, 0, 2, 0, 4, -1, 3, -4, 0, -5, -9, -4, -8, 8, 4, -1, -9, 7, -4, 8, -8, -16, 8, 4, 0]);
ECSearch("17.2-b",(4*w + 31)*OK,[1, 0, -2, 2, 0, -6, -2, 0, -8, 4, 6, -8, 0, -10, -6, 4, 8, 8, 4, -10, 0, -4, -10, -2, -10, 2, 2, -16, 0]);
ECSearch("17.2-c",(4*w + 31)*OK,[-1, 3, -1, -1, 0, 0, 2, 0, -4, -1, 3, 4, 0, -5, -9, 4, 8, -8, -4, -1, -9, 7, 4, -8, 8, 16, -8, -4, 0]);
ECSearch("17.2-d",(4*w + 31)*OK,[-1, 0, -2, 2, 0, 6, -2, 0, 8, 4, 6, 8, 0, -10, -6, -4, -8, -8, -4, -10, 0, -4, 10, 2, 10, -2, -2, 16, 0]);
ECSearch("20.1-a",(-2*w + 16)*OK,[-2, 2, 4, 0, -2, -6, 6, 8, 6, -2, 8, 4, -2, 10, 0, 6, -10, 12, 10, 6, 6, 4, -2, -12, -6, 12, 16, -18]);
ECSearch("20.1-b",(-2*w + 16)*OK,[-2, 2, -4, 0, -2, -6, -6, -8, 6, -2, -8, -4, -2, 10, 0, -6, 10, -12, 10, 6, 6, -4, 2, 12, 6, -12, -16, 18]);
ECSearch("20.2-a",(2*w + 16)*OK,[-2, 2, 0, 4, -6, -2, 8, 6, -2, 6, 4, 8, 10, -2, 6, 0, 12, -10, 10, 6, 6, 4, -12, -2, 12, -6, -18, 16]);
ECSearch("20.2-b",(2*w + 16)*OK,[-2, 2, 0, -4, -6, -2, -8, -6, -2, 6, -4, -8, 10, -2, -6, 0, -12, 10, 10, 6, 6, -4, 12, 2, -12, 6, 18, -16]);
ECSearch("25.2-a",(7*w - 54)*OK,[0, -4, 0, 0, 0, -8, -2, 0, 0, 4, 4, 0, 0, -10, 10, 0, 0, 0, 0, 0, 4, -14, 0, 0, 0, 0, 0, 0, 0]);
ECSearch("25.2-b",(7*w - 54)*OK,[1, 0, -1, 4, 3, -6, 1, -6, 6, 4, 2, 2, 0, -5, -6, 3, 1, 8, -6, 10, 6, -4, -8, -13, -12, -11, 9, -12, -8]);
ECSearch("25.2-c",(7*w - 54)*OK,[-1, 0, -1, -4, -3, -6, 1, 6, -6, 4, 2, -2, 0, -5, -6, -3, -1, -8, 6, 10, 6, -4, 8, 13, 12, 11, -9, 12, 8]);
ECSearch("25.3-a",(-7*w - 54)*OK,[0, -4, 0, 0, 0, -2, -8, 0, 0, 4, 4, 0, 0, 10, -10, 0, 0, 0, 0, 0, -14, 4, 0, 0, 0, 0, 0, 0, 0]);
ECSearch("25.3-b",(-7*w - 54)*OK,[1, 0, -1, 3, 4, 1, -6, 6, -6, 2, 4, 0, 2, -6, -5, 1, 3, -6, 8, 10, -4, 6, -8, -12, -13, 9, -11, -8, -12]);
ECSearch("25.3-c",(-7*w - 54)*OK,[-1, 0, -1, -3, -4, 1, -6, -6, 6, 2, 4, 0, -2, -6, -5, -1, -3, 6, -8, 10, -4, 6, 8, 12, 13, -9, 11, 8, 12]);
ECSearch("34.1-a",(w + 5)*OK,[3, 3, -1, 0, -4, 2, 0, 0, -5, -5, 0, 8, 3, -1, -12, -4, 4, 0, 3, -5, -1, -12, 4, -8, 12, -16, -8, -4]);
ECSearch("34.1-b",(w + 5)*OK,[-3, -3, 1, 0, -6, -6, 6, 0, -9, 3, 4, -2, 3, 9, 10, -8, 0, 0, -1, 3, -3, 0, -14, -8, -6, -12, 4, -8]);
ECSearch("34.1-c",(w + 5)*OK,[3, 3, -1, 0, 4, 2, 0, 0, -5, -5, 0, -8, 3, -1, 12, 4, -4, 0, 3, -5, -1, 12, -4, 8, -12, 16, 8, 4]);
ECSearch("34.1-d",(w + 5)*OK,[-3, -3, 1, 0, 6, -6, -6, 0, -9, 3, -4, 2, 3, 9, -10, 8, 0, 0, -1, 3, -3, 0, 14, 8, 6, 12, -4, 8]);
ECSearch("34.2-a",(w - 5)*OK,[3, 3, -1, -4, 0, 2, 0, 0, -5, -5, 8, 0, -1, 3, -4, -12, 0, 4, 3, -1, -5, -12, -8, 4, -16, 12, -4, -8]);
ECSearch("34.2-b",(w - 5)*OK,[-3, -3, 1, -6, 0, -6, 0, 6, 3, -9, -2, 4, 9, 3, -8, 10, 0, 0, -1, -3, 3, 0, -8, -14, -12, -6, -8, 4]);
ECSearch("34.2-c",(w - 5)*OK,[3, 3, -1, 4, 0, 2, 0, 0, -5, -5, -8, 0, -1, 3, 4, 12, 0, -4, 3, -1, -5, 12, 8, -4, 16, -12, 4, 8]);
ECSearch("34.2-d",(w - 5)*OK,[-3, -3, 1, 6, 0, -6, 0, -6, 3, -9, 2, -4, 9, 3, 8, -10, 0, 0, -1, -3, 3, 0, 8, 14, 12, 6, 8, -4]);
ECSearch("46.1-a",(5*w + 39)*OK,[3, 3, 1, 3, 0, 6, 3, 6, -6, 0, -7, 2, 12, -6, -1, 8, 6, -9, 5, 6, 6, 3, -4, -16, -3, 6, -7, 5]);
ECSearch("46.1-b",(5*w + 39)*OK,[3, 3, 1, -3, 0, 6, 3, -6, -6, 0, 7, -2, 12, -6, 1, -8, -6, 9, 5, 6, 6, -3, 4, 16, 3, -6, 7, -5]);
ECSearch("46.2-a",(5*w - 39)*OK,[3, 3, 1, 0, 3, 3, 6, 6, 0, -6, 2, -7, -6, 12, 8, -1, -9, 6, 5, 6, 6, 3, -16, -4, 6, -3, 5, -7]);
ECSearch("46.2-b",(5*w - 39)*OK,[3, 3, 1, 0, -3, 3, 6, -6, 0, -6, -2, 7, -6, 12, -8, 1, 9, -6, 5, 6, 6, -3, 16, 4, -6, 3, -5, 7]);
