print "Field 2.2.24.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 6);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w + 2)*OK);
Append(~Plist,(w + 3)*OK);
Append(~Plist,(-w - 1)*OK);
Append(~Plist,(-w + 1)*OK);
Append(~Plist,(w + 5)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(2*w + 1)*OK);
Append(~Plist,(-3*w + 5)*OK);
Append(~Plist,(3*w + 5)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 7)*OK);
Append(~Plist,(-4*w + 7)*OK);
Append(~Plist,(4*w + 7)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(-3*w - 1)*OK);
Append(~Plist,(3*w - 1)*OK);
Append(~Plist,(3*w + 11)*OK);
Append(~Plist,(-3*w + 11)*OK);
Append(~Plist,(-4*w - 5)*OK);

effort := 400;
print "Isogeny class 1.1-a";
N := (1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 0, 2, 2, 0, 0, 0, 0, -10, -10, 0, 0, 14, 0, 0, 14, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 10.1-a";
N := (w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, -7, -6, 3, 6, -3, 8, -1, -3, -12, -4, 9, 9, -4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 10.1-b";
N := (w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 2, -7, 6, -3, -6, 3, 8, -1, 3, 12, -4, -9, -9, -4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 10.2-a";
N := (-w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -7, 2, 3, -6, -3, 6, -1, 8, -12, -3, -4, 9, 9, 14, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 10.2-b";
N := (-w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -7, 2, -3, 6, 3, -6, -1, 8, 12, 3, -4, -9, -9, 14, -4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.1-a";
N := (4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -2, -2, 0, 0, 0, 0, 10, 10, 0, 0, 14, 0, 0, -14, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 23.1-a";
N := (-2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 2, 4, -6, 8, 4, -8, 0, 10, 0, 8, -10, -6, 12, -2, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 23.1-b";
N := (-2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -2, 4, -6, -8, -4, 8, 0, 10, 0, -8, -10, 6, -12, -2, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 23.2-a";
N := (2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 0, -6, 4, 8, -8, 4, 10, 0, 8, 0, -10, 12, -6, -12, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 23.2-b";
N := (2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 0, -6, 4, -8, 8, -4, 10, 0, -8, 0, -10, -12, 6, -12, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 24.1-a";
N := (-2*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, -4, 8, 8, -6, -6, 4, 4, 0, 0, -14, 2, 2, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 24.1-b";
N := (-2*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, -8, -8, 6, 6, 4, 4, 0, 0, -14, -2, -2, -4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.2-a";
N := (-2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, -5, 0, -4, -4, 0, 0, -1, 9, -8, 12, 5, -4, -4, -7, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.2-b";
N := (-2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, 6, -4, 8, -6, -6, 2, -6, 4, 0, 2, 14, 2, 2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.2-c";
N := (-2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -5, 0, 4, 4, 0, 0, -1, 9, 8, -12, 5, 4, 4, -7, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.2-d";
N := (-2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 0, 7, -8, 0, 0, 0, 0, -5, 5, 0, 0, -11, 0, 0, -11, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.2-e";
N := (-2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -2, 6, 4, -8, 6, 6, 2, -6, -4, 0, 2, -14, -2, 2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.3-a";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, 0, -5, -4, -4, 0, 0, 9, -1, 12, -8, 5, -4, -4, 8, -7, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.3-b";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 6, -2, 8, -4, -6, -6, -6, 2, 0, 4, 2, 2, 14, 2, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.3-c";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 0, -5, 4, 4, 0, 0, 9, -1, -12, 8, 5, 4, 4, 8, -7, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.3-d";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 0, -8, 7, 0, 0, 0, 0, 5, -5, 0, 0, -11, 0, 0, -16, -11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.3-e";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 6, -2, -8, 4, 6, 6, -6, 2, 0, -4, 2, -2, -14, 2, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 30.1-a";
N := (w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, -8, -8, -4, -2, -6, 4, 8, -8, 8, 6, 6, 6, 4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 30.1-b";
N := (w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, -6, 6, 0, 8, -10, 0, -12, -4, -6, 6, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 30.1-c";
N := (w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, -8, 8, 4, 2, 6, 4, 8, 8, -8, 6, -6, -6, 4, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 30.1-d";
N := (w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, 6, -6, 0, 8, -10, 0, 12, -4, 6, -6, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 30.2-a";
N := (-w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, 8, -4, -8, -6, -2, 8, 4, 8, -8, 6, 6, 6, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 30.2-b";
N := (-w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, 0, 0, 6, -10, 8, -12, 0, -4, 6, -6, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 30.2-c";
N := (-w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, 8, 4, 8, 6, 2, 8, 4, -8, 8, 6, -6, -6, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 30.2-d";
N := (-w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 6, 0, 0, -6, -10, 8, 12, 0, -4, -6, 6, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.1-a";
N := (-4*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, 0, 0, 0, 10, 10, 0, 0, 0, 0, -14, -14, -14, 0, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.1-b";
N := (-4*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 0, 0, 0, 0, -10, -10, 0, 0, 0, 0, -14, 14, 14, 0, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.1-a";
N := (6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, 8, 0, 0, 0, 0, 8, 8, 0, 0, 2, 0, 0, -16, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.1-a";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, -4, 2, 2, 6, 6, -12, -2, -12, 8, -8, -2, -2, -4, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.1-b";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, 2, -8, 4, -6, 6, -6, -2, 0, 4, -2, 2, 14, 2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.1-c";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -4, 4, 4, 6, 6, 12, -8, 0, -8, -2, 14, -10, -4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.1-d";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -4, -4, -4, -6, -6, 12, -8, 0, 8, -2, -14, 10, -4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.1-e";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, 8, -4, 6, -6, -6, -2, 0, -4, -2, -2, -14, 2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.1-f";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, -4, -2, -2, -6, -6, -12, -2, 12, -8, -8, 2, 2, -4, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.2-a";
N := (-3*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, 6, 2, 2, 6, 6, -2, -12, 8, -12, -8, -2, -2, -14, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.2-b";
N := (-3*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -6, 4, -8, 6, -6, -2, -6, 4, 0, -2, 14, 2, -2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.2-c";
N := (-3*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 0, 4, 4, 6, 6, -8, 12, -8, 0, -2, -10, 14, -8, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.2-d";
N := (-3*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 0, -4, -4, -6, -6, -8, 12, 8, 0, -2, 10, -14, -8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.2-e";
N := (-3*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -6, -4, 8, -6, 6, -2, -6, -4, 0, -2, -14, -2, -2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 45.2-f";
N := (-3*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -4, 6, -2, -2, -6, -6, -2, -12, -8, 12, -8, 2, 2, -14, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 47.1-a";
N := (-4*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 4, -6, -2, 8, 8, -4, -8, -6, 6, 0, -2, 4, -4, -2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 47.1-b";
N := (-4*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -4, -6, -2, -8, -8, 4, 8, -6, 6, 0, -2, -4, 4, -2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 47.2-a";
N := (4*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 0, -2, -6, 8, 8, -8, -4, 6, -6, 0, -2, -4, 4, 2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 47.2-b";
N := (4*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 0, -2, -6, -8, -8, 8, 4, 6, -6, 0, -2, 4, -4, 2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.1-a";
N := (4*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 4, -8, -8, -6, -6, -4, -4, 0, 0, -14, 2, 2, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.1-b";
N := (4*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 4, 8, 8, 6, 6, -4, -4, 0, 0, -14, -2, -2, 4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 49.1-a";
N := (7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -4, 6, 6, 0, 0, 8, -8, -2, -2, -8, 8, 0, 0, -2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 49.1-b";
N := (7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 4, 6, 6, 0, 0, -8, 8, -2, -2, 8, -8, 0, 0, -2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.2-a";
N := (-3*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 1, -2, 3, 6, 9, -6, -1, -8, 0, 9, -8, -3, 9, 2, -8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.2-b";
N := (-3*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 5, 0, 9, 4, 5, 0, -1, 4, -2, -7, -10, 9, -1, -12, -2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.2-c";
N := (-3*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 5, 0, -9, -4, -5, 0, -1, 4, 2, 7, -10, -9, 1, -12, -2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.2-d";
N := (-3*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 1, -2, -3, -6, -9, 6, -1, -8, 0, -9, -8, 3, -9, 2, -8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.3-a";
N := (-3*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -2, 1, 6, 3, -6, 9, -8, -1, 9, 0, -8, 9, -3, -8, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.3-b";
N := (-3*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 5, 4, 9, 0, 5, 4, -1, -7, -2, -10, -1, 9, -2, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.3-c";
N := (-3*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 5, -4, -9, 0, -5, 4, -1, 7, 2, -10, 1, -9, -2, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.3-d";
N := (-3*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -2, 1, -6, -3, 6, -9, -8, -1, -9, 0, -8, -9, 3, -8, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.1-a";
N := (-3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -7, 2, 0, -3, -6, 9, -10, -1, 9, 3, -4, -12, -6, -4, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.1-b";
N := (-3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -7, 3, 0, -9, 6, -1, -10, -3, -9, -4, 6, 12, -4, -4, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.1-c";
N := (-3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, -7, -3, 0, 9, -6, -1, -10, 3, 9, -4, -6, -12, -4, -4, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.1-d";
N := (-3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -7, 2, 0, 3, 6, -9, -10, -1, -9, -3, -4, 12, 6, -4, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 60.1-a";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 4, -4, 10, 6, 4, -4, 4, -4, -6, -6, 6, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 60.1-b";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, -4, 4, -10, -6, 4, -4, -4, 4, -6, 6, -6, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 60.2-a";
N := (-4*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, -4, 4, 6, 10, -4, 4, -4, 4, -6, 6, -6, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 60.2-b";
N := (-4*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, 4, -4, -6, -10, -4, 4, 4, -4, -6, -6, 6, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 69.1-a";
N := (-5*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 2, -8, 0, 8, 4, -6, 4, 0, 8, 6, -4, -6, 0, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 69.1-b";
N := (-5*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 2, -8, 0, -8, -4, -6, 4, 0, -8, 6, 4, 6, 0, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 69.2-a";
N := (5*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, -8, 2, 0, 4, 8, 4, -6, 8, 0, 6, -6, -4, -10, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 69.2-b";
N := (5*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -8, 2, 0, -4, -8, 4, -6, -8, 0, 6, 6, 4, -10, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.1-a";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, -4, 4, -4, -8, 4, -12, -4, -12, -4, 2, 0, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.1-b";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, 4, 4, -4, -4, 8, -4, -12, 4, 12, 2, 4, 0, -12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.1-c";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 4, -4, 4, 4, -8, -4, -12, -4, -12, 2, -4, 0, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.1-d";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, -4, -4, 4, 8, -4, -12, -4, 12, 4, 2, 0, 4, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 73.1-a";
N := (-4*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 4, -8, 0, 4, 4, 8, 2, -6, -8, 0, 8, -10, 10, -8, 16, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 73.1-b";
N := (-4*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -4, -8, 0, -4, -4, -8, -2, -6, -8, 0, -8, -10, -10, 8, 16, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 73.2-a";
N := (-4*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 2, 0, -8, 4, 4, 2, 8, -8, -6, 8, 0, -10, -8, 10, -12, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 73.2-b";
N := (-4*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -2, 0, -8, -4, -4, -2, -8, -8, -6, -8, 0, -10, 8, -10, -12, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-a";
N := (5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 2, -2, 10, -10, 0, 0, -10, 10, -2, -6, 6, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-b";
N := (5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 6, -6, 6, -6, 8, 8, -6, 6, 14, 6, -6, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-c";
N := (5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, 0, 0, 2, 2, 4, 4, -8, -8, -14, 10, 10, 12, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-d";
N := (5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, -2, 2, -10, 10, 0, 0, 10, -10, -2, 6, -6, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-e";
N := (5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 0, 0, -2, -2, 4, 4, 8, 8, -14, -10, -10, 12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-f";
N := (5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, 6, -6, 6, 8, 8, 6, -6, 14, -6, 6, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.2-a";
N := (w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, 0, 4, 4, 6, -6, 8, 12, 8, 0, 2, 10, -14, 8, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.2-b";
N := (w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 0, -4, -4, -6, 6, 8, 12, -8, 0, 2, -10, 14, 8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.3-a";
N := (-w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 4, 4, 4, -6, 6, 12, 8, 0, 8, 2, -14, 10, -4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.3-b";
N := (-w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 4, -4, -4, 6, -6, 12, 8, 0, -8, 2, 14, -10, -4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 80.1-a";
N := (-4*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 7, -2, -3, 6, -3, 6, 1, -8, 12, 3, -4, 9, 9, -14, 4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 80.1-b";
N := (-4*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 7, -2, 3, -6, 3, -6, 1, -8, -12, -3, -4, -9, -9, -14, 4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 80.2-a";
N := (-4*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -2, 7, 6, -3, 6, -3, -8, 1, 3, 12, -4, 9, 9, 4, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 80.2-b";
N := (-4*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -2, 7, -6, 3, -6, 3, -8, 1, -3, -12, -4, -9, -9, 4, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.1-a";
N := (9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, 2, 2, 6, -6, 6, -6, 8, 8, 12, -12, 5, -3, 3, -4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.1-b";
N := (9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -7, -7, 0, 0, 0, 0, 8, 8, 0, 0, -13, 0, 0, 5, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.1-c";
N := (9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, 2, 2, -6, 6, -6, 6, 8, 8, -12, 12, 5, 3, -3, -4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.1-a";
N := (5*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, 2, 2, -9, -3, -6, 9, -1, -3, 9, -4, 0, -6, -4, -13, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.1-b";
N := (5*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, 2, 2, 9, 3, 6, -9, -1, 3, -9, -4, 0, 6, -4, -13, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.1-c";
N := (5*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 1, 4, -2, 5, 5, 2, -1, -1, 7, 13, -8, -6, 2, 16, -3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.1-d";
N := (5*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, 4, -2, -5, -5, -2, 1, -1, -7, -13, -8, 6, -2, 16, -3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.2-a";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, 2, 2, -3, -9, 9, -6, -1, 9, -3, -4, -6, 0, -13, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.2-b";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, 2, 2, 3, 9, -9, 6, -1, -9, 3, -4, 6, 0, -13, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.2-c";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, -2, 4, 5, 5, -1, 2, -1, 13, 7, -8, 2, -6, -3, 16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 86.2-d";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, -2, 4, -5, -5, 1, -2, -1, -13, -7, -8, -2, 6, -3, 16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.1-a";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -1, 6, 3, -6, -9, 8, -1, -9, 0, 8, -9, 3, 8, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.1-b";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 8, 2, 6, -6, -6, 6, 2, -4, 0, 12, -4, 6, 6, 2, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.1-c";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 6, 6, -4, 8, -2, -6, -8, 12, 0, 8, -2, 10, 8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.1-d";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -1, -6, -3, 6, 9, 8, -1, 9, 0, 8, 9, -3, 8, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.1-e";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 8, 2, -6, 6, 6, -6, 2, -4, 0, -12, -4, -6, -6, 2, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.1-f";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 6, -6, 4, -8, 2, -6, -8, -12, 0, 8, 2, -10, 8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.2-a";
N := (-3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 2, 3, 6, -9, -6, -1, 8, 0, -9, 8, 3, -9, 2, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.2-b";
N := (-3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 8, -6, 6, 6, -6, -4, 2, 12, 0, -4, 6, 6, -4, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.2-c";
N := (-3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 2, -4, 6, -2, 8, -8, -6, 0, 12, 8, 10, -2, -12, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.2-d";
N := (-3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 2, -3, -6, 9, 6, -1, 8, 0, 9, 8, -3, 9, 2, 8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.2-e";
N := (-3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 8, 6, -6, -6, 6, -4, 2, -12, 0, -4, -6, -6, -4, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 90.2-f";
N := (-3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 2, 4, -6, 2, -8, -8, -6, 0, -12, 8, -10, 2, -12, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 94.1-a";
N := (w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -3, -8, 1, -5, 10, -7, -12, 3, 0, -8, -1, -2, 4, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 94.1-b";
N := (w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -3, -8, -1, 5, -10, 7, -12, 3, 0, -8, 1, 2, 4, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 94.2-a";
N := (w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -8, -3, -5, 1, -7, 10, 3, -12, 0, -8, -2, -1, -4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 94.2-b";
N := (w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -8, -3, 5, -1, 7, -10, 3, -12, 0, -8, 2, 1, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.1-a";
N := (-4*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 4, 0, 0, -2, -2, -4, -4, 8, 8, 2, -10, -10, -4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.1-b";
N := (-4*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 4, 0, 0, 2, 2, -4, -4, -8, -8, 2, 10, 10, -4, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.1-c";
N := (-4*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, 0, 0, -2, -2, 4, 4, -8, -8, 2, -10, -10, 4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.1-d";
N := (-4*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, -4, 0, 0, 2, 2, 4, 4, 8, 8, 2, 10, 10, 4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 97.1-a";
N := (-2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, -8, 4, 8, -8, 6, 2, 4, -4, 0, 8, -6, -6, -6, -8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 97.1-b";
N := (-2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, -8, 4, -8, 8, -6, -2, 4, -4, 0, -8, -6, 6, 6, -8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 97.2-a";
N := (2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -2, 4, -8, -8, 8, 2, 6, -4, 4, 8, 0, -6, -6, -6, -12, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 97.2-b";
N := (2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 2, 4, -8, 8, -8, -2, -6, -4, 4, -8, 0, -6, 6, 6, -12, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-a";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -1, 0, 0, 6, -9, 5, 10, 4, -11, 7, 2, 6, 6, -2, -2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-b";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 8, -4, 3, -6, 6, -3, -7, -4, -6, 9, -6, 6, 2, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-c";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, -4, 8, 6, -3, 3, -6, -4, -7, -9, 6, -6, 6, -10, 2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-d";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 2, 2, 0, 0, 6, 6, 8, 8, 12, 12, -6, -6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-e";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 0, 0, 9, -6, -10, -5, -11, 4, -2, -7, -6, -6, -2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-f";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, 0, 0, -9, 6, 10, 5, -11, 4, 2, 7, 6, 6, -2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-g";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 2, 2, 0, 0, -6, -6, 8, 8, -12, -12, 6, 6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-h";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, -4, 8, -6, 3, -3, 6, -4, -7, 9, -6, 6, -6, -10, 2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-i";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 8, -4, -3, 6, -6, 3, -7, -4, 6, -9, 6, -6, 2, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-j";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 1, 0, 0, -6, 9, -5, -10, 4, -11, -7, -2, -6, -6, -2, -2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-a";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 6, 6, 6, 6, -10, -10, -6, -6, -10, -6, -6, 2, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-b";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, -6, -6, -6, -6, -10, -10, 6, 6, -10, 6, 6, 2, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.2-a";
N := (-4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 1, -8, 0, 0, 0, 0, 13, -13, 0, 0, 13, 0, 0, -5, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.2-b";
N := (-4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -8, -8, 0, 0, 0, 0, -8, 8, 0, 0, -2, 0, 0, 16, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.3-a";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -8, 1, 0, 0, 0, 0, -13, 13, 0, 0, 13, 0, 0, -16, -5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.3-b";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -8, -8, 0, 0, 0, 0, 8, -8, 0, 0, -2, 0, 0, -16, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 106.1-a";
N := (-5*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -7, -4, 3, 9, 2, -8, 5, -2, 2, -7, 4, -11, 4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 106.1-b";
N := (-5*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -7, -4, -3, -9, -2, 8, 5, -2, -2, 7, 4, 11, 4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 106.2-a";
N := (-5*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 1, -4, -7, 9, 3, -8, 2, -2, 5, -7, 2, 4, -11, -12, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 106.2-b";
N := (-5*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -4, -7, -9, -3, 8, -2, -2, 5, 7, -2, 4, 11, -12, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.1-a";
N := (-5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -7, 3, 3, -3, 6, -10, -10, 6, -12, -4, 0, -9, 14, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.1-b";
N := (-5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -1, -5, 3, 3, 4, 8, -8, 2, 10, 10, 6, 11, -4, -5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.1-c";
N := (-5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -5, -1, 9, 5, 0, 4, 4, -2, -2, -10, -6, -1, -12, 13, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.1-d";
N := (-5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, 7, 1, -1, 10, -6, 10, -6, 12, -4, 8, 3, 10, 13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.1-e";
N := (-5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -7, -1, 1, -10, -6, 10, 6, -12, -4, -8, -3, 10, 13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.1-f";
N := (-5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, 1, -9, -5, 0, 4, 4, 2, 2, -10, 6, 1, -12, 13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.1-g";
N := (-5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -1, 5, -3, -3, -4, 8, -8, -2, -10, 10, -6, -11, -4, -5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.1-h";
N := (-5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -7, -3, -3, 3, -6, -10, -10, -6, 12, -4, 0, 9, 14, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.2-a";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -7, 3, 3, 6, -3, -10, -10, -12, 6, -4, -9, 0, -13, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.2-b";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -1, 3, -5, 4, 3, -8, 8, 10, 2, 10, 11, 6, -5, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.2-c";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -5, 9, -1, 0, 5, 4, 4, -2, -2, -10, -1, -6, 13, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.2-d";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 1, 7, 10, -1, 10, -6, 12, -6, -4, 3, 8, 13, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.2-e";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -1, -7, -10, 1, 10, -6, -12, 6, -4, -3, -8, 13, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.2-f";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, -9, 1, 0, -5, 4, 4, 2, 2, -10, 1, 6, 13, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.2-g";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, -3, 5, -4, -3, -8, 8, -10, -2, 10, -11, -6, -5, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 114.2-h";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -7, -3, -3, -6, 3, -10, -10, 12, -6, -4, 9, 0, -13, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 115.1-a";
N := (w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, -8, -6, 1, -4, -10, 0, 1, -6, 4, 2, -9, 3, 1, 12, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 115.1-b";
N := (w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, -8, -6, -1, 4, 10, 0, 1, 6, -4, 2, 9, -3, 1, 12, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 115.4-a";
N := (w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, -6, -8, 1, -10, -4, 1, 0, 4, -6, 2, 3, -9, 12, 1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 115.4-b";
N := (w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, -6, -8, -1, 10, 4, 1, 0, -4, 6, 2, -3, 9, 12, 1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.1-a";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, 0, -6, -6, 4, 8, -6, -8, 4, 8, -10, -6, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.1-b";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, -8, 0, 2, 10, 4, -4, 0, 0, 10, 10, -6, 12, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.1-c";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 0, 6, 6, -4, 8, -6, 8, -4, 8, 10, 6, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.1-d";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 0, 0, -6, 2, -4, 12, 8, 8, 2, -14, -6, 4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.1-e";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 0, 0, 6, -2, -4, 12, -8, -8, 2, 14, 6, 4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.1-f";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 8, 0, -2, -10, 4, -4, 0, 0, 10, -10, 6, 12, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.2-a";
N := (-2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, -6, 0, 4, -6, -6, 8, 4, -8, 8, -6, -10, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.2-b";
N := (-2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 0, -8, 10, 2, -4, 4, 0, 0, 10, -6, 10, -4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.2-c";
N := (-2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 6, 0, -4, 6, -6, 8, -4, 8, 8, 6, 10, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.2-d";
N := (-2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 0, 0, 2, -6, 12, -4, 8, 8, 2, -6, -14, -12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.2-e";
N := (-2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 0, 0, -2, 6, 12, -4, -8, -8, 2, 6, 14, -12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 120.2-f";
N := (-2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 0, 8, -10, -2, -4, 4, 0, 0, 10, 6, -10, -4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-a";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, 1, 0, 0, -1, -1, 0, 0, -6, -6, 8, 8, -10, -6, -6, -7, -7, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-b";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -1, -1, 0, 0, 1, 1, 0, 0, -6, -6, -8, -8, -10, 6, 6, -7, -7, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 125.1-a";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 6, -6, 6, 6, -4, 4, 6, -6, -2, -6, 6, 8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 125.1-b";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 6, 4, -8, -6, -6, -2, 6, -4, 0, 2, -14, -2, -2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 125.1-c";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, -6, 6, -6, -6, -4, 4, -6, 6, -2, 6, -6, 8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 125.1-d";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 6, -4, 8, 6, 6, -2, 6, 4, 0, 2, 14, 2, -2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 125.2-a";
N := (-5*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, -6, 6, 6, 6, 4, -4, -6, 6, -2, 6, -6, -8, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 125.2-b";
N := (-5*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, -2, -8, 4, -6, -6, 6, -2, 0, -4, 2, -2, -14, -2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 125.2-c";
N := (-5*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 6, -6, -6, -6, 4, -4, 6, -6, -2, -6, 6, -8, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 125.2-d";
N := (-5*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -2, 8, -4, 6, 6, 6, -2, 0, 4, 2, 2, 14, -2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-a";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, -6, 2, 0, -8, -4, 0, -2, -10, 8, 8, -2, -12, 8, 10, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-b";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -4, 4, 8, 8, 6, -6, -12, 12, 8, 8, 10, 6, -6, 8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-c";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, -2, 6, -8, 0, 0, 4, 10, 2, 8, 8, -2, -8, 12, 6, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-d";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, -6, 2, 0, 8, 4, 0, -2, -10, -8, -8, -2, 12, -8, 10, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-e";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -4, 4, -8, -8, -6, 6, -12, 12, -8, -8, 10, -6, 6, 8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-f";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -2, 6, 8, 0, 0, -4, 10, 2, -8, -8, -2, 8, -12, 6, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-g";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 2, -6, 8, 0, 0, 4, -10, -2, -8, -8, -2, -8, 12, -6, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-h";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 4, -4, -8, -8, 6, -6, 12, -12, -8, -8, 10, 6, -6, -8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-i";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 6, -2, 0, 8, -4, 0, 2, 10, -8, -8, -2, -12, 8, -10, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-j";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, 2, -6, -8, 0, 0, -4, -10, -2, 8, 8, -2, 8, -12, -6, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-k";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, -4, 8, 8, -6, 6, 12, -12, 8, 8, 10, -6, 6, -8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-l";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 6, -2, 0, -8, 4, 0, 2, 10, 8, 8, -2, 12, -8, -10, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.1-a";
N := (4*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 1, 1, -1, -6, 3, -2, -6, -4, -2, 9, -13, 3, 9, -14, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.1-b";
N := (4*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, 1, -1, 6, -3, 2, 6, -4, 2, -9, -13, -3, -9, -14, 3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.2-a";
N := (-4*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -1, 1, 3, -6, -6, -2, -4, 9, -2, -13, 9, 3, 3, -14, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.2-b";
N := (-4*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -1, 1, -3, 6, 6, 2, -4, -9, 2, -13, -9, -3, 3, -14, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 134.1-a";
N := (-5*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, 2, -7, -6, -3, 0, 0, -10, 8, -6, -3, 5, -12, -6, -13, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 134.1-b";
N := (-5*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, 2, -7, 6, 3, 0, 0, -10, 8, 6, 3, 5, 12, 6, -13, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 134.2-a";
N := (5*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 3, -7, 2, -3, -6, 0, 0, 8, -10, -3, -6, 5, -6, -12, -13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 134.2-b";
N := (5*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -3, -7, 2, 3, 6, 0, 0, 8, -10, 3, 6, 5, 6, 12, -13, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.1-a";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 2, 3, -3, -6, -3, -1, 8, 6, 12, -4, 12, 6, -13, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.1-b";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -6, 5, -1, 8, 9, 0, 9, 4, 3, -1, 4, 10, 4, -4, -2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.1-c";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 6, 2, 7, 1, 6, 9, -9, -8, 6, 4, 4, -4, 2, 11, -14, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.1-d";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 6, 2, -7, -1, -6, -9, -9, -8, -6, -4, 4, 4, -2, 11, -14, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.1-e";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, 5, 1, -8, -9, 0, 9, 4, -3, 1, 4, -10, -4, -4, -2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.1-f";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 2, -3, 3, 6, 3, -1, 8, -6, -12, -4, -12, -6, -13, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.2-a";
N := (-6*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 2, -3, 3, -3, -6, 8, -1, 12, 6, -4, 6, 12, 14, -13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.2-b";
N := (-6*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 5, -6, 8, -1, 0, 9, 4, 9, -1, 3, 4, 4, 10, -2, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.2-c";
N := (-6*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 6, 1, 7, 9, 6, -8, -9, 4, 6, 4, 2, -4, -14, 11, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.2-d";
N := (-6*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 6, -1, -7, -9, -6, -8, -9, -4, -6, 4, -2, 4, -14, 11, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.2-e";
N := (-6*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 5, -6, -8, 1, 0, -9, 4, 9, 1, -3, 4, -4, -10, -2, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 135.2-f";
N := (-6*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 2, 3, -3, 3, 6, 8, -1, -12, -6, -4, -6, -12, 14, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 138.1-a";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 2, 2, 0, -3, -9, -1, -1, 0, -3, -4, -6, 6, 5, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 138.1-b";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 2, 0, 3, 9, -1, -1, 0, 3, -4, 6, -6, 5, 5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 138.2-a";
N := (w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 2, 0, -9, -3, -1, -1, -3, 0, -4, 6, -6, 5, 5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 138.2-b";
N := (w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 2, 0, 9, 3, -1, -1, 3, 0, -4, -6, 6, 5, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 141.1-a";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, -2, 4, 0, -4, -2, 0, 4, 6, 8, 10, 2, 6, -10, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 141.1-b";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, -2, 4, 0, 4, 2, 0, 4, 6, -8, 10, -2, -6, -10, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 141.2-a";
N := (5*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 4, -2, -4, 0, 0, -2, 6, 4, 8, 10, 6, 2, -12, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 141.2-b";
N := (5*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 4, -2, 4, 0, 0, 2, 6, 4, -8, 10, -6, -2, -12, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-a";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, -4, -4, 4, -4, 8, 4, 12, -4, -12, 2, 4, 0, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-b";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, 4, -4, 4, -8, 4, 12, 4, 12, 4, 2, 0, -4, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-c";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -8, -8, 0, 0, 0, 0, -8, -8, 0, 0, 2, 0, 0, 16, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-d";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -4, 4, 4, -4, 8, -4, 12, 4, -12, -4, 2, 0, 4, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-e";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, -4, 4, -4, 4, -8, 4, 12, 4, 12, 2, -4, 0, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 145.2-a";
N := (-2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 6, 8, -4, -6, 6, 8, -4, -6, 10, 10, -6, 10, -10, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 145.2-b";
N := (-2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 6, 8, 4, 6, -6, 8, -4, 6, -10, 10, 6, -10, -10, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 145.3-a";
N := (2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 8, 6, -6, -4, 6, -4, 8, 10, -6, 10, 10, -6, 12, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 145.3-b";
N := (2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 8, 6, 6, 4, -6, -4, 8, -10, 6, 10, -10, 6, 12, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-a";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -8, -8, 8, -8, 0, 0, -6, -6, -12, 12, 12, -12, -2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-b";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, 7, -8, -6, 6, 8, 5, 11, 8, -9, 0, 0, -3, 13, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-c";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 1, 7, -8, 6, -6, -8, -5, 11, 8, 9, 0, 0, 3, 13, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-d";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -8, -8, -8, 8, 0, 0, -6, -6, 12, -12, -12, 12, -2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-e";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, 0, 0, 0, 8, -8, 10, 10, 4, -4, -12, 12, -2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-f";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 0, 0, 0, -8, 8, 10, 10, -4, 4, 12, -12, -2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-g";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 4, 4, 0, 0, -2, -2, -4, -4, 0, 0, 6, 6, 4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-h";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 4, 4, 0, 0, 2, 2, -4, -4, 0, 0, -6, -6, 4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-i";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -8, 7, -6, 6, -5, -8, 8, 11, 0, 9, 3, 0, 4, 13, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-j";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -8, 7, 6, -6, 5, 8, 8, 11, 0, -9, -3, 0, 4, 13, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-a";
N := (-5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 8, 2, -2, 0, -12, -8, 8, -2, 6, 6, 12, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-b";
N := (-5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 0, 6, 6, -4, -4, 0, 0, 2, 6, 6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-c";
N := (-5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, 4, -2, 2, -12, 0, 8, -8, -2, 6, 6, -12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-d";
N := (-5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -8, -4, 2, -2, -12, 0, -8, 8, -2, -6, -6, -12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-e";
N := (-5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 0, -6, -6, -4, -4, 0, 0, 2, -6, -6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-f";
N := (-5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -8, -2, 2, 0, -12, 8, -8, -2, -6, -6, 12, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-a";
N := (-7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -5, 4, 9, -5, 10, -11, -6, 3, 3, 10, -11, 4, 3, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-b";
N := (-7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -5, -4, -9, 5, -10, -11, -6, -3, -3, 10, 11, -4, 3, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-c";
N := (-7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, -2, 4, -6, -2, -8, -8, 6, 0, 12, -8, 10, -2, -12, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-d";
N := (-7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -2, -4, 6, 2, 8, -8, 6, 0, -12, -8, -10, 2, -12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-e";
N := (-7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 1, -4, 1, -7, -6, 1, 2, -7, -11, 6, -9, 0, -5, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-f";
N := (-7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 1, 4, -1, 7, 6, 1, 2, 7, 11, 6, 9, 0, -5, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-g";
N := (-7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 6, -6, 4, 2, 6, -4, -8, -8, -4, -4, -6, -10, 0, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-h";
N := (-7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 6, 6, -4, -2, -6, -4, -8, 8, 4, -4, 6, 10, 0, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.3-a";
N := (-7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 0, 9, 4, 10, -5, -6, -11, 3, 3, 10, 4, -11, -2, 3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.3-b";
N := (-7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, -9, -4, -10, 5, -6, -11, -3, -3, 10, -4, 11, -2, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.3-c";
N := (-7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -6, -6, 4, -8, -2, 6, -8, 12, 0, -8, -2, 10, -8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.3-d";
N := (-7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -6, 6, -4, 8, 2, 6, -8, -12, 0, -8, 2, -10, -8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.3-e";
N := (-7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 1, -4, -6, -7, 2, 1, -11, -7, 6, 0, -9, -10, -5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.3-f";
N := (-7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, -1, 4, 6, 7, 2, 1, 11, 7, 6, 0, 9, -10, -5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.3-g";
N := (-7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -4, 4, -6, 6, 2, -8, -4, -4, -8, -4, -10, -6, 10, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.3-h";
N := (-7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -4, -4, 6, -6, -2, -8, -4, 4, 8, -4, 10, 6, 10, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.1-a";
N := (-8*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 3, -4, 3, 2, -2, -2, -6, -8, 7, 7, 2, 5, -3, 12, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.1-b";
N := (-8*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -4, 3, -2, 2, 2, 6, -8, 7, -7, -2, 5, 3, 12, -5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.2-a";
N := (8*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 1, 3, -4, -2, 2, -6, -2, 7, -8, 2, 7, 5, -3, -5, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.2-b";
N := (8*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, 3, -4, 2, -2, 6, 2, 7, -8, -2, -7, 5, 3, -5, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.1-a";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 8, 0, -8, 6, -2, 8, 8, 8, 0, 2, -2, 6, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.1-b";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 6, -1, 6, -7, 6, 5, 8, -7, -5, 12, -4, 5, 9, -4, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.1-c";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 6, -1, -6, 7, -6, -5, 8, -7, 5, -12, -4, -5, -9, -4, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.1-d";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 8, 0, 8, -6, 2, 8, 8, -8, 0, 2, 2, -6, 8, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.1-e";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, -8, 0, 8, 6, -2, -8, -8, -8, 0, 2, -2, 6, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.1-f";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -6, 1, -6, 7, 6, 5, -8, 7, 5, -12, -4, 5, 9, 4, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.1-g";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -6, 1, 6, -7, -6, -5, -8, 7, -5, 12, -4, -5, -9, 4, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.1-h";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -8, 0, -8, -6, 2, -8, -8, 8, 0, 2, 2, -6, -8, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.2-a";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 8, 0, -8, 0, -2, 6, 8, 8, 0, 8, 2, 6, -2, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.2-b";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -1, 6, -7, 6, 5, 6, -7, 8, 12, -5, -4, 9, 5, 2, -4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.2-c";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -1, 6, 7, -6, -5, -6, -7, 8, -12, 5, -4, -9, -5, 2, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.2-d";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 8, 0, 8, 0, 2, -6, 8, 8, 0, -8, 2, -6, 2, 8, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.2-e";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -8, 0, 8, 0, -2, 6, -8, -8, 0, -8, 2, 6, -2, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.2-f";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 1, -6, 7, -6, 5, 6, 7, -8, -12, 5, -4, 9, 5, -2, 4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.2-g";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 1, -6, -7, 6, -5, -6, 7, -8, 12, -5, -4, -9, -5, -2, 4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 160.2-h";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -8, 0, -8, 0, 2, -6, -8, -8, 0, 8, 2, -6, 2, -8, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-a";
N := (-9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 2, 2, -6, -6, 6, 6, -10, -10, 6, 6, -13, 9, 9, 14, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-b";
N := (-9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 2, -6, 9, 0, -3, -10, 8, 6, 9, -4, -12, 3, 5, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-c";
N := (-9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 2, 2, 9, -6, -3, 0, 8, -10, 9, 6, -4, 3, -12, -4, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-d";
N := (-9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 2, -9, 6, 3, 0, 8, -10, -9, -6, -4, -3, 12, -4, 5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-e";
N := (-9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 2, 6, -9, 0, 3, -10, 8, -6, -9, -4, 12, -3, 5, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-f";
N := (-9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 2, 2, 6, 6, -6, -6, -10, -10, -6, -6, -13, -9, -9, 14, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-a";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 1, 2, -6, -6, 0, 0, 2, 9, -11, 9, -9, -3, 4, -6, -2, -6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-b";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -1, 2, -6, 6, 0, 0, -2, 9, -11, -9, 9, -3, -4, 6, -2, -6, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-c";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 2, 0, -4, 0, 0, 8, 0, -2, 6, 12, 0, -6, -12, 4, 12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-d";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -2, 0, -4, 0, 0, -8, 0, -2, 6, -12, 0, -6, 12, -4, 12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-e";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, -4, 0, 0, 0, 0, -8, 6, -2, 0, -12, -6, -4, 12, -8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-f";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -2, -4, 0, 0, 0, 0, 8, 6, -2, 0, 12, -6, 4, -12, -8, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-g";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, 1, -6, 2, 0, 6, -2, 0, -11, 9, 9, -9, -3, 6, -4, -6, -2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-h";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, -1, -6, 2, 0, -6, 2, 0, -11, 9, -9, 9, -3, -6, 4, -6, -2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.1-a";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 1, -5, -7, 2, 2, -10, -4, -5, 10, -5, 5, -9, -3, -2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.1-b";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 1, -5, 7, -2, -2, 10, -4, 5, -10, -5, -5, 9, -3, -2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.2-a";
N := (2*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, -5, 1, 2, -7, -10, 2, -4, 10, -5, -5, -9, 5, -2, -3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 172.2-b";
N := (2*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, -5, 1, -2, 7, 10, -2, -4, -10, 5, -5, 9, -5, -2, -3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.1-a";
N := (-5*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 2, 9, -3, 0, -1, -1, 0, -6, 5, 6, 3, -13, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.1-b";
N := (-5*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -6, -5, 3, -8, 7, -5, 8, 6, -3, -14, 5, 7, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.1-c";
N := (-5*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -6, 5, -3, 8, 7, -5, -8, -6, -3, 14, -5, 7, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.1-d";
N := (-5*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 2, 2, -9, 3, 0, -1, -1, 0, 6, 5, -6, -3, -13, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.2-a";
N := (5*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 2, -3, 9, 0, -1, -1, -6, 0, 5, 3, 6, -4, -13, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.2-b";
N := (5*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, -6, 3, -5, -8, -5, 7, 6, 8, -3, 5, -14, -4, 7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.2-c";
N := (5*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -6, -3, 5, 8, -5, 7, -6, -8, -3, -5, 14, -4, 7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.2-d";
N := (5*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 2, 3, -9, 0, -1, -1, 6, 0, 5, -3, -6, -4, -13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 180.1-a";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, 8, 0, -2, 2, 4, 0, 12, 12, -10, -2, 10, 12, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 180.1-b";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 6, 6, 6, -6, -4, 2, 0, 12, 8, 6, -6, -4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 180.1-c";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -6, -6, -6, 6, -4, 2, 0, -12, 8, -6, 6, -4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 180.1-d";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -8, 0, 2, -2, 4, 0, -12, -12, -10, 2, -10, 12, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 180.2-a";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 0, 8, 2, -2, 0, 4, 12, 12, -10, 10, -2, 8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 180.2-b";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 6, 6, -6, 6, 2, -4, 12, 0, 8, -6, 6, 14, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 180.2-c";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, -6, -6, 6, -6, 2, -4, -12, 0, 8, 6, -6, 14, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 180.2-d";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 0, -8, -2, 2, 0, 4, -12, -12, -10, -10, 2, 8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 184.1-a";
N := (-6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, 0, -2, -8, -6, 6, 4, -2, 0, -8, 6, 6, 0, -14, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 184.1-b";
N := (-6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -4, 0, 0, -6, 2, -4, -8, 8, 8, -6, -6, -2, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 184.1-c";
N := (-6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 0, -2, 8, 6, -6, 4, -2, 0, 8, 6, -6, 0, -14, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 184.1-d";
N := (-6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -4, 0, 0, 6, -2, -4, -8, -8, -8, -6, 6, 2, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 184.2-a";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -2, 0, -8, 6, -6, -2, 4, -8, 0, 6, 0, 6, -8, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 184.2-b";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, -4, 0, 2, -6, -8, -4, 8, 8, -6, -2, -6, -4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 184.2-c";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -2, 0, 8, -6, 6, -2, 4, 8, 0, 6, 0, -6, -8, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 184.2-d";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, -4, 0, -2, 6, -8, -4, -8, -8, -6, 2, 6, -4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.1-a";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 4, -4, 8, 6, -4, 8, 0, 4, -4, 4, -10, 12, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.1-b";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -4, 4, -8, -6, -4, 8, 0, -4, -4, -4, 10, 12, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.1-c";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -7, 6, 6, -6, -6, -10, -1, -6, -6, 5, 0, 9, 5, -13, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.1-d";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -5, 6, -6, 6, 6, 6, -11, -2, 2, -9, 0, 9, -3, 11, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.1-e";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, -6, 6, -6, -6, 6, -11, 2, -2, -9, 0, -9, -3, 11, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.1-f";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -7, -6, -6, 6, 6, -10, -1, 6, 6, 5, 0, -9, 5, -13, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.2-a";
N := (-7*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 0, -1, -4, -3, -4, -5, -9, 6, 2, 11, 11, -10, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.2-b";
N := (-7*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 0, 1, 4, 3, -4, -5, 9, -6, 2, -11, -11, -10, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.4-a";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -4, 4, 6, 8, 8, -4, 4, 0, -4, -10, 4, -4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.4-b";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 4, -4, -6, -8, 8, -4, -4, 0, -4, 10, -4, -4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.4-c";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -7, 6, 6, -6, -6, -1, -10, -6, -6, 5, 9, 0, -13, 5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.4-d";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -5, -6, 6, 6, 6, -11, 6, 2, -2, -9, 9, 0, 11, -3, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.4-e";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, 6, -6, -6, -6, -11, 6, -2, 2, -9, -9, 0, 11, -3, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.4-f";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -7, -6, -6, 6, 6, -1, -10, 6, 6, 5, -9, 0, -13, 5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.3-a";
N := (-7*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, -1, 0, -3, -4, -5, -4, 6, -9, 2, 11, 11, -10, -10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 190.3-b";
N := (-7*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 1, 0, 3, 4, -5, -4, -6, 9, 2, -11, -11, -10, -10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 191.1-a";
N := (-6*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 2, 0, -6, 0, -8, -10, -4, 4, 8, 0, -8, -2, -6, 0, 10, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 191.1-b";
N := (-6*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -2, 0, -6, 0, 8, 10, 4, 4, 8, 0, 8, -2, 6, 0, 10, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 191.2-a";
N := (6*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -2, -6, 0, -8, 0, -4, -10, 8, 4, -8, 0, -2, 0, -6, 6, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 191.2-b";
N := (6*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 2, -6, 0, 8, 0, 4, 10, 8, 4, 8, 0, -2, 0, 6, 6, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-a";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, 4, -4, -6, 6, 4, 4, 12, -12, 10, -6, 6, 12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-b";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 4, -4, 4, 6, -6, 4, 4, -12, 12, 10, 6, -6, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-c";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -4, -4, 4, -6, 6, -4, -4, -12, 12, 10, -6, 6, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-d";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, -4, 4, -4, 6, -6, -4, -4, 12, -12, 10, 6, -6, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 193.1-a";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 4, 2, 0, -8, 0, -6, 8, -2, 10, -4, 0, 10, 2, -4, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 193.1-b";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 2, -4, -2, 4, 8, 4, 6, -4, -8, 12, 0, -2, -4, 2, 2, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 193.1-c";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -2, -4, -2, -4, -8, -4, -6, -4, -8, -12, 0, -2, 4, -2, 2, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 193.1-d";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -4, 2, 0, 8, 0, 6, -8, -2, 10, 4, 0, 10, -2, 4, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 193.2-a";
N := (4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 2, 0, 2, 0, -8, 8, -6, 10, -2, 0, -4, 10, -4, 2, 4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 193.2-b";
N := (4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 4, -2, -4, 8, 4, 6, 4, -8, -4, 0, 12, -2, 2, -4, -10, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 193.2-c";
N := (4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -4, -2, -4, -8, -4, -6, -4, -8, -4, 0, -12, -2, -2, 4, -10, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 193.2-d";
N := (4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -2, 0, 2, 0, 8, -8, 6, 10, -2, 0, 4, 10, 4, -2, 4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.1-a";
N := (-10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 4, 4, -2, -2, -8, -8, 4, 4, 2, 6, 6, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.1-b";
N := (-10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, -4, -4, 2, 2, -8, -8, -4, -4, 2, -6, -6, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.2-a";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -3, -8, 0, -8, -8, -1, 9, -8, -8, -3, -8, 8, 8, 7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.2-b";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, 6, -1, 6, -7, 2, 11, 0, 8, 5, 0, 5, 1, 2, -8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.2-c";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -3, 8, 0, 8, 8, -1, 9, 8, 8, -3, 8, -8, 8, 7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.2-d";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -3, 6, 1, -6, 7, -2, 11, 0, -8, -5, 0, -5, -1, 2, -8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.3-a";
N := (-6*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 0, 0, -8, -8, -8, 9, -1, -8, -8, -3, 8, -8, 7, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.3-b";
N := (-6*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 6, -3, 6, -1, 2, -7, 0, 11, 5, 8, 0, 1, 5, -8, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.3-c";
N := (-6*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 0, 0, 8, 8, 8, 9, -1, 8, 8, -3, -8, 8, 7, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.3-d";
N := (-6*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 6, -3, -6, 1, -2, 7, 0, 11, -5, -8, 0, -1, -5, -8, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.1-a";
N := (-2*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -6, -5, -2, 3, -2, 6, -10, 4, 0, -5, -11, 12, -6, 5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.1-b";
N := (-2*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -6, -5, 2, -3, 2, -6, -10, 4, 0, 5, -11, -12, 6, 5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.2-a";
N := (2*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, -5, -6, 3, -2, 6, -2, 4, -10, -5, 0, -11, -6, 12, 5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.2-b";
N := (2*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, -5, -6, -3, 2, -6, 2, 4, -10, 5, 0, -11, 6, -12, 5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.1-a";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 0, 6, 8, -6, -6, 12, -10, 0, 4, 6, -12, -2, -14, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.1-b";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -2, 0, -4, 4, -8, -6, 4, -12, -4, 2, -6, -12, -8, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.1-c";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -2, 0, 4, -4, 8, -6, 4, 12, 4, 2, 6, 12, -8, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.1-d";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 0, 6, -8, 6, 6, 12, -10, 0, -4, 6, 12, 2, -14, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.2-a";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 6, 0, 8, -6, -6, -10, 12, 4, 0, 6, -2, -12, -8, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.2-b";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, -2, -4, -8, 4, 4, -6, -4, -12, 2, -12, -6, -6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.2-c";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, -2, 4, 8, -4, 4, -6, 4, 12, 2, 12, 6, -6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.2-d";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 6, 0, -8, 6, 6, -10, 12, -4, 0, 6, 2, 12, -8, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 213.1-a";
N := (7*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, -6, 6, 4, 0, -6, 2, -8, 8, -8, -4, -2, -6, 4, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 213.1-b";
N := (7*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, -6, 6, -4, 0, 6, -2, -8, 8, 8, 4, -2, 6, -4, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 213.2-a";
N := (7*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 6, -6, 0, 4, 2, -6, 8, -8, -4, -8, -2, 4, -6, -12, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 213.2-b";
N := (7*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 6, -6, 0, -4, -2, 6, 8, -8, 4, 8, -2, -4, 6, -12, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-a";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, 2, 8, 1, 2, 5, 6, -1, -3, 7, -4, -12, 10, -4, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-b";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 1, 1, 8, 5, 2, -1, 6, 7, -3, -4, 10, -12, 12, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-c";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 1, -1, -8, -5, -2, -1, 6, -7, 3, -4, -10, 12, 12, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-d";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 1, 2, -8, -1, -2, -5, 6, -1, 3, -7, -4, 12, -10, -4, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 219.1-a";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, -5, -6, 4, -2, 2, 5, -9, 1, 0, -10, 2, 4, 4, -2, -12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 219.1-b";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -5, -6, -4, 2, -2, -5, -9, 1, 0, 10, 2, -4, -4, -2, -12, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 219.2-a";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, -6, -5, -2, 4, 5, 2, 1, -9, -10, 0, 2, 4, 4, -12, -2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 219.2-b";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -6, -5, 2, -4, -5, -2, 1, -9, 10, 0, 2, -4, -4, -12, -2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-a";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, -6, -6, 6, 6, 8, 8, 0, 0, -4, 12, 12, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-b";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 6, -6, -6, 6, -4, -4, -6, 6, 2, 6, -6, 8, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-c";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 6, 6, -6, -6, 8, 8, 0, 0, -4, -12, -12, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-d";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, 6, 6, -6, -4, -4, 6, -6, 2, -6, 6, 8, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-a";
N := (-6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -6, -7, 8, -6, -9, -8, 3, -7, 3, -2, -2, 13, 4, 11, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-b";
N := (-6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, -6, 2, 2, 6, -6, 2, -12, -8, 12, 8, 2, 2, 14, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-c";
N := (-6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 5, 0, -4, -4, 0, 0, 1, 9, 8, -12, -5, 4, 4, 7, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-d";
N := (-6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, -6, -2, -2, -6, 6, 2, -12, 8, -12, 8, -2, -2, 14, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-e";
N := (-6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 0, 0, 0, 0, 10, -10, 0, 0, -14, 0, 0, -14, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-f";
N := (-6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 6, -7, 8, -6, 9, 8, 3, 7, -3, 2, 2, -13, -4, 11, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-g";
N := (-6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -6, 7, -8, 6, 9, -8, 3, 7, -3, -2, 2, -13, 4, 11, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-h";
N := (-6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 5, 0, 4, 4, 0, 0, 1, 9, -8, 12, -5, -4, -4, 7, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-i";
N := (-6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -7, 8, 0, 0, 0, 0, 5, 5, 0, 0, 11, 0, 0, 11, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-j";
N := (-6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, 6, 7, -8, 6, -9, 8, 3, -7, 3, 2, -2, 13, -4, 11, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-a";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -6, -1, 8, -7, -9, -6, 3, -8, 3, -7, -2, 13, -2, 11, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-b";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, 4, 2, 2, -6, 6, -12, 2, 12, -8, 8, 2, 2, -4, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-c";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 5, -4, -4, 0, 0, 9, 1, -12, 8, -5, 4, 4, 8, 7, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-d";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, 4, -2, -2, 6, -6, -12, 2, -12, 8, 8, -2, -2, -4, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-e";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 0, 0, 0, 0, -10, 10, 0, 0, -14, 0, 0, 14, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-f";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 6, 1, 8, -7, 9, -6, 3, 8, -3, 7, 2, -13, 2, 11, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-g";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, -1, -8, 7, 9, 6, 3, -8, -3, 7, -2, -13, 2, 11, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-h";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 5, 4, 4, 0, 0, 9, 1, 12, -8, -5, -4, -4, 8, 7, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-i";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, -7, 0, 0, 0, 0, 5, 5, 0, 0, 11, 0, 0, -16, 11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-j";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, 1, -8, 7, -9, 6, 3, 8, 3, -7, 2, 13, -2, 11, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.1-a";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 4, 6, 0, 4, -4, -8, 2, -8, -2, -6, 14, -4, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.1-b";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, -4, 0, 2, 6, 4, 4, -8, 4, 2, 6, 2, 12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.1-c";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -4, -6, 0, -4, -4, -8, -2, 8, -2, 6, -14, -4, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.1-d";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -4, -4, -2, 2, 12, 4, 12, 12, 2, -2, -6, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.1-e";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, 4, 2, -2, 12, 4, -12, -12, 2, 2, 6, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.1-f";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 4, 0, -2, -6, 4, 4, 8, -4, 2, -6, -2, 12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.2-a";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 6, 4, 4, 0, -8, -4, -8, 2, -2, 14, -6, -8, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.2-b";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 0, -4, 6, 2, 4, 4, 4, -8, 2, 2, 6, 4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.2-c";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, -6, -4, -4, 0, -8, -4, 8, -2, -2, -14, 6, -8, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.2-d";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -4, -4, 2, -2, 4, 12, 12, 12, 2, -6, -2, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.2-e";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 4, 4, -2, 2, 4, 12, -12, -12, 2, 6, 2, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 228.2-f";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 0, 4, -6, -2, 4, 4, -4, 8, 2, -2, -6, 4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.1-a";
N := (-7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -4, 5, 3, 0, 3, 8, -1, 3, 12, -4, 3, 3, 8, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.1-b";
N := (-7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -4, 5, -3, 0, -3, 8, -1, -3, -12, -4, -3, -3, 8, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.1-c";
N := (-7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 4, 4, -10, 2, 4, 4, 0, -4, -10, -14, 2, -4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.1-d";
N := (-7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 4, -4, 10, -2, 4, 4, 0, 4, -10, 14, -2, -4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.1-e";
N := (-7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 8, -4, 6, 0, 6, -4, -4, 0, 6, -4, 6, -6, 8, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.1-f";
N := (-7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 8, -4, -6, 0, -6, -4, -4, 0, -6, -4, -6, 6, 8, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.2-a";
N := (-9*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 5, -1, 9, 3, 3, 8, -4, -6, 12, -4, -6, -12, 5, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.2-b";
N := (-9*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, 0, -1, -6, -4, 1, -8, -4, -2, 10, 5, 5, -4, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.2-c";
N := (-9*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 1, 3, 1, 3, 6, -8, 8, -2, -4, 0, 8, 9, -6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.2-d";
N := (-9*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, 1, -3, -1, -3, 6, -8, -8, 2, -4, 0, -8, 9, -6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.2-e";
N := (-9*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 5, -1, -9, -3, -3, 8, -4, 6, -12, -4, 6, 12, 5, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.2-f";
N := (-9*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, 0, 1, 6, 4, 1, -8, 4, 2, 10, -5, -5, -4, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.4-a";
N := (7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 5, -4, 3, 3, 0, -1, 8, 12, 3, -4, 3, 3, -10, 8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.4-b";
N := (7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 5, -4, -3, -3, 0, -1, 8, -12, -3, -4, -3, -3, -10, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.4-c";
N := (7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 4, 4, 2, -10, 4, 4, -4, 0, -10, 2, -14, 8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.4-d";
N := (7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 4, -4, -2, 10, 4, 4, 4, 0, -10, -2, 14, 8, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.4-e";
N := (7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 8, 6, 6, 0, -4, -4, 6, 0, -4, -6, 6, 2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.4-f";
N := (7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 8, -6, -6, 0, -4, -4, -6, 0, -4, 6, -6, 2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.3-a";
N := (-9*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -1, 5, 9, 3, 3, -4, 8, 12, -6, -4, -12, -6, -4, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.3-b";
N := (-9*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 2, -1, -4, -6, -8, 1, -2, -4, 10, 5, 5, -7, -4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.3-c";
N := (-9*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 1, -1, 3, 3, 1, -8, 6, -2, 8, -4, 8, 0, -6, 9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.3-d";
N := (-9*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 1, -1, -3, -3, -1, -8, 6, 2, -8, -4, -8, 0, -6, 9, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.3-e";
N := (-9*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, 5, -9, -3, -3, -4, 8, -12, 6, -4, 12, 6, -4, 5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 230.3-f";
N := (-9*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 2, 1, 4, 6, -8, 1, 2, 4, 10, -5, -5, -7, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 235.2-a";
N := (-7*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -2, 0, -8, 4, -10, -8, -8, -10, 8, -6, -6, -2, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 235.2-b";
N := (-7*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -4, 8, 0, 0, 6, 2, -8, 12, 8, 2, 6, -2, 4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 235.2-c";
N := (-7*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -4, 8, 0, 0, -6, -2, -8, 12, -8, 2, -6, 2, 4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 235.2-d";
N := (-7*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -2, 0, 8, -4, 10, 8, -8, -10, -8, -6, 6, 2, -2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 235.3-a";
N := (7*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 0, -2, 4, -8, -8, -10, -10, -8, 8, -6, -2, -6, -8, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 235.3-b";
N := (7*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 8, -4, 0, 0, 2, 6, 12, -8, 8, 2, -2, 6, 0, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 235.3-c";
N := (7*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 8, -4, 0, 0, -2, -6, 12, -8, -8, 2, 2, -6, 0, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 235.3-d";
N := (7*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 0, -2, -4, 8, 8, 10, -10, -8, -8, -6, 2, 6, -8, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-a";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, 4, -4, -10, -6, -4, 4, 4, -4, -6, 6, -6, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-b";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, 8, 8, 4, -2, -6, -4, -8, 8, -8, 6, 6, 6, -4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-c";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 0, 6, -6, 4, -8, 6, 8, -4, 8, -10, -6, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-d";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 0, -6, -6, 0, -8, 10, 0, -12, -4, 6, -6, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-e";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 0, 0, -6, 2, 4, -12, -8, -8, 2, -14, -6, -4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-f";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, -8, 0, -2, -10, -4, 4, 0, 0, 10, -10, 6, -12, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-g";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, 0, -6, 6, -4, -8, 6, -8, 4, 8, 10, 6, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-h";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 8, 0, 2, 10, -4, 4, 0, 0, 10, 10, -6, -12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-i";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 0, 6, 6, 0, -8, 10, 0, 12, -4, -6, 6, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-j";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 0, 0, 6, -2, 4, -12, 8, 8, 2, 14, 6, -4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-k";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, -4, 4, 10, 6, -4, 4, -4, 4, -6, -6, 6, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.1-l";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, 8, -8, -4, 2, 6, -4, -8, -8, 8, 6, -6, -6, -4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-a";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, -4, 4, -6, -10, 4, -4, -4, 4, -6, -6, 6, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-b";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, -8, 4, 8, -6, -2, -8, -4, -8, 8, 6, 6, 6, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-c";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 6, 0, 4, -6, 6, -8, -4, 8, 8, -6, -10, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-d";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, 0, 0, -6, 10, -8, -12, 0, -4, -6, 6, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-e";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 0, 0, 2, -6, -12, 4, -8, -8, 2, -6, -14, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-f";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 0, -8, -10, -2, 4, -4, 0, 0, 10, 6, -10, 4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-g";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -6, 0, -4, 6, 6, -8, 4, -8, 8, 6, 10, -12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-h";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 0, 8, 10, 2, 4, -4, 0, 0, 10, -6, 10, 4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-i";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 6, 0, 0, 6, 10, -8, 12, 0, -4, 6, -6, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-j";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 0, 0, -2, 6, -12, 4, 8, 8, 2, 6, 14, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-k";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 4, -4, 6, 10, 4, -4, 4, -4, -6, 6, -6, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 240.2-l";
N := (-8*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, -8, -4, -8, 6, 2, -8, -4, 8, -8, 6, -6, -6, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.1-a";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -5, -9, 0, 0, 3, -8, -10, 6, 3, -8, 12, 0, 7, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.1-b";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -7, 3, 6, 6, -9, -4, 8, 0, 9, 2, 12, -6, -7, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.1-c";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -2, -3, -6, 9, -6, 1, 8, 0, -9, -8, 3, -9, -2, 8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.1-d";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -7, -3, -6, -6, 9, -4, 8, 0, -9, 2, -12, 6, -7, 8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.1-e";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 0, 0, 6, -6, -8, 8, 0, 0, 10, -6, -6, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.1-f";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -5, 9, 0, 0, -3, -8, -10, -6, -3, -8, -12, 0, 7, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.1-g";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 0, 0, -6, 6, -8, 8, 0, 0, 10, 6, 6, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.1-h";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -2, 3, 6, -9, 6, 1, 8, 0, 9, -8, -3, 9, -2, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.2-a";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -2, 0, -9, 3, 0, -10, -8, 3, 6, -8, 0, 12, -4, 7, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.2-b";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -7, -4, 6, 3, -9, 6, 8, -4, 9, 0, 2, -6, 12, 8, -7, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.2-c";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 1, -6, -3, -6, 9, 8, 1, -9, 0, -8, -9, 3, 8, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.2-d";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -7, -4, -6, -3, 9, -6, 8, -4, -9, 0, 2, 6, -12, 8, -7, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.2-e";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 0, 0, -6, 6, 8, -8, 0, 0, 10, -6, -6, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.2-f";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -2, 0, 9, -3, 0, -10, -8, -3, -6, -8, 0, -12, -4, 7, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.2-g";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 0, 0, 6, -6, 8, -8, 0, 0, 10, 6, 6, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 250.2-h";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 1, 6, 3, 6, -9, 8, 1, 9, 0, -8, 9, -3, 8, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-a";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -2, -2, -4, -4, -6, -6, -6, -6, 8, 8, 2, -6, -6, -10, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-b";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -2, -2, 4, 4, 6, 6, -6, -6, -8, -8, 2, 6, 6, -10, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-c";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 8, -8, 0, 0, 0, 0, -8, 8, 0, 0, -2, 0, 0, 16, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-d";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, 0, 0, 0, 0, 4, -4, 0, 0, 0, 0, 14, 4, -4, 0, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-e";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 0, 0, 0, 0, -4, 4, 0, 0, 0, 0, 14, -4, 4, 0, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-f";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -8, 8, 0, 0, 0, 0, 8, -8, 0, 0, -2, 0, 0, -16, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-g";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 2, 2, 4, 4, -6, -6, 6, 6, -8, -8, 2, -6, -6, 10, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-h";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, 2, -4, -4, 6, 6, 6, 6, 8, 8, 2, 6, 6, 10, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.1-a";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -7, -1, 6, 9, -6, 6, -4, -6, 3, 11, 9, 3, 2, -13, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.1-b";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -4, 2, -1, 3, -2, -7, 7, -3, 3, 4, 2, -2, 4, -3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.1-c";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 2, -4, 3, -9, 6, 3, 11, 9, -9, -10, 6, 6, -10, -13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.1-d";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 2, -4, -3, 9, -6, -3, 11, -9, 9, -10, -6, -6, -10, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.1-e";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, 2, 1, -3, 2, 7, 7, 3, -3, 4, -2, 2, 4, -3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.1-f";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -7, -1, -6, -9, 6, -6, -4, 6, -3, 11, -9, -3, 2, -13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.2-a";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -1, -7, 9, 6, 6, -6, -4, 3, -6, 11, 3, 9, -13, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.2-b";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 2, -4, 3, -1, -7, -2, 7, 3, -3, 4, -2, 2, -3, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.2-c";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -4, 2, -9, 3, 3, 6, 11, -9, 9, -10, 6, 6, -13, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.2-d";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -4, 2, 9, -3, -3, -6, 11, 9, -9, -10, -6, -6, -13, -10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.2-e";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 2, -4, -3, 1, 7, 2, 7, -3, 3, 4, 2, -2, -3, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 258.2-f";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -1, -7, -9, -6, -6, 6, -4, -3, 6, 11, -3, -9, -13, 2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 265.2-a";
N := (-2*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -1, 0, 1, -1, -4, 0, 1, -2, 8, 1, -10, -3, 0, -14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 265.2-b";
N := (-2*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -1, 0, -1, 1, 4, 0, 1, -2, -8, -1, -10, 3, 0, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 265.3-a";
N := (2*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 0, -1, -1, 1, 0, -4, -2, 1, 1, 8, -10, -3, -14, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 265.3-b";
N := (2*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 0, -1, 1, -1, 0, 4, -2, 1, -1, -8, -10, 3, -14, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 269.1-a";
N := (7*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -3, -1, 3, -6, -3, 6, 9, -5, -8, 12, 11, 5, 6, -14, -8, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 269.1-b";
N := (7*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 3, -1, 3, 6, 3, -6, -9, -5, -8, -12, -11, 5, -6, 14, -8, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 269.2-a";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 1, 3, -1, -3, -6, 9, 6, -8, -5, 11, 12, 5, -14, 6, -7, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 269.2-b";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, -1, 3, -1, 3, 6, -9, -6, -8, -5, -11, -12, 5, 14, -6, -7, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-a";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -7, -4, 6, 0, 3, 9, 2, 5, -9, 6, 5, -3, -12, 5, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-b";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, 4, -7, 10, 0, 7, -4, -5, -10, 3, 6, 9, 10, 11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-c";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 4, 2, -8, 5, 3, 10, -7, -7, 10, 9, 3, -12, -11, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-d";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, 3, 6, 0, -1, 8, -9, 6, 5, -6, -3, 14, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-e";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 5, -3, 0, 3, 0, -7, -4, 9, -3, -4, 6, -12, -4, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-f";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -7, -5, 0, 5, 4, -11, 0, -9, -9, -4, 2, -4, -12, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-g";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -7, 5, 0, -5, -4, -11, 0, 9, 9, -4, -2, 4, -12, 2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-h";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 5, 3, 0, -3, 0, -7, -4, -9, 3, -4, -6, 12, -4, -10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-i";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, -3, -6, 0, -1, 8, 9, -6, 5, 6, 3, 14, 5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-j";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 4, -2, 8, -5, -3, 10, -7, 7, -10, 9, -3, 12, -11, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-k";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, -4, 7, -10, 0, 7, -4, 5, 10, 3, -6, -9, 10, 11, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.1-l";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -7, -4, -6, 0, -3, -9, 2, 5, 9, -6, 5, 3, 12, 5, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-a";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, -7, 0, 6, 9, 3, 5, 2, 6, -9, 5, -12, -3, 8, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-b";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, -7, 4, 0, 10, -4, 7, -10, -5, 3, 9, 6, 11, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-c";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 5, -8, 2, 3, 5, -7, 10, 10, -7, 9, -12, 3, 8, -11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-d";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 3, 0, 0, 6, 8, -1, 6, -9, 5, -3, -6, 5, 14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-e";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, 2, 0, -3, 0, 3, -4, -7, -3, 9, -4, -12, 6, -10, -4, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-f";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, -6, 0, -5, 4, 5, 0, -11, -9, -9, -4, -4, 2, 2, -12, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-g";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -7, -6, 0, 5, -4, -5, 0, -11, 9, 9, -4, 4, -2, 2, -12, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-h";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 5, 2, 0, 3, 0, -3, -4, -7, 3, -9, -4, 12, -6, -10, -4, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-i";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -3, 0, 0, -6, 8, -1, -6, 9, 5, 3, 6, 5, 14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-j";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 5, 8, -2, -3, -5, -7, 10, -10, 7, 9, 12, -3, 8, -11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-k";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, 7, -4, 0, -10, -4, 7, 10, 5, 3, -9, -6, 11, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 270.2-l";
N := (-3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -7, 0, -6, -9, -3, 5, 2, -6, 9, 5, 12, 3, 8, 5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.1-a";
N := (-7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 1, -6, 4, 7, -10, -8, -6, -12, -9, 4, -2, -4, 2, -5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.1-b";
N := (-7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, -2, -4, -3, -6, 4, -6, 4, -13, -8, 6, -4, -6, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.1-c";
N := (-7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 1, -6, -4, -7, 10, 8, -6, -12, 9, 4, 2, 4, 2, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.1-d";
N := (-7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 2, 0, 6, 3, 0, 8, 8, 0, -13, -12, -6, -4, 14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.1-e";
N := (-7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -5, -2, 4, 3, 6, -4, -6, 4, 13, -8, -6, 4, -6, -1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.1-f";
N := (-7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 2, 2, 0, -6, -3, 0, 8, 8, 0, -13, 12, 6, -4, 14, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.2-a";
N := (7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -6, 1, 7, 4, -8, -10, -12, -6, -9, 4, -4, -2, -5, 2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.2-b";
N := (7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -5, -3, -4, 4, -6, 4, -6, -13, -8, -4, 6, -1, -6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.2-c";
N := (7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -6, 1, -7, -4, 8, 10, -12, -6, 9, 4, 4, 2, -5, 2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.2-d";
N := (7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 2, 6, 0, 0, 3, 8, 8, 0, -13, -6, -12, 14, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.2-e";
N := (7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -5, 3, 4, -4, 6, 4, -6, 13, -8, 4, -6, -1, -6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 282.2-f";
N := (7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 2, -6, 0, 0, -3, 8, 8, 0, -13, 6, 12, 14, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.1-a";
N := (-11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 8, 0, -4, -6, 2, 4, -4, -8, 4, -2, -6, 6, -8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.1-b";
N := (-11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 0, 6, 6, 2, -8, 0, 8, -2, -4, 10, 12, 6, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.1-c";
N := (-11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 0, -6, -6, -2, -8, 0, -8, 2, -4, -10, -12, 6, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.1-d";
N := (-11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 8, 0, 4, 6, -2, 4, -4, 8, -4, -2, 6, -6, -8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.2-a";
N := (-7*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 0, -8, 2, 2, 12, 4, 8, 8, 2, 10, 2, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.2-b";
N := (-7*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 0, 8, -2, -2, 12, 4, -8, -8, 2, -10, -2, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.4-a";
N := (11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 8, -4, 0, 2, -6, -4, 4, 4, -8, -2, 6, -6, -12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.4-b";
N := (11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 6, 0, 2, 6, 0, -8, -2, 8, -4, 12, 10, -8, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.4-c";
N := (11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -6, 0, -2, -6, 0, -8, 2, -8, -4, -12, -10, -8, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.4-d";
N := (11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 8, 4, 0, -2, 6, -4, 4, -4, 8, -2, -6, 6, -12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.3-a";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -8, 0, 2, 2, 4, 12, 8, 8, 2, 2, 10, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 285.3-b";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 8, 0, -2, -2, 4, 12, -8, -8, 2, -2, -10, -4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-a";
N := (-12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -4, -8, 8, 8, 8, 4, -4, -8, 8, 2, 8, 8, -12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-b";
N := (-12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, -14, 4, 4, 0, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-c";
N := (-12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 4, 8, -8, 8, 8, -4, 4, 8, -8, 2, 8, 8, 12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-d";
N := (-12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 4, -8, 8, -8, -8, -4, 4, -8, 8, 2, -8, -8, 12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-e";
N := (-12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, 0, 0, 0, -4, -4, 0, 0, 0, 0, -14, -4, -4, 0, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-f";
N := (-12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -4, 8, -8, -8, -8, 4, -4, 8, -8, 2, -8, -8, -12, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-a";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 2, 2, 2, 0, 0, -2, 2, 2, 2, 8, -8, -2, -12, 12, -14, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-b";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, -4, -4, 4, 4, 6, 6, 4, 4, 0, 0, 2, 6, 6, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-c";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -2, 2, 2, 0, 0, 2, -2, 2, 2, -8, 8, -2, 12, -12, -14, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-d";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, -4, -4, -4, -4, -6, -6, 4, 4, 0, 0, 2, -6, -6, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.1-a";
N := (9*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -4, 0, 0, -6, -4, -4, -6, 0, -4, -6, 6, -10, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.1-b";
N := (9*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -4, 0, 0, 6, -4, -4, 6, 0, -4, 6, -6, -10, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.2-a";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -4, 7, 3, 6, -9, 13, 4, 12, -1, -6, -3, -9, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.2-b";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -4, -7, -3, -6, -9, 13, -4, -12, -1, 6, 3, -9, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.2-c";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -8, -1, 4, -3, -9, -12, -5, 1, -6, 8, 9, 9, 12, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.2-d";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -8, -1, -4, 3, 9, -12, -5, -1, 6, 8, -9, -9, 12, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.2-e";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -2, 0, 3, -1, 8, 5, -1, 0, 6, -5, 4, -11, -15, 6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.2-f";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -2, 0, -3, 1, -8, 5, -1, 0, -6, -5, -4, 11, -15, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.2-g";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 6, 5, 2, 1, 7, -8, -9, 3, 0, 4, -9, 7, -4, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.2-h";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, 5, -2, -1, -7, -8, -9, -3, 0, 4, 9, -7, -4, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.4-a";
N := (9*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -4, 0, 0, -6, -4, -4, 0, -6, -4, 6, -6, -4, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.4-b";
N := (9*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -4, 0, 0, 6, -4, -4, 0, 6, -4, -6, 6, -4, -10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.3-a";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -2, 3, 7, 6, 13, -9, 12, 4, -1, -3, -6, 4, -9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.3-b";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, -2, -3, -7, -6, 13, -9, -12, -4, -1, 3, 6, 4, -9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.3-c";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -1, -8, -3, 4, -9, -5, -12, -6, 1, 8, 9, 9, -2, 12, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.3-d";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -1, -8, 3, -4, 9, -5, -12, 6, -1, 8, -9, -9, -2, 12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.3-e";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, -2, -1, 3, 8, -1, 5, 6, 0, -5, -11, 4, 6, -15, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.3-f";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, -2, 1, -3, -8, -1, 5, -6, 0, -5, 11, -4, 6, -15, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.3-g";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 5, 6, 1, 2, 7, -9, -8, 0, 3, 4, 7, -9, -2, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 290.3-h";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 6, -1, -2, -7, -9, -8, 0, -3, 4, -7, 9, -2, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 293.1-a";
N := (-7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -1, 7, -1, 4, 4, -2, -2, 1, 2, 8, 8, 9, 9, 10, -8, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 293.1-b";
N := (-7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 1, 7, -1, -4, -4, 2, 2, 1, 2, -8, -8, 9, -9, -10, -8, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 293.2-a";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 0, -1, 7, 4, 4, -2, -2, 2, 1, 8, 8, 9, 10, 9, 8, -8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 293.2-b";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 0, -1, 7, -4, -4, 2, 2, 2, 1, -8, -8, 9, -10, -9, 8, -8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-a";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -1, -4, 6, 6, 0, 9, 11, -4, 3, 0, -12, 9, -7, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-b";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -3, 6, 0, 5, -8, 10, -5, 4, 5, 9, -6, -2, 7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-c";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, -4, -8, -8, 2, 2, -4, -4, 0, 0, -6, -6, 4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-d";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -4, -1, -6, -6, -9, 0, -4, 11, 0, -3, -9, 12, 8, -7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-e";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -3, 6, 0, 6, -8, 5, -5, 10, 5, 4, -6, 9, 7, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-f";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 6, 0, -6, 8, -5, -5, 10, -5, -4, 6, -9, 7, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-g";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -4, -1, 6, 6, 9, 0, -4, 11, 0, 3, 9, -12, 8, -7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-h";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, 8, 8, -2, -2, -4, -4, 0, 0, 6, 6, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-i";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, -3, -6, 0, -5, 8, 10, -5, -4, -5, -9, 6, -2, 7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-j";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, -4, -6, -6, 0, -9, 11, -4, -3, 0, 12, -9, -7, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-a";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [8, -4, 0, 0, -6, 6, 8, -4, 0, 0, 2, 6, -6, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-b";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 8, 0, 0, -6, 6, -4, 8, 0, 0, 2, 6, -6, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-c";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [8, -4, 0, 0, 6, -6, 8, -4, 0, 0, 2, -6, 6, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-d";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 8, 0, 0, 6, -6, -4, 8, 0, 0, 2, -6, 6, -4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-a";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 0, -8, -2, -2, 0, 4, 12, 12, 10, 10, -2, -8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-b";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -2, 6, 0, 2, 10, -4, 8, -8, 2, -10, -6, -2, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-c";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 0, 8, 2, 2, 0, 4, -12, -12, 10, -10, 2, -8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-d";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 2, -6, 0, -2, 10, -4, -8, 8, 2, 10, 6, -2, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.3-a";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, -8, 0, -2, -2, 4, 0, 12, 12, 10, -2, 10, 12, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.3-b";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 6, -2, 2, 0, -4, 10, -8, 8, 2, -6, -10, 0, -2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.3-c";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 8, 0, 2, 2, 4, 0, -12, -12, 10, 2, -10, 12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.3-d";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -6, 2, -2, 0, -4, 10, 8, -8, 2, 6, 10, 0, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 311.1-a";
N := (10*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -4, -4, 2, 0, -8, -6, 0, -6, 4, -8, 0, 10, 10, -2, 8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 311.1-b";
N := (10*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 4, -4, 2, 0, 8, 6, 0, -6, 4, 8, 0, 10, -10, 2, 8, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 311.2-a";
N := (10*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, 0, 2, -4, -8, 0, 0, -6, 4, -6, 0, -8, 10, -2, 10, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 311.2-b";
N := (10*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 0, 2, -4, 8, 0, 0, 6, 4, -6, 0, 8, 10, 2, -10, -4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-a";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, -1, 0, 0, 0, 0, 8, 8, 0, 0, 11, 0, 0, 11, 11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-a";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, 2, 2, -6, 0, 0, -6, -7, 5, -3, 3, 5, -12, -6, -10, 2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-b";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 2, 2, 0, 0, -6, -6, -1, -1, -3, -3, -13, 0, 0, 14, 14, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-c";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, 2, 2, 0, 6, 6, 0, 5, -7, -3, 3, 5, 6, 12, 2, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-d";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -1, 6, 6, -4, -4, 2, 2, -5, -5, 13, 13, -13, 12, 12, -2, -2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-e";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 1, 6, 6, 4, 4, -2, -2, -5, -5, -13, -13, -13, -12, -12, -2, -2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-f";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 3, 2, 2, 0, -6, -6, 0, 5, -7, 3, -3, 5, -6, -12, 2, -10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-g";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -3, 2, 2, 0, 0, 6, 6, -1, -1, 3, 3, -13, 0, 0, 14, 14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 338.1-h";
N := (-13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 3, 2, 2, 6, 0, 0, 6, -7, 5, 3, -3, 5, 12, 6, -10, 2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-a";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -1, -3, -3, 0, 9, 2, -4, -6, -12, 2, -9, 12, 5, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-b";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 5, -1, 5, 2, 5, 2, -2, 0, 10, -8, -3, -8, 13, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-c";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 3, -3, 5, 0, 1, 8, 4, -6, -6, 6, 9, -6, -9, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-d";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -1, 9, 3, 0, -3, 2, -4, 6, 0, 2, -3, 0, -13, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-e";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -4, 2, -10, -2, -8, 6, -6, 0, 2, -12, 10, -8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-f";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -3, 3, 7, 2, 1, 6, 2, 8, 2, 8, -1, 8, -5, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-g";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -3, -3, -7, -2, -1, 6, 2, -8, -2, 8, 1, -8, -5, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-h";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 4, -2, 10, 2, -8, 6, 6, 0, 2, 12, -10, -8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-i";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -1, -9, -3, 0, 3, 2, -4, -6, 0, 2, 3, 0, -13, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-j";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 3, 3, -5, 0, -1, 8, 4, 6, 6, 6, -9, 6, -9, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-k";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 5, 1, -5, -2, -5, 2, -2, 0, -10, -8, 3, 8, 13, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.1-l";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -1, 3, 3, 0, -9, 2, -4, 6, 12, 2, 9, -12, 5, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-a";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -1, -3, -3, 9, 0, -4, 2, -12, -6, 2, 12, -9, 2, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-b";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 5, 5, -1, 5, 2, -2, 2, 10, 0, -8, -8, -3, -14, 13, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-c";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 5, -3, 1, 0, 4, 8, -6, -6, 6, -6, 9, -4, -9, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-d";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -1, 3, 9, -3, 0, -4, 2, 0, 6, 2, 0, -3, 2, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-e";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 2, -4, -2, -10, 6, -8, 0, -6, 2, 10, -12, -8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-f";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -3, 7, 3, 1, 2, 2, 6, 2, 8, 8, 8, -1, -2, -5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-g";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -3, -7, -3, -1, -2, 2, 6, -2, -8, 8, -8, 1, -2, -5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-h";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -2, 4, 2, 10, 6, -8, 0, 6, 2, -10, 12, -8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-i";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -1, -3, -9, 3, 0, -4, 2, 0, -6, 2, 0, 3, 2, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-j";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, -5, 3, -1, 0, 4, 8, 6, 6, 6, 6, -9, -4, -9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-k";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 5, -5, 1, -5, -2, -2, 2, -10, 0, -8, 8, 3, -14, 13, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 342.2-l";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -1, 3, 3, -9, 0, -4, 2, 12, 6, 2, -12, 9, 2, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.1-a";
N := (10*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, 6, -6, 3, 5, 2, 1, 3, 9, -7, -4, 4, 10, 4, -5, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.1-b";
N := (10*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -3, 6, -6, -3, -5, -2, -1, 3, -9, 7, -4, -4, -10, 4, -5, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.2-a";
N := (10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -1, -6, 6, 5, 3, 1, 2, 3, -7, 9, -4, 10, 4, -5, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 344.2-b";
N := (10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 1, -6, 6, -5, -3, -1, -2, 3, 7, -9, -4, -10, -4, -5, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.1-a";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, -8, 8, 0, 8, 2, -4, 0, 8, 2, -4, 6, -8, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.1-b";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 0, 0, -6, 2, -8, 2, -6, 2, -2, 6, -2, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.1-c";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 0, -6, 0, 2, -4, -12, 0, -4, -6, -6, -4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.1-d";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, -8, -8, 0, -8, 2, -4, 0, -8, 2, 4, -6, -8, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.1-e";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -4, -8, -2, 6, -4, 4, 0, 0, 10, -10, -10, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.1-f";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -4, 8, 2, -6, -4, 4, 0, 0, 10, 10, 10, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.1-g";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -6, 0, 0, 0, 4, 10, -4, 0, -8, -2, -12, 2, 8, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.1-h";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 0, 6, 0, 2, -4, 12, 0, -4, 6, 6, -4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.1-i";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, 0, 6, -2, -8, 2, 6, -2, -2, -6, 2, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.1-j";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 0, 0, 0, -4, 10, -4, 0, 8, -2, 12, -2, 8, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.2-a";
N := (-8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 5, 6, 6, -5, -6, 2, 4, 12, -9, -2, -10, -3, -9, 1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.2-b";
N := (-8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 8, 0, 10, 2, 4, 0, -4, -12, 6, 6, 2, -4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.2-c";
N := (-8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -7, 2, 6, 3, 6, -10, 8, -12, 3, 14, -6, -3, -13, 5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.2-d";
N := (-8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, -1, 3, -5, 5, -8, -6, 2, 0, -12, -12, 8, 2, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.2-e";
N := (-8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -5, -1, -3, 5, -5, -8, -6, -2, 0, -12, 12, -8, 2, 3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.2-f";
N := (-8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -7, 2, -6, -3, -6, -10, 8, 12, -3, 14, 6, 3, -13, 5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.2-g";
N := (-8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, 8, 0, -10, -2, 4, 0, 4, 12, 6, -6, -2, -4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.2-h";
N := (-8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 5, 6, -6, 5, 6, 2, 4, -12, 9, -2, 10, 3, -9, 1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.4-a";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -8, -2, 8, 8, 0, -4, 2, 8, 0, 2, 6, -4, -6, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.4-b";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 0, 0, 2, -6, 2, -8, 2, -6, -2, -2, 6, 4, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.4-c";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 0, 0, -6, -4, 2, 0, -12, -4, -6, -6, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.4-d";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -8, -2, -8, -8, 0, -4, 2, -8, 0, 2, -6, 4, -6, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.4-e";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -4, -8, 6, -2, 4, -4, 0, 0, 10, -10, -10, -4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.4-f";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -4, 8, -6, 2, 4, -4, 0, 0, 10, 10, 10, -4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.4-g";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -6, 0, 4, 0, -4, 10, -8, 0, -2, 2, -12, -2, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.4-h";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 0, 0, 6, -4, 2, 0, 12, -4, 6, 6, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.4-i";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, 0, -2, 6, 2, -8, -2, 6, -2, 2, -6, 4, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.4-j";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, 0, -4, 0, -4, 10, 8, 0, -2, -2, 12, -2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.3-a";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 6, 5, 6, -6, -5, 4, 2, -9, 12, -2, -3, -10, 1, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.3-b";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 8, 4, 0, 2, 10, 0, 4, -12, -4, 6, 2, 6, 12, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.3-c";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -7, 6, 6, 3, 8, -10, 3, -12, 14, -3, -6, 5, -13, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.3-d";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -5, 3, 5, -5, -6, -8, 0, 2, -12, 8, -12, 3, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.3-e";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -5, -3, -5, 5, -6, -8, 0, -2, -12, -8, 12, 3, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.3-f";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, -7, -6, -6, -3, 8, -10, -3, 12, 14, 3, 6, 5, -13, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.3-g";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 8, 4, 0, -2, -10, 0, 4, 12, 4, 6, -2, -6, 12, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 345.3-h";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 6, 5, -6, 6, 5, 4, 2, 9, -12, -2, 3, 10, 1, -9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.1-a";
N := (-3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 2, -4, -1, 6, 9, -8, 2, -10, 1, 8, 12, 3, -7, 6, 12, -3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.1-b";
N := (-3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -2, -4, -1, -6, -9, 8, -2, -10, 1, -8, -12, 3, 7, -6, 12, -3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.2-a";
N := (3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, -1, -4, 9, 6, 2, -8, 1, -10, 12, 8, 3, 6, -7, -3, 12, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.2-b";
N := (3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, -1, -4, -9, -6, -2, 8, 1, -10, -12, -8, 3, -6, 7, -3, 12, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 355.2-a";
N := (-9*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -4, 4, 0, 0, 6, -10, -8, 8, 0, 0, 10, -2, 10, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 355.2-b";
N := (-9*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -4, 4, 0, 0, -6, 10, -8, 8, 0, 0, 10, 2, -10, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 355.3-a";
N := (9*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 4, -4, 0, 0, -10, 6, 8, -8, 0, 0, 10, 10, -2, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 355.3-b";
N := (9*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 4, -4, 0, 0, 10, -6, 8, -8, 0, 0, 10, -10, 2, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.1-a";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -4, -8, -4, -2, 10, 12, -4, 0, 8, 2, -6, 2, 8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.1-b";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, -6, -4, -4, -2, 6, 8, 4, -8, 12, 14, 10, 8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.1-c";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, -4, 8, 4, 2, -10, 12, -4, 0, -8, 2, 6, -2, 8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.1-d";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 6, 4, 4, 2, 6, 8, -4, 8, 12, -14, -10, 8, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.1-e";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -6, -2, -2, 2, -6, -4, 8, -4, -12, 10, 2, 2, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.1-f";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 3, -6, 1, -2, -7, 0, 11, 5, 8, 0, 1, 5, 8, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.1-g";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, 6, 2, 2, -2, -6, -4, -8, 4, -12, -10, -2, 2, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.1-h";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, 3, 6, -1, 2, 7, 0, 11, -5, -8, 0, -1, -5, 8, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.1-i";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 8, 4, -4, -2, -2, 0, -4, 0, 8, -10, 6, -10, 8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.1-j";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 8, -4, 4, 2, 2, 0, -4, 0, -8, -10, -6, 10, 8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.2-a";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -8, -4, -8, 10, -2, -4, 12, 8, 0, 2, 2, -6, -12, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.2-b";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, -4, -6, -2, -4, 8, 6, -8, 4, 12, 10, 14, -4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.2-c";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -8, 4, 8, -10, 2, -4, 12, -8, 0, 2, -2, 6, -12, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.2-d";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 4, 6, 2, 4, 8, 6, 8, -4, 12, -10, -14, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.2-e";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, -2, -6, 2, -2, -4, -6, -4, 8, -12, 2, 10, -4, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.2-f";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -6, 1, -6, -7, -2, 11, 0, 8, 5, 0, 5, 1, 2, 8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.2-g";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, 2, 6, -2, 2, -4, -6, 4, -8, -12, -2, -10, -4, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.2-h";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -6, -1, 6, 7, 2, 11, 0, -8, -5, 0, -5, -1, 2, 8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.2-i";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, 4, -4, 4, -2, -2, -4, 0, 8, 0, -10, -10, 6, 12, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 360.2-j";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 4, 4, -4, 2, 2, -4, 0, -8, 0, -10, 10, -6, 12, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-a";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 0, -9, 9, 9, -9, 8, 8, 0, 0, 5, 9, -9, 5, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-b";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, 3, 0, 0, 6, 6, -1, -1, -3, -3, -13, 12, 12, -4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-c";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, -3, 0, 0, -6, -6, -1, -1, 3, 3, -13, -12, -12, -4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-d";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -4, 4, 3, -3, 7, -7, -4, -4, 8, -8, 13, -9, 9, 7, 7, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-e";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, -4, -3, 3, -7, 7, -4, -4, -8, 8, 13, 9, -9, 7, 7, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-f";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 0, 9, -9, -9, 9, 8, 8, 0, 0, 5, -9, 9, 5, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-a";
N := (11*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 0, 0, 8, 8, -6, -6, 0, 0, 8, 8, 2, 6, 6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-b";
N := (11*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 0, 0, -8, -8, 6, 6, 0, 0, -8, -8, 2, -6, -6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 365.2-a";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -4, -8, 6, 6, -2, -6, 6, -8, 12, 2, -6, -10, 2, -12, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 365.2-b";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, 0, -4, -4, -1, 0, 9, 2, 1, -7, 10, 6, 7, -3, -5, 13, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 365.2-c";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -4, -8, -6, -6, 2, 6, 6, -8, -12, -2, -6, 10, -2, -12, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 365.2-d";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 0, -4, 4, 1, 0, -9, 2, 1, 7, -10, 6, -7, 3, -5, 13, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 365.3-a";
N := (9*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -8, -4, 6, 6, -6, -2, -8, 6, 2, 12, -6, 2, -10, -8, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 365.3-b";
N := (9*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, -4, 0, -1, -4, 9, 0, 1, 2, 10, -7, 6, -3, 7, 13, -5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 365.3-c";
N := (9*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -8, -4, -6, -6, 6, 2, -8, 6, -2, -12, -6, -2, 10, -8, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 365.3-d";
N := (9*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, -4, 0, 1, 4, -9, 0, 1, 2, -10, 7, 6, 3, -7, 13, -5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.1-a";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 2, 0, 8, 6, -6, 2, -4, 8, 0, 6, 0, 6, 8, 14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.1-b";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 2, 0, -8, -6, 6, 2, -4, -8, 0, 6, 0, -6, 8, 14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.1-c";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, 4, 0, -2, 6, 8, 4, 8, 8, -6, 2, 6, 4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.1-d";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -4, 6, -8, 4, -8, 0, -10, 0, -8, -10, -6, 12, 2, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.1-e";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 4, 0, 2, -6, 8, 4, -8, -8, -6, -2, -6, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.1-f";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -4, 6, 8, -4, 8, 0, -10, 0, 8, -10, 6, -12, 2, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.2-a";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 0, 2, 8, -6, 6, -4, 2, 0, 8, 6, 6, 0, 14, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.2-b";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 0, 2, -8, 6, -6, -4, 2, 0, -8, 6, -6, 0, 14, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.2-c";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, 0, 0, 6, -2, 4, 8, 8, 8, -6, 6, 2, -8, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.2-d";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 6, -4, -8, -8, 4, -10, 0, -8, 0, -10, 12, -6, 12, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.2-e";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 4, 0, 0, -6, 2, 4, 8, -8, -8, -6, -6, -2, -8, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 368.2-f";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 6, -4, 8, 8, -4, -10, 0, 8, 0, -10, -12, 6, 12, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.1-a";
N := (-10*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 0, -6, -6, -6, -4, -8, -2, 8, 0, 2, -10, 6, 12, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.1-b";
N := (-10*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 0, 6, 6, 6, 4, -8, -2, -8, 0, 2, 10, -6, 12, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.1-c";
N := (-10*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 6, 6, 0, 10, 4, 4, -8, 12, -10, -14, 6, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.1-d";
N := (-10*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, -6, 0, -10, 4, 4, 8, -12, -10, 14, -6, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.1-e";
N := (-10*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, -6, 2, 0, 6, 12, -12, 12, 8, -2, 6, 2, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.1-f";
N := (-10*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 4, 4, -6, 6, -8, -12, 8, 0, 2, 10, -14, -8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.1-g";
N := (-10*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, -4, -4, 6, -6, -8, -12, -8, 0, 2, -10, 14, -8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.1-h";
N := (-10*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 6, -2, 0, -6, 12, -12, -12, -8, -2, -6, -2, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.2-a";
N := (-10*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -6, -6, -4, -6, -2, -8, 0, 8, 2, 6, -10, -6, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.2-b";
N := (-10*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, 6, 6, 4, 6, -2, -8, 0, -8, 2, -6, 10, -6, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.2-c";
N := (-10*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 6, 6, 10, 0, 4, 4, 12, -8, -10, 6, -14, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.2-d";
N := (-10*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, -6, -10, 0, 4, 4, -12, 8, -10, -6, 14, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.2-e";
N := (-10*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 2, -6, 6, 0, -12, 12, 8, 12, -2, 2, 6, -4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.2-f";
N := (-10*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 4, 4, 6, -6, -12, -8, 0, 8, 2, -14, 10, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.2-g";
N := (-10*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -4, -4, -6, 6, -12, -8, 0, -8, 2, 14, -10, 4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 375.2-h";
N := (-10*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, -2, 6, -6, 0, -12, 12, -8, -12, -2, -2, -6, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-a";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 1, 0, 9, -9, -6, -3, 12, -9, -8, 0, -9, -2, -4, -4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-b";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, 0, -1, 1, -8, 8, 0, 4, 2, 7, 0, 0, -10, 3, -8, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-c";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 8, 2, 8, 0, -8, -6, 6, 12, 8, 6, 12, -4, 4, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-d";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 0, -6, 0, 4, 0, 6, -2, 4, 12, -2, 4, 8, -4, -10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-e";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -3, 0, -1, -1, 8, -8, 0, 4, 2, -7, 0, 0, 10, 3, -8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-f";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, 0, -6, 0, -4, 0, -6, -2, 4, -12, -2, -4, -8, -4, -10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-g";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 1, 0, -9, 9, 6, 3, 12, -9, 8, 0, 9, 2, -4, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.1-h";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 8, 2, -8, 0, 8, 6, 6, 12, -8, 6, -12, 4, 4, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.2-a";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, 1, -9, 9, -3, -6, -9, 12, -8, 0, -2, -9, -4, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.2-b";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, -1, 0, -8, 1, 0, 8, 2, 4, 7, 0, -10, 0, -8, 3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.2-c";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 2, 8, 0, 8, -6, -8, 12, 6, 8, 6, -4, 12, 10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.2-d";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 2, -6, 0, 4, 0, 6, 0, 4, -2, 12, -2, 8, 4, -10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.2-e";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -3, -1, 0, 8, -1, 0, -8, 2, 4, -7, 0, 10, 0, -8, 3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.2-f";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, -6, 0, -4, 0, -6, 0, 4, -2, -12, -2, -8, -4, -10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.2-g";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 0, 1, 9, -9, 3, 6, -9, 12, 8, 0, 2, 9, -4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 376.2-h";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 2, 8, 0, -8, 6, 8, 12, 6, -8, 6, 4, -12, 10, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.1-a";
N := (7*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 3, -4, 0, -4, -6, -2, 7, 1, 12, -10, -8, -2, 1, -5, -9, -7, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.1-b";
N := (7*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -1, 0, 0, -4, 6, 10, -5, -1, 4, 2, 12, 10, -9, -9, 3, 13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.1-c";
N := (7*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -4, 6, -8, 0, -10, 8, 10, 6, -8, 8, 10, 2, -4, -12, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.1-d";
N := (7*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 1, 0, 0, 4, -6, -10, 5, -1, 4, -2, -12, 10, 9, 9, 3, 13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.1-e";
N := (7*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -3, -4, 0, 4, 6, 2, -7, 1, 12, 10, 8, -2, -1, 5, -9, -7, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.1-f";
N := (7*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -4, 6, 8, 0, 10, -8, 10, 6, 8, -8, 10, -2, 4, -12, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.2-a";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 0, 0, -4, -6, -4, 7, -2, 12, 1, -8, -10, -2, -5, 1, -7, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.2-b";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, 0, 0, 6, -4, -5, 10, 4, -1, 12, 2, 10, -9, -9, 13, 3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.2-c";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 6, -4, 0, -8, 8, -10, 6, 10, 8, -8, 10, -4, 2, 8, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.2-d";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 0, 0, -6, 4, 5, -10, 4, -1, -12, -2, 10, 9, 9, 13, 3, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.2-e";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 0, 0, -4, 6, 4, -7, 2, 12, 1, 8, 10, -2, 5, -1, -7, -9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 382.2-f";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 6, -4, 0, 8, -8, 10, 6, 10, -8, 8, 10, 4, -2, 8, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 383.1-a";
N := (-8*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -2, 2, -2, 0, -4, -6, 2, 0, 0, 12, 8, -2, 10, 0, -6, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 383.1-b";
N := (-8*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 2, 2, -2, 0, 4, 6, -2, 0, 0, -12, -8, -2, -10, 0, -6, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 383.2-a";
N := (8*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 0, -2, 2, -4, 0, 2, -6, 0, 0, 8, 12, -2, 0, 10, 2, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 383.2-b";
N := (8*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 0, -2, 2, 4, 0, -2, 6, 0, 0, -8, -12, -2, 0, -10, 2, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-a";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 4, 6, -6, 8, -6, -12, -4, -2, 2, 6, -4, 6, -12, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-b";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 4, 0, 6, -6, 6, -8, -4, -12, -2, 2, 6, -6, 4, 8, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-c";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -4, 0, 6, -6, -6, 8, 4, 12, -2, 2, 6, 6, -4, -8, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-d";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 8, 0, 0, -10, -6, 0, -8, 8, -8, -6, -10, -6, -12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-e";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, -4, 6, -6, -8, 6, 12, 4, -2, 2, 6, 4, -6, 12, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-f";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 0, -2, -6, -6, 4, 4, -4, -10, 2, -2, -2, 0, 0, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-g";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 8, 0, 0, 10, 6, 0, -8, -8, 8, -6, 10, 6, -12, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-h";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 0, -2, -6, 6, -4, -4, 4, -10, 2, -2, 2, 0, 0, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-i";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 4, 6, 2, -4, 6, -4, 4, -2, 10, -2, 0, 2, -4, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-j";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 8, 0, 0, 0, 6, 10, -8, 0, 8, -8, -6, 6, 10, 4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-k";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 4, -6, -2, 4, -6, -4, 4, 2, -10, -2, 0, -2, -4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-l";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 8, 0, 0, 0, -6, -10, -8, 0, -8, 8, -6, -6, -10, 4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-m";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -8, 0, 0, 0, 6, 10, 8, 0, -8, 8, -6, 6, 10, -4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-n";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -4, 6, 2, 4, -6, 4, -4, -2, 10, -2, 0, -2, 4, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-o";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -8, 0, 0, 0, -6, -10, 8, 0, 8, -8, -6, -6, -10, -4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-p";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 0, 2, 6, 6, -4, 4, -4, 10, -2, -2, 2, 0, 0, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-q";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -4, -6, -2, -4, 6, 4, -4, 2, -10, -2, 0, 2, 4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-r";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -8, 0, 0, -10, -6, 0, 8, -8, 8, -6, -10, -6, 12, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-s";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 4, -6, 6, -8, 6, -12, -4, 2, -2, 6, 4, -6, -12, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-t";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 0, 2, 6, -6, 4, -4, 4, 10, -2, -2, -2, 0, 0, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-u";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -8, 0, 0, 10, 6, 0, 8, 8, -8, -6, 10, 6, 12, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-v";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 4, 0, -6, 6, -6, 8, -4, -12, 2, -2, 6, 6, -4, 8, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-w";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, 0, -6, 6, 6, -8, 4, 12, 2, -2, 6, -6, 4, -8, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-x";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, -4, -6, 6, 8, -6, 12, 4, 2, -2, 6, -4, 6, 12, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 386.1-a";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -4, -4, 0, -4, -6, -6, 4, 4, 0, 0, -6, 2, -6, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 386.1-b";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 2, -7, -8, 7, -4, 1, 0, -4, -8, 3, 6, -5, -10, -4, -16, 2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 386.1-c";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -4, -4, 0, 4, 6, 6, 4, 4, 0, 0, -6, -2, 6, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 386.1-d";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -2, -7, -8, -7, 4, -1, 0, -4, -8, -3, -6, -5, 10, 4, -16, 2, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 386.2-a";
N := (9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -4, -4, -4, 0, -6, -6, 4, 4, 0, 0, -6, -6, 2, 12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 386.2-b";
N := (9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 1, -8, -7, -4, 7, 0, 1, -8, -4, 6, 3, -5, -4, -10, 2, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 386.2-c";
N := (9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -4, -4, 4, 0, 6, 6, 4, 4, 0, 0, -6, 6, -2, 12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 386.2-d";
N := (9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -1, -8, -7, 4, -7, 0, -1, -8, -4, -6, -3, -5, 4, 10, 2, -16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.1-a";
N := (-14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, -2, -2, -8, -8, -2, -2, 8, 8, 4, 4, 10, 10, -12, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.1-b";
N := (-14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -2, -2, 8, 8, 2, 2, 8, 8, -4, -4, -10, -10, -12, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.1-c";
N := (-14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 8, 8, 0, 0, 6, 6, -4, -4, -8, -8, 6, 6, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 392.1-d";
N := (-14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 8, 8, 0, 0, -6, -6, -4, -4, 8, 8, -6, -6, -4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-a";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 6, 6, -6, -6, 10, 10, -6, -6, -10, 6, 6, -2, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-b";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, -6, -6, 6, 6, 10, 10, 6, 6, -10, -6, -6, -2, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-c";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 4, 4, 2, 2, 8, 8, 4, 4, 2, -6, -6, -8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-d";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, -4, -4, -2, -2, 8, 8, -4, -4, 2, 6, 6, -8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-a";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 2, -1, 6, 3, 6, -9, 8, 1, 9, 0, -8, -9, 3, 8, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-b";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -6, 3, 6, -1, -2, 7, 0, -11, 5, 8, 0, -1, -5, 8, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-c";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -1, 8, 0, 0, 0, 0, -13, 13, 0, 0, 13, 0, 0, 5, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-d";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 5, 0, 4, 4, 0, 0, 1, -9, 8, -12, 5, -4, -4, 7, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-e";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, 8, 0, 0, 0, 0, 8, -8, 0, 0, -2, 0, 0, -16, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-f";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 0, 0, -8, 8, 8, -9, 1, -8, -8, -3, -8, 8, -7, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-g";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -7, 8, 0, 0, 0, 0, 5, -5, 0, 0, -11, 0, 0, 11, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-h";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -5, 4, 9, 0, -5, -4, 1, -7, -2, -10, 1, -9, 2, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-i";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -6, 4, -8, -6, -6, -2, 6, -4, 0, 2, 14, 2, -2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-j";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 5, 0, -4, -4, 0, 0, 1, -9, -8, 12, 5, 4, 4, 7, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-k";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -6, 3, -6, 1, 2, -7, 0, -11, -5, -8, 0, 1, 5, 8, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-l";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 0, 0, 8, -8, -8, -9, 1, 8, 8, -3, 8, -8, -7, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-m";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -6, -4, 8, 6, 6, -2, 6, 4, 0, 2, -14, -2, -2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-n";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -5, -4, -9, 0, 5, -4, 1, 7, 2, -10, -1, 9, 2, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-o";
N := (-8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 2, -1, -6, -3, -6, 9, 8, 1, -9, 0, -8, 9, -3, 8, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-a";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -1, 2, 3, 6, -9, 6, 1, 8, 0, 9, -8, 3, -9, -2, 8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-b";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, -6, -1, 6, 7, -2, -11, 0, 8, 5, 0, -5, -1, -2, 8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-c";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 8, -1, 0, 0, 0, 0, 13, -13, 0, 0, 13, 0, 0, 16, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-d";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 5, 4, 4, 0, 0, -9, 1, -12, 8, 5, -4, -4, -8, 7, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-e";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, 8, 0, 0, 0, 0, -8, 8, 0, 0, -2, 0, 0, 16, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-f";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 3, -8, 0, 8, 8, 1, -9, -8, -8, -3, 8, -8, -8, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-g";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 8, -7, 0, 0, 0, 0, -5, 5, 0, 0, -11, 0, 0, 16, 11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-h";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -5, 0, 9, 4, -5, 0, 1, -4, -2, -7, -10, -9, 1, 12, 2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-i";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, -8, 4, -6, -6, 6, -2, 0, -4, 2, 2, 14, -2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-j";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 5, -4, -4, 0, 0, -9, 1, 12, -8, 5, 4, 4, -8, 7, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-k";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 3, -6, 1, -6, -7, 2, -11, 0, -8, -5, 0, 5, 1, -2, 8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-l";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 3, 8, 0, -8, -8, 1, -9, 8, 8, -3, -8, 8, -8, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-m";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 2, 8, -4, 6, 6, 6, -2, 0, 4, 2, -2, -14, -2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-n";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -5, 0, -9, -4, 5, 0, 1, -4, 2, 7, -10, 9, -1, 12, 2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-o";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -1, 2, -3, -6, 9, -6, 1, 8, 0, -9, -8, -3, 9, -2, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.1-a";
N := (-11*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 0, -4, 0, -2, 2, 0, 2, 12, 4, 4, 4, -2, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.1-b";
N := (-11*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -5, -6, 1, -6, -6, 2, -4, 6, -7, 0, 1, -10, 12, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.1-c";
N := (-11*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, -6, -1, 6, 6, -2, -4, 6, 7, 0, 1, 10, -12, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.1-d";
N := (-11*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 0, 4, 0, 2, -2, 0, 2, -12, -4, 4, -4, 2, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-a";
N := (-11*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 4, 0, -4, 2, -2, 2, 0, 4, 12, 4, -2, 4, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-b";
N := (-11*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -5, -6, 1, 2, -6, 6, -4, 0, -7, 1, 12, -10, -7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-c";
N := (-11*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, -5, 6, -1, -2, 6, 6, -4, 0, 7, 1, -12, 10, -7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-d";
N := (-11*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 4, 0, 4, -2, 2, 2, 0, -4, -12, 4, 2, -4, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.1-a";
N := (-9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 6, -2, 0, -6, 8, 6, 2, 12, 12, 8, -6, -8, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.1-b";
N := (-9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 5, 5, 0, 6, 0, 2, 8, -6, -3, -4, 12, -9, 2, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.1-c";
N := (-9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 6, 2, 0, 6, 8, 6, -2, -12, 12, -8, 6, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.1-d";
N := (-9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 5, 5, 0, -6, 0, 2, 8, 6, 3, -4, -12, 9, 2, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.1-e";
N := (-9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -3, -3, -2, -6, -6, -4, -6, 2, 3, -6, 2, 9, -14, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.1-f";
N := (-9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -2, -4, 9, 3, -1, -7, -4, 1, 8, 10, -2, -5, -11, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.1-g";
N := (-9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -2, 4, -9, -3, -1, -7, 4, -1, 8, -10, 2, -5, -11, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.1-h";
N := (-9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 6, -6, 4, 9, -9, 11, 3, 8, -3, 0, 2, 6, -11, -11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.1-i";
N := (-9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -3, 2, 6, 6, -4, -6, -2, -3, -6, -2, -9, -14, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.1-j";
N := (-9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, -6, -4, -9, 9, 11, 3, -8, 3, 0, -2, -6, -11, -11, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.2-a";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 0, -2, -6, 0, 6, 8, 12, 2, 12, -6, 8, 4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.2-b";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 5, 5, 0, 0, 6, 8, 2, -3, -6, -4, -9, 12, 14, 2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.2-c";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 0, 2, 6, 0, 6, 8, -12, -2, 12, 6, -8, 4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.2-d";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 5, 5, 0, 0, -6, 8, 2, 3, 6, -4, 9, -12, 14, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.2-e";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -3, -3, -2, -6, -6, -6, -4, 3, 2, -6, 9, 2, 10, -14, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.2-f";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -6, -4, 3, 9, -7, -1, 1, -4, 8, -2, 10, -11, -5, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.2-g";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -6, 4, -3, -9, -7, -1, -1, 4, 8, 2, -10, -11, -5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.2-h";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -1, -6, 6, 4, -9, 9, 3, 11, -3, 8, 0, 6, 2, -11, -11, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.2-i";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, -3, 2, 6, 6, -6, -4, -3, -2, -6, -9, -2, 10, -14, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 414.2-j";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 1, -6, 6, -4, 9, -9, 3, 11, 3, -8, 0, -6, -2, -11, -11, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.1-a";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, 2, 3, 0, -3, 1, -6, 9, -6, -9, -2, -5, 10, 12, 11, 5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.1-b";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -4, -4, -4, 4, 10, 6, 4, -4, 4, -8, 2, -2, -2, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.1-c";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 0, -3, 4, -7, 7, 2, -9, -4, 7, 0, -5, 6, 2, 13, -13, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.1-d";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 0, -3, -4, 7, -7, -2, -9, -4, -7, 0, -5, -6, -2, 13, -13, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.1-e";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -4, -4, 4, -4, -10, -6, 4, -4, -4, 8, 2, 2, 2, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.1-f";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, 2, 3, 0, 3, -1, 6, 9, -6, 9, 2, -5, -10, -12, 11, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.2-a";
N := (2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 3, 3, 2, -3, 0, -6, 1, -6, 9, -2, -9, -5, 12, 10, 5, 11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.2-b";
N := (2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -4, -4, 4, -4, 6, 10, -4, 4, -8, 4, 2, -2, -2, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.2-c";
N := (2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, -3, 0, -7, 4, 2, 7, -4, -9, 0, 7, -5, 2, 6, -13, 13, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.2-d";
N := (2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, -3, 0, 7, -4, -2, -7, -4, -9, 0, -7, -5, -2, -6, -13, 13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.2-e";
N := (2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -4, -4, -4, 4, -6, -10, -4, 4, 8, -4, 2, 2, 2, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.2-f";
N := (2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -3, 3, 2, 3, 0, 6, -1, -6, 9, 2, 9, -5, -12, -10, 5, 11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.1-a";
N := (-9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, -4, 2, 0, 3, 0, 9, 5, -4, 6, -12, 5, 6, 0, 2, -4, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.1-b";
N := (-9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, 0, -5, -5, -3, 3, -4, 2, -4, -8, 3, -2, -11, -2, -13, -5, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.1-c";
N := (-9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, -7, 2, -9, -6, 3, -3, 8, 8, 6, -12, -4, -6, -6, -4, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.1-d";
N := (-9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, -4, 2, 0, -3, 0, -9, 5, -4, -6, 12, 5, -6, 0, 2, -4, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.1-e";
N := (-9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, -7, 2, 9, 6, -3, 3, 8, 8, -6, 12, -4, 6, 6, -4, 5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.1-f";
N := (-9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, 0, -5, 5, 3, -3, 4, 2, -4, 8, -3, -2, 11, 2, -13, -5, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.2-a";
N := (9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, 2, -4, 3, 0, 9, 0, -4, 5, -12, 6, 5, 0, 6, -4, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.2-b";
N := (9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, -5, 0, -3, -5, -4, 3, -4, 2, 3, -8, -2, -2, -11, -5, -13, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.2-c";
N := (9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 2, -7, -6, -9, -3, 3, 8, 8, -12, 6, -4, -6, -6, 5, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.2-d";
N := (9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, 2, -4, -3, 0, -9, 0, -4, 5, 12, -6, 5, 0, -6, -4, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.2-e";
N := (9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 2, -7, 6, 9, 3, -3, 8, 8, 12, -6, -4, 6, 6, 5, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 422.2-f";
N := (9*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, -5, 0, 3, 5, 4, -3, -4, 2, -3, 8, -2, 2, 11, -5, -13, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.1-a";
N := (-12*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 2, 4, 0, 0, 4, 10, 4, 2, 8, -6, 8, 0, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.1-b";
N := (-12*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 2, 4, 0, 0, -4, -10, 4, 2, -8, -6, -8, 0, 2, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.2-a";
N := (12*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 4, 2, 0, 0, 10, 4, 2, 4, 8, -6, 0, 8, -4, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.2-b";
N := (12*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, 4, 2, 0, 0, -10, -4, 2, 4, -8, -6, 0, -8, -4, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.1-a";
N := (-10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 2, -5, -4, -7, -3, -8, -6, -5, -2, 8, -11, 6, 13, -2, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.1-b";
N := (-10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -2, -5, -4, 7, 3, 8, 6, -5, -2, -8, 11, 6, -13, -2, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.2-a";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, -4, -5, -3, -7, -6, -8, -2, -5, -11, 8, 6, 13, 12, -2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 424.2-b";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, -4, -5, 3, 7, 6, 8, -2, -5, 11, -8, 6, -13, 12, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.1-a";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -4, 8, 0, -6, 2, 8, 0, 4, -8, -2, 2, 10, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.1-b";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 2, -5, 0, -6, 1, -7, -6, 2, -10, -2, 7, 8, 5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.1-c";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -8, -8, 3, -4, 2, 9, -5, 2, -8, -8, -6, 5, -2, -9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.1-d";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -8, -8, -3, 4, -2, -9, -5, 2, 8, 8, -6, -5, 2, -9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.1-e";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 2, 5, 0, 6, -1, -7, -6, -2, 10, -2, -7, -8, 5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.1-f";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, -4, -8, 0, 6, -2, 8, 0, -4, 8, -2, -2, -10, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.2-a";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, -4, 0, 8, 2, -6, 0, 8, -8, 4, -2, 10, 2, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.2-b";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, -4, 0, -5, 1, -6, -6, -7, -10, 2, -2, 8, 7, -7, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.2-c";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -8, -8, -4, 3, 9, 2, 2, -5, -8, -8, -6, -2, 5, 5, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.2-d";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -8, -8, 4, -3, -9, -2, 2, -5, 8, 8, -6, 2, -5, 5, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.2-e";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, -4, 0, 5, -1, 6, -6, -7, 10, -2, -2, -8, -7, -7, 5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 426.2-f";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -4, 0, -8, -2, 6, 0, 8, 8, -4, -2, -10, -2, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-a";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 5, 8, -3, 6, -3, 6, -7, -6, 3, 2, 3, -3, -4, 14, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-b";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, 1, -8, 3, 6, -2, -8, 10, 3, 1, -11, 11, -8, -7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-c";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -5, -2, -7, 2, 5, -4, 11, -8, 1, 10, 3, 11, 4, 0, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-d";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 4, -4, 8, 2, 2, -4, -8, -8, 10, -6, -10, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-e";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -5, -2, -7, -6, 9, 8, -5, 8, -3, -2, -1, -5, -8, -16, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-f";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 8, -4, -6, 0, 6, -6, -4, 12, -12, -10, 6, -12, -4, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-g";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 4, 4, -8, -2, -2, -4, 8, 8, 10, 6, 10, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-h";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 5, 8, 3, -6, 3, -6, -7, 6, -3, 2, -3, 3, -4, 14, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-i";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, 1, 8, -3, -6, 2, -8, -10, -3, 1, 11, -11, -8, -7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-j";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -5, -2, 7, -2, -5, 4, 11, 8, -1, 10, -3, -11, 4, 0, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-k";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 8, -4, 6, 0, -6, 6, -4, -12, 12, -10, -6, 12, -4, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.1-l";
N := (-11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -5, -2, 7, 6, -9, -8, -5, -8, 3, -2, 1, 5, -8, -16, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-a";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 8, 5, 6, -3, 6, -3, -7, 3, -6, 2, -3, 3, 14, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-b";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, 1, 3, -8, -2, 6, -8, 3, 10, 1, 11, -11, -7, -8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-c";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -2, -5, 2, -7, -4, 5, 11, 1, -8, 10, 11, 3, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-d";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 4, 8, -4, 2, 2, -4, -8, -8, 10, -10, -6, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-e";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -5, -6, -7, 8, 9, -5, -3, 8, -2, -5, -1, -16, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-f";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 8, 0, -6, -6, 6, -4, -12, 12, -10, -12, 6, 14, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-g";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 4, -8, 4, -2, -2, -4, 8, 8, 10, 10, 6, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-h";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 8, 5, -6, 3, -6, 3, -7, -3, 6, 2, 3, -3, 14, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-i";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, 1, -3, 8, 2, -6, -8, -3, -10, 1, -11, 11, -7, -8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-j";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -2, -5, -2, 7, 4, -5, 11, -1, 8, 10, -11, -3, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-k";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 8, 0, 6, 6, -6, -4, 12, -12, -10, 12, -6, 14, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 430.4-l";
N := (-11*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -5, 6, 7, -8, -9, -5, 3, -8, -2, 5, 1, -16, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 431.1-a";
N := (10*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -2, 2, 6, 0, 0, 0, 4, 2, -8, -8, -8, -10, 10, -6, -12, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 431.1-b";
N := (10*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 2, 6, 0, 0, 0, -4, 2, -8, 8, 8, -10, -10, 6, -12, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 431.2-a";
N := (10*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 2, 6, 2, 0, 0, 4, 0, -8, 2, -8, -8, -10, -6, 10, -2, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 431.2-b";
N := (10*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 6, 2, 0, 0, -4, 0, -8, 2, 8, 8, -10, 6, -10, -2, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-a";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 7, -2, 0, 3, -6, 9, 10, 1, -9, -3, -4, -12, -6, 4, 4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-b";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, 7, -3, 0, -9, 6, 1, 10, 3, 9, -4, 6, 12, 4, 4, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-c";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -2, 8, 1, -2, -5, -6, 1, -3, 7, -4, 12, -10, 4, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-d";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -1, -1, -8, 5, 2, 1, -6, -7, 3, -4, 10, -12, -12, 4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-e";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -1, 1, 8, -5, -2, 1, -6, 7, -3, -4, -10, 12, -12, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-f";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, -2, -8, -1, 2, 5, -6, 1, 3, -7, -4, -12, 10, 4, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-g";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 7, 3, 0, 9, -6, 1, 10, -3, -9, -4, -6, -12, 4, 4, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-h";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 7, -2, 0, -3, 6, -9, 10, 1, 9, 3, -4, 12, 6, 4, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.1-a";
N := (w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 0, -6, 0, -4, -4, -6, 10, -6, 4, -2, 6, -8, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.1-b";
N := (w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 6, 4, 0, 4, -6, -6, 4, -6, -6, 10, 6, -4, -14, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.1-c";
N := (w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, 4, 0, -4, 6, -6, 4, 6, 6, 10, -6, 4, -14, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.1-d";
N := (w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 0, 6, 0, 4, -4, -6, -10, 6, 4, 2, -6, -8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.2-a";
N := (7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 2, 2, 0, 6, -4, 8, 0, -8, -8, -6, -2, 8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.2-b";
N := (7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 2, -2, 0, -6, -4, 8, 0, 8, -8, 6, 2, 8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.2-c";
N := (7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, -3, 6, -9, 0, 7, 4, 7, 0, 2, 1, -4, 2, -9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.2-d";
N := (7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, -3, -6, 9, 0, 7, 4, -7, 0, 2, -1, 4, 2, -9, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.2-e";
N := (7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -4, -7, -6, -3, 0, -1, -4, 9, 0, 2, -9, -12, 2, -13, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.2-f";
N := (7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, -7, 6, 3, 0, -1, -4, -9, 0, 2, 9, 12, 2, -13, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.4-a";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -4, 0, -6, -4, -6, -4, -6, 10, 4, 6, -2, -8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.4-b";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 6, 4, 0, -6, 4, -6, -6, -6, 10, -4, 6, 2, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.4-c";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 6, -4, 0, 6, 4, -6, 6, 6, 10, 4, -6, 2, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.4-d";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -4, 0, 6, 4, -6, -4, 6, -10, 4, -6, 2, -8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.3-a";
N := (-7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -6, 0, 2, 6, 8, -4, -8, 0, -8, -2, -6, 12, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.3-b";
N := (-7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, 0, -2, -6, 8, -4, 8, 0, -8, 2, 6, 12, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.3-c";
N := (-7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 4, -9, 6, 0, 4, 7, 0, 7, 2, -4, 1, -9, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.3-d";
N := (-7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, 4, 9, -6, 0, 4, 7, 0, -7, 2, 4, -1, -9, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.3-e";
N := (-7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -7, -4, -3, -6, 0, -4, -1, 0, 9, 2, -12, -9, -13, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 435.3-f";
N := (-7*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -7, -4, 3, 6, 0, -4, -1, 0, -9, 2, 12, 9, -13, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 438.1-a";
N := (-13*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 8, 0, 0, 8, 6, -6, 0, -4, 8, 8, 10, -6, 6, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 438.1-b";
N := (-13*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 8, 0, 0, -8, -6, 6, 0, -4, -8, -8, 10, 6, -6, -8, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 438.2-a";
N := (-13*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 8, 8, 0, -6, 6, -4, 0, 8, 8, 10, 6, -6, -8, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 438.2-b";
N := (-13*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 8, -8, 0, 6, -6, -4, 0, -8, -8, 10, -6, 6, -8, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-a";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 0, -8, 0, -4, -6, 6, 6, -2, -8, 0, -10, 2, 10, -6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-b";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 0, 1, 6, -2, 9, 0, 0, -5, 8, -3, 1, 4, -8, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-c";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 0, -8, 0, 4, 6, -6, 6, -2, 8, 0, 10, -2, 10, -6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-d";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 0, 6, -6, -2, 2, -2, -2, 8, -8, -6, 6, -2, -2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-e";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 1, 0, 2, -6, 0, -9, -5, 0, 3, -8, -4, -1, -3, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-f";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 1, 0, -2, 6, 0, 9, -5, 0, -3, 8, 4, 1, -3, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-g";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, 0, -6, 6, 2, -2, -2, -2, -8, 8, 6, -6, -2, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-h";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -8, 0, 4, 0, -6, 6, -2, 6, 0, 8, -2, 10, -6, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-i";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -8, 0, -4, 0, 6, -6, -2, 6, 0, -8, 2, -10, -6, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-j";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 0, 1, -6, 2, -9, 0, 0, -5, -8, 3, -1, -4, -8, -3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.1-a";
N := (-14*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -4, 2, -4, 6, 6, -7, -8, -8, 1, -4, 13, 5, 12, 9, -5, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.1-b";
N := (-14*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 4, 2, -4, -6, -6, 7, 8, -8, 1, 4, -13, 5, -12, -9, -5, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.2-a";
N := (14*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 3, -4, 2, 6, 6, -8, -7, 1, -8, 13, -4, 5, 9, 12, -4, -5, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.2-b";
N := (14*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -3, -4, 2, -6, -6, 8, 7, 1, -8, -13, 4, 5, -9, -12, -4, -5, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-a";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -8, -4, -4, -2, -2, -8, 4, 0, -8, -2, -10, -2, 8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-b";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 6, 0, 6, 8, -4, 0, 0, 2, 6, -6, 14, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-c";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -8, 4, 4, 2, 2, -8, 4, 0, 8, -2, 10, 2, 8, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-d";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 0, -6, -6, 8, 8, 0, 0, -10, -6, -6, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-e";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-8, -4, -4, -4, -2, -2, 4, -8, -8, 0, -2, -2, -10, -12, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-f";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -6, 0, -6, 0, -4, 8, 0, 0, 2, 6, -6, -4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-g";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-8, -4, 4, 4, 2, 2, 4, -8, 8, 0, -2, 2, 10, -12, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-h";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 0, 6, 6, 8, 8, 0, 0, -10, 6, 6, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-i";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, 0, -2, 2, -4, 4, 0, 8, -6, -2, 6, -4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-j";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, -6, 0, -6, 8, -4, 0, 0, 2, -6, 6, 14, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-k";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -4, 0, 2, -2, -4, 4, 0, -8, -6, 2, -6, -4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-l";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, -4, -2, 2, 4, -4, -8, 0, -6, -6, 2, 0, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-m";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, 4, 2, -2, 4, -4, 8, 0, -6, 6, -2, 0, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-n";
N := (-15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 6, 0, 6, 0, -4, 8, 0, 0, 2, -6, 6, -4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-a";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 5, 4, 9, 5, 10, -11, 6, -3, -3, -10, 11, -4, 3, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-b";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 7, -2, -3, 6, -3, -6, -1, -8, -12, -3, 4, 9, 9, 14, 4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-c";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 0, 2, 2, -6, -4, 2, 4, 8, 10, 6, 14, 12, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-d";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -1, 0, 3, -3, 6, 11, 8, 9, 3, -10, -9, -6, -13, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-e";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -1, -4, 1, 7, -6, 1, -2, 7, 11, -6, 9, 0, -5, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-f";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -6, -6, 4, -2, 6, -4, 8, 8, 4, 4, 6, 10, 0, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-g";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 1, 0, 3, 3, 6, 11, -8, -9, -3, 10, 9, 6, -13, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-h";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, 8, 8, 4, -2, 6, 4, -8, -8, 8, -6, 6, 6, 4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-i";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 0, 6, 6, 0, 8, 10, 0, -12, 4, -6, 6, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-j";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -1, 4, -1, -7, 6, 1, -2, -7, -11, -6, -9, 0, -5, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-k";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 0, -2, -2, 6, -4, 2, -4, -8, 10, -6, -14, 12, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-l";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 7, -2, 3, -6, 3, 6, -1, -8, 12, 3, 4, -9, -9, 14, 4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-m";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 0, 9, 4, -5, 0, -1, -4, 2, 7, 10, -9, 1, -12, 2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-n";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, 0, 2, -2, -6, -4, -2, -4, -8, -10, -6, -14, 12, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-o";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, 8, -8, -4, 2, -6, 4, -8, 8, -8, -6, -6, -6, 4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-p";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -1, 0, -3, 3, -6, 11, 8, -9, -3, -10, 9, 6, -13, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-q";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -8, -6, 6, -6, -6, -4, -2, -12, 0, 4, -6, -6, -4, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-r";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 5, -4, -9, -5, -10, -11, 6, 3, 3, -10, -11, 4, 3, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-s";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 1, 0, -3, -3, -6, 11, -8, 9, 3, 10, -9, -6, -13, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-t";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 0, -2, 2, 6, -4, -2, 4, 8, -10, 6, 14, 12, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-u";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -6, 6, -4, 2, -6, -4, 8, -8, -4, 4, -6, -10, 0, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-v";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, -9, -4, 5, 0, -1, -4, -2, -7, 10, 9, -1, -12, 2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-w";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 0, -6, -6, 0, 8, 10, 0, 12, 4, 6, -6, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-x";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -8, 6, -6, 6, 6, -4, -2, 12, 0, 4, 6, 6, -4, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-a";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 0, 9, 4, 10, 5, 6, -11, -3, -3, -10, -4, 11, 2, 3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-b";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 7, 6, -3, -6, -3, -8, -1, -3, -12, 4, 9, 9, 4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-c";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, 2, 0, -6, 2, 2, -4, 8, 4, 10, 14, 6, -16, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-d";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 2, 3, 0, 6, -3, 8, 11, 3, 9, -10, -6, -9, -4, -13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-e";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, 1, -4, -6, 7, -2, 1, 11, 7, -6, 0, 9, 10, -5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-f";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 4, 4, -6, 6, -2, 8, -4, 4, 8, 4, 10, 6, -10, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-g";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -2, 3, 0, 6, 3, -8, 11, -3, -9, 10, 6, 9, 4, -13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-h";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, -8, 4, 8, 6, -2, -8, 4, 8, -8, -6, 6, 6, 4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-i";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 6, 0, 0, 6, 10, 8, -12, 0, 4, 6, -6, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-j";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, -1, 4, 6, -7, -2, 1, -11, -7, -6, 0, -9, 10, -5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-k";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -2, -2, 0, 6, -2, 2, -4, -8, -4, 10, -14, -6, -16, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-l";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 7, -6, 3, 6, 3, -8, -1, 3, 12, 4, -9, -9, 4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-m";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -5, 4, 9, 0, -5, -4, -1, 7, 2, 10, 1, -9, 2, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-n";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 2, 2, 0, -6, -2, -2, -4, -8, -4, -10, -14, -6, 16, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-o";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, -8, -4, -8, -6, 2, -8, 4, -8, 8, -6, -6, -6, 4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-p";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 2, -3, 0, -6, 3, 8, 11, -3, -9, -10, 6, 9, -4, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-q";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -8, -2, 6, -6, -6, -6, -2, -4, 0, -12, 4, -6, -6, -2, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-r";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 0, -9, -4, -10, -5, 6, -11, 3, 3, -10, 4, -11, 2, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-s";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -2, -3, 0, -6, -3, -8, 11, 3, 9, 10, -6, -9, 4, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-t";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, -2, 0, 6, 2, -2, -4, 8, 4, -10, 14, 6, 16, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-u";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 4, -4, 6, -6, 2, 8, -4, -4, -8, 4, -10, -6, -10, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-v";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -5, -4, -9, 0, 5, -4, -1, -7, -2, 10, -1, 9, 2, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-w";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, 0, 0, -6, 10, 8, 12, 0, 4, -6, 6, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.3-x";
N := (-9*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -8, -2, -6, 6, 6, 6, -2, -4, 0, 12, 4, 6, 6, -2, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 456.1-a";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 0, 4, 10, 2, 4, 12, 4, 0, 2, -10, -2, 12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 456.1-b";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 7, -3, 5, 5, -8, 4, -12, -10, -6, -10, -2, -7, 0, 15, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 456.1-c";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 7, 3, -5, -5, 8, 4, -12, 10, 6, -10, 2, 7, 0, 15, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 456.1-d";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 0, -4, -10, -2, 4, 12, -4, 0, 2, 10, 2, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 456.2-a";
N := (10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, 0, 2, 10, 12, 4, 0, 4, 2, -2, -10, -12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 456.2-b";
N := (10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 7, 5, -3, -8, 5, -12, 4, -6, -10, -10, -7, -2, 15, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 456.2-c";
N := (10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 7, -5, 3, 8, -5, -12, 4, 6, 10, -10, 7, 2, 15, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 456.2-d";
N := (10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -4, 0, -2, -10, 12, 4, 0, -4, 2, 2, 10, -12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.1-a";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -6, -4, 8, 2, 6, 10, -8, -8, 8, -2, 8, 2, -4, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.1-b";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, 0, 6, -6, 2, 8, 0, 0, -10, 12, 6, -4, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.1-c";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, -4, 0, 6, -2, 4, -12, -8, 8, 2, 2, 6, 12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.1-d";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 2, 3, 0, 6, -4, -1, -6, 12, -10, -3, 3, -13, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.1-e";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -4, 0, -6, 2, 4, -12, 8, -8, 2, -2, -6, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.1-f";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, 0, -6, 6, 2, 8, 0, 0, -10, -12, -6, -4, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.1-g";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 2, -3, 0, -6, -4, -1, 6, -12, -10, 3, -3, -13, -4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.1-h";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -6, -4, -8, -2, -6, 10, -8, 8, -8, -2, -8, -2, -4, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.4-a";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -6, 8, 6, 2, -8, 10, 8, -8, -2, 2, 8, -10, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.4-b";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 2, 0, -6, 6, 8, 2, 0, 0, -10, 6, 12, 14, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.4-c";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 4, 0, -2, 6, -12, 4, 8, -8, 2, 6, 2, -12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.4-d";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -4, 3, 6, 0, -1, -4, 12, -6, -10, 3, -3, -4, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.4-e";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 4, 0, 2, -6, -12, 4, -8, 8, 2, -6, -2, -12, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.4-f";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 2, 0, 6, -6, 8, 2, 0, 0, -10, -6, -12, 14, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.4-g";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -4, -3, -6, 0, -1, -4, -12, 6, -10, -3, 3, -4, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 460.4-h";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, -6, -8, -6, -2, -8, 10, -8, 8, -2, -2, -8, -10, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.1-a";
N := (-11*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, 0, 4, 0, -2, 0, 4, -10, 8, 6, 0, 4, 2, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.1-b";
N := (-11*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 4, 8, 4, -6, -8, -4, 12, 10, 2, 0, 4, 2, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.1-c";
N := (-11*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -8, 0, 4, 4, 2, -2, 0, 6, 6, 10, -2, 14, 8, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.1-d";
N := (-11*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, 3, 2, 5, 4, 5, -12, -9, 3, 4, -1, 1, 2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.1-e";
N := (-11*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, 0, -4, 0, 2, 0, 4, -10, -8, 6, 0, -4, 2, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.1-f";
N := (-11*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, 3, -2, -5, -4, -5, -12, -9, -3, 4, 1, -1, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.1-g";
N := (-11*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -8, 0, -4, -4, -2, 2, 0, 6, -6, 10, 2, -14, 8, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.1-h";
N := (-11*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 4, -8, -4, 6, 8, -4, 12, -10, 2, 0, -4, 2, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.2-a";
N := (-9*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 5, -4, 9, -3, 6, 9, -4, -1, 0, -4, -3, 6, 8, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.2-b";
N := (-9*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 5, -4, -9, 3, -6, -9, -4, -1, 0, -4, 3, -6, 8, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.4-a";
N := (-11*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, -2, 0, 4, 0, -2, -10, 4, 8, 6, 4, 0, -4, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.4-b";
N := (-11*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -2, 4, 8, -8, -6, 12, -4, 10, 2, 4, 0, 0, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.4-c";
N := (-11*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -8, 4, 4, -2, 2, 6, 0, 6, 10, 14, -2, 4, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.4-d";
N := (-11*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 3, 4, 5, 2, 5, 4, -9, -12, 3, 4, 1, -1, -8, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.4-e";
N := (-11*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, -2, 0, -4, 0, 2, -10, 4, -8, 6, -4, 0, -4, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.4-f";
N := (-11*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 3, 4, -5, -2, -5, -4, -9, -12, -3, 4, -1, 1, -8, 2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.4-g";
N := (-11*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -8, -4, -4, 2, -2, 6, 0, -6, 10, -14, 2, 4, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.4-h";
N := (-11*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -2, -4, -8, 8, 6, 12, -4, -10, 2, -4, 0, 0, 2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.3-a";
N := (-9*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 5, -3, 9, 9, 6, -1, -4, 0, -4, 6, -3, -4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 470.3-b";
N := (-9*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 5, 3, -9, -9, -6, -1, -4, 0, -4, -6, 3, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.1-a";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, -4, 0, 8, 6, 8, -2, -8, -4, 6, 2, -10, -2, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.1-b";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 4, 0, -8, -6, 8, -2, 8, 4, 6, -2, 10, -2, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.1-c";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -4, -6, -6, 0, 2, 4, 8, 0, 10, 2, 12, 0, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.1-d";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, 4, 6, 6, 0, 2, 4, -8, 0, 10, -2, -12, 0, 16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.3-a";
N := (-9*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 0, -6, -3, -2, 7, -8, -5, 3, 12, -12, 11, 2, -10, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.3-b";
N := (-9*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 0, 6, 3, 2, -7, -8, -5, -3, -12, -12, -11, -2, -10, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.4-a";
N := (-3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 6, 4, -5, 6, 3, 12, -1, -9, 2, 8, 10, -2, 8, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.4-b";
N := (-3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 6, -4, 5, -6, -3, 12, -1, 9, -2, 8, -10, 2, 8, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.2-a";
N := (5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 0, -4, 6, 8, -2, 8, -4, -8, 6, -10, 2, -6, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.2-b";
N := (5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 0, 4, -6, -8, -2, 8, 4, 8, 6, 10, -2, -6, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.2-c";
N := (5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -6, -4, 0, -6, 4, 2, 0, 8, 10, 12, 2, 16, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.2-d";
N := (5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, 6, 4, 0, 6, 4, 2, 0, -8, 10, -12, -2, 16, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.6-a";
N := (9*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 0, -3, -6, 7, -2, -5, -8, 12, 3, -12, 2, 11, -8, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.6-b";
N := (9*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 0, 3, 6, -7, 2, -5, -8, -12, -3, -12, -2, -11, -8, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.5-a";
N := (3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 6, -5, 4, 3, 6, -1, 12, 2, -9, 8, -2, 10, 8, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 475.5-b";
N := (3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 6, 5, -4, -3, -6, -1, 12, -2, 9, 8, 2, -10, 8, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-a";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -6, -2, -4, 0, -6, -2, 10, 2, -4, 12, -2, -2, -10, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-b";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, -4, -1, 0, 6, -6, 0, -4, -1, -3, -6, 5, 3, 2, 11, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-c";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -1, 4, -5, -2, 6, 6, 6, -8, -1, 3, 2, -3, 9, 8, 11, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-d";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -6, -2, 4, 0, 6, 2, 10, 2, 4, -12, -2, 2, -10, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-e";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, 0, 7, -4, 6, 6, 4, 4, -1, -1, 6, 13, 1, 2, -5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-f";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, 0, 4, -4, 0, 6, -2, 4, -4, 2, -12, -2, 4, 2, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-g";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -4, -1, 0, -6, 6, 0, -4, -1, 3, 6, 5, -3, 2, 11, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-h";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, 3, 4, -5, -3, 6, 8, 1, -10, 10, -3, -8, -1, 8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-i";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 1, 4, -5, 2, -6, -6, -6, -8, -1, -3, -2, -3, -9, 8, 11, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-j";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 0, 4, 4, 0, -6, 2, 4, -4, -2, 12, -2, -4, 2, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-k";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 3, 4, 5, 3, -6, -8, 1, -10, -10, 3, -8, 1, 8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-l";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, 0, 7, 4, -6, -6, -4, 4, -1, 1, -6, 13, -1, 2, -5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-a";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, -6, 0, -4, -2, -6, 2, 10, 12, -4, -2, -2, 10, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-b";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -1, -4, 6, 0, 0, -6, -1, -4, -6, -3, 5, 3, 11, 2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-c";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -3, -5, 4, 6, -2, 6, 6, -1, -8, 2, 3, -3, 9, 11, 8, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-d";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -2, -6, 0, 4, 2, 6, 2, 10, -12, 4, -2, 2, 10, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-e";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 7, 0, 6, -4, 4, 6, -1, 4, 6, -1, 13, 1, -5, 2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-f";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 4, 0, 0, -4, -2, 6, -4, 4, -12, 2, -2, 4, 4, 2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-g";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, -1, -4, -6, 0, 0, 6, -1, -4, 6, 3, 5, -3, 11, 2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-h";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -1, 4, 3, -3, -5, 8, 6, -10, 1, -3, 10, -8, -1, -8, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-i";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 3, -5, 4, -6, 2, -6, -6, -1, -8, -2, -3, -3, -9, 11, 8, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-j";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 4, 0, 0, 4, 2, -6, -4, 4, 12, -2, -2, -4, 4, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-k";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 1, 4, 3, 3, 5, -8, -6, -10, 1, 3, -10, -8, 1, -8, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-l";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 7, 0, -6, 4, -4, -6, -1, 4, -6, 1, 13, -1, -5, 2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.1-a";
N := (-10*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 0, 6, -4, 0, -4, -6, -4, 6, -4, 0, 0, -2, -12, -6, 8, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.1-b";
N := (-10*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, 6, -4, 0, 4, 6, 4, 6, -4, 0, 0, -2, 12, 6, 8, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.2-a";
N := (10*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 0, -4, 6, -4, 0, -4, -6, -4, 6, 0, 0, -2, -6, -12, 14, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.2-b";
N := (10*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, -4, 6, 4, 0, 4, 6, -4, 6, 0, 0, -2, 6, 12, 14, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-a";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, -8, -2, -6, 8, -8, -2, 0, 4, -4, 6, -6, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-b";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, 0, 0, -4, -2, -6, 4, -8, -8, 0, 6, 6, -10, -4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-c";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, 0, 0, 4, 2, 6, 4, -8, 8, 0, 6, -6, 10, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-d";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 8, 2, 6, -8, -8, -2, 0, -4, -4, -6, 6, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-e";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 0, 0, 2, -6, 12, 4, 0, 8, -6, 10, -6, 12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-f";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, 0, 0, -2, 6, 12, 4, 0, -8, -6, -10, 6, 12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-g";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 0, 0, 2, -6, -12, -4, 0, -8, -6, 10, -6, -12, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-h";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, 0, 0, -2, 6, -12, -4, 0, 8, -6, -10, 6, -12, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-i";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, -8, -2, 6, -8, 8, 2, 0, 4, -4, -6, 6, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-j";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, 0, 0, 4, -2, -6, -4, 8, 8, 0, 6, 6, -10, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-k";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 0, 0, -4, 2, 6, -4, 8, -8, 0, 6, -6, 10, 4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.1-l";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, 8, 2, -6, 8, 8, 2, 0, -4, -4, 6, -6, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-a";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, -2, -8, 8, -6, -2, -8, 4, 0, -4, -6, 6, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-b";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -8, -4, 0, -6, -2, -8, 4, 0, -8, 6, -10, 6, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-c";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -8, 4, 0, 6, 2, -8, 4, 0, 8, 6, 10, -6, 4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-d";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 2, 8, -8, 6, -2, -8, -4, 0, -4, 6, -6, -12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-e";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 0, 0, -6, 2, 4, 12, 8, 0, -6, -6, 10, 12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-f";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, 0, 0, 6, -2, 4, 12, -8, 0, -6, 6, -10, 12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-g";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 0, 0, -6, 2, -4, -12, -8, 0, -6, -6, 10, -12, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-h";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, 0, 0, 6, -2, -4, -12, 8, 0, -6, 6, -10, -12, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-i";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, -2, -8, -8, 6, 2, 8, 4, 0, -4, 6, -6, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-j";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 8, 4, 0, -6, -2, 8, -4, 0, 8, 6, -10, 6, -4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-k";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 8, -4, 0, 6, 2, 8, -4, 0, -8, 6, 10, -6, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 480.2-l";
N := (-4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, 2, 8, 8, -6, 2, 8, -4, 0, -4, -6, 6, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 482.1-a";
N := (9*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 4, 6, 8, 8, 0, 4, -6, 4, 0, 12, -10, -14, 6, -2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 482.1-b";
N := (9*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 4, 6, -8, -8, 0, -4, -6, 4, 0, -12, -10, 14, -6, -2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 482.2-a";
N := (9*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 6, 4, 8, 8, 4, 0, 4, -6, 12, 0, -10, 6, -14, -2, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 482.2-b";
N := (9*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 6, 4, -8, -8, -4, 0, 4, -6, -12, 0, -10, -6, 14, -2, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-a";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 8, 8, 3, 3, 0, 0, -10, -10, 0, 0, -10, 6, 6, -1, -1, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-b";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -3, 8, 8, -3, -3, 0, 0, -10, -10, 0, 0, -10, -6, -6, -1, -1, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.1-a";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, -7, -6, -5, 2, -3, 4, -11, -7, 12, -13, 1, -2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.1-b";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 2, 2, -3, 6, 0, -9, -1, 8, 6, -3, -6, -6, 14, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.1-c";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, -7, 6, 5, -2, 3, 4, -11, 7, -12, 13, -1, -2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.1-d";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 2, 3, -6, 0, 9, -1, 8, -6, 3, 6, 6, 14, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.1-e";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, -2, -5, -6, 0, -3, -1, -8, 6, -5, 10, 6, 2, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.1-f";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -6, 2, -3, 2, -8, -9, 7, -8, 10, 3, -14, 2, -2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.1-g";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -6, -2, 5, 6, 0, 3, -1, -8, -6, 5, -10, -6, 2, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.1-h";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -6, 2, 3, -2, 8, 9, 7, -8, -10, -3, 14, -2, -2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.2-a";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -7, 0, -5, -6, -3, 2, -11, 4, 12, -7, 1, -13, -2, -2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.2-b";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 2, 2, 6, -3, -9, 0, 8, -1, -3, 6, -6, -6, 14, 14, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.2-c";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -7, 0, 5, 6, 3, -2, -11, 4, -12, 7, -1, 13, -2, -2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.2-d";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 2, -6, 3, 9, 0, 8, -1, 3, -6, 6, 6, 14, 14, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.2-e";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -6, -6, -5, -3, 0, -8, -1, -5, 6, 6, 10, -10, 2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.2-f";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 2, -6, 2, -3, -9, -8, -8, 7, 3, 10, 2, -14, -2, -2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.2-g";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -6, 6, 5, 3, 0, -8, -1, 5, -6, -6, -10, -10, 2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 490.2-h";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 2, -6, -2, 3, 9, 8, -8, 7, -3, -10, -2, 14, -2, -2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 500.1-a";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, 0, 6, 0, 6, -1, 5, 6, 6, 5, 6, -12, -4, -1, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 500.1-b";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 0, 0, 6, 6, -4, 4, 12, -12, -14, -6, 6, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 500.1-c";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, 0, -6, 0, -6, -1, 5, -6, -6, 5, -6, 12, -4, -1, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 500.1-d";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 0, 0, -6, -6, -4, 4, -12, 12, -14, 6, -6, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 500.2-a";
N := (-10*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 6, 0, 6, 0, 5, -1, 6, 6, 5, -12, 6, -1, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 500.2-b";
N := (-10*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 0, 0, 6, 6, 4, -4, -12, 12, -14, 6, -6, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 500.2-c";
N := (-10*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -6, 0, -6, 0, 5, -1, -6, -6, 5, 12, -6, -1, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 500.2-d";
N := (-10*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 0, 0, -6, -6, 4, -4, 12, -12, -14, -6, 6, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 505.2-a";
N := (-2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, -4, 5, -3, 6, 6, -9, -1, -10, 12, 0, 14, 9, 9, -7, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 505.2-b";
N := (-2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, -4, 5, 3, -6, -6, 9, -1, -10, -12, 0, 14, -9, -9, -7, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 505.3-a";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 5, -4, 6, -3, -9, 6, -10, -1, 0, 12, 14, 9, 9, -4, -7, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 505.3-b";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 5, -4, -6, 3, 9, -6, -10, -1, 0, -12, 14, -9, -9, -4, -7, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-a";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -3, -6, 9, 0, 5, 2, 9, -6, -6, 6, 2, 9, -6, -2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-b";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, -6, -3, 0, 9, 2, 5, -6, 9, 6, -6, 2, -6, 9, 4, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-c";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 0, 0, 0, 0, 10, 10, -12, -12, 0, 0, 2, -6, -6, -8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-d";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 0, 0, 0, 0, -10, -10, -12, -12, 0, 0, 2, 6, 6, -8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-e";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 1, -6, -3, 0, -9, -2, -5, -6, 9, -6, 6, 2, 6, -9, 4, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-f";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -3, -6, -9, 0, -5, -2, 9, -6, 6, -6, 2, -9, 6, -2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 513.1-a";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 2, 6, 3, 6, 0, -1, 8, 3, -6, 5, -3, 6, -4, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 513.1-b";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, 2, -6, -3, -6, 0, -1, 8, -3, 6, 5, 3, -6, -4, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 513.2-a";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 0, 2, 3, 6, 0, 6, 8, -1, -6, 3, 5, 6, -3, -13, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 513.2-b";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 2, -3, -6, 0, -6, 8, -1, 6, -3, 5, -6, 3, -13, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.1-a";
N := (8*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 6, 0, -6, -6, -4, 6, 0, -10, 12, -6, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.1-b";
N := (8*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, -6, 0, 6, 6, -4, -6, 0, -10, -12, 6, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.2-a";
N := (-8*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 0, 6, -6, -6, -4, 0, 6, -10, -6, 12, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.2-b";
N := (-8*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 0, -6, 6, 6, -4, 0, -6, -10, 6, -12, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-a";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 2, 0, -8, 4, 8, -2, 0, 6, 6, -6, 10, 8, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-b";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 2, -3, -1, -4, -1, 1, 0, 6, -3, -6, -7, 5, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-c";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 2, 3, 1, 4, -1, 1, 0, -6, -3, 6, 7, 5, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-d";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 2, 0, 8, -4, 8, -2, 0, -6, 6, 6, -10, 8, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-e";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -4, -3, -1, 0, -7, -11, -8, 2, -5, 12, -11, -5, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-f";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -4, 3, 1, 0, -7, -11, 8, -2, -5, -12, 11, -5, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-a";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 0, -8, 0, 4, -2, 8, 6, 0, 6, 10, -6, -12, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-b";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 1, 2, 6, -1, -3, -4, 1, -1, 6, 0, -3, -7, -6, 0, 5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-c";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, 2, 6, 1, 3, 4, 1, -1, -6, 0, -3, 7, 6, 0, 5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-d";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 0, 8, 0, -4, -2, 8, -6, 0, 6, -10, 6, -12, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-e";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 2, -1, -3, 0, -11, -7, 2, -8, -5, -11, 12, -14, -5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-f";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, 2, 1, 3, 0, -11, -7, -2, 8, -5, 11, -12, -14, -5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.1-a";
N := (-5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, -3, -2, -3, -3, 1, 12, -8, 3, -4, 1, -4, -6, -12, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.1-b";
N := (-5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 0, -3, 2, 3, 3, -1, 12, -8, -3, 4, 1, 4, 6, -12, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.1-c";
N := (-5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, -6, 3, -1, 3, -6, -4, 0, -8, -6, 1, -2, -2, 3, -6, -11, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.1-d";
N := (-5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 0, 5, -6, 7, -1, 5, -8, -8, -1, 12, -9, 4, -6, 4, -16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.1-e";
N := (-5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, -6, 3, 1, -3, 6, 4, 0, -8, 6, -1, -2, 2, -3, -6, -11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.1-f";
N := (-5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 0, 5, 6, -7, 1, -5, -8, -8, 1, -12, -9, -4, 6, 4, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-a";
N := (5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -3, 0, -3, -2, 1, -3, -8, 12, -4, 3, 1, -6, -4, -8, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-b";
N := (5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -3, 0, 3, 2, -1, 3, -8, 12, 4, -3, 1, 6, 4, -8, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-c";
N := (5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 3, -6, 3, -1, -4, -6, -8, 0, 1, -6, -2, 3, -2, -11, -6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-d";
N := (5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 5, 0, 7, -6, 5, -1, -8, -8, 12, -1, -9, -6, 4, -16, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-e";
N := (5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 3, -6, -3, 1, 4, 6, -8, 0, -1, 6, -2, -3, 2, -11, -6, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-f";
N := (5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 5, 0, -7, 6, -5, 1, -8, -8, -12, 1, -9, 6, -4, -16, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-a";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 4, -2, -2, 0, 0, -6, -6, 0, 0, 6, 12, 12, 2, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-b";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, -4, -2, -2, 0, 0, -6, -6, 0, 0, 6, -12, -12, 2, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.2-a";
N := (-4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 1, 4, 0, 4, 5, 2, 0, 4, 12, -8, 11, -3, -6, -8, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.2-b";
N := (-4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 2, -4, -6, -8, -4, 8, 0, 10, 0, -8, 10, -6, -12, -2, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.2-c";
N := (-4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, -1, -4, 0, 4, 5, 2, 0, 4, 12, -8, -11, 3, -6, -8, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.2-d";
N := (-4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 1, -4, 0, -4, -5, -2, 0, 4, -12, 8, -11, -3, 6, -8, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.2-e";
N := (-4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 0, -2, 2, 0, 0, 0, 10, -10, 0, 0, -14, 0, 0, 14, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.2-f";
N := (-4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -2, -4, -6, 8, 4, -8, 0, 10, 0, 8, 10, 6, 12, -2, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.2-g";
N := (-4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, -1, 4, 0, -4, -5, -2, 0, 4, -12, 8, 11, 3, 6, -8, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.3-a";
N := (4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -3, 0, 4, 4, 2, 5, 4, 0, -8, 12, 11, -6, -3, -12, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.3-b";
N := (4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 0, -6, -4, -8, 8, -4, 10, 0, -8, 0, 10, -12, -6, 12, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.3-c";
N := (4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -3, 0, -4, 4, 2, 5, 4, 0, -8, 12, -11, -6, 3, 12, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.3-d";
N := (4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, 3, 0, -4, -4, -2, -5, 4, 0, 8, -12, -11, 6, -3, 12, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.3-e";
N := (4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 0, 2, -2, 0, 0, 0, -10, 10, 0, 0, -14, 0, 0, -14, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.3-f";
N := (4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 0, -6, -4, 8, -8, 4, 10, 0, 8, 0, 10, 12, 6, 12, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.3-g";
N := (4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 3, 0, 4, -4, -2, -5, 4, 0, 8, -12, 11, 6, 3, -12, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 530.1-a";
N := (13*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -5, -8, 3, 5, 0, 0, -11, -10, 12, -13, -6, 11, 0, -2, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 530.1-b";
N := (13*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -5, -8, -3, -5, 0, 0, -11, -10, -12, 13, -6, -11, 0, -2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 530.1-c";
N := (13*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -5, 0, 1, 3, -8, 4, 1, 6, 4, 9, 10, 9, -4, -14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 530.1-d";
N := (13*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -5, 0, -1, -3, 8, -4, 1, 6, -4, -9, 10, -9, -4, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 530.4-a";
N := (13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -8, -5, 5, 3, 0, 0, -10, -11, -13, 12, -6, 11, -2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 530.4-b";
N := (13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -8, -5, -5, -3, 0, 0, -10, -11, 13, -12, -6, -11, -2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 530.4-c";
N := (13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, -5, 3, 1, 4, -8, 6, 1, 9, 4, 10, 9, -14, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 530.4-d";
N := (13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -5, -3, -1, -4, 8, 6, 1, -9, -4, 10, -9, -14, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.1-a";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 2, 1, -2, 7, 0, 0, 6, -8, -2, -1, -3, -4, -10, 3, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.1-b";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 2, 1, 2, -7, 0, 0, 6, -8, 2, 1, -3, 4, 10, 3, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.2-a";
N := (10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 1, 1, 2, 7, -2, 0, 0, -8, 6, -1, -2, -3, -10, -4, 3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.2-b";
N := (10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, 1, 2, -7, 2, 0, 0, -8, 6, 1, 2, -3, 10, 4, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 538.1-a";
N := (-9*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 3, -4, -7, -6, -6, -3, 3, -1, 8, 6, 6, 8, 6, -6, -7, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 538.1-b";
N := (-9*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -3, -4, -7, 6, 6, 3, -3, -1, 8, -6, -6, 8, -6, 6, -7, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 538.2-a";
N := (9*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, -7, -4, -6, -6, 3, -3, 8, -1, 6, 6, 8, -6, 6, -10, -7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 538.2-b";
N := (9*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, -7, -4, 6, 6, -3, 3, 8, -1, -6, -6, 8, 6, -6, -10, -7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.1-a";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -4, 1, 3, -10, -5, 7, -6, 6, -6, 2, -10, -4, 3, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.1-b";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -4, -1, -3, 10, 5, 7, -6, -6, 6, 2, 10, 4, 3, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.1-c";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -1, 1, 2, -9, 1, 8, -10, 4, -12, -12, 6, -11, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.1-d";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -1, 3, 0, 3, 0, -1, 8, 3, 3, 8, 6, 0, -4, -10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.1-e";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 1, -1, -2, 9, 1, 8, 10, -4, -12, 12, -6, -11, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.1-f";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -1, -3, 0, -3, 0, -1, 8, -3, -3, 8, -6, 0, -4, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.1-g";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, -3, 3, 6, -3, -7, -4, -6, 0, 8, 0, 6, 5, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.1-h";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, 3, -3, -6, 3, -7, -4, 6, 0, 8, 0, -6, 5, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.1-i";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 8, 3, 9, -6, 9, -1, -10, -6, -6, -10, 6, 0, -13, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.1-j";
N := (-12*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 8, -3, -9, 6, -9, -1, -10, 6, 6, -10, -6, 0, -13, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.2-a";
N := (-12*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, 3, 1, -5, -10, -6, 7, -6, 6, 2, -4, -10, -4, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.2-b";
N := (-12*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, -3, -1, 5, 10, -6, 7, 6, -6, 2, 4, 10, -4, 3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.2-c";
N := (-12*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 1, -1, -9, 2, 8, 1, 4, -10, -12, 6, -12, -10, -11, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.2-d";
N := (-12*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 2, 0, 3, 0, 3, 8, -1, 3, 3, 8, 0, 6, -10, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.2-e";
N := (-12*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -1, 1, 9, -2, 8, 1, -4, 10, -12, -6, 12, -10, -11, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.2-f";
N := (-12*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 2, 0, -3, 0, -3, 8, -1, -3, -3, 8, 0, -6, -10, -4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.2-g";
N := (-12*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, 3, -3, -3, 6, -4, -7, 0, -6, 8, 6, 0, 2, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.2-h";
N := (-12*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, -3, 3, 3, -6, -4, -7, 0, 6, 8, -6, 0, 2, 5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.2-i";
N := (-12*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 8, 2, 9, 3, 9, -6, -10, -1, -6, -6, -10, 0, 6, 8, -13, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 540.2-j";
N := (-12*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 8, 2, -9, -3, -9, 6, -10, -1, 6, 6, -10, 0, -6, 8, -13, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 552.1-a";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 6, -2, 0, -1, 1, -9, 5, 4, -1, -4, 14, -6, -5, -7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 552.1-b";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 8, -4, 6, 2, 12, 0, 12, -8, -10, -2, -6, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 552.1-c";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 8, 4, -6, -2, 12, 0, -12, 8, -10, 2, 6, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 552.1-d";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 6, -2, 0, 1, -1, -9, 5, -4, 1, -4, -14, 6, -5, -7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 552.2-a";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 3, -2, 6, 0, 1, -1, 5, -9, -1, 4, -4, -6, 14, -7, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 552.2-b";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 8, 4, -4, 2, 6, 0, 12, -8, 12, -10, -6, -2, 4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 552.2-c";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 8, 4, 4, -2, -6, 0, 12, 8, -12, -10, 6, 2, 4, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 552.2-d";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -3, -2, 6, 0, -1, 1, 5, -9, 1, -4, -4, 6, -14, -7, -5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 568.1-a";
N := (-6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -4, -8, 0, 0, -4, 4, -2, 6, 0, -8, -10, -2, 12, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 568.1-b";
N := (-6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -4, -8, 0, 0, 4, -4, -2, 6, 0, 8, -10, 2, -12, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 568.2-a";
N := (6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -8, -4, 0, 0, 4, -4, 6, -2, -8, 0, -10, 12, -2, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 568.2-b";
N := (6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -8, -4, 0, 0, -4, 4, 6, -2, 8, 0, -10, -12, 2, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-a";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -8, -4, 6, 2, -4, 4, -8, -4, 6, 6, -6, 8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-b";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, 8, 8, -6, 8, -8, 12, 0, -10, -4, -4, -4, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-c";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 2, 6, -10, -12, -4, 0, -2, -8, 2, 12, 2, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-d";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -6, 0, 0, -9, -1, -1, 6, 12, -4, 6, 0, 5, 14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-e";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, -2, 4, 4, 3, 1, -1, -2, 4, -4, -6, -4, 3, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-f";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 6, -6, -6, 8, 8, 0, 6, -4, 6, 0, 14, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-g";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 0, -8, -8, 6, 8, -8, -12, 0, -10, 4, 4, -4, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-h";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -6, 6, 6, 8, 8, 0, -6, -4, -6, 0, 14, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-i";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 8, 4, -6, -2, -4, 4, 8, 4, 6, -6, 6, 8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-j";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 6, 0, 0, 9, -1, -1, -6, -12, -4, -6, 0, 5, 14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-k";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -2, -6, 10, -12, -4, 0, 2, -8, -2, -12, 2, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.1-l";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 2, -4, -4, -3, 1, -1, 2, -4, -4, 6, 4, 3, 2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-a";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 8, 4, -2, 6, -4, -4, 12, 8, 2, 2, -14, 0, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-b";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 8, 0, -4, -10, -11, -2, -4, -9, 12, -3, -7, -5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-c";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, -1, 8, -9, 1, 11, -13, 13, -8, -8, 6, 10, 11, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-d";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, 6, 6, -6, 8, 8, 6, 0, 2, 0, 0, -10, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-e";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 4, -8, 0, -2, -1, -2, -4, -11, -4, 3, 1, -13, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-f";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 8, 0, -2, -2, 6, -8, -4, -2, 8, 10, -4, 0, -2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-g";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 8, 0, 2, 2, -6, -8, -4, 2, -8, 10, 4, 0, -2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-h";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -4, 8, 0, -2, -1, 2, 4, -11, 4, -3, 1, -13, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-i";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, -6, -6, 6, 8, 8, -6, 0, 2, 0, 0, -10, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-j";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 1, -8, 9, 1, 11, 13, -13, -8, 8, -6, 10, 11, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-k";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, -8, 0, 4, -10, -11, 2, 4, -9, -12, 3, -7, -5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.2-l";
N := (-11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -8, -4, 2, -6, -4, -4, -12, -8, 2, -2, 14, 0, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-a";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, -8, 2, 6, 4, -4, -4, -8, 6, -6, 6, -8, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-b";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 8, 0, -6, 8, -8, 8, 0, 12, -10, -4, -4, -10, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-c";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -4, -10, 6, -4, -12, -2, 0, -8, 12, 2, -4, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-d";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, -6, -9, 0, -1, -1, 12, 6, -4, 0, 6, 14, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-e";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 4, -2, 3, 4, -1, 1, 4, -2, -4, -4, -6, 2, 3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-f";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, 0, -6, -6, 8, 8, 6, 0, -4, 0, 6, -4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-g";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -8, 0, 6, -8, -8, 8, 0, -12, -10, 4, 4, -10, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-h";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 0, 6, 6, 8, 8, -6, 0, -4, 0, -6, -4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-i";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 8, -2, -6, 4, -4, 4, 8, 6, 6, -6, -8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-j";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, 6, 9, 0, -1, -1, -12, -6, -4, 0, -6, 14, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-k";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, 10, -6, -4, -12, 2, 0, -8, -12, -2, -4, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.4-l";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, -4, 2, -3, -4, -1, 1, -4, 2, -4, 4, 6, 2, 3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-a";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 8, 6, -2, -4, -4, 8, 12, 2, -14, 2, -4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-b";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 8, 4, -4, 0, -11, -10, -4, -2, -9, -3, 12, -5, -7, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-c";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -1, 3, -9, 8, 11, 1, 13, -13, -8, 6, -8, 11, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-d";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 6, 0, -6, 6, 8, 8, 0, 6, 2, 0, 0, 8, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-e";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, 0, 0, -8, -1, -2, -4, -2, -11, 3, -4, -13, 1, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-f";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 8, -2, 0, 6, -2, -4, -8, 8, -2, 10, 0, -4, 8, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-g";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 8, 2, 0, -6, 2, -4, -8, -8, 2, 10, 0, 4, 8, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-h";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, 0, 0, 8, -1, -2, 4, 2, -11, -3, 4, -13, 1, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-i";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -6, 0, 6, -6, 8, 8, 0, -6, 2, 0, 0, 8, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-j";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, -3, 9, -8, 11, 1, -13, 13, -8, -6, 8, 11, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-k";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -8, -4, 4, 0, -11, -10, 4, 2, -9, 3, -12, -5, -7, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 570.3-l";
N := (11*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -8, -6, 2, -4, -4, -8, -12, 2, 14, -2, -4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.1-a";
N := (-13*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -4, -8, 4, 8, -2, 6, -10, 4, 12, 6, -8, -6, -6, 8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.1-b";
N := (-13*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -4, -8, -4, -8, 2, -6, -10, 4, -12, -6, -8, 6, 6, 8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.2-a";
N := (13*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -8, -4, 8, 4, 6, -2, 4, -10, 6, 12, -8, -6, -6, -12, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.2-b";
N := (13*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -8, -4, -8, -4, -6, 2, 4, -10, -6, -12, -8, 6, 6, -12, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.1-a";
N := (-10*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 4, -4, -4, 0, 0, -4, -6, -6, 2, 6, -12, -4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.1-b";
N := (-10*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 4, 4, 4, 0, 0, -4, 6, 6, 2, -6, 12, -4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.3-a";
N := (-16*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, -4, 5, -9, -9, 6, 8, -4, 3, -3, -4, -6, 3, -4, 14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.3-b";
N := (-16*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 2, 0, -4, 4, 8, 6, 4, 12, 4, -2, 6, 12, 8, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.3-c";
N := (-16*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 2, 0, 4, -4, -8, 6, 4, -12, -4, -2, -6, -12, 8, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.3-d";
N := (-16*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, -4, 5, 9, 9, -6, 8, -4, -3, 3, -4, 6, -3, -4, 14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.4-a";
N := (12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 4, -2, 0, 6, -6, 8, -2, 12, 0, -2, -12, -6, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.4-b";
N := (12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 0, -4, -4, -8, -6, -4, 12, 4, -2, 6, 12, -8, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.4-c";
N := (12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 0, 4, 4, 8, -6, -4, -12, -4, -2, -6, -12, -8, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.4-d";
N := (12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 2, 6, -4, 2, 10, 6, 2, 0, 4, 10, 6, 6, 10, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.4-e";
N := (12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 4, -2, 0, -6, 6, 8, -2, -12, 0, -2, 12, 6, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.4-f";
N := (12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, 6, 4, -2, -10, 6, 2, 0, -4, 10, -6, -6, 10, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.2-a";
N := (10*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, 2, -4, 0, -4, -4, 0, -6, -6, 2, -12, 6, -8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.2-b";
N := (10*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 2, 4, 0, 4, -4, 0, 6, 6, 2, 12, -6, -8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.6-a";
N := (16*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, 5, -4, -9, 6, -9, -4, 8, -3, 3, -4, 3, -6, 14, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.6-b";
N := (16*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 0, 2, -4, 8, 4, 4, 6, 4, 12, -2, 12, 6, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.6-c";
N := (16*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, 2, 4, -8, -4, 4, 6, -4, -12, -2, -12, -6, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.6-d";
N := (16*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, 5, -4, 9, -6, 9, -4, 8, 3, -3, -4, -3, 6, 14, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.5-a";
N := (-12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -2, 4, 0, -6, 6, -2, 8, 0, 12, -2, -6, -12, 4, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.5-b";
N := (-12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 0, 2, -4, -8, -4, -4, -6, 4, 12, -2, 12, 6, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.5-c";
N := (-12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 0, 2, 4, 8, 4, -4, -6, -4, -12, -2, -12, -6, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.5-d";
N := (-12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 6, 2, -4, 10, 2, 2, 6, 4, 0, 10, 6, 6, 6, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.5-e";
N := (-12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -2, 4, 0, 6, -6, -2, 8, 0, -12, -2, 6, 12, 4, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.5-f";
N := (-12*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 6, 2, 4, -10, -2, 2, 6, -4, 0, 10, -6, -6, 6, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-a";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, -1, -1, 0, -6, -6, -6, 8, -1, 0, -3, -10, 9, -12, 2, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-b";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -1, -1, 6, 0, 6, 6, -1, 8, 3, 0, -10, 12, -9, 2, 2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-c";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -4, -4, 0, 0, 0, 0, 8, 8, 0, 0, 2, -6, -6, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-d";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -4, -4, 0, 0, 0, 0, 8, 8, 0, 0, 2, 6, 6, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-e";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, -1, -1, -6, 0, -6, -6, -1, 8, -3, 0, -10, -12, 9, 2, 2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-f";
N := (-17*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, -1, -1, 0, 6, 6, 6, 8, -1, 0, 3, -10, -9, 12, 2, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 579.1-a";
N := (5*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -4, 2, 6, 6, -2, 6, 8, -8, 2, 12, 2, 6, 6, 2, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 579.1-b";
N := (5*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -4, 2, -6, -6, 2, -6, 8, -8, -2, -12, 2, -6, -6, 2, -2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 579.2-a";
N := (5*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 2, -4, 6, 6, 6, -2, -8, 8, 12, 2, 2, 6, 6, -2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 579.2-b";
N := (5*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 2, -4, -6, -6, -6, 2, -8, 8, -12, -2, 2, -6, -6, -2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 584.1-a";
N := (-10*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 6, 6, 4, 8, -4, 6, -6, 4, -12, 0, -2, -10, -12, -2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 584.1-b";
N := (-10*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 6, 6, -4, -8, 4, -6, -6, 4, 12, 0, -2, 10, 12, -2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 584.2-a";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 6, 6, 8, 4, 6, -4, 4, -6, 0, -12, -2, -12, -10, 2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 584.2-b";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 6, 6, -8, -4, -6, 4, 4, -6, 0, 12, -2, 12, 10, 2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.1-a";
N := (-13*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, -3, 1, -6, -2, 2, 0, 11, 10, 0, -10, -11, -1, 6, 2, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.1-b";
N := (-13*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, -3, 1, 6, 2, -2, 0, 11, 10, 0, 10, -11, 1, -6, 2, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.2-a";
N := (-13*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, 1, -3, -2, -6, 0, 2, 10, 11, -10, 0, -11, 6, -1, 4, 2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.2-b";
N := (-13*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 1, -3, 2, 6, 0, -2, 10, 11, 10, 0, -11, -6, 1, 4, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-a";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, -6, -6, 6, 6, -4, -4, 12, 12, -6, -6, 8, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-b";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -4, -4, -2, -2, 2, 2, -4, -4, -12, -12, 6, 6, -8, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-c";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -4, -4, 2, 2, -2, -2, -4, -4, 12, 12, -6, -6, -8, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-d";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 6, 6, -6, -6, -4, -4, -12, -12, 6, 6, 8, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 591.1-a";
N := (10*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, -1, -4, 6, 3, -6, -3, 11, 11, -3, -6, 5, 6, 3, -4, 5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 591.1-b";
N := (10*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -3, -1, -4, -6, -3, 6, 3, 11, 11, 3, 6, 5, -6, -3, -4, 5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 591.2-a";
N := (10*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, -4, -1, 3, 6, -3, -6, 11, 11, -6, -3, 5, 3, 6, 5, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 591.2-b";
N := (10*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -3, -4, -1, -3, -6, 3, 6, 11, 11, 6, 3, 5, -3, -6, 5, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-a";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -8, -8, -6, -6, -4, -4, 8, 8, 2, 10, 10, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-b";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 8, 0, 4, -2, 10, -4, 8, 8, 8, -10, 6, 6, 4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-c";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -8, 8, 2, 2, -12, 4, 0, 0, 2, -6, 10, -4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-d";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, 0, -2, 6, -4, 4, -8, 8, 2, -2, 6, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-e";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 8, 0, -4, 2, -10, -4, 8, -8, -8, -10, -6, -6, 4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-f";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, 0, 2, -6, -4, 4, 8, -8, 2, 2, -6, 4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-g";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 8, -8, -2, -2, -12, 4, 0, 0, 2, 6, -10, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-h";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 8, 8, 6, 6, -4, -4, -8, -8, 2, -10, -10, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-i";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [8, 0, -4, 0, -10, 2, 8, -4, -8, -8, -10, -6, -6, -12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-j";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -8, 8, -2, -2, 4, -12, 0, 0, 2, -10, 6, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-k";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 0, 0, -6, 2, 4, -4, -8, 8, 2, -6, 2, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-l";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 0, 0, 6, -2, 4, -4, 8, -8, 2, 6, -2, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-m";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 8, -8, 2, 2, 4, -12, 0, 0, 2, 10, -6, -4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-n";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [8, 0, 4, 0, 10, -2, 8, -4, 8, 8, -10, 6, 6, -12, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-o";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 0, 2, 2, 12, 12, -8, -8, -14, -6, -6, 4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-p";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 0, -2, -2, 12, 12, 8, 8, -14, 6, 6, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-a";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -4, 4, -4, 4, 8, -4, 12, -4, -12, -2, -4, 0, -12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-b";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 4, 6, -2, 4, 8, -6, -8, 4, -12, 10, 14, -4, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-c";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -4, -4, 4, 2, -2, -4, 0, -8, 0, 10, 10, -6, 12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-d";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, -4, -6, 2, -4, 8, -6, 8, -4, -12, -10, -14, -4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-e";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 3, 4, 3, 1, -2, 5, -6, 1, 1, -6, 7, -4, 11, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-f";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, -4, 4, -4, -2, 2, -4, 0, 8, 0, 10, -10, 6, 12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-g";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 1, 4, -9, -1, -2, 1, 2, -9, 3, -2, 1, 0, 3, 14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-h";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 2, 0, 2, 2, 4, 4, -8, 12, -8, 2, -2, 8, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-i";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 1, -4, 9, 1, 2, 1, 2, 9, -3, -2, -1, 0, 3, 14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-j";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 4, -4, 8, 4, -12, 4, 12, 4, -2, 0, 4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-k";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -2, 0, -2, -2, 4, 4, 8, -12, -8, -2, 2, 8, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-l";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -4, -4, 4, -4, -8, -4, 12, 4, 12, -2, 4, 0, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-m";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, -4, 4, -8, -4, -12, 4, -12, -4, -2, 0, -4, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-n";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 8, -4, -8, -10, -2, -4, -12, -8, 0, -2, -2, 6, -12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-o";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 8, 4, 8, 10, 2, -4, -12, 8, 0, -2, 2, -6, -12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-p";
N := (-14*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 3, -4, -3, -1, 2, 5, -6, -1, -1, -6, -7, 4, 11, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-a";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 4, -4, 4, 8, 4, 12, -4, -12, -4, -2, 0, -4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-b";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 6, 4, 4, -2, -6, 8, 4, -8, -12, 14, 10, -8, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-c";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -8, 4, -4, -2, 2, 0, -4, 0, -8, 10, -6, 10, -8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-d";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, -6, -4, -4, 2, -6, 8, -4, 8, -12, -14, -10, -8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-e";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 0, 3, 4, -2, 1, -6, 5, 1, 1, -6, -4, 7, -2, 11, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-f";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -8, -4, 4, 2, -2, 0, -4, 0, 8, 10, 6, -10, -8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-g";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -9, 4, -2, -1, 2, 1, 3, -9, -2, 0, 1, 14, 3, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-h";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 0, 2, 2, 2, 4, 4, 12, -8, -8, -2, 2, 2, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-i";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 9, -4, 2, 1, 2, 1, -3, 9, -2, 0, -1, 14, 3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-j";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, -4, 4, 4, 8, 4, -12, 4, 12, -2, 4, 0, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-k";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 0, -2, -2, -2, 4, 4, -12, 8, -8, 2, -2, 2, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-l";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 4, 4, -4, -8, -4, 12, -4, 12, 4, -2, 0, 4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-m";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, 4, -4, -4, -8, 4, -12, -4, -12, -2, -4, 0, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-n";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, 4, -8, -4, -2, -10, -12, -4, 0, -8, -2, 6, -2, -8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-o";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 4, 8, 4, 2, 10, -12, -4, 0, 8, -2, -6, 2, -8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.3-p";
N := (-14*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 0, -3, -4, 2, -1, -6, 5, -1, -1, -6, 4, -7, -2, 11, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.1-a";
N := (9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 1, 3, 7, 1, -6, 1, -6, -10, 1, -3, -2, 4, 3, -9, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.1-b";
N := (9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, 0, 4, -2, 0, -8, 6, 8, 4, -6, -8, 4, 0, 6, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.1-c";
N := (9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, 3, 7, -1, 6, -1, 6, -10, 1, 3, 2, 4, -3, 9, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.1-d";
N := (9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 0, 4, 2, 0, 8, -6, 8, 4, 6, 8, 4, 0, -6, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.2-a";
N := (-9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 7, 3, -6, 1, -6, 1, 1, -10, -2, -3, 4, -9, 3, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.2-b";
N := (-9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 4, 0, 0, -2, 6, -8, 4, 8, -8, -6, 4, 6, 0, 2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.2-c";
N := (-9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 7, 3, 6, -1, 6, -1, 1, -10, 2, 3, 4, 9, -3, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.2-d";
N := (-9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 4, 0, 0, 2, -6, 8, 4, 8, 8, 6, 4, -6, 0, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.1-a";
N := (-15*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, 2, 7, 3, 5, -2, 3, -2, -3, -7, -6, 2, -6, 0, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.1-b";
N := (-15*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 3, 0, -5, -5, 5, 8, -5, 6, -11, -3, -4, 6, 6, 12, -2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.1-c";
N := (-15*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -3, 0, -5, 5, -5, -8, -5, 6, 11, 3, -4, -6, -6, 12, -2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.1-d";
N := (-15*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, 2, 7, -3, -5, 2, 3, -2, 3, 7, -6, -2, 6, 0, 8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.2-a";
N := (15*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 2, 7, 2, 3, -2, 5, -2, 3, -7, -3, -6, -6, 2, 8, 0, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.2-b";
N := (15*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, -5, 0, -5, 8, 5, 6, -5, -3, -11, -4, 6, 6, -2, 12, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.2-c";
N := (15*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, -5, 0, 5, -8, -5, 6, -5, 3, 11, -4, -6, -6, -2, 12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.2-d";
N := (15*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, 7, 2, -3, 2, -5, -2, 3, 7, 3, -6, 6, -2, 8, 0, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-a";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 7, -8, 0, 0, 0, 0, 5, -5, 0, 0, -11, 0, 0, 11, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-b";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 2, 0, 0, 0, 0, 10, 10, 0, 0, 14, 0, 0, -14, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-c";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, 0, 4, 4, 0, 0, 1, -9, 8, -12, 5, 4, 4, 7, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-d";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 1, 0, 0, 0, 0, 5, -5, 0, 0, -11, 0, 0, 5, -5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-e";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -5, 4, 4, 0, 0, -9, 1, -12, 8, 5, 4, 4, -8, 7, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-f";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -5, 0, -4, -4, 0, 0, 1, -9, -8, 12, 5, -4, -4, 7, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-g";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 1, 0, 0, 0, 0, -5, 5, 0, 0, -11, 0, 0, -5, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-h";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, -5, -4, -4, 0, 0, -9, 1, 12, -8, 5, -4, -4, -8, 7, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-i";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -8, 7, 0, 0, 0, 0, -5, 5, 0, 0, -11, 0, 0, 16, 11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 633.1-a";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 5, 5, 4, -6, 0, 0, 4, -6, 8, 3, 10, 9, -6, -2, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 633.1-b";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, 5, 5, -4, 6, 0, 0, 4, -6, -8, -3, 10, -9, 6, -2, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 633.2-a";
N := (4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 1, 5, 5, -6, 4, 0, 0, -6, 4, 3, 8, 10, -6, 9, -12, -2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 633.2-b";
N := (4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -1, 5, 5, 6, -4, 0, 0, -6, 4, -3, -8, 10, 6, -9, -12, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 634.1-a";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 0, 2, -6, -1, 9, 0, 2, 1, 6, -8, -6, 2, 13, 6, -3, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 634.1-b";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, 2, 6, 1, -9, 0, 2, 1, -6, 8, -6, -2, -13, 6, -3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 634.2-a";
N := (-5*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 2, 0, -1, -6, 0, 9, 1, 2, -8, 6, -6, 13, 2, -3, 6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 634.2-b";
N := (-5*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, 2, 0, 1, 6, 0, -9, 1, 2, 8, -6, -6, -13, -2, -3, 6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-a";
N := (-16*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, -1, 0, -6, 2, 4, 8, -5, -1, 8, 13, 1, -14, 3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-b";
N := (-16*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 2, -1, 0, 6, -2, -4, 8, -5, 1, -8, 13, -1, -14, 3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.2-a";
N := (16*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -1, 2, -6, 0, 4, 2, -5, 8, 8, -1, 13, 1, 3, -14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.2-b";
N := (16*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -1, 2, 6, 0, -4, -2, -5, 8, -8, 1, 13, -1, 3, -14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 640.1-a";
N := (8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 6, -1, 6, -1, -2, -9, -8, -7, 1, -8, -8, 3, -5, 4, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 640.1-b";
N := (8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 6, -1, -6, 1, 2, 9, -8, -7, -1, 8, -8, -3, 5, 4, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 640.1-c";
N := (8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -6, 1, -6, 1, -2, -9, 8, 7, -1, 8, -8, 3, -5, -4, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 640.1-d";
N := (8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, 1, 6, -1, 2, 9, 8, 7, 1, -8, -8, -3, 5, -4, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 640.2-a";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, 6, -1, 6, -9, -2, -7, -8, -8, 1, -8, -5, 3, 6, 4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 640.2-b";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 6, 1, -6, 9, 2, -7, -8, 8, -1, -8, 5, -3, 6, 4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 640.2-c";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, -6, 1, -6, -9, -2, 7, 8, 8, -1, -8, -5, 3, -6, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 640.2-d";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -6, -1, 6, 9, 2, 7, 8, -8, 1, -8, 5, -3, -6, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.1-a";
N := (-17*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -4, -8, 8, -6, 2, -4, -8, 8, 2, -6, -6, -12, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.1-b";
N := (-17*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -4, 8, -8, 6, -2, -4, 8, -8, 2, 6, 6, -12, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.1-c";
N := (-17*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, -4, 0, 0, 2, -6, -4, 8, 0, 2, -6, -6, 4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.1-d";
N := (-17*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, -4, 0, 0, -2, 6, -4, -8, 0, 2, 6, 6, 4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.2-a";
N := (11*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 2, -4, -6, -8, 2, 0, 8, 8, -6, 10, 2, 4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.2-b";
N := (11*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, 4, 6, 8, -2, 0, -8, -8, -6, -10, -2, 4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.2-c";
N := (11*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 8, -8, 6, 4, 2, -8, 10, -12, -2, -6, -10, 12, 14, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.2-d";
N := (11*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 8, -8, -6, -4, -2, 8, 10, 12, 2, -6, 10, -12, 14, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.4-a";
N := (17*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -4, 8, -8, 2, -6, -4, 8, -8, 2, -6, -6, 12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.4-b";
N := (17*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -4, -8, 8, -2, 6, -4, -8, 8, 2, 6, 6, 12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.4-c";
N := (17*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 4, 0, 0, -6, 2, -4, 0, 8, 2, -6, -6, -12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.4-d";
N := (17*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 4, 0, 0, 6, -2, -4, 0, -8, 2, 6, 6, -12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.3-a";
N := (11*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, -6, -4, 2, -8, 0, 8, 8, -6, 2, 10, -4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.3-b";
N := (11*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -2, 6, 4, -2, 8, 0, -8, -8, -6, -2, -10, -4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.3-c";
N := (11*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -8, 8, 4, 6, -8, 2, 10, -2, -12, -6, 12, -10, -4, 14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 645.3-d";
N := (11*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -8, 8, -4, -6, 8, -2, 10, 2, 12, -6, -12, 10, -4, 14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-a";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -4, 4, 5, 4, 1, 4, 2, -6, -7, -6, -4, 11, 6, 12, 11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-b";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -4, 4, 4, -4, 2, 2, 8, 0, -8, 0, -1, 1, -3, 0, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-c";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, 2, 2, 2, 6, 6, -2, -2, 6, 6, -5, 5, 5, -10, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-d";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 4, -4, 4, -4, -2, -2, 0, 8, 0, 8, -1, 3, -1, 8, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-e";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -1, -1, 4, 4, 0, 0, -8, -8, -12, -12, -5, -8, -8, 11, 11, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-f";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 4, -4, 4, 5, 4, 1, -6, 2, -6, -7, -4, 6, 11, 11, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-g";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 2, -2, -2, -6, -6, -2, -2, -6, -6, -5, -5, -5, -10, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-h";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -1, -1, -4, -4, 0, 0, -8, -8, 12, 12, -5, 8, 8, 11, 11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-i";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -4, 4, -4, 4, -2, -2, 8, 0, 8, 0, -1, -1, 3, 0, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-j";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -4, 4, -5, -4, -1, -4, 2, -6, 7, 6, -4, -11, -6, 12, 11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-k";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 4, -4, -4, -5, -4, -1, -6, 2, 6, 7, -4, -6, -11, 11, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 648.1-l";
N := (-18*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, -4, -4, 4, 2, 2, 0, 8, 0, -8, -1, -3, 1, 8, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 653.1-a";
N := (-13*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 3, 0, -5, -4, 1, 2, 10, -7, 0, 10, 9, 4, -8, -1, -6, -2, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 653.1-b";
N := (-13*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, 0, -5, -4, -1, -2, -10, 7, 0, 10, -9, -4, -8, 1, 6, -2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 653.2-a";
N := (-13*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 3, -4, -5, 2, 1, -7, 10, 10, 0, 4, 9, -8, -6, -1, -2, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 653.2-b";
N := (-13*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -3, -4, -5, -2, -1, 7, -10, 10, 0, -4, -9, -8, 6, 1, -2, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.1-a";
N := (-12*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -4, 2, 8, 0, 2, 6, 0, 0, -6, -8, -4, 6, 8, 14, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.1-b";
N := (-12*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 5, 2, 4, 6, -2, -3, -9, -9, 0, 2, -10, 12, 4, -10, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.1-c";
N := (-12*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 5, 2, -4, -6, 2, 3, -9, -9, 0, -2, -10, -12, -4, -10, 4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.1-d";
N := (-12*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -4, 2, -8, 0, -2, -6, 0, 0, 6, 8, -4, -6, -8, 14, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.2-a";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 2, -4, 0, 8, 6, 2, 0, 0, -8, -6, -4, 8, 6, -8, 14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.2-b";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 2, 5, 6, 4, -3, -2, -9, -9, 2, 0, -10, 4, 12, 4, -10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.2-c";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 2, 5, -6, -4, 3, 2, -9, -9, -2, 0, -10, -4, -12, 4, -10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.2-d";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 2, -4, 0, -8, -6, -2, 0, 0, 8, 6, -4, -8, -6, -8, 14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 667.2-a";
N := (-13*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, -4, -8, 0, 6, -4, 8, -8, 8, 2, 6, -6, -8, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 667.2-b";
N := (-13*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, -4, -8, 0, -6, -4, 8, 8, -8, 2, -6, 6, -8, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 667.3-a";
N := (13*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 2, -8, -4, 0, 6, 8, -4, 8, -8, 2, -6, 6, 12, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 667.3-b";
N := (13*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -2, -8, -4, 0, -6, 8, -4, -8, 8, 2, 6, -6, 12, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.1-a";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 5, 2, 9, -6, 9, 6, -13, -4, -6, 9, 8, -3, -9, 8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.1-b";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 5, 2, -9, 6, -9, -6, -13, -4, 6, -9, 8, 3, 9, 8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.2-a";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -5, 6, -5, -2, -1, -4, 3, -7, 6, 10, 5, 5, 14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.2-b";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 2, 8, 0, 6, 2, 0, 8, 6, 0, 10, 0, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.2-c";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -5, -6, 5, 2, 1, -4, 3, 7, -6, 10, -5, -5, 14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.2-d";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 2, -8, 0, -6, -2, 0, 8, -6, 0, 10, 0, -2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.2-e";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 0, -1, -2, -9, 6, 7, 12, 11, -3, 6, 10, 9, 1, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.2-f";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 0, -1, 2, 9, -6, -7, 12, 11, 3, -6, 10, -9, -1, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.4-a";
N := (w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 5, -6, 9, 6, 9, -4, -13, 9, -6, 8, -9, -3, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.4-b";
N := (w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 2, 5, 6, -9, -6, -9, -4, -13, -9, 6, 8, 9, 3, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.3-a";
N := (9*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 0, -5, 6, -1, -2, 3, -4, 6, -7, 10, 5, 5, 14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.3-b";
N := (9*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, 0, 8, 2, 6, 8, 0, 0, 6, 10, 2, 0, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.3-c";
N := (9*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, 0, 5, -6, 1, 2, 3, -4, -6, 7, 10, -5, -5, 14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.3-d";
N := (9*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 0, -8, -2, -6, 8, 0, 0, -6, 10, -2, 0, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.3-e";
N := (9*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -1, 0, -9, -2, 7, 6, 11, 12, 6, -3, 10, 1, 9, -2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 670.3-f";
N := (9*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -1, 0, 9, 2, -7, -6, 11, 12, -6, 3, 10, -1, -9, -2, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.1-a";
N := (15*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -1, 6, -1, 3, -4, 2, 9, 9, -5, -1, 6, -6, -2, -2, -2, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.1-b";
N := (15*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 1, 6, -1, -3, 4, -2, -9, 9, -5, 1, -6, -6, 2, 2, -2, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.1-c";
N := (15*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 0, 2, 0, 4, -2, 0, 6, -2, -8, 0, 6, 8, 2, -2, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.1-d";
N := (15*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 1, 2, 7, 5, -4, -2, -1, 1, 3, -7, 6, -2, -6, -10, -14, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.1-e";
N := (15*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 0, 2, 0, -4, 2, 0, 6, -2, 8, 0, 6, -8, -2, -2, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.1-f";
N := (15*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -1, 2, 7, -5, 4, 2, 1, 1, 3, 7, -6, -2, 6, 10, -14, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.1-g";
N := (15*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -6, 5, -9, -4, -6, 7, -5, 9, -5, -2, -2, 6, -2, 10, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.1-h";
N := (15*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -6, 5, 9, 4, 6, -7, -5, 9, 5, 2, -2, -6, 2, 10, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.2-a";
N := (15*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -1, -1, 6, -4, 3, 9, 2, -5, 9, 6, -1, -6, -2, -2, 12, -2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.2-b";
N := (15*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 1, -1, 6, 4, -3, -9, -2, -5, 9, -6, 1, -6, 2, 2, 12, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.2-c";
N := (15*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, 2, 0, 4, 0, 0, -2, -2, 6, 0, -8, 6, 2, 8, 12, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.2-d";
N := (15*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -3, 7, 2, -4, 5, -1, -2, 3, 1, 6, -7, -2, -10, -6, 4, -14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.2-e";
N := (15*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 2, 0, -4, 0, 0, 2, -2, 6, 0, 8, 6, -2, -8, 12, -2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.2-f";
N := (15*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, 7, 2, 4, -5, 1, 2, 3, 1, -6, 7, -2, 10, 6, 4, -14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.2-g";
N := (15*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 5, -6, -4, -9, 7, -6, 9, -5, -2, -5, -2, -2, 6, 12, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 674.2-h";
N := (15*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, 5, -6, 4, 9, -7, 6, 9, -5, 2, 5, -2, 2, -6, 12, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-a";
N := (15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 6, -6, 2, -7, -5, 4, 10, -8, 4, -11, 4, 3, 12, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-b";
N := (15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -6, 6, -2, 7, -5, 4, -10, 8, 4, 11, -4, 3, 12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-c";
N := (15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, -6, 6, -7, 2, 4, -5, -8, 10, 4, 4, -11, 12, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-d";
N := (15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 6, -6, 7, -2, 4, -5, 8, -10, 4, -4, 11, 12, 3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-a";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, -6, -1, -7, -9, 6, 8, -9, 4, 6, -4, 2, -4, 14, 11, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-b";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -2, 3, -3, 3, -6, -8, -1, 12, 6, 4, 6, 12, -14, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-c";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, 0, 1, -5, -6, 3, 2, -12, -7, 0, -10, 4, -11, 2, -7, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-d";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, 0, 1, -5, -6, -3, -2, -12, 7, 0, 10, -4, 11, -2, -7, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-e";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 6, 8, -1, 0, -9, -4, 9, 1, -3, -4, -4, -10, 2, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-f";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -6, 1, 7, 9, -6, 8, -9, -4, -6, -4, -2, 4, 14, 11, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-g";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -2, -3, 3, -3, 6, -8, -1, -12, -6, 4, -6, -12, -14, -13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-h";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, 0, -1, 5, 6, 3, -2, -12, -7, 0, 10, 4, -11, -2, -7, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-i";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 0, -1, 5, 6, -3, 2, -12, 7, 0, -10, -4, 11, 2, -7, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-j";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -5, 6, -8, 1, 0, 9, -4, 9, -1, 3, -4, 4, 10, 2, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-a";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, -2, -7, -1, 6, -9, -9, 8, 6, 4, -4, -4, 2, 11, 14, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-b";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -2, -3, 3, -6, 3, -1, -8, 6, 12, 4, 12, 6, -13, -14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-c";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 1, -5, 1, 3, -6, -12, 2, 0, -7, -10, -11, 4, -7, 2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-d";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -1, -5, 1, -3, -6, -12, -2, 0, 7, 10, 11, -4, -7, -2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-e";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 6, -5, -1, 8, -9, 0, 9, -4, -3, 1, -4, -10, -4, -4, 2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-f";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, -2, 7, 1, -6, 9, -9, 8, -6, -4, -4, 4, -2, 11, 14, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-g";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -2, 3, -3, 6, -3, -1, -8, -6, -12, 4, -12, -6, -13, -14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-h";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -1, 5, -1, 3, 6, -12, -2, 0, -7, 10, -11, 4, -7, -2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-i";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 1, 5, -1, -3, 6, -12, 2, 0, 7, -10, 11, -4, -7, 2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-j";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, -5, 1, -8, 9, 0, 9, -4, 3, -1, -4, 10, 4, -4, 2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-a";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, -6, 8, 8, 2, 2, 4, 4, -2, -2, -10, 6, 6, 10, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-b";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, -6, -8, -8, -2, -2, 4, 4, 2, 2, -10, -6, -6, 10, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-a";
N := (6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -4, 6, 2, 10, -4, -12, 10, -8, -10, 4, -8, 4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-b";
N := (6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 8, 2, 8, -4, -8, 8, -2, -12, -2, 10, -6, 4, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-c";
N := (6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 4, 6, -10, 6, 4, -4, -6, 0, 6, 12, 0, -4, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-d";
N := (6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -8, -2, -8, 4, -8, 8, 2, 12, -2, -10, 6, 4, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-e";
N := (6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -4, -6, 10, -6, 4, -4, 6, 0, 6, -12, 0, -4, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.1-f";
N := (6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 4, -6, -2, -10, -4, -12, -10, 8, -10, -4, 8, 4, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-a";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 6, -4, 10, 2, -12, -4, -8, 10, -10, -8, 4, 4, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-b";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 2, 8, -4, 8, 8, -8, -12, -2, -2, -6, 10, -8, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-c";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 6, 4, 6, -10, -4, 4, 0, -6, 6, 0, 12, 12, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-d";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, -2, -8, 4, -8, 8, -8, 12, 2, -2, 6, -10, -8, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-e";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, -6, -4, -6, 10, -4, 4, 0, 6, 6, 0, -12, 12, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 684.2-f";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -6, 4, -10, -2, -12, -4, 8, -10, -10, 8, -4, 4, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.1-a";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 1, 6, -6, 5, 3, -1, -2, -3, -7, 9, -4, -10, -4, 5, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.1-b";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 2, -4, -5, -5, -1, 2, 1, -13, -7, -8, 2, -6, 3, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.1-c";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, -2, -2, 3, 9, 9, -6, 1, -9, 3, -4, -6, 0, 13, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.1-d";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -1, 5, -7, 2, -2, 10, 4, -5, 10, -5, -5, 9, 3, 2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.1-e";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -1, 5, 7, -2, 2, -10, 4, 5, -10, -5, 5, -9, 3, 2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.1-f";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -1, 6, -6, -5, -3, 1, 2, -3, 7, -9, -4, 10, 4, 5, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.1-g";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, 2, -4, 5, 5, 1, -2, 1, 13, 7, -8, -2, 6, 3, -16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.1-h";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -3, -2, -2, -3, -9, -9, 6, 1, 9, -3, -4, 6, 0, 13, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.2-a";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, -6, 6, 3, 5, -2, -1, -3, 9, -7, -4, -4, -10, -4, 5, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.2-b";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 1, -4, 2, -5, -5, 2, -1, 1, -7, -13, -8, -6, 2, -16, 3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.2-c";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, -2, -2, 9, 3, -6, 9, 1, 3, -9, -4, 0, -6, 4, 13, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.2-d";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, 5, -1, 2, -7, 10, -2, 4, 10, -5, -5, 9, -5, 2, 3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.2-e";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 5, -1, -2, 7, -10, 2, 4, -10, 5, -5, -9, 5, 2, 3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.2-f";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 3, -6, 6, -3, -5, 2, 1, -3, -9, 7, -4, 4, 10, -4, 5, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.2-g";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, -4, 2, 5, 5, -2, 1, 1, 7, 13, -8, 6, -2, -16, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.2-h";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -3, -2, -2, -9, -3, 6, -9, 1, -3, 9, -4, 0, 6, 4, 13, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-a";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 8, 4, -2, 2, 12, -8, 8, 0, -2, 6, -2, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-b";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 8, 2, 0, -6, 6, -10, -10, -12, -6, -10, -6, -12, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-c";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 3, -3, 1, 7, -8, -6, 6, 12, -4, -8, 4, -2, 13, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-d";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 8, -4, 2, -2, 12, -8, -8, 0, -2, -6, 2, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-e";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -4, -1, 1, -3, 1, 7, -6, 10, 0, -10, 3, 11, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-f";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 8, 2, 0, 6, -6, -10, -10, 12, 6, -10, 6, 12, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-g";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, -2, 2, 8, -4, 2, 0, 8, -4, 6, -2, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-h";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 3, 3, -1, -7, -8, -6, -6, -12, -4, 8, -4, -2, 13, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-i";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 4, 1, -1, -3, 1, -7, 6, 10, 0, 10, 3, 11, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-j";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -4, -10, -6, -8, 4, -8, -4, -2, -10, 2, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-k";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, -4, -5, 1, -1, -7, -9, 10, 2, 0, -10, 15, -11, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-l";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, 2, -2, -8, -4, 2, 0, -8, -4, -6, 2, -12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-m";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 4, 5, -1, -1, -7, 9, -10, 2, 0, 10, 15, -11, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-n";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 6, -2, 4, 4, 6, 0, 0, 8, 10, 10, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-o";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, 4, 10, 6, -8, 4, 8, 4, -2, 10, -2, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.1-p";
N := (11*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, -6, 2, -4, 4, 6, 0, 0, 8, -10, -10, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-a";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -8, -8, 0, 10, -6, 10, 8, 2, 10, 6, 14, 6, -4, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-b";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -7, 2, 2, -10, -2, -8, -13, -6, 10, -9, 2, 6, -2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-c";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 6, 6, 0, 8, -4, 6, 12, -4, -6, 12, -4, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-d";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 5, -3, 2, 6, -6, 6, 0, -1, -6, -10, -3, -2, -6, 10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-e";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, 4, 6, -6, 6, 0, -2, -6, 2, -6, 14, 12, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-f";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -7, -2, -2, 10, -2, -8, 13, 6, 10, 9, -2, 6, -2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-g";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -8, -8, 0, -10, 6, 10, 8, -2, -10, 6, -14, -6, -4, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-h";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 0, 6, -2, -4, -4, 0, 8, 10, 6, 6, -12, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-i";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -6, -6, 0, 8, -4, -6, -12, -4, 6, -12, -4, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-j";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, -3, -2, -6, 6, 6, 0, 1, 6, -10, 3, 2, -6, 10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-k";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -7, 5, 0, 0, 0, 2, 2, -3, 0, -4, -9, -6, 8, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-l";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, -4, -6, 6, 6, 0, 2, 6, 2, 6, -14, 12, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-m";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -7, 5, 0, 0, 0, 2, 2, 3, 0, -4, 9, 6, 8, -4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.2-n";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 0, -6, 2, -4, -4, 0, -8, 10, -6, -6, -12, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-a";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, 0, 4, 2, -2, -8, 12, 0, 8, -2, -2, 6, -4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-b";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 8, 0, 6, -6, -10, -10, -6, -12, -10, -12, -6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-c";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 1, -3, 7, 1, -6, -8, 12, 6, -4, 4, -8, 13, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-d";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 0, -4, -2, 2, -8, 12, 0, -8, -2, 2, -6, -4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-e";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -4, 1, -1, 1, -3, -6, 7, 10, -10, 0, 11, 3, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-f";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 8, 0, -6, 6, -10, -10, 6, 12, -10, 12, 6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-g";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, -2, 8, 2, 2, -4, 8, 0, -4, -2, 6, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-h";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 1, 3, -7, -1, -6, -8, -12, -6, -4, -4, 8, 13, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-i";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 4, -1, 1, 1, -3, 6, -7, 10, 10, 0, 11, 3, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-j";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, -4, -6, -10, 4, -8, -4, -8, -2, 2, -10, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-k";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -4, 1, -5, -7, -1, 10, -9, 2, -10, 0, -11, 15, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-l";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, 2, -8, -2, 2, -4, -8, 0, -4, 2, -6, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-m";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 4, -1, 5, -7, -1, -10, 9, 2, 10, 0, -11, 15, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-n";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -2, 6, 4, -2, 6, 4, 0, 0, 8, 10, 10, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-o";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 4, 6, 10, 4, -8, 4, 8, -2, -2, 10, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.4-p";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -2, -6, -4, 2, 6, 4, 0, 0, 8, -10, -10, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-a";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -8, -8, 0, -6, 10, 8, 10, 10, 2, 6, 6, 14, -14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-b";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -7, -1, 2, -10, 2, -8, -2, -6, -13, 10, 2, -9, -2, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-c";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 6, 0, 6, -4, 8, 12, 6, -4, 12, -6, 2, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-d";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 5, 2, -6, 6, 0, 6, -6, -1, -10, -2, -3, 10, -6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-e";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 4, -6, 6, 0, 6, -6, -2, 2, 14, -6, 10, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-f";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -7, -1, -2, 10, -2, -8, -2, 6, 13, 10, -2, 9, -2, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-g";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -8, -8, 0, 6, -10, 8, 10, -10, -2, 6, -6, -14, -14, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-h";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 0, -2, 6, -4, -4, 8, 0, 10, 6, 6, -4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-i";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, -6, 0, -6, -4, 8, -12, -6, -4, -12, 6, 2, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-j";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 5, -2, 6, -6, 0, 6, 6, 1, -10, 2, 3, 10, -6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-k";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 5, -7, 0, 0, 0, 2, 2, 0, -3, -4, -6, -9, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-l";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 6, -6, 0, 6, 6, 2, 2, -14, 6, 10, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-m";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, -7, 0, 0, 0, 2, 2, 0, 3, -4, 6, 9, -4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 690.3-n";
N := (-13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 0, 2, -6, -4, -4, -8, 0, 10, -6, -6, -4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 691.1-a";
N := (-5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 0, 1, 5, 3, 0, -5, 7, 2, 11, -3, -6, -8, -10, 4, 15, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 691.1-b";
N := (-5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, 1, 5, -3, 0, 5, -7, 2, 11, 3, 6, -8, 10, -4, 15, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 691.2-a";
N := (5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 0, 5, 1, 0, 3, 7, -5, 11, 2, -6, -3, -8, 4, -10, 4, 15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 691.2-b";
N := (5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, 5, 1, 0, -3, -7, 5, 11, 2, 6, 3, -8, -4, 10, 4, 15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 695.2-a";
N := (-16*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -1, 0, -5, 6, -4, -10, 5, -1, -1, 12, -3, 10, -14, 6, -2, 8, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 695.2-b";
N := (-16*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, 0, -5, -6, 4, 10, -5, -1, -1, -12, 3, 10, 14, -6, -2, 8, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 695.3-a";
N := (-16*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -1, -5, 0, -4, 6, 5, -10, -1, -1, -3, 12, 10, 6, -14, 8, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 695.3-b";
N := (-16*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, -5, 0, 4, -6, -5, 10, -1, -1, 3, -12, 10, -6, 14, 8, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.1-a";
N := (-8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, -6, 6, 5, 3, 6, 8, -8, 13, 2, -3, 7, -9, 1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.1-b";
N := (-8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -4, 6, -4, -6, 0, 0, 10, 0, -10, -6, 0, 2, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.1-c";
N := (-8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 0, 0, -4, 6, 6, 8, 4, -8, 2, 6, -2, 12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.1-d";
N := (-8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 0, 0, 4, -6, -6, 8, 4, 8, 2, -6, 2, 12, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.1-e";
N := (-8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -4, -6, 4, 6, 0, 0, 10, 0, -10, 6, 0, 2, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.1-f";
N := (-8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, -6, -6, -5, -3, -6, 8, -8, -13, 2, 3, -7, -9, 1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.2-a";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, 4, 4, 6, -6, -2, -8, -12, 12, -10, -10, -6, 10, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.2-b";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 4, 0, 6, 2, -4, -4, -2, -4, -10, -10, -14, -8, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.2-c";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, 1, -1, 6, 0, 5, -8, 0, -9, -1, 7, -12, -14, 13, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.2-d";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -4, 0, 4, -6, -6, -4, -4, -8, 10, 10, -6, -8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.2-e";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -4, 0, 0, -6, 0, -4, -10, 0, 2, 6, -6, 2, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.2-f";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 4, 0, -6, -2, 4, -4, -2, 4, -10, 10, 14, -8, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.2-g";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 1, 1, -6, 0, -5, -8, 0, 9, -1, -7, 12, -14, 13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.2-h";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 6, 4, -4, -6, 6, 2, -8, -12, -12, -10, 10, 6, 10, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.2-i";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -4, 0, 0, 6, 0, -4, -10, 0, 2, -6, 6, 2, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.2-j";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -4, 0, -4, 6, 6, -4, -4, 8, 10, -10, 6, -8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.4-a";
N := (8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, -1, 5, 6, 6, 3, -8, 8, 13, 2, 7, -3, 1, -9, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.4-b";
N := (8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -4, -4, 6, 0, -6, 10, 0, 0, -10, 0, -6, 12, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.4-c";
N := (8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -4, -4, 0, 6, 6, 4, 8, -8, 2, -2, 6, 4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.4-d";
N := (8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -4, 4, 0, -6, -6, 4, 8, 8, 2, 2, -6, 4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.4-e";
N := (8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -4, 4, -6, 0, 6, 10, 0, 0, -10, 0, 6, 12, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.4-f";
N := (8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -1, -5, -6, -6, -3, -8, 8, -13, 2, -7, 3, 1, -9, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.3-a";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, 6, 6, 4, -2, -6, -12, -8, 12, -10, -6, -10, 4, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.3-b";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -4, 6, 0, -4, 2, -2, -4, -4, -10, -14, -10, 0, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.3-c";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 3, 6, -1, 5, 0, 0, -8, -9, -1, -12, 7, 13, -14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.3-d";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 0, 4, 0, -6, -6, -4, -4, -8, 10, -6, 10, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.3-e";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 2, 0, 0, 0, -6, -10, -4, 0, 2, -6, 6, -4, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.3-f";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, -4, -6, 0, 4, -2, -2, -4, 4, -10, 14, 10, 0, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.3-g";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, 3, -6, 1, -5, 0, 0, -8, 9, -1, 12, -7, 13, -14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.3-h";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 6, -6, -4, 2, 6, -12, -8, -12, -10, 6, 10, 4, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.3-i";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 2, 0, 0, 0, 6, -10, -4, 0, 2, 6, -6, -4, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 705.3-j";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 0, -4, 0, 6, 6, -4, -4, 8, 10, 6, -10, 4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.2-a";
N := (-17*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 4, -4, 4, -2, 2, 6, -10, 8, -6, 4, 2, 6, -8, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.2-b";
N := (-17*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 0, -1, -6, -5, 0, -1, 4, 8, 3, -10, 9, -11, 8, -12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.2-c";
N := (-17*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 7, 6, -5, 0, 9, -4, -1, -12, -10, -7, -12, -13, -7, 8, 10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.2-d";
N := (-17*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 4, 4, -4, 2, -2, 6, -10, -8, 6, 4, -2, -6, -8, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.2-e";
N := (-17*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, 0, 1, 6, 5, 0, -1, 4, -8, -3, -10, -9, 11, 8, -12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.2-f";
N := (-17*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 7, 6, 5, 0, -9, 4, -1, -12, 10, 7, -12, 13, 7, 8, 10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.3-a";
N := (-17*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -4, 4, -4, 2, -2, -10, 6, -6, 8, 4, 6, 2, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.3-b";
N := (-17*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -5, -6, -1, 0, -5, 4, -1, 3, 8, -10, -11, 9, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.3-c";
N := (-17*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 6, 7, 0, -5, -4, 9, -12, -1, -7, -10, -12, -7, -13, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.3-d";
N := (-17*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -4, -4, 4, -2, 2, -10, 6, 6, -8, 4, -6, -2, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.3-e";
N := (-17*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -5, 6, 1, 0, 5, 4, -1, -3, -8, -10, 11, -9, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 710.3-f";
N := (-17*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, 7, 0, 5, 4, -9, -12, -1, 7, 10, -12, 7, 13, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 717.1-a";
N := (-11*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 6, 8, 0, 4, 2, 6, -10, 0, 0, 0, 10, -8, 6, -14, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 717.1-b";
N := (-11*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 6, 8, 0, -4, -2, -6, -10, 0, 0, 0, 10, 8, -6, -14, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 717.2-a";
N := (-11*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 8, 6, 4, 0, 6, 2, 0, -10, 0, 0, 10, 6, -8, 2, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 717.2-b";
N := (-11*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 8, 6, -4, 0, -6, -2, 0, -10, 0, 0, 10, -6, 8, 2, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-a";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 8, 4, 8, 10, -2, 4, -12, -8, 0, 2, 2, -6, 12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-b";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 8, -4, -8, -10, 2, 4, -12, 8, 0, 2, -2, 6, 12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-c";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, -8, 0, -2, 2, -4, 0, -12, -12, -10, -2, 10, -12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-d";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, -4, -4, 6, 6, -12, 8, 0, 8, -2, 14, -10, 4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-e";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, -2, -6, -2, 2, 4, 6, -4, 8, -12, -2, -10, 4, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-f";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 6, 1, -6, 7, 2, -11, 0, 8, 5, 0, -5, -1, -2, -8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-g";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, 2, 6, 2, -2, 4, 6, 4, -8, -12, 2, 10, 4, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-h";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -2, -8, 4, 6, -6, 6, 2, 0, 4, -2, -2, -14, -2, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-i";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, -6, -6, 6, -6, 4, -2, 0, -12, 8, 6, -6, 4, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-j";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, 8, -4, -6, 6, 6, 2, 0, -4, -2, 2, 14, -2, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-k";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -2, -3, -6, -9, -6, 1, -8, 0, 9, 8, 3, -9, -2, -8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-l";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 4, -2, -2, 6, 6, 12, 2, 12, -8, -8, -2, -2, 4, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-m";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, -4, -6, 2, 4, -8, -6, -8, 4, 12, -10, -14, 4, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-n";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, 4, 4, -6, -6, -12, 8, 0, -8, -2, -14, 10, 4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-o";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 6, -1, 6, -7, -2, -11, 0, -8, -5, 0, 5, 1, -2, -8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-p";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 6, 6, -6, 6, 4, -2, 0, 12, 8, -6, 6, 4, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-q";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, 8, 0, 2, -2, -4, 0, 12, 12, -10, 2, -10, -12, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-r";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 4, 6, -2, -4, -8, -6, 8, -4, 12, 10, 14, 4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-s";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, -2, -4, 6, 2, -8, 8, 6, 0, 12, 8, -10, 2, 12, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-t";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -2, 3, 6, 9, 6, 1, -8, 0, -9, 8, -3, 9, -2, -8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-u";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 4, 2, 2, -6, -6, 12, 2, -12, 8, -8, 2, 2, 4, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-v";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -8, -6, 6, -6, 6, 4, -2, 12, 0, -4, -6, -6, 4, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-w";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -4, 4, -4, -2, -2, 4, 0, -8, 0, -10, -10, 6, -12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-x";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -8, 6, -6, 6, -6, 4, -2, -12, 0, -4, 6, 6, 4, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-y";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, -4, -4, 4, 2, 2, 4, 0, 8, 0, -10, 10, -6, -12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.1-z";
N := (-12*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -2, 4, -6, -2, 8, 8, 6, 0, -12, 8, 10, -2, 12, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-a";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, 4, 8, 4, -2, 10, -12, 4, 0, -8, 2, -6, 2, -8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-b";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 4, -8, -4, 2, -10, -12, 4, 0, 8, 2, 6, -2, -8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-c";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 0, -8, 2, -2, 0, -4, -12, -12, -10, 10, -2, -8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-d";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, -4, -4, 6, 6, 8, -12, 8, 0, -2, -10, 14, 8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-e";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -6, -2, 2, -2, 6, 4, 8, -4, -12, -10, -2, -2, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-f";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, -3, -6, 1, 2, 7, 0, -11, 5, 8, 0, -1, -5, -8, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-g";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 6, 2, -2, 2, 6, 4, -8, 4, -12, 10, 2, -2, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-h";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 4, -8, -6, 6, 2, 6, 4, 0, -2, -14, -2, 2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-i";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, -6, -6, -6, 6, -2, 4, -12, 0, 8, -6, 6, -14, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-j";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -4, 8, 6, -6, 2, 6, -4, 0, -2, 14, 2, 2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-k";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 1, -6, -3, -6, -9, -8, 1, 9, 0, 8, -9, 3, -8, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-l";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -6, -2, -2, 6, 6, 2, 12, -8, 12, -8, -2, -2, 14, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-m";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, -6, -4, 4, 2, -6, -8, 4, -8, 12, -14, -10, -8, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-n";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 4, 4, -6, -6, 8, -12, -8, 0, -2, 10, -14, 8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-o";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, -3, 6, -1, -2, -7, 0, -11, -5, -8, 0, 1, 5, -8, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-p";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, 6, 6, 6, -6, -2, 4, 12, 0, 8, 6, -6, -14, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-q";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 0, 8, -2, 2, 0, -4, 12, 12, -10, -10, 2, -8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-r";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 6, 4, -4, -2, -6, -8, -4, 8, 12, 14, 10, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-s";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -6, 6, -4, -8, 2, 6, 8, 12, 0, 8, 2, -10, -8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-t";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 1, 6, 3, 6, 9, -8, 1, -9, 0, 8, 9, -3, -8, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-u";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -6, 2, 2, -6, -6, 2, 12, 8, -12, -8, 2, 2, 14, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-v";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -8, -2, 6, -6, 6, -6, -2, 4, 0, 12, -4, -6, -6, -2, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-w";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -8, -4, 4, -2, -2, 0, 4, 0, -8, -10, 6, -10, -8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-x";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -8, -2, -6, 6, -6, 6, -2, 4, 0, -12, -4, 6, 6, -2, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-y";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -8, 4, -4, 2, 2, 0, 4, 0, 8, -10, -6, 10, -8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 720.2-z";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -6, -6, 4, 8, -2, 6, 8, -12, 0, 8, -2, 10, -8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-a";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, 4, -2, -10, -2, -12, 4, 0, -6, 2, 2, -6, -2, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-b";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 3, 3, 9, 9, 8, 8, 0, 0, -13, -3, -3, 5, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-c";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 2, -4, 2, 10, 4, -12, 6, 0, 2, 6, -2, 10, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-d";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 1, 1, 5, 5, 4, 4, -8, -8, -5, 1, 1, 3, 3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-e";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -2, 4, -2, -10, 4, -12, -6, 0, 2, -6, 2, 10, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-f";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -4, -1, -1, -5, -5, 4, 4, 8, 8, -5, -1, -1, 3, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-g";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -3, -3, -9, -9, 8, 8, 0, 0, -13, 3, 3, 5, 5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.1-h";
N := (-19*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, -4, 2, 10, 2, -12, 4, 0, 6, 2, -2, 6, -2, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.2-a";
N := (11*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 1, 4, 5, 8, 4, -7, 9, -11, 9, -6, 8, 4, 3, 4, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.2-b";
N := (11*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -1, 4, -5, -8, -4, 7, 9, -11, -9, 6, 8, -4, -3, 4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.3-a";
N := (11*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 4, 8, 5, -7, 4, -11, 9, -6, 9, 8, 3, 4, -8, 4, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 722.3-b";
N := (11*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 4, -8, -5, 7, -4, -11, 9, 6, -9, 8, -3, -4, -8, 4, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 723.1-a";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -6, -4, 2, 8, 8, -2, -4, 2, -10, 6, -8, 6, 10, 8, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 723.1-b";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -6, -4, -2, -8, -8, 2, -4, 2, 10, -6, -8, -6, -10, 8, 2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 723.2-a";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -4, -6, 8, 2, -2, 8, 2, -4, 6, -10, -8, 10, 6, 2, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 723.2-b";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -4, -6, -8, -2, 2, -8, 2, -4, -6, 10, -8, -10, -6, 2, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.1-a";
N := (-15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 8, 2, -6, 0, -6, -4, 8, 0, -12, 2, -6, -6, -10, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.1-b";
N := (-15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 2, -4, -2, 6, -6, -2, 6, 2, 10, 10, 6, -16, 14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.1-c";
N := (-15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 8, 2, 6, 0, 6, -4, 8, 0, 12, 2, 6, 6, -10, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.1-d";
N := (-15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, 2, 4, 2, -6, -6, -2, -6, -2, 10, -10, -6, -16, 14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.3-a";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -4, -1, -6, 6, -6, 5, -1, -12, -12, 11, 6, 6, -4, 5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.3-b";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -6, -8, -4, 2, 6, 0, -4, 6, -2, 2, 2, 2, 2, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.3-c";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -4, -1, 6, -6, 6, 5, -1, 12, 12, 11, -6, -6, -4, 5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.3-d";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -6, -8, 4, -2, -6, 0, -4, -6, 2, 2, -2, -2, 2, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.4-a";
N := (13*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -5, -7, 5, 0, 6, -6, 4, 8, 12, -10, 7, 13, 10, -3, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.4-b";
N := (13*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -5, -7, -5, 0, -6, -6, 4, -8, -12, -10, -7, -13, 10, -3, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.4-c";
N := (13*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 3, 1, -1, -4, 6, 6, 8, 0, 4, -10, 5, -1, 2, 5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.4-d";
N := (13*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 2, 4, 0, 2, 2, 4, -8, 4, 8, 2, -6, 6, 8, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.4-e";
N := (13*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 2, 4, 0, -2, -2, 4, -8, -4, -8, 2, 6, -6, 8, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.4-f";
N := (13*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 3, 1, 1, 4, -6, 6, 8, 0, -4, -10, -5, 1, 2, 5, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.2-a";
N := (15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 8, 0, -6, -6, 8, -4, -12, 0, 2, -6, -6, -4, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.2-b";
N := (15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 4, -2, -4, 6, -2, -6, 2, 6, 10, 6, 10, 14, -16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.2-c";
N := (15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 8, 0, 6, 6, 8, -4, 12, 0, 2, 6, 6, -4, -10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.2-d";
N := (15*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, 4, 2, 4, -6, -2, -6, -2, -6, 10, -6, -10, 14, -16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.6-a";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -1, -4, 6, -6, -6, -1, 5, -12, -12, 11, 6, 6, 5, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.6-b";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -8, -6, 2, -4, 6, -4, 0, -2, 6, 2, 2, 2, -4, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.6-c";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -1, -4, -6, 6, 6, -1, 5, 12, 12, 11, -6, -6, 5, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.6-d";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -8, -6, -2, 4, -6, -4, 0, 2, -6, 2, -2, -2, -4, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.5-a";
N := (13*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -7, -5, 0, 5, 6, 4, -6, 12, 8, -10, 13, 7, -3, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.5-b";
N := (13*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -7, -5, 0, -5, -6, 4, -6, -12, -8, -10, -13, -7, -3, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.5-c";
N := (13*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 1, 3, -4, -1, 6, 8, 6, 4, 0, -10, -1, 5, 5, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.5-d";
N := (13*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 4, 2, 2, 0, 2, -8, 4, 8, 4, 2, 6, -6, 2, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.5-e";
N := (13*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, 2, -2, 0, -2, -8, 4, -8, -4, 2, -6, 6, 2, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.5-f";
N := (13*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 1, 3, 4, 1, -6, 8, 6, -4, 0, -10, 1, -5, 5, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 726.1-a";
N := (-11*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 4, -4, -4, -6, -6, 4, 4, 12, 12, 2, -2, -2, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 726.1-b";
N := (-11*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 0, -6, -6, 10, 10, 4, 4, -2, -2, -10, 4, 4, -12, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 726.1-c";
N := (-11*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 4, 4, 4, 6, 6, 4, 4, -12, -12, 2, 2, 2, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 726.1-d";
N := (-11*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, -6, -6, -6, -6, 8, 8, 6, 6, -10, 0, 0, -4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 726.1-e";
N := (-11*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, 0, 6, 6, -10, -10, 4, 4, 2, 2, -10, -4, -4, -12, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 726.1-f";
N := (-11*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 6, 6, 6, 6, 8, 8, -6, -6, -10, 0, 0, -4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-a";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, -4, -4, 6, -6, -3, 3, 2, 2, -6, 6, 14, 6, -6, 8, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-b";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -1, 8, 0, 0, 0, 0, -13, 5, 0, 0, -13, 0, 0, -16, 11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-c";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -4, -4, -6, 6, 3, -3, 2, 2, 6, -6, 14, -6, 6, 8, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-d";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 8, -1, 0, 0, 0, 0, 5, -13, 0, 0, -13, 0, 0, 11, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 730.1-a";
N := (-7*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 0, -5, 4, -3, -4, -9, -2, -10, 3, 2, 7, 3, 11, 5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 730.1-b";
N := (-7*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 0, 5, -4, 3, 4, -9, -2, 10, -3, 2, -7, -3, 11, 5, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 730.1-c";
N := (-7*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -4, 3, 0, -9, -4, 1, 6, -8, 3, -12, -5, -5, -5, -3, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 730.1-d";
N := (-7*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -4, -3, 0, 9, 4, 1, 6, 8, -3, -12, 5, 5, -5, -3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 730.4-a";
N := (-7*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 0, 4, -5, -4, -3, -2, -9, 3, -10, 2, 3, 7, 5, 11, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 730.4-b";
N := (-7*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 0, -4, 5, 4, 3, -2, -9, -3, 10, 2, -3, -7, 5, 11, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 730.4-c";
N := (-7*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -2, 0, 3, -4, -9, 6, 1, 3, -8, -12, -5, -5, -3, -5, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 730.4-d";
N := (-7*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -2, 0, -3, 4, 9, 6, 1, -3, 8, -12, 5, 5, -3, -5, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 739.1-a";
N := (9*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, 3, 8, 2, 0, 0, 0, 5, -4, -4, -3, -4, -2, 2, -9, 4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 739.1-b";
N := (9*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 3, -3, 8, 2, 0, 0, 0, -5, -4, -4, 3, 4, -2, -2, 9, 4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 739.2-a";
N := (-9*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, -3, 2, 8, 0, 0, 5, 0, -4, -4, -4, -3, -2, -9, 2, 12, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 739.2-b";
N := (-9*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -3, 3, 2, 8, 0, 0, -5, 0, -4, -4, 4, 3, -2, 9, -2, 12, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 745.1-a";
N := (-6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -5, 5, -3, 0, 3, 3, 0, -2, 12, -10, -8, -11, 2, -8, 11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 745.1-b";
N := (-6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -5, 5, 3, 0, -3, -3, 0, -2, -12, 10, -8, 11, -2, -8, 11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 745.4-a";
N := (6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 5, -5, 0, -3, 3, 3, -2, 0, -10, 12, -8, 2, -11, 11, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 745.4-b";
N := (6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 5, -5, 0, 3, -3, -3, -2, 0, 10, -12, -8, -2, 11, 11, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-a";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -8, 6, -2, -2, -4, 0, -10, 0, -8, -6, -6, -6, 4, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-b";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -8, -6, 2, 2, 4, 0, -10, 0, 8, -6, 6, 6, 4, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-c";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 6, -4, -8, -2, -6, 8, -12, 0, -8, 2, -10, 8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-d";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -6, 4, 8, 2, -6, 8, 12, 0, -8, -2, 10, 8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-e";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 4, -3, 5, -4, 2, 8, -3, -2, -12, -4, 12, -4, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-f";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -4, 3, -5, 4, 2, 8, 3, 2, -12, 4, -12, -4, -9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-g";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, 0, 2, 2, -4, -4, 0, -8, 6, 2, -6, -4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-h";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 9, -8, -8, 4, 10, -5, 10, 3, 9, -9, -4, 9, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-i";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -9, 8, 8, -4, 10, -5, -10, -3, 9, 9, 4, 9, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-j";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, 4, -2, -2, 4, 4, -8, 0, 6, -6, 2, 0, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-k";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, 0, -2, -2, -4, -4, 0, 8, 6, -2, 6, -4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-l";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, 4, -1, -7, -8, -6, -12, 7, -10, -8, -12, 0, -12, -3, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-m";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, -4, 2, 2, 4, 4, 8, 0, 6, 6, -2, 0, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-n";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -1, 8, -4, -8, -2, -1, 2, 3, 11, -1, 4, -9, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-o";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, -4, 1, 7, 8, -6, -12, -7, 10, -8, 12, 0, -12, -3, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-p";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 1, -8, 4, 8, -2, -1, -2, -3, 11, 1, -4, -9, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-q";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 8, 4, 4, -2, 2, -8, -4, 0, -8, 2, -10, -2, 8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-r";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [7, 2, -4, 5, 5, 4, 10, 8, -3, -10, -4, 4, -4, -4, -9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-s";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [7, 2, 4, -5, -5, -4, 10, 8, 3, 10, -4, -4, 4, -4, -9, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-t";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [8, 4, 4, 4, -2, 2, 4, 8, -8, 0, 2, -2, -10, -12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-u";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, -1, 4, -8, -4, 6, -3, 2, 1, 1, 9, 0, 15, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-v";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, 1, -4, 8, 4, 6, -3, -2, -1, 1, -9, 0, 15, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-w";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 8, -4, -4, 2, -2, -8, -4, 0, 8, 2, 10, 2, 8, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.1-x";
N := (5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [8, 4, -4, -4, 2, -2, 4, 8, 8, 0, 2, 2, 10, -12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-a";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-8, -6, -2, 6, -4, -2, -10, 0, -8, 0, -6, -6, -6, -6, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-b";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-8, -6, 2, -6, 4, 2, -10, 0, 8, 0, -6, 6, 6, -6, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-c";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -4, 6, -2, -8, 8, -6, 0, -12, -8, -10, 2, 12, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-d";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 4, -6, 2, 8, 8, -6, 0, 12, -8, 10, -2, 12, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-e";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -1, -3, 4, -4, 5, 8, 2, -2, -3, -12, 12, -4, -9, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-f";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -1, 3, -4, 4, -5, 8, 2, 2, 3, -12, -12, 4, -9, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-g";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, 4, 2, 2, -4, -4, -8, 0, 6, -6, 2, 0, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-h";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -8, 9, 4, -8, -5, 10, 3, 10, 9, -4, -9, 4, 9, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-i";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 8, -9, -4, 8, -5, 10, -3, -10, 9, 4, 9, 4, 9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-j";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, 0, -2, -2, 4, 4, 0, -8, 6, 2, -6, 4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-k";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, -4, -2, -2, -4, -4, 8, 0, 6, 6, -2, 0, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-l";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 3, -1, 4, -8, -7, -12, -6, -10, 7, -8, 0, -12, -3, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-m";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, 0, 2, 2, 4, 4, 0, 8, 6, -2, 6, 4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-n";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 8, -1, -8, -4, -1, -2, 3, 2, 11, 4, -1, 4, -9, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-o";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 3, 1, -4, 8, 7, -12, -6, 10, -7, -8, 0, 12, -3, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-p";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -8, 1, 8, 4, -1, -2, -3, -2, 11, -4, 1, 4, -9, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-q";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [8, 4, 4, 4, 2, -2, -4, -8, -8, 0, 2, -2, -10, 12, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-r";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 7, 5, -4, 4, 5, 8, 10, -10, -3, -4, -4, 4, -9, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-s";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 7, -5, 4, -4, -5, 8, 10, 10, 3, -4, 4, -4, -9, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-t";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 8, 4, 4, 2, -2, 8, 4, 0, -8, 2, -10, -2, -8, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-u";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, 4, -1, -4, -8, -3, 6, 1, 2, 1, 0, 9, 0, 15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-v";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, -4, 1, 4, 8, -3, 6, -1, -2, 1, 0, -9, 0, 15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-w";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [8, 4, -4, -4, -2, 2, -4, -8, 8, 0, 2, 2, 10, 12, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 750.2-x";
N := (-5*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 8, -4, -4, -2, 2, 8, 4, 0, 8, 2, 10, 2, -8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-a";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 3, 8, -1, 5, 10, -7, 12, -3, 0, -8, -1, -2, -4, 4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-b";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 0, 6, 0, -4, 0, 6, 2, -4, -12, -2, 4, 8, 4, 10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-c";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, 6, 2, -8, -8, -4, -8, 6, -6, 0, -2, 4, -4, 2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-d";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 3, 8, 1, -5, -10, 7, 12, -3, 0, -8, 1, 2, -4, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-e";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, 0, 1, -1, 8, 8, 0, -4, -2, -7, 0, 0, -10, -3, 8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-f";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 0, 6, 0, 4, 0, -6, 2, -4, 12, -2, -4, -8, 4, 10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-g";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -1, 0, -9, 9, -6, -3, -12, 9, 8, 0, -9, -2, 4, 4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-h";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, 0, 1, 1, -8, -8, 0, -4, -2, 7, 0, 0, 10, -3, 8, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-i";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -8, -2, -8, 0, -8, -6, -6, -12, -8, 6, 12, -4, -4, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-j";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 6, 2, 8, 8, 4, 8, 6, -6, 0, -2, -4, 4, 2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-k";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -8, -2, 8, 0, 8, 6, -6, -12, 8, 6, -12, 4, -4, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.1-l";
N := (-16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -1, 0, 9, -9, 6, 3, -12, 9, -8, 0, 9, 2, 4, 4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-a";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 8, 3, 5, -1, -7, 10, -3, 12, 0, -8, -2, -1, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-b";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, 6, 0, -4, 0, 6, 0, -4, 2, -12, -2, 8, 4, 10, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-c";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 2, 6, -8, -8, -8, -4, -6, 6, 0, -2, -4, 4, -2, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-d";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 8, 3, -5, 1, 7, -10, -3, 12, 0, -8, 2, 1, 4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-e";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, 1, 0, 8, -1, 0, 8, -2, -4, -7, 0, -10, 0, 8, -3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-f";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, 6, 0, 4, 0, -6, 0, -4, 2, 12, -2, -8, -4, 10, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-g";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 0, -1, 9, -9, -3, -6, 9, -12, 8, 0, -2, -9, 4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-h";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, 1, 0, -8, 1, 0, -8, -2, -4, 7, 0, 10, 0, 8, -3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-i";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -2, -8, 0, -8, -6, -8, -12, -6, -8, 6, -4, 12, -10, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-j";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 2, 6, 8, 8, 8, 4, -6, 6, 0, -2, 4, -4, -2, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-k";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -2, -8, 0, 8, 6, 8, -12, -6, 8, 6, 4, -12, -10, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 752.2-l";
N := (16*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, -1, -9, 9, 3, 6, 9, -12, -8, 0, 2, 9, 4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.1-a";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -5, -2, -6, 6, 6, -10, -7, -6, -6, -1, 0, 11, -15, -9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.1-b";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 0, 0, 6, 2, -4, -4, 0, 8, -2, 6, -14, 12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.1-c";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -5, 2, 6, -6, -6, -10, -7, 6, 6, -1, 0, -11, -15, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.1-d";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 0, 0, -6, -2, -4, -4, 0, -8, -2, -6, 14, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.2-a";
N := (-14*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, 8, -2, 4, 10, -12, 8, -8, -6, 8, -12, 10, -2, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.2-b";
N := (-14*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 5, 0, 7, -4, -3, 4, 11, 3, 6, -6, -1, -1, -2, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.2-c";
N := (-14*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 5, 0, -7, 4, 3, 4, 11, -3, -6, -6, 1, 1, -2, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.2-d";
N := (-14*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, -8, 2, -4, -10, -12, 8, 8, 6, 8, 12, -10, -2, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.4-a";
N := (2*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -5, -6, -2, 6, 6, -7, -10, -6, -6, -1, 11, 0, -9, -15, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.4-b";
N := (2*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 0, 0, 2, 6, -4, -4, 8, 0, -2, -14, 6, 12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.4-c";
N := (2*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -5, 6, 2, -6, -6, -7, -10, 6, 6, -1, -11, 0, -9, -15, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.4-d";
N := (2*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 0, 0, -2, -6, -4, -4, -8, 0, -2, 14, -6, 12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.3-a";
N := (-14*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, -2, 8, 10, 4, 8, -12, -6, -8, 8, 10, -12, 10, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.3-b";
N := (-14*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 5, 7, 0, -3, -4, 11, 4, 6, 3, -6, -1, -1, 6, -2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.3-c";
N := (-14*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 5, -7, 0, 3, 4, 11, 4, -6, -3, -6, 1, 1, 6, -2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 760.3-d";
N := (-14*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, 2, -8, -10, -4, 8, -12, 6, 8, 8, -10, 12, 10, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-a";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, -4, -4, 4, 4, -8, -8, 12, 12, -10, -12, -12, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-b";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, -4, -4, -4, -4, 8, 8, 12, 12, -10, 12, 12, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-c";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, -4, 4, -4, 4, 8, 4, -12, 4, 12, -2, -4, 0, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-d";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, 4, -4, 4, -8, -4, 12, -4, 12, 4, -2, 0, 4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-e";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -4, -4, -4, 4, 8, 4, -12, 4, 12, 4, -2, 0, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-f";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 4, 4, -4, -4, -8, -4, 12, 4, 12, -2, 4, 0, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-g";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 8, 8, 4, 4, 0, 0, 0, 0, 4, 4, -10, 0, 0, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-h";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 4, -8, 8, -8, 8, -4, -4, -8, 8, -2, -8, 8, 12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-i";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, -8, 8, 8, -8, 4, 4, -8, 8, -2, 8, -8, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-j";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -8, -8, 4, 4, 0, 0, 0, 0, 4, 4, -10, 0, 0, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-k";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 4, 8, -8, 8, -8, -4, -4, 8, -8, -2, 8, -8, 12, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-l";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 8, 8, -4, -4, 0, 0, 0, 0, -4, -4, -10, 0, 0, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-m";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -8, -8, -4, -4, 0, 0, 0, 0, -4, -4, -10, 0, 0, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-n";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -4, 8, -8, -8, 8, 4, 4, 8, -8, -2, -8, 8, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-o";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, 4, 4, -4, 8, 4, 12, -4, -12, -4, -2, 0, -4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-p";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, -4, -4, 4, -4, -8, 4, -12, -4, -12, -2, 4, 0, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-q";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 4, -4, 4, 4, 8, -4, 12, -4, -12, -2, -4, 0, -12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-r";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -4, -4, 4, -4, -8, -4, -12, 4, -12, -4, -2, 0, 4, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-s";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 4, 4, -4, -4, -8, -8, -12, -12, -10, 12, 12, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-t";
N := (16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 4, 4, 4, 4, 8, 8, -12, -12, -10, -12, -12, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 769.1-a";
N := (10*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 4, -4, -8, 0, -4, 6, 0, -4, 8, -4, 8, 6, 4, 14, -4, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 769.1-b";
N := (10*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -4, -4, -8, 0, 4, -6, 0, -4, 8, 4, -8, 6, -4, -14, -4, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 769.2-a";
N := (10*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 0, -8, -4, -4, 0, 0, 6, 8, -4, 8, -4, 6, 14, 4, -2, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 769.2-b";
N := (10*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 0, -8, -4, 4, 0, 0, -6, 8, -4, -8, 4, 6, -14, -4, -2, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 772.1-a";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, -1, 2, 9, 0, 3, -6, -4, -4, -3, -6, 5, 6, 12, 14, 14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 772.1-b";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -1, 2, -9, 0, -3, 6, -4, -4, 3, 6, 5, -6, -12, 14, 14, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 772.2-a";
N := (8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 2, -1, 0, 9, -6, 3, -4, -4, -6, -3, 5, 12, 6, 14, 14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 772.2-b";
N := (8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 2, -1, 0, -9, 6, -3, -4, -4, 6, 3, 5, -12, -6, 14, 14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-a";
N := (15*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 7, -3, 2, -1, -8, 10, -6, 4, -3, 9, 13, -3, 6, 11, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-b";
N := (15*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -4, 2, 9, 3, 6, -3, -1, 3, 3, -4, 6, 6, 8, -7, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-c";
N := (15*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 6, -3, -7, -6, 5, 7, -9, -3, -8, 0, 10, -4, 3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-d";
N := (15*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 5, -7, -6, 3, 6, -6, 8, 6, 9, 5, -3, 9, -10, 11, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-e";
N := (15*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 6, 3, -3, -6, -5, -9, -7, -11, -8, 6, -6, 4, -15, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-f";
N := (15*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 6, -3, 3, 6, 5, -9, 7, 11, -8, -6, 6, 4, -15, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-g";
N := (15*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 5, -7, 6, -3, -6, 6, 8, -6, -9, 5, 3, -9, -10, 11, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-h";
N := (15*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 6, 3, 7, 6, -5, 7, 9, 3, -8, 0, -10, -4, 3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-i";
N := (15*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -4, 2, -9, -3, -6, 3, -1, -3, -3, -4, -6, -6, 8, -7, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.1-j";
N := (15*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 7, -3, -2, 1, 8, -10, -6, -4, 3, 9, -13, 3, 6, 11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-a";
N := (15*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -3, 7, -1, 2, 10, -8, -6, -3, 4, 9, -3, 13, 11, 6, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-b";
N := (15*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 2, -4, 3, 9, -3, 6, -1, 3, 3, -4, 6, 6, -7, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-c";
N := (15*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 6, -2, -7, -3, 5, -6, 7, -3, -9, -8, 10, 0, 3, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-d";
N := (15*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -7, 5, 3, -6, -6, 6, 8, 9, 6, 5, 9, -3, 11, -10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-e";
N := (15*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 6, -4, -3, 3, -5, -6, -9, -11, -7, -8, -6, 6, -15, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-f";
N := (15*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, -4, 3, -3, 5, 6, -9, 11, 7, -8, 6, -6, -15, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-g";
N := (15*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -7, 5, -3, 6, 6, -6, 8, -9, -6, 5, -9, 3, 11, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-h";
N := (15*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 6, -2, 7, 3, -5, 6, 7, 3, 9, -8, -10, 0, 3, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-i";
N := (15*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 2, -4, -3, -9, 3, -6, -1, -3, -3, -4, -6, -6, -7, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 774.2-j";
N := (15*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, 7, 1, -2, -10, 8, -6, 3, -4, 9, 3, -13, 11, 6, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 776.1-a";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, -6, 8, 0, 4, 10, -4, -8, 0, 0, -2, -4, 4, -4, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 776.1-b";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -4, -6, -8, 0, -4, -10, -4, -8, 0, 0, -2, 4, -4, -4, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 776.2-a";
N := (-14*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -6, -4, 0, 8, 10, 4, -8, -4, 0, 0, -2, 4, -4, -14, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 776.2-b";
N := (-14*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -6, -4, 0, -8, -10, -4, -8, -4, 0, 0, -2, -4, 4, -14, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.1-a";
N := (w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, -5, 0, 4, -6, 0, 10, 9, 9, -12, 13, 5, 4, -6, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.1-b";
N := (w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, -5, 0, -4, 6, 0, -10, 9, 9, 12, -13, 5, -4, 6, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.2-a";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 1, 0, -5, -6, 4, 10, 0, 9, 9, 13, -12, 5, -6, 4, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 778.2-b";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -1, 0, -5, 6, -4, -10, 0, 9, 9, -13, 12, 5, 6, -4, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.1-a";
N := (-12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 6, 5, 8, 1, 3, 2, -3, -9, -5, 1, 12, -9, -10, 2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.1-b";
N := (-12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, 6, 5, -8, -1, -3, 2, -3, 9, 5, 1, -12, 9, -10, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-a";
N := (12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 5, 6, 1, 8, 3, -3, 2, -5, -9, 1, -9, 12, 2, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-b";
N := (12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -2, 5, 6, -1, -8, -3, -3, 2, 5, 9, 1, 9, -12, 2, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-a";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -6, -6, 0, 0, 8, -8, 2, 2, 8, -8, 0, 0, 2, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-b";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -1, 0, 0, -6, 9, 5, 10, -4, 11, -7, -2, 6, 6, 2, 2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-c";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 2, 2, 8, 8, -2, -2, -8, -8, -4, -4, 10, 10, 12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-d";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -8, -8, 0, 0, 6, 6, 4, 4, 8, 8, 6, 6, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-e";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, -8, 4, 3, -6, -6, 3, 7, 4, -6, 9, 6, -6, -2, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-f";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -2, -2, 0, 0, 6, 6, -8, -8, -12, -12, -6, -6, 4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-g";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, 0, 0, 9, -6, 10, 5, 11, -4, -2, -7, 6, 6, 2, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-h";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 4, -8, -6, 3, 3, -6, 4, 7, 9, -6, -6, 6, 10, -2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-i";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, 4, -8, 6, -3, -3, 6, 4, 7, -9, 6, 6, -6, 10, -2, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-j";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 0, 0, -9, 6, -10, -5, 11, -4, 2, 7, -6, -6, 2, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-k";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -2, -2, 0, 0, -6, -6, -8, -8, 12, 12, 6, 6, 4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-l";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, -8, 4, -3, 6, 6, -3, 7, 4, 6, -9, -6, 6, -2, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-m";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -8, -8, 0, 0, -6, -6, 4, 4, -8, -8, -6, -6, 4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-n";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 2, 2, -8, -8, 2, 2, -8, -8, 4, 4, -10, -10, 12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-o";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 1, 0, 0, 6, -9, -5, -10, -4, 11, 7, 2, -6, -6, 2, 2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 784.1-p";
N := (28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, -6, -6, 0, 0, -8, 8, 2, 2, -8, 8, 0, 0, 2, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 795.1-a";
N := (-11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -4, -4, 4, -6, 2, 4, -8, -8, -4, -10, 6, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 795.1-b";
N := (-11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -4, 4, -4, 6, -2, 4, -8, 8, 4, -10, -6, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 795.4-a";
N := (11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 0, 4, -4, 2, -6, -8, 4, -4, -8, -10, 6, -12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 795.4-b";
N := (11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 0, -4, 4, -2, 6, -8, 4, 4, 8, -10, -6, -12, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-a";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -8, 6, 6, -2, -2, 2, 2, 2, 2, -10, 2, 2, 6, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-b";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -8, -6, -6, 2, 2, 2, 2, -2, -2, -10, -2, -2, 6, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-c";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 2, -6, -10, 6, 2, 2, -2, -10, 6, -6, 10, -2, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-d";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, -2, 6, 10, -6, 2, 2, 2, 10, 6, 6, -10, -2, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-e";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 4, -4, -2, -2, -8, 8, 12, -12, 2, 6, 6, 0, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-f";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, 6, -2, 6, -10, -2, -2, 10, 2, 6, 10, -6, -14, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-g";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, -4, 4, 2, 2, -8, 8, -12, 12, 2, -6, -6, 0, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-h";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 6, -2, -6, 10, 2, 2, 10, 2, 6, -10, 6, 14, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-i";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, -6, 2, -6, 10, -2, -2, -10, -2, 6, -10, 6, -14, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-j";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, 4, -4, 2, 2, 8, -8, 12, -12, 2, -6, -6, 0, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-k";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, -6, 2, 6, -10, 2, 2, -10, -2, 6, 10, -6, 14, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-l";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, -4, 4, -2, -2, 8, -8, -12, 12, 2, 6, 6, 0, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-m";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, 2, -6, 10, -6, -2, -2, -2, -10, 6, 6, -10, 2, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-n";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -2, 6, -10, 6, -2, -2, 2, 10, 6, -6, 10, 2, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-o";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 8, 6, 6, 2, 2, -2, -2, 2, 2, -10, -2, -2, -6, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.1-p";
N := (-20*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 8, -6, -6, -2, -2, -2, -2, -2, -2, -10, 2, 2, -6, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-a";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, 0, 0, 0, 4, -4, 0, 0, 0, 0, 14, 4, 4, 0, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-b";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 1, 8, 7, 4, 3, 0, 11, -4, -6, 11, 6, -1, -3, 4, -10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-c";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -1, -8, -7, -4, 3, 0, -11, 4, 6, -11, 6, -1, -3, -4, 10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-d";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, -3, 2, -6, -8, 0, -1, -11, -6, -4, 1, 6, -2, -4, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-e";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 3, -2, 6, -8, 0, 1, 11, 6, 4, 1, 6, -2, 4, 5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-f";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, -6, -1, 6, -1, 6, 1, 8, 0, -7, -8, 3, 11, -2, -16, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-g";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 6, 1, -6, -1, 6, -1, -8, 0, 7, -8, 3, 11, 2, 16, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-h";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -6, 1, -6, 1, -6, 1, 8, 0, 7, -8, -3, -11, -2, -16, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-i";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, 6, -1, 6, 1, -6, -1, -8, 0, -7, -8, -3, -11, 2, 16, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-j";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -3, -2, 6, 8, 0, -1, -11, 6, 4, 1, -6, 2, -4, -5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-k";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 3, 2, -6, 8, 0, 1, 11, -6, -4, 1, -6, 2, 4, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-l";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, 8, -7, -4, -3, 0, 11, -4, 6, -11, 6, 1, 3, 4, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-m";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -1, -8, 7, 4, -3, 0, -11, 4, -6, 11, 6, 1, 3, -4, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.2-n";
N := (-12*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, 0, 0, 0, -4, 4, 0, 0, 0, 0, 14, -4, -4, 0, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-a";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, 0, 0, 0, -4, 4, 0, 0, 0, 0, 14, 4, 4, 0, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-b";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 8, 1, 4, 7, 0, 3, -4, 11, 11, -6, 6, -3, -1, -10, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-c";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -8, -1, -4, -7, 0, 3, 4, -11, -11, 6, 6, -3, -1, 10, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-d";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -3, 4, -6, 2, 0, -8, -11, -1, -4, -6, 1, -2, 6, -5, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-e";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, -4, 6, -2, 0, -8, 11, 1, 4, 6, 1, -2, 6, 5, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-f";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -6, -1, 6, -1, 6, -1, 8, 1, -7, 0, -8, 11, 3, -16, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-g";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 6, 1, -6, 1, 6, -1, -8, -1, 7, 0, -8, 11, 3, 16, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-h";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, -1, -6, 1, -6, 1, 8, 1, 7, 0, -8, -11, -3, -16, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-i";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, 1, 6, -1, -6, 1, -8, -1, -7, 0, -8, -11, -3, 16, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-j";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, 4, 6, -2, 0, 8, -11, -1, 4, 6, 1, 2, -6, -5, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-k";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, -4, -6, 2, 0, 8, 11, 1, -4, -6, 1, 2, -6, 5, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-l";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 8, 1, -4, -7, 0, -3, -4, 11, -11, 6, 6, 3, 1, -10, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-m";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -8, -1, 4, 7, 0, -3, 4, -11, 11, -6, 6, 3, 1, 10, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 800.3-n";
N := (-12*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, 0, 0, 0, 4, -4, 0, 0, 0, 0, 14, -4, -4, 0, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 804.1-a";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, -5, 3, -8, -1, -6, 0, 5, 3, 8, 4, 9, 5, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 804.1-b";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 3, -5, -3, 8, 1, 6, 0, 5, -3, -8, 4, -9, -5, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 804.2-a";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -5, 3, -8, 3, -6, -1, 5, 0, 8, 3, 4, 5, 9, -16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 804.2-b";
N := (4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -5, 3, 8, -3, 6, 1, 5, 0, -8, -3, 4, -5, -9, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 807.1-a";
N := (16*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 7, -7, 1, 0, -5, 8, 4, -1, 3, -6, 11, 8, -6, 7, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 807.1-b";
N := (16*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 7, -7, -1, 0, 5, -8, 4, -1, -3, 6, 11, -8, 6, 7, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 807.2-a";
N := (16*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 1, -7, 7, 0, 1, 8, -5, -1, 4, -6, 3, 11, -6, 8, 8, 7, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 807.2-b";
N := (16*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, -7, 7, 0, -1, -8, 5, -1, 4, 6, -3, 11, 6, -8, 8, 7, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.1-a";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 8, 3, 6, -3, 0, 8, 8, 9, 0, -10, 9, -12, 8, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.1-b";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 5, -2, 3, -8, -4, -8, -13, -8, 6, 3, 0, -16, 13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.1-c";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, 0, 4, 1, 8, -6, 4, -3, 12, -10, -4, 8, 11, -15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.1-d";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 3, -4, -1, 4, -6, -2, 3, -6, 8, 1, 10, -4, -9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.1-e";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 8, -3, -6, 3, 0, 8, 8, -9, 0, -10, -9, 12, 8, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.1-f";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -6, 0, -4, -1, -8, -6, 4, 3, -12, -10, 4, -8, 11, -15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.1-g";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -7, 2, 6, 0, -9, -6, 8, -10, 3, 0, -4, 12, 6, -13, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.1-h";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, -5, 2, -3, 8, -4, -8, 13, 8, 6, -3, 0, -16, 13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.1-i";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, -3, 4, 1, -4, -6, -2, -3, 6, 8, -1, -10, -4, -9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.1-j";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -7, 2, -6, 0, 9, 6, 8, -10, -3, 0, -4, -12, -6, -13, -13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.2-a";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 8, 2, 6, 3, 0, -3, 8, 8, 0, 9, -10, -12, 9, -7, 8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.2-b";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, -2, 5, -8, 3, -8, -4, -8, -13, 6, 0, 3, 13, -16, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.2-c";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -1, 4, 0, 8, 1, 4, -6, 12, -3, -10, 8, -4, -15, 11, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.2-d";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, -4, 3, 4, -1, -2, -6, -6, 3, 8, 10, 1, -9, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.2-e";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 8, 2, -6, -3, 0, 3, 8, 8, 0, -9, -10, 12, -9, -7, 8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.2-f";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -1, -4, 0, -8, -1, 4, -6, -12, 3, -10, -8, 4, -15, 11, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.2-g";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -7, 0, 6, -6, -9, -10, 8, 0, 3, -4, 6, 12, -13, -13, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.2-h";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 2, -5, 8, -3, -8, -4, 8, 13, 6, 0, -3, 13, -16, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.2-i";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 4, -3, -4, 1, -2, -6, 6, -3, 8, -10, -1, -9, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 810.2-j";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -7, 0, -6, 6, 9, -10, 8, 0, -3, -4, -6, -12, -13, -13, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 815.2-a";
N := (-12*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, -7, 2, 3, 3, -6, 3, -1, 8, -12, 3, 5, 0, 9, -4, 5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 815.2-b";
N := (-12*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, -7, 2, -3, -3, 6, -3, -1, 8, 12, -3, 5, 0, -9, -4, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 815.3-a";
N := (12*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 2, -7, 3, 3, 3, -6, 8, -1, 3, -12, 5, 9, 0, 5, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 815.3-b";
N := (12*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 2, -7, -3, -3, -3, 6, 8, -1, -3, 12, 5, -9, 0, 5, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 817.2-a";
N := (-2*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -1, 5, 0, -7, -10, -8, 3, 6, 2, 4, 11, -2, -11, 2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 817.2-b";
N := (-2*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 1, 5, 0, 7, 10, 8, 3, -6, -2, 4, -11, 2, -11, 2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 817.3-a";
N := (2*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, -4, 5, -7, 0, -8, -10, 3, 2, 6, 4, -2, 11, 2, -11, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 817.3-b";
N := (2*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, 4, 5, 7, 0, 8, 10, 3, -2, -6, 4, 2, -11, 2, -11, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-a";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 0, 8, 0, 0, -4, 8, -8, 8, 2, 4, -8, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-b";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 0, -8, 0, 0, -4, 8, 8, -8, 2, -4, 8, -8, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-a";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, 4, 8, 0, 0, 8, -4, 8, -8, 2, -8, 4, 4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-b";
N := (12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, 4, -8, 0, 0, 8, -4, -8, 8, 2, 8, -4, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 834.1-a";
N := (-17*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 2, 5, 0, 3, 9, 6, -1, -10, -3, -6, -1, 6, 12, -7, -1, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 834.1-b";
N := (-17*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 6, 2, -8, 2, 10, -6, 8, 2, 0, -2, -12, -2, -8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 834.1-c";
N := (-17*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 6, -2, 8, -2, -10, -6, 8, -2, 0, -2, 12, 2, -8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 834.1-d";
N := (-17*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 5, 0, -3, -9, -6, -1, -10, 3, 6, -1, -6, -12, -7, -1, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 834.2-a";
N := (-17*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 5, 2, 3, 0, 6, 9, -10, -1, -6, -3, -1, 12, 6, -1, -7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 834.2-b";
N := (-17*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 0, -8, 2, 10, 2, 8, -6, 0, 2, -2, -2, -12, 8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 834.2-c";
N := (-17*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 0, 8, -2, -10, -2, 8, -6, 0, -2, -2, 2, 12, 8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 834.2-d";
N := (-17*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 5, 2, -3, 0, -6, -9, -10, -1, 6, 3, -1, -12, -6, -1, -7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 835.2-a";
N := (-13*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -4, -4, 0, -4, -8, 8, 8, -10, -8, -8, -2, 4, 6, -4, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 835.2-b";
N := (-13*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -4, -4, 0, 4, 8, -8, 8, -10, 8, 8, -2, -4, -6, -4, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 835.3-a";
N := (13*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -4, -4, -4, 0, 8, -8, -10, 8, -8, -8, -2, 6, 4, -2, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 835.3-b";
N := (13*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -4, -4, 4, 0, -8, 8, -10, 8, 8, 8, -2, -6, -4, -2, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 841.2-a";
N := (-8*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 0, -8, -7, 0, 0, 0, -8, -13, 0, 0, -13, 0, 0, -11, -11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 841.3-a";
N := (-8*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 0, -7, -8, 0, 0, 0, -13, -8, 0, 0, -13, 0, 0, -11, -11, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 844.1-a";
N := (10*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, -4, -2, 8, -1, 0, -5, 11, 4, -2, -4, 5, 6, -12, -6, 12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 844.1-b";
N := (10*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -4, -2, -8, 1, 0, 5, 11, 4, 2, 4, 5, -6, 12, -6, 12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 844.2-a";
N := (-10*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, -2, -4, -1, 8, -5, 0, 4, 11, -4, -2, 5, -12, 6, 12, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 844.2-b";
N := (-10*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -2, -4, 1, -8, 5, 0, 4, 11, 4, 2, 5, 12, -6, 12, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.1-a";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -6, 0, 6, 2, -6, 6, 8, -10, 10, 6, -4, 4, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.1-b";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -6, -8, 6, -2, 3, -6, 6, 6, -9, 0, 0, 8, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.1-c";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 8, 6, -8, -6, 10, -6, -6, 0, -6, -6, 6, 0, -4, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.1-d";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, 2, -6, 0, -4, 1, -8, 4, -12, -5, -6, 0, -6, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.1-e";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, 2, 6, 0, 4, -1, -8, 4, 12, -5, 6, 0, -6, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.1-f";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 8, 6, 8, 6, -10, 6, -6, 0, 6, -6, -6, 0, -4, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.1-g";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -6, 8, -6, 2, -3, -6, 6, -6, -9, 0, 0, 8, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.1-h";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, 0, -6, -2, 6, 6, 8, 10, 10, -6, 4, 4, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-a";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 0, 6, 0, -6, 2, 8, 6, -10, 10, -4, 6, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-b";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 2, 6, -8, 3, -2, 6, -6, 6, -9, 0, 0, -8, 8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-c";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 6, 8, -6, -8, -6, 10, 0, -6, -6, -6, 0, 6, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-d";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -6, 0, -6, 1, -4, 4, -8, -12, -5, 0, -6, 12, -6, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-e";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -6, 0, 6, -1, 4, 4, -8, 12, -5, 0, 6, 12, -6, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-f";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 6, 8, 6, 8, 6, -10, 0, -6, 6, -6, 0, -6, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-g";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 2, -6, 8, -3, 2, 6, -6, -6, -9, 0, 0, -8, 8, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 846.2-h";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 0, -6, 0, 6, -2, 8, 6, 10, 10, 4, -6, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.1-a";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 5, 4, 7, 3, -8, -6, 5, 2, -8, 11, 6, 13, 2, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.1-b";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 7, 4, -3, -9, 2, -8, -5, 2, -2, 7, 4, -11, -4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.1-c";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 7, 4, 3, 9, -2, 8, -5, 2, 2, -7, 4, 11, -4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.1-d";
N := (-12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, 5, 4, -7, -3, 8, 6, 5, 2, 8, -11, 6, -13, 2, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.2-a";
N := (12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 4, 5, 3, 7, -6, -8, 2, 5, 11, -8, 6, 13, -12, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.2-b";
N := (12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, 4, 7, -9, -3, -8, 2, 2, -5, 7, -2, 4, -11, 12, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.2-c";
N := (12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, 4, 7, 9, 3, 8, -2, 2, -5, -7, 2, 4, 11, 12, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.2-d";
N := (12*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, 4, 5, -3, -7, 6, 8, 2, 5, -11, 8, 6, -13, -12, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 849.1-a";
N := (-14*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 8, -4, -2, 4, -10, -4, -8, 12, 2, -2, 14, -6, -14, 4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 849.1-b";
N := (-14*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 8, -4, 2, -4, 10, 4, -8, 12, -2, 2, 14, 6, 14, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 849.2-a";
N := (14*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, -4, 8, 4, -2, -4, -10, 12, -8, -2, 2, 14, -14, -6, 4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 849.2-b";
N := (14*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, -4, 8, -4, 2, 4, 10, 12, -8, 2, -2, 14, 14, 6, 4, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.1-a";
N := (-18*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 0, 0, 6, 6, -4, 8, -12, 6, -10, -6, -6, -4, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.1-b";
N := (-18*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -6, 0, 2, -2, -4, 4, 0, 0, 6, -4, -4, 4, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.1-c";
N := (-18*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 6, 0, -2, 2, -4, 4, 0, 0, 6, 4, 4, 4, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.1-d";
N := (-18*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 0, 0, -6, -6, -4, 8, 12, -6, -10, 6, 6, -4, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.2-a";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, 6, -10, 6, -10, 4, -8, 8, 12, -10, 2, -2, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.2-b";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -2, -6, 10, -6, -10, 4, 8, -8, 12, 10, -2, -2, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.2-c";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, 4, -2, -6, 6, 4, 0, -8, -6, -8, 14, -4, 10, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.2-d";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -4, 2, 6, -6, 4, 0, 8, 6, -8, -14, 4, 10, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.4-a";
N := (18*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 0, 0, 6, 6, 8, -4, 6, -12, -10, -6, -6, 2, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.4-b";
N := (18*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 0, -6, -2, 2, 4, -4, 0, 0, 6, -4, -4, 10, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.4-c";
N := (18*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, 6, 2, -2, 4, -4, 0, 0, 6, 4, 4, 10, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.4-d";
N := (18*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 0, 0, -6, -6, 8, -4, -6, 12, -10, 6, 6, 2, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.3-a";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 6, 2, 6, -10, 4, -10, 8, -8, 12, 2, -10, -12, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.3-b";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -6, -2, -6, 10, 4, -10, -8, 8, 12, -2, 10, -12, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.3-c";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, -2, 4, 6, -6, 0, 4, -6, -8, -8, -4, 14, 8, 10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 855.3-d";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, 2, -4, -6, 6, 0, 4, 6, 8, -8, 4, -14, 8, 10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.2-a";
N := (-16*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 8, -1, 6, 3, -3, 0, -4, 9, 6, -13, 9, -6, 2, 5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.2-b";
N := (-16*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 8, -1, -6, -3, 3, 0, -4, -9, -6, -13, -9, 6, 2, 5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.2-c";
N := (-16*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -7, 6, -5, 3, -6, 6, 9, 0, 3, 3, 4, 2, -5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.2-d";
N := (-16*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -7, -6, 5, -3, 6, 6, -9, 0, 3, -3, -4, 2, -5, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.2-e";
N := (-16*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -1, 6, -9, 9, 0, 8, -3, 6, 11, -3, 6, -10, 5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.2-f";
N := (-16*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -1, -6, 9, -9, 0, 8, 3, -6, 11, 3, -6, -10, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.3-a";
N := (-16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, 8, 3, 6, 0, -3, -4, 6, 9, -13, -6, 9, 5, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.3-b";
N := (-16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, 8, -3, -6, 0, 3, -4, -6, -9, -13, 6, -9, 5, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.3-c";
N := (-16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -7, 2, -5, 6, -6, 3, 6, 0, 9, 3, 4, 3, -5, 2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.3-d";
N := (-16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -7, 2, 5, -6, 6, -3, 6, 0, -9, 3, -4, -3, -5, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.3-e";
N := (-16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, -4, -9, 6, 0, 9, 8, 6, -3, 11, 6, -3, 5, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 860.3-f";
N := (-16*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, -4, 9, -6, 0, -9, 8, -6, 3, 11, -6, 3, 5, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 863.1-a";
N := (-12*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 2, -6, 6, 0, 8, -6, -6, -8, -4, -12, -8, -2, -10, -6, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 863.1-b";
N := (-12*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -2, -6, 6, 0, -8, 6, 6, -8, -4, 12, 8, -2, 10, 6, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 863.2-a";
N := (12*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, 6, -6, 8, 0, -6, -6, -4, -8, -8, -12, -2, -6, -10, -8, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 863.2-b";
N := (12*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 6, -6, -8, 0, 6, 6, -4, -8, 8, 12, -2, 6, 10, -8, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.1-a";
N := (17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, -1, -1, 9, 9, 6, 6, -7, -7, -6, -6, 2, -6, -6, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.1-b";
N := (17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, -6, 4, -4, -6, 6, 10, 10, -8, 8, 14, -12, 12, 2, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.1-c";
N := (17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, -6, -4, 4, 6, -6, 10, 10, 8, -8, 14, 12, -12, 2, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.1-d";
N := (17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -3, -1, -1, -9, -9, -6, -6, -7, -7, 6, 6, 2, 6, 6, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-a";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, -6, -6, 0, 4, 10, 8, 0, -10, 2, 10, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-b";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 0, 0, -6, 4, -8, -8, -12, 2, -2, -10, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-c";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -8, 3, -4, 9, 2, -5, 6, 6, 1, 5, -9, 5, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-d";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 8, -9, 0, -3, -10, -7, 6, -6, 5, -3, 9, -13, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-e";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, -6, -6, 0, 4, -6, -12, 8, 10, -6, -6, 8, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-f";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -8, -3, 4, -9, 2, -5, -6, -6, 1, -5, 9, 5, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-g";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 0, 8, -2, -6, 4, 4, -4, -6, -12, -14, -6, 8, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-h";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, 0, 4, -6, -4, 4, 0, 12, -2, -14, -6, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-i";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 0, 6, -6, -4, 8, 12, 6, 8, 6, 6, -16, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-j";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 0, -6, 6, -4, 8, -12, -6, 8, -6, -6, -16, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-k";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 0, 0, 6, 4, -8, 8, 12, 2, 2, 10, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-l";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -2, -4, -6, 4, 4, 4, -12, -12, 2, 6, -4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-m";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 6, 2, 4, -12, 6, 0, 0, 10, 6, -2, 4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-n";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -5, 4, -3, 6, 1, -6, -2, 11, 11, -11, -3, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-o";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -6, -2, -4, -12, 6, 0, 0, 10, -6, 2, 4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-p";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, 6, 6, 0, 4, 10, -8, 0, -10, -2, -10, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-q";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, 0, -8, 6, -4, 4, 8, -8, 2, -10, -10, -4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-r";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 8, 9, 0, 3, -10, -7, -6, 6, 5, 3, -9, -13, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-s";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 0, -4, 6, -4, 4, 0, -12, -2, 14, 6, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-t";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 5, -4, 3, 6, 1, 6, 2, 11, -11, 11, -3, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-u";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 2, 4, 6, 4, 4, -4, 12, -12, -2, -6, -4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-v";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, -2, 4, 0, 8, 0, -2, 4, 6, -10, -2, 6, 12, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-w";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, 6, 6, 0, 4, -6, 12, -8, 10, 6, 6, 8, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-x";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 4, 0, 2, -2, 12, 0, 12, -6, -8, -6, 10, -8, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-y";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 0, 8, -6, -4, 4, -8, 8, 2, 10, 10, -4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-z";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 4, 0, -2, 2, 12, 0, -12, 6, -8, 6, -10, -8, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-aa";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 0, -8, 2, 6, 4, 4, 4, 6, -12, 14, 6, 8, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.1-ab";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -2, -4, 0, -8, 0, -2, -4, -6, -10, 2, -6, 12, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.2-a";
N := (-19*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 2, 4, 8, 2, -4, -2, -2, -10, -6, 0, 6, 14, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.2-b";
N := (-19*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 4, 8, 8, -8, -6, 0, 6, -2, 6, 2, 8, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.2-c";
N := (-19*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 4, 0, -2, -8, 4, 8, 0, 6, -2, -10, 4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.2-d";
N := (-19*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 0, -9, -9, 6, -9, 1, -4, -12, -1, 6, 13, 11, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.2-e";
N := (-19*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, -5, -1, 2, 11, 1, 4, 8, -9, 6, 9, -13, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.2-f";
N := (-19*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 0, 9, 9, -6, -9, 1, 4, 12, -1, -6, -13, 11, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.2-g";
N := (-19*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, -8, -8, -8, -6, 0, -6, -2, -6, -2, 8, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.2-h";
N := (-19*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -4, 0, 2, -8, 4, -8, 0, 6, 2, 10, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.2-i";
N := (-19*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 5, 1, -2, 11, 1, -4, -8, -9, -6, -9, -13, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.2-j";
N := (-19*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 2, -4, -8, -2, -4, -2, 2, 10, -6, 0, -6, 14, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-a";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, -6, -6, 0, 10, 4, 0, 8, -10, 10, 2, 0, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-b";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, 0, 0, -6, -8, 4, -12, -8, 2, -10, -2, 12, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-c";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -8, 6, -4, 3, 9, -5, 2, 6, 6, 1, -9, 5, 12, 5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-d";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 8, 2, 0, -9, -3, -7, -10, -6, 6, 5, 9, -3, -4, -13, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-e";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, -6, -6, 0, -6, 4, 8, -12, 10, -6, -6, -12, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-f";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -8, 6, 4, -3, -9, -5, 2, -6, -6, 1, 9, -5, 12, 5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-g";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -2, -2, 8, -6, 4, 4, -6, -4, -12, -6, -14, 12, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-h";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 4, 0, -6, 4, -4, 12, 0, -2, -6, -14, -12, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-i";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 6, 0, -6, 8, -4, 6, 12, 8, 6, 6, -4, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-j";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, -6, 0, 6, 8, -4, -6, -12, 8, -6, -6, -4, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-k";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 0, 0, 6, -8, 4, 12, 8, 2, 10, 2, 12, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-l";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -4, -2, -6, 4, 4, -12, 4, -12, 6, 2, 0, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-m";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, 2, 6, 4, 6, -12, 0, 0, 10, -2, 6, 8, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-n";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, 4, -5, -3, 1, 6, -2, -6, 11, -11, 11, 12, -3, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-o";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, -2, -6, -4, 6, -12, 0, 0, 10, 2, -6, 8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-p";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, 6, 6, 0, 10, 4, 0, -8, -10, -10, -2, 0, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-q";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -8, 0, 6, 4, -4, -8, 8, 2, -10, -10, 4, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-r";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 8, 2, 0, 9, 3, -7, -10, 6, -6, 5, -9, 3, -4, -13, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-s";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, -4, 0, 6, 4, -4, -12, 0, -2, 6, 14, -12, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-t";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -4, 5, 3, 1, 6, 2, 6, 11, 11, -11, 12, -3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-u";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, 4, 2, 6, 4, 4, 12, -4, -12, -6, -2, 0, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-v";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -8, 0, 4, 8, -2, 0, 6, 4, -10, 6, -2, -4, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-w";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, 6, 6, 0, -6, 4, -8, 12, 10, 6, 6, -12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-x";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -6, 2, 0, -2, 0, 12, -6, 12, -8, 10, -6, -4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-y";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 8, 0, -6, 4, -4, 8, -8, 2, 10, 10, 4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-z";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -6, -2, 0, 2, 0, 12, 6, -12, -8, -10, 6, -4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-aa";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -2, 2, -8, 6, 4, 4, 6, 4, -12, 6, 14, 12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.4-ab";
N := (13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -8, 0, -4, -8, -2, 0, -6, -4, -10, -6, 2, -4, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.3-a";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 4, 8, 4, 2, -2, -4, -10, -2, -6, 6, 0, -2, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.3-b";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 8, 4, 8, -6, -8, 6, 0, -2, 2, 6, -8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.3-c";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 0, 4, -2, 4, -8, 0, 8, 6, -10, -2, -4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.3-d";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 6, -9, -9, 6, 1, -9, -12, -4, -1, 13, 6, 8, 11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.3-e";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -1, -5, 2, 1, 11, 8, 4, -9, 9, 6, -8, -13, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.3-f";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, 9, 9, -6, 1, -9, 12, 4, -1, -13, -6, 8, 11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.3-g";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -8, -4, -8, -6, -8, -6, 0, -2, -2, -6, -8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.3-h";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 0, -4, 2, 4, -8, 0, -8, 6, 10, 2, -4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.3-i";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, 1, 5, -2, 1, 11, -8, -4, -9, -9, -6, -8, -13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 870.3-j";
N := (-19*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 4, -8, -4, -2, -2, -4, 10, 2, -6, -6, 0, -2, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 873.1-a";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, -2, 4, 8, 6, 4, -2, 2, 0, -8, 6, 0, -12, -8, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 873.1-b";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 4, -2, -4, -8, -6, -4, -2, 2, 0, 8, 6, 0, 12, -8, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 873.2-a";
N := (6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 2, -2, 4, 8, 4, 4, 6, 2, -2, -8, 0, 6, -12, 0, -6, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 873.2-b";
N := (6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, -2, 4, -8, -4, -4, -6, 2, -2, 8, 0, 6, 12, 0, -6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.1-a";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 2, 0, -3, 0, 8, 8, -6, 3, -13, -6, 12, 5, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.1-b";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 4, -2, 6, 0, 12, 0, 6, -8, 8, -6, 14, 10, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.1-c";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 1, 4, -4, 9, -4, -6, -2, -12, 11, 5, 4, 10, 3, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.1-d";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 4, 4, -9, 4, -6, -2, 12, -11, 5, -4, -10, 3, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.1-e";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 4, 2, -6, 0, 12, 0, -6, 8, 8, 6, -14, 10, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.1-f";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 2, 0, 3, 0, 8, 8, 6, -3, -13, 6, -12, 5, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.2-a";
N := (5*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 0, 2, -6, 8, -4, 8, -8, 2, -10, 10, -4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.2-b";
N := (5*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, 0, -2, 6, 8, -4, -8, 8, 2, 10, -10, -4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.4-a";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 2, 0, 0, -3, 8, 8, 3, -6, -13, 12, -6, 14, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.4-b";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 4, -2, 0, 6, 0, 12, -8, 6, 8, 14, -6, -12, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.4-c";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 4, -4, -4, 9, -2, -6, 11, -12, 5, 10, 4, 4, 3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.4-d";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 4, 4, 4, -9, -2, -6, -11, 12, 5, -10, -4, 4, 3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.4-e";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 4, 2, 0, -6, 0, 12, 8, -6, 8, -14, 6, -12, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.4-f";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 2, 0, 0, 3, 8, 8, -3, 6, -13, -12, 6, 14, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.3-a";
N := (5*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, 0, -6, 2, -4, 8, -8, 8, 2, 10, -10, -8, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 874.3-b";
N := (5*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 0, 6, -2, -4, 8, 8, -8, 2, -10, 10, -8, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.1-a";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 6, 4, -8, 2, 0, -8, 6, 0, 8, 2, 12, 10, 2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.1-b";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -2, 0, 4, 10, 0, 8, -10, -8, -4, -6, 4, -6, 2, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.1-c";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -8, 0, -8, -2, -2, -4, -4, -8, -8, 6, -6, -10, -8, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.1-d";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 3, -6, -4, 2, -2, -3, 1, 9, 0, -2, -10, -12, 8, 2, -4, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.1-e";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 3, -6, 4, -2, 2, 3, 1, 9, 0, 2, -10, 12, -8, 2, -4, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.1-f";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, -8, 0, 8, 2, 2, -4, -4, 8, 8, 6, 6, 10, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.1-g";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -2, 0, -4, -10, 0, 8, -10, 8, 4, -6, -4, 6, 2, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.1-h";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 6, -4, 8, -2, 0, -8, 6, 0, -8, 2, -12, -10, 2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.2-a";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, -6, -8, 4, 0, 2, 6, -8, 8, 0, 2, 10, 12, 2, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.2-b";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 2, 4, 0, 0, 10, -10, 8, -4, -8, -6, -6, 4, 10, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.2-c";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -8, -4, -8, 0, -2, -2, -4, -4, -8, -8, 6, -10, -6, 4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.2-d";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -6, 3, 2, -4, -3, -2, 9, 1, -2, 0, -10, 8, -12, -4, 2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.2-e";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -6, 3, -2, 4, 3, 2, 9, 1, 2, 0, -10, -8, 12, -4, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.2-f";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -8, -4, 8, 0, 2, 2, -4, -4, 8, 8, 6, 10, 6, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.2-g";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 2, -4, 0, 0, -10, -10, 8, 4, 8, -6, 6, -4, 10, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 876.2-h";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 6, -6, 8, -4, 0, -2, 6, -8, -8, 0, 2, -10, -12, 2, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-a";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 7, 2, 4, 6, 0, 1, -13, -6, 3, 12, -10, 13, 7, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-b";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -8, -6, 1, -5, 6, 12, -1, 3, 12, 10, 8, 2, -8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-c";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 7, -6, -4, -1, 0, -6, -13, -12, -3, -13, 10, 2, 7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-d";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -6, -3, 6, 2, -5, -5, 4, -8, -7, -12, -6, 4, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-e";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 7, 2, -4, -6, 0, -1, -13, -6, -3, -12, 10, -13, 7, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-f";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, 0, 6, -3, -5, 2, 4, -5, -7, -8, -6, -12, 10, 4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-g";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 7, 6, 4, 1, 0, -6, -13, 12, 3, 13, -10, 2, 7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-h";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -6, 3, -6, -2, 5, -5, 4, 8, 7, 12, 6, 4, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-i";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -8, 6, -1, 5, -6, 12, -1, -3, -12, -10, -8, 2, -8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-j";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -8, 2, -1, 6, -6, 5, -1, 12, -12, -3, -8, -10, -8, 2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-k";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -8, 2, 1, -6, 6, -5, -1, 12, 12, 3, 8, 10, -8, 2, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 882.1-l";
N := (-21*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, 0, -6, 3, 5, -2, 4, -5, 7, 8, 6, 12, 10, 4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 887.1-a";
N := (-14*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 3, 4, -2, -4, 5, -6, -3, -4, -9, -12, -13, 4, 5, 1, 4, -10, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 887.1-b";
N := (-14*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, -4, -2, -4, -5, 6, 3, 4, -9, -12, 13, -4, 5, -1, -4, -10, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 887.2-a";
N := (-14*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 3, -4, -2, -6, 5, -4, -3, -12, -9, 4, -13, 5, 4, 1, -12, -10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 887.2-b";
N := (-14*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, -3, -4, -2, 6, -5, 4, 3, -12, -9, -4, 13, 5, -4, -1, -12, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.2-a";
N := (13*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -2, 8, 0, -2, 0, -8, 0, -6, -6, 4, -10, -14, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.2-b";
N := (13*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, -2, -8, 0, 2, 0, -8, 0, 6, -6, -4, 10, -14, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.3-a";
N := (13*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -2, 0, 8, 0, -2, 0, -8, -6, -6, -10, 4, 8, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 893.3-b";
N := (13*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, -2, 0, -8, 0, 2, 0, -8, 6, -6, 10, -4, 8, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 894.1-a";
N := (w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, 8, 0, -6, 2, 8, -4, 8, -4, 10, 10, -10, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 894.1-b";
N := (w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, -4, 3, 6, 6, 0, -7, -10, 9, -9, -4, -3, -6, -1, 5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 894.1-c";
N := (w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, -4, -3, -6, -6, 0, -7, -10, -9, 9, -4, 3, 6, -1, 5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 894.1-d";
N := (w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 0, -8, 0, 6, -2, 8, -4, -8, 4, 10, -10, 10, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 894.2-a";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, 0, 8, 2, -6, -4, 8, -4, 8, 10, -10, 10, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 894.2-b";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -1, 6, 3, 0, 6, -10, -7, -9, 9, -4, -6, -3, 5, -1, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 894.2-c";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, -1, -6, -3, 0, -6, -10, -7, 9, -9, -4, 6, 3, 5, -1, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 894.2-d";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 0, 0, -8, -2, 6, -4, 8, 4, -8, 10, 10, -10, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-a";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, -6, -6, 8, -4, -6, -6, -4, 0, 12, -4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-b";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -8, 0, -2, 2, 8, 4, 12, -4, 6, -2, -6, -16, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-c";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, -6, -6, -4, 8, -6, -6, -4, 12, 0, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-d";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 8, 0, 2, -2, 8, 4, -12, 4, 6, 2, 6, -16, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-e";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, -4, -4, -2, 10, -8, -8, -8, 0, -2, 10, 14, 0, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-f";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, 8, -2, 2, 4, 8, 4, -12, 6, 6, 2, 12, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-g";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 4, 4, 2, -10, -8, -8, 8, 0, -2, -10, -14, 0, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-h";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 4, 4, -10, 2, -8, -8, 0, 8, -2, -14, -10, -16, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-i";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, 6, 6, 8, -4, 6, 6, -4, 0, -12, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-j";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, -8, 2, -2, 4, 8, -4, 12, 6, -6, -2, 12, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-k";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 0, -6, 6, -4, -4, -12, 12, 14, 6, -6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-l";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, 6, 6, -4, 8, 6, 6, -4, -12, 0, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-m";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 0, 0, 6, -6, -4, -4, 12, -12, 14, -6, 6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-n";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -4, -4, 10, -2, -8, -8, 0, -8, -2, 14, 10, -16, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-a";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 5, 2, 3, 0, 6, -9, 8, -7, 3, -3, 2, 6, -3, 8, 5, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-b";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 8, 8, 0, 6, 4, -8, 8, -8, 8, 8, 4, -12, -8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-c";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, 2, -3, 0, -6, 9, 8, -7, -3, 3, 2, -6, 3, 8, 5, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-d";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, 6, 6, -6, -6, -2, -4, -12, 0, -8, 6, -6, -14, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-e";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 8, 0, 0, 0, 0, -13, -13, 0, 0, -13, 0, 0, 5, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-f";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 8, -8, 0, -6, -4, -8, 8, 8, -8, 8, -4, 12, -8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-g";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, -6, -6, 6, 6, -2, -4, 12, 0, -8, -6, 6, -14, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-h";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 2, -6, 0, 2, -10, -4, 8, -8, -2, -10, -6, 2, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-i";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, 4, -4, -6, 10, 4, 4, -4, 4, 6, 6, -6, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-j";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -2, 6, 0, -2, -10, -4, -8, 8, -2, 10, 6, 2, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-k";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -8, 8, 0, 6, -4, 8, 8, 8, -8, -8, -4, 12, 8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-l";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, -4, 4, 6, -10, 4, 4, 4, -4, 6, -6, 6, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-m";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, -2, 3, 0, 6, 9, -8, -7, -3, 3, -2, -6, 3, -8, 5, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-n";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -8, -8, 0, -6, 4, 8, 8, -8, 8, -8, 4, -12, 8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-o";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -5, -2, -3, 0, -6, -9, -8, -7, 3, -3, -2, 6, -3, -8, 5, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-a";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 5, 0, 3, -9, 6, -7, 8, -3, 3, 2, -3, 6, 5, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-b";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, 0, 0, 8, 4, 6, 8, -8, 8, -8, 8, -12, 4, 0, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-c";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 5, 0, -3, 9, -6, -7, 8, 3, -3, 2, 3, -6, 5, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-d";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 6, 6, -6, -6, -4, -2, 0, -12, -8, -6, 6, -4, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-e";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 8, -1, 0, 0, 0, 0, -13, -13, 0, 0, -13, 0, 0, -16, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-f";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 0, 0, -8, -4, -6, 8, -8, -8, 8, 8, 12, -4, 0, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-g";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, -6, -6, 6, 6, -4, -2, 0, 12, -8, 6, -6, -4, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-h";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -6, 2, 2, 0, -4, -10, -8, 8, -2, -6, -10, 0, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-i";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -4, 4, 10, -6, 4, 4, 4, -4, 6, -6, 6, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-j";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 6, -2, -2, 0, -4, -10, 8, -8, -2, 6, 10, 0, 2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-k";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, 0, 0, 8, -4, 6, 8, 8, -8, 8, -8, 12, -4, 0, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-l";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 4, -4, -10, 6, 4, 4, -4, 4, 6, 6, -6, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-m";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -5, 0, 3, 9, 6, -7, -8, 3, -3, -2, 3, -6, 5, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-n";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, 0, 0, -8, 4, -6, 8, 8, 8, -8, -8, -12, 4, 0, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-o";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -5, 0, -3, -9, -6, -7, -8, -3, 3, -2, -3, 6, 5, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-a";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 4, 6, 0, -4, 4, 8, 2, -8, -2, 6, -14, 4, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-b";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, 7, 1, 1, -10, 6, -10, -6, 12, -4, -8, -3, -10, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-c";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 0, 4, -10, -2, -4, -12, 4, 0, 2, 10, 2, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-d";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 7, -3, -3, -3, 6, 10, 10, -6, 12, -4, 0, -9, -14, 13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-e";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -4, -4, 2, -2, -12, -4, 12, 12, 2, 2, 6, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-f";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 1, 5, -3, 3, 4, -8, 8, -2, -10, 10, 6, 11, 4, 5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-g";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 5, 1, -9, 5, 0, -4, -4, 2, 2, -10, -6, -1, 12, -13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-h";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, -4, 0, -2, -6, -4, -4, -8, 4, 2, -6, -2, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-i";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -7, -3, 5, -5, 8, -4, 12, -10, -6, -10, 2, 7, 0, -15, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-j";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -7, 3, -5, 5, -8, -4, 12, 10, 6, -10, -2, -7, 0, -15, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-k";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, 4, 0, 2, 6, -4, -4, 8, -4, 2, 6, 2, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-l";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 5, -1, 9, -5, 0, -4, -4, -2, -2, -10, 6, 1, 12, -13, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-m";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 1, -5, 3, -3, -4, -8, 8, 2, 10, 10, -6, -11, 4, 5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-n";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 4, 4, -2, 2, -12, -4, -12, -12, 2, -2, -6, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-o";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 7, 3, 3, 3, -6, 10, 10, 6, -12, -4, 0, 9, -14, 13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-p";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 0, -4, 10, 2, -4, -12, -4, 0, 2, -10, -2, -12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-q";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, -7, -1, -1, 10, 6, -10, 6, -12, -4, 8, 3, -10, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.1-r";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, -4, -6, 0, 4, 4, 8, -2, 8, -2, -6, 14, 4, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-a";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 6, 4, -4, 0, 8, 4, -8, 2, -2, -14, 6, 8, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-b";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 1, 7, -10, 1, -10, 6, 12, -6, -4, -3, -8, -13, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-c";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 4, 0, -2, -10, -12, -4, 0, 4, 2, 2, 10, 12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-d";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 7, -3, -3, 6, -3, 10, 10, 12, -6, -4, -9, 0, 13, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-e";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, -4, -4, -2, 2, -4, -12, 12, 12, 2, 6, 2, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-f";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 1, -3, 5, 4, 3, 8, -8, -10, -2, 10, 11, 6, 5, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-g";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 5, -9, 1, 0, 5, -4, -4, 2, 2, -10, -1, -6, -13, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-h";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, 0, -4, -6, -2, -4, -4, 4, -8, 2, -2, -6, -4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-i";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -7, 5, -3, 8, -5, 12, -4, -6, -10, -10, 7, 2, -15, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-j";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -7, -5, 3, -8, 5, 12, -4, 6, 10, -10, -7, -2, -15, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-k";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, 0, 4, 6, 2, -4, -4, -4, 8, 2, 2, 6, -4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-l";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 5, 9, -1, 0, -5, -4, -4, -2, -2, -10, 1, 6, -13, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-m";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, 3, -5, -4, -3, 8, -8, 10, 2, 10, -11, -6, 5, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-n";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 4, 4, 2, -2, -4, -12, -12, -12, 2, -6, -2, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-o";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 7, 3, 3, -6, 3, 10, 10, -12, 6, -4, 9, 0, 13, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-p";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -4, 0, 2, 10, -12, -4, 0, -4, 2, -2, -10, 12, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-q";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, -1, -7, 10, -1, -10, 6, -12, 6, -4, 3, 8, -13, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 912.2-r";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, -6, -4, 4, 0, 8, 4, 8, -2, -2, 14, -6, 8, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.1-a";
N := (-14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 4, -6, 4, 6, -4, -4, 0, -6, -8, -2, 2, 8, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.1-b";
N := (-14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 1, -3, 0, 1, -8, -5, 13, -4, -12, -3, 9, 8, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.1-c";
N := (-14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, 1, 3, 0, -1, -8, -5, -13, 4, -12, 3, -9, 8, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.1-d";
N := (-14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 4, 6, -4, -6, -4, -4, 0, 6, -8, 2, -2, 8, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.2-a";
N := (-18*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 2, 0, -2, -6, -4, 2, 8, 0, -2, 10, 4, -2, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.2-b";
N := (-18*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -7, -5, -7, -5, -1, -4, -12, 6, 0, 12, -10, -4, 5, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.2-c";
N := (-18*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 0, -8, 6, 6, 4, 8, 0, -8, 2, 6, 10, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.2-d";
N := (-18*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -7, -5, 7, 5, 1, -4, -12, -6, 0, 12, 10, 4, 5, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.2-e";
N := (-18*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 2, 0, 2, 6, -4, 2, -8, 0, -2, -10, -4, -2, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.2-f";
N := (-18*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 0, 8, -6, -6, 4, 8, 0, 8, 2, -6, -10, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.4-a";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 0, -6, 6, 4, -4, -4, -6, 0, -8, 2, -2, 14, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.4-b";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 4, -3, 1, 0, -5, -8, -4, 13, -12, 9, -3, -2, 8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.4-c";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, 4, 3, -1, 0, -5, -8, 4, -13, -12, -9, 3, -2, 8, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.4-d";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 0, 6, -6, -4, -4, -4, 6, 0, -8, -2, 2, 14, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.3-a";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, 0, 0, -6, -2, 2, -4, 0, 8, -2, 4, 10, -8, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.3-b";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -5, -7, -7, -1, -5, -12, -4, 0, 6, 12, -4, -10, -8, 5, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.3-c";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 4, -8, 6, 6, 8, 4, -8, 0, 2, 10, 6, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.3-d";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -5, -7, 7, 1, 5, -12, -4, 0, -6, 12, 4, 10, -8, 5, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.3-e";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, 0, 0, 6, 2, 2, -4, 0, -8, -2, -4, -10, -8, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 920.3-f";
N := (-18*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 4, 8, -6, -6, 8, 4, 8, 0, 2, -10, -6, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.1-a";
N := (13*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 3, -2, 2, -1, 0, 5, -6, -4, 10, 6, -10, 0, 10, -4, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.1-b";
N := (13*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 3, 3, -2, -2, 1, 0, -5, -6, -4, -10, -6, -10, 0, -10, -4, -4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.2-a";
N := (13*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, -2, 3, -1, 2, 5, 0, -4, -6, 6, 10, -10, 10, 0, -4, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 922.2-b";
N := (13*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -1, -2, 3, 1, -2, -5, 0, -4, -6, -6, -10, -10, -10, 0, -4, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 928.1-a";
N := (4*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, -6, 8, -7, 9, -4, 11, 9, 0, 6, -9, 0, 5, -5, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 928.1-b";
N := (4*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 2, 6, -8, 7, -9, -4, -11, -9, 0, -6, -9, 0, 5, 5, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 928.1-c";
N := (4*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -2, -6, 8, 7, -9, 4, 11, 9, 0, -6, -9, 0, -5, -5, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 928.1-d";
N := (4*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, 6, -8, -7, 9, 4, -11, -9, 0, 6, -9, 0, -5, 5, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 928.2-a";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 8, -6, 9, -7, -4, 9, 11, 6, 0, -9, 5, 0, -2, -5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 928.2-b";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 3, -8, 6, -9, 7, -4, -9, -11, -6, 0, -9, 5, 0, 2, 5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 928.2-c";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -3, 8, -6, -9, 7, 4, 9, 11, -6, 0, -9, -5, 0, -2, -5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 928.2-d";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -3, -8, 6, 9, -7, 4, -9, -11, 6, 0, -9, -5, 0, 2, 5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 931.1-a";
N := (7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -2, 4, 0, 0, 0, 0, -6, 10, 4, -12, 12, 4, -2, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 931.1-b";
N := (7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 2, 4, 0, 0, 0, 0, -6, 10, -4, 12, -12, -4, -2, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 931.2-a";
N := (7*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 2, 4, 0, 0, 0, 0, 10, -6, -12, 4, 4, 12, -10, -2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 931.2-b";
N := (7*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -2, 4, 0, 0, 0, 0, 10, -6, 12, -4, -4, -12, -10, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.1-a";
N := (13*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -3, -1, -7, -4, -3, 3, 3, 4, 0, 0, 5, 10, 2, 5, -13, 8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.1-b";
N := (13*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 3, -1, -7, 4, 3, -3, -3, 4, 0, 0, -5, 10, -2, -5, -13, 8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.2-a";
N := (13*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, -7, -1, -3, -4, 3, 3, 0, 4, 5, 0, 10, 5, 2, 8, -13, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.2-b";
N := (13*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -4, -7, -1, 3, 4, -3, -3, 0, 4, -5, 0, 10, -5, -2, 8, -13, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.1-a";
N := (-2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 0, 2, 2, 0, -6, 9, 3, -10, -1, -6, 9, -4, 6, 9, -4, -4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.1-b";
N := (-2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 3, -7, 5, -3, 6, -6, 0, -4, 2, 6, 0, -4, 12, -6, -10, 8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.1-c";
N := (-2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, -3, -7, 5, 3, -6, 6, 0, -4, 2, -6, 0, -4, -12, 6, -10, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.1-d";
N := (-2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 0, 2, 2, 0, 6, -9, -3, -10, -1, 6, -9, -4, -6, -9, -4, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.2-a";
N := (2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -3, 2, 2, -6, 0, 3, 9, -1, -10, 9, -6, -4, 9, 6, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.2-b";
N := (2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, 0, 5, -7, 6, -3, 0, -6, 2, -4, 0, 6, -4, -6, 12, 8, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.2-c";
N := (2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, 0, 5, -7, -6, 3, 0, 6, 2, -4, 0, -6, -4, 6, -12, 8, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.2-d";
N := (2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 3, 2, 2, 6, 0, -3, -9, -1, -10, -9, 6, -4, -9, -6, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 940.1-a";
N := (-6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, 6, 0, 6, -6, -4, 8, -12, 2, -12, 6, 8, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 940.1-b";
N := (-6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, -6, 0, -6, 6, -4, 8, 12, 2, 12, -6, 8, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 940.4-a";
N := (6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 2, 0, 6, -6, 6, 8, -4, -12, 2, 6, -12, -4, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 940.4-b";
N := (6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 2, 0, -6, 6, -6, 8, -4, 12, 2, -6, 12, -4, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-a";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, 0, 9, 9, -4, -1, 3, -3, 5, -6, -9, -13, 11, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-b";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 0, 6, -6, 8, -10, 0, 0, -4, 6, 6, -4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-c";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 6, 6, 5, 5, -6, -1, 7, -3, 5, 6, 11, 3, 3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-d";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, 6, 0, -3, 3, 8, -1, 9, 9, -13, 6, -3, 5, 5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-e";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 0, -6, 6, -4, 2, 12, 0, 8, -6, 6, -4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-f";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 4, 0, 10, -4, 10, -8, 0, 2, 4, 2, -8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-g";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -4, 0, -10, -4, 10, 8, 0, 2, -4, -2, -8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-h";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 0, 6, -6, -4, 2, -12, 0, 8, 6, -6, -4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-i";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, -6, 0, 3, -3, 8, -1, -9, -9, -13, -6, 3, 5, 5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-j";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -6, -6, -5, -5, -6, -1, -7, 3, 5, -6, -11, 3, 3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-k";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 0, -6, 6, 8, -10, 0, 0, -4, -6, -6, -4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.1-l";
N := (-15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, 0, -9, -9, -4, -1, -3, 3, 5, 6, 9, -13, 11, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-a";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 7, 6, -6, 6, -6, -1, -8, 0, -3, -5, -3, -9, 2, 10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-b";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 6, 0, 6, 0, -4, 4, 6, 0, 4, 6, -12, 2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-c";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 7, -6, 6, -6, 6, -1, -8, 0, 3, -5, 3, 9, 2, 10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-d";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, 5, 8, -9, -4, -1, -4, 10, 9, 2, -7, -11, -14, 14, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-e";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -6, 0, -6, 0, -4, 4, -6, 0, 4, -6, 12, 2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-f";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 2, 8, 0, 8, 5, 2, -8, 9, -13, -1, 1, 16, 2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-g";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -1, 6, 0, 0, 0, 11, 2, 0, 3, 5, 3, -3, -4, 2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-h";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 1, -2, -8, 0, -8, 5, 2, 8, -9, -13, 1, -1, 16, 2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-i";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 6, -9, 0, 3, 8, 1, -3, 12, 4, -6, 6, -16, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-j";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -5, -8, 9, 4, -1, -4, -10, -9, 2, 7, 11, -14, 14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-k";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, -6, 0, 0, 0, 11, 2, 0, -3, 5, -3, 3, -4, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.3-l";
N := (-17*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -6, 9, 0, -3, 8, 1, 3, -12, 4, 6, -6, -16, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.4-a";
N := (-13*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, 0, -4, 10, 0, 8, 4, 8, 10, -10, 12, -2, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.4-b";
N := (-13*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 0, 4, -10, 0, 8, 4, -8, -10, -10, -12, 2, -12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-a";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 6, 9, 9, -1, -4, -3, 3, 5, -9, -6, 11, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-b";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 6, -6, 6, -10, 8, 0, 0, -4, 6, 6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-c";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 6, 6, 5, 5, -1, -6, -3, 7, 5, 11, 6, 3, 3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-d";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, 0, 6, 3, -3, -1, 8, 9, 9, -13, -3, 6, 5, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-e";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 6, 6, -6, 2, -4, 0, 12, 8, 6, -6, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-f";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 2, 10, 0, 10, -4, 0, -8, 2, 2, 4, -8, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-g";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -2, -10, 0, 10, -4, 0, 8, 2, -2, -4, -8, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-h";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -6, -6, 6, 2, -4, 0, -12, 8, -6, 6, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-i";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, 0, -6, -3, 3, -1, 8, -9, -9, -13, 3, -6, 5, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-j";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -6, -6, -5, -5, -1, -6, 3, -7, 5, -11, -6, 3, 3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-k";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -6, 6, -6, -10, 8, 0, 0, -4, -6, -6, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.2-l";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -6, -9, -9, -1, -4, 3, -3, 5, 9, 6, 11, -13, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-a";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 7, -6, 6, -6, 6, -8, -1, -3, 0, -5, -9, -3, 10, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-b";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 0, 6, 0, 6, 4, -4, 0, 6, 4, -12, 6, -2, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-c";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 7, 6, -6, 6, -6, -8, -1, 3, 0, -5, 9, 3, 10, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-d";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, 8, 5, -4, -9, -4, -1, 9, 10, 2, -11, -7, 14, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-e";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 0, -6, 0, -6, 4, -4, 0, -6, 4, 12, -6, -2, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-f";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 8, 2, 8, 0, 2, 5, 9, -8, -13, 1, -1, 2, 16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-g";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -1, 0, 6, 0, 0, 2, 11, 3, 0, 5, -3, 3, 2, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-h";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 1, -8, -2, -8, 0, 2, 5, -9, 8, -13, -1, 1, 2, 16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-i";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -9, 6, 3, 0, 1, 8, 12, -3, 4, 6, -6, -8, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-j";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -8, -5, 4, 9, -4, -1, -9, -10, 2, 11, 7, 14, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-k";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, 0, -6, 0, 0, 2, 11, -3, 0, 5, 3, -3, 2, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.6-l";
N := (-17*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 9, -6, -3, 0, 1, 8, -12, 3, 4, -6, 6, -8, -16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.5-a";
N := (13*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, -4, 0, 0, 10, 4, 8, 10, 8, -10, -2, 12, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 950.5-b";
N := (13*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 4, 0, 0, -10, 4, 8, -10, -8, -10, 2, -12, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 954.1-a";
N := (-15*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, -4, 0, 0, 6, -6, 0, 4, -12, 4, -2, 0, -12, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 954.1-b";
N := (-15*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -4, 0, 0, 6, 6, -4, 8, 6, 0, 2, -6, -10, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 954.1-c";
N := (-15*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -4, 0, 0, -6, -6, -4, 8, -6, 0, 2, 6, -10, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 954.1-d";
N := (-15*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, 0, 0, -6, 6, 0, 4, 12, -4, -2, 0, -12, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 954.2-a";
N := (-15*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 2, 0, 0, -6, 6, 4, 0, 4, -12, -2, 0, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 954.2-b";
N := (-15*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 2, 0, 0, 6, 6, 8, -4, 0, 6, 2, -6, -4, -10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 954.2-c";
N := (-15*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 2, 0, 0, -6, -6, 8, -4, 0, -6, 2, 6, -4, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 954.2-d";
N := (-15*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 2, 0, 0, 6, -6, 4, 0, -4, 12, -2, 0, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 955.1-a";
N := (w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, 0, 5, -6, 4, 5, 0, 4, 4, 8, 3, 10, -6, 4, 3, -7, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 955.1-b";
N := (w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 1, 2, 1, -2, -6, 9, 2, -6, 6, -6, -9, -6, 10, 6, -1, -3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 955.1-c";
N := (w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, 2, 1, 2, 6, -9, -2, -6, 6, 6, 9, -6, -10, -6, -1, -3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 955.1-d";
N := (w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -1, 0, 5, 6, -4, -5, 0, 4, 4, -8, -3, 10, 6, -4, 3, -7, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 955.4-a";
N := (w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, 5, 0, 4, -6, 0, 5, 4, 4, 3, 8, 10, 4, -6, -7, 3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 955.4-b";
N := (w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 1, 1, 2, -6, -2, 2, 9, 6, -6, -9, -6, -6, 6, 10, -3, -1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 955.4-c";
N := (w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, 1, 2, 6, 2, -2, -9, 6, -6, 9, 6, -6, -6, -10, -3, -1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 955.4-d";
N := (w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -1, 5, 0, -4, 6, 0, -5, 4, 4, -3, -8, 10, -4, 6, -7, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.1-a";
N := (9*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -3, -6, -1, 6, -4, 10, 6, -8, -12, -4, 0, -2, -9, -3, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.1-b";
N := (9*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 8, 5, 3, -3, 6, -3, 2, -4, 9, 6, 5, -9, 6, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.1-c";
N := (9*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, -1, 3, 1, 2, -9, -2, 12, 1, 6, 1, 9, -6, 8, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.1-d";
N := (9*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 2, -4, -4, 4, -6, 8, -10, -4, -8, -12, -4, -6, -6, 14, -2, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.1-e";
N := (9*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 8, 5, -3, 3, -6, 3, 2, -4, -9, -6, 5, 9, -6, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.1-f";
N := (9*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 3, -6, -1, -6, 4, -10, -6, -8, -12, 4, 0, -2, 9, 3, 2, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.1-g";
N := (9*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, -1, -3, -1, -2, 9, -2, 12, -1, -6, 1, -9, 6, 8, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.1-h";
N := (9*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, -4, -4, -4, 6, -8, 10, -4, -8, 12, 4, -6, 6, -14, -2, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.2-a";
N := (9*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, -1, -6, -4, 6, 6, 10, -12, -8, 0, -4, -2, -3, -9, -4, 2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.2-b";
N := (9*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 5, 8, -3, 3, -3, 6, -4, 2, 6, 9, 5, 6, -9, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.2-c";
N := (9*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -1, 0, 1, 3, -9, 2, 12, -2, 6, 1, 1, -6, 9, -16, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.2-d";
N := (9*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -4, -4, -6, 4, -10, 8, -8, -4, -4, -12, -6, 14, -6, 12, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.2-e";
N := (9*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 5, 8, 3, -3, 3, -6, -4, 2, -6, -9, 5, -6, 9, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.2-f";
N := (9*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, -1, -6, 4, -6, -6, -10, -12, -8, 0, 4, -2, 3, 9, -4, 2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.2-g";
N := (9*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -1, 0, -1, -3, 9, -2, 12, -2, -6, -1, 1, 6, -9, -16, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 958.2-h";
N := (9*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, -4, 6, -4, 10, -8, -8, -4, 4, 12, -6, -14, 6, 12, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 960.1-a";
N := (-16*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 0, 8, 2, 2, 4, -4, 8, 0, 2, -6, -6, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 960.1-b";
N := (-16*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 0, -8, 2, 2, -4, 4, -8, 0, 2, -6, -6, -4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 960.1-c";
N := (-16*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 0, -8, -2, -2, 4, -4, -8, 0, 2, 6, 6, 4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 960.1-d";
N := (-16*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 0, 8, -2, -2, -4, 4, 8, 0, 2, 6, 6, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 960.2-a";
N := (-16*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 8, 0, 2, 2, -4, 4, 0, 8, 2, -6, -6, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 960.2-b";
N := (-16*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -8, 0, 2, 2, 4, -4, 0, -8, 2, -6, -6, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 960.2-c";
N := (-16*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, -8, 0, -2, -2, -4, 4, 0, -8, 2, 6, 6, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 960.2-d";
N := (-16*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 8, 0, -2, -2, 4, -4, 0, 8, 2, 6, 6, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.1-a";
N := (-21*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, 1, 8, 5, -8, 1, 6, 0, -8, 7, -8, 1, 2, 8, -2, -8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.1-b";
N := (-21*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 1, 8, -5, 8, -1, -6, 0, -8, -7, 8, 1, -2, -8, -2, -8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.2-a";
N := (13*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, -7, 6, -3, -4, -6, -4, -8, 6, 10, -7, 3, 3, 4, 0, -3, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.2-b";
N := (13*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -4, -8, 0, 0, -8, -2, 8, -8, 8, -10, -2, -6, -2, -12, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.2-c";
N := (13*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -4, -8, 0, 0, 8, 2, 8, -8, -8, 10, -2, 6, 2, -12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.2-d";
N := (13*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -7, 6, 3, 4, 6, 4, -8, 6, -10, 7, 3, -3, -4, 0, -3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.4-a";
N := (21*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, 8, 1, -8, 5, 6, 1, -8, 0, -8, 7, 1, 8, 2, -8, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.4-b";
N := (21*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 8, 1, 8, -5, -6, -1, -8, 0, 8, -7, 1, -8, -2, -8, -2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.3-a";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 6, -7, -4, -3, -4, -6, 6, -8, -7, 10, 3, 4, 3, -3, 0, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.3-b";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -8, -4, 0, 0, -2, -8, -8, 8, -10, 8, -2, -2, -6, 12, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.3-c";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -8, -4, 0, 0, 2, 8, -8, 8, 10, -8, -2, 2, 6, 12, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 965.3-d";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, 6, -7, 4, 3, 4, 6, 6, -8, 7, -10, 3, -4, -3, -3, 0, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.1-a";
N := (-22*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -3, 4, 4, 1, 1, -8, -8, 6, 6, -8, -8, -10, 2, 2, -5, -5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 968.1-b";
N := (-22*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 3, 4, 4, -1, -1, 8, 8, 6, 6, 8, 8, -10, -2, -2, -5, -5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 970.1-a";
N := (-17*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 2, 0, 0, 0, 6, -4, 8, 0, 0, 2, 12, -12, -4, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 970.1-b";
N := (-17*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 2, 0, 0, 0, -6, -4, 8, 0, 0, 2, -12, 12, -4, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 970.4-a";
N := (-17*w - 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, 0, 0, 6, 0, 8, -4, 0, 0, 2, -12, 12, -10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 970.4-b";
N := (-17*w - 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, 0, 0, -6, 0, 8, -4, 0, 0, 2, 12, -12, -10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 978.1-a";
N := (-13*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 7, 2, -8, -8, 0, 7, -8, 8, -13, -13, -1, -4, -6, -12, 9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 978.1-b";
N := (-13*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 7, 2, 8, 8, 0, -7, -8, 8, 13, 13, -1, 4, 6, -12, 9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 978.2-a";
N := (-13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 7, -8, -8, 7, 0, 8, -8, -13, -13, -1, -6, -4, 9, -12, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 978.2-b";
N := (-13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 7, 8, 8, -7, 0, 8, -8, 13, 13, -1, 6, 4, 9, -12, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 980.1-a";
N := (-14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -6, 6, -2, 6, 6, -8, -4, -8, 12, 6, -2, -16, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 980.1-b";
N := (-14*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -6, -6, 2, -6, -6, -8, -4, 8, -12, -6, 2, -16, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 980.2-a";
N := (-14*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -2, -2, 6, 6, 6, -4, -8, 12, -8, -2, 6, -4, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 980.2-b";
N := (-14*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -2, 2, -6, -6, -6, -4, -8, -12, 8, 2, -6, -4, -16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 985.1-a";
N := (-8*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, 8, -4, 0, 3, -6, 6, -10, -4, 12, -9, -4, 3, -6, 5, -13, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 985.1-b";
N := (-8*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, 8, -4, 0, -3, 6, -6, -10, -4, -12, 9, -4, -3, 6, 5, -13, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 985.2-a";
N := (-12*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, -1, -3, -4, -3, 2, -3, -9, 12, 0, 4, -2, -8, -11, -4, -11, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 985.2-b";
N := (-12*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, -1, -3, 4, 3, -2, 3, -9, 12, 0, -4, -2, 8, 11, -4, -11, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 985.4-a";
N := (-8*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, -4, 8, 3, 0, 6, -6, -4, -10, -9, 12, -4, -6, 3, -13, 5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 985.4-b";
N := (-8*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, -4, 8, -3, 0, -6, 6, -4, -10, 9, -12, -4, 6, -3, -13, 5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 985.3-a";
N := (-12*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, -3, -1, -3, -4, -3, 2, 12, -9, 4, 0, -2, -11, -8, -11, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 985.3-b";
N := (-12*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, -3, -1, 3, 4, 3, -2, 12, -9, -4, 0, -2, 11, 8, -11, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-a";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 4, 2, -4, 2, 8, -5, 1, -10, 2, 5, 0, 6, -7, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-b";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 4, -2, 4, -2, -8, -5, 1, 10, -2, 5, 0, -6, -7, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-c";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -7, 3, 2, 2, -1, -4, -4, 4, -11, -10, 12, 6, -11, 0, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-d";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 2, -6, -2, -2, -2, 6, 2, 2, 6, 2, -2, 10, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-e";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -2, 6, 2, 2, -2, 6, -2, -2, 6, -2, 2, 10, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-f";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -7, -3, -2, -2, 1, -4, -4, -4, 11, -10, -12, -6, -11, 0, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-g";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 8, 8, -10, 10, 8, -8, -8, -8, 10, -6, -6, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-h";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, 6, 4, -2, -8, -1, 5, 2, -10, 5, 0, -6, 13, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-i";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, 8, 4, 8, 2, -10, 6, 0, 8, -10, -10, -6, 8, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-j";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 6, 1, -6, -7, 2, -11, 0, -8, -5, 0, -5, -1, -2, 8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-k";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 6, -2, -2, -2, -6, 2, -2, -2, 6, 2, -2, -2, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-l";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 6, -1, 6, 7, -2, -11, 0, 8, 5, 0, 5, 1, -2, 8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-m";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, -8, -8, 10, -10, 8, -8, 8, 8, 10, 6, 6, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-n";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, -6, -4, 2, 8, -1, 5, -2, 10, 5, 0, 6, 13, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-o";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, 2, 2, 2, -6, 2, 2, 2, 6, -2, 2, -2, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.1-p";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, -8, -4, -8, -2, -10, 6, 0, -8, -10, 10, 6, 8, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-a";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 1, -4, 2, 8, 2, 1, -5, 2, -10, 5, 6, 0, -4, -7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-b";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 1, 4, -2, -8, -2, 1, -5, -2, 10, 5, -6, 0, -4, -7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-c";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -7, 0, 2, 3, -1, 2, -4, -4, -11, 4, -10, 6, 12, 0, -11, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-d";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -6, 2, -2, -2, 6, -2, 2, 2, 6, -2, 2, 2, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-e";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 6, -2, 2, 2, 6, -2, -2, -2, 6, 2, -2, 2, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-f";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -7, 0, -2, -3, 1, -2, -4, -4, 11, -4, -10, -6, -12, 0, -11, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-g";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 8, 8, 10, -10, -8, 8, -8, -8, 10, -6, -6, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-h";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -3, 4, 6, -8, -2, 5, -1, -10, 2, 5, -6, 0, -12, 13, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-i";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, 4, 8, 2, 8, 6, -10, 8, 0, -10, -6, -10, -4, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-j";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -3, -6, 1, 2, -7, 0, -11, -5, -8, 0, -1, -5, 8, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-k";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -2, 6, -2, -2, 2, -6, -2, -2, 6, -2, 2, -10, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-l";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -3, 6, -1, -2, 7, 0, -11, 5, 8, 0, 1, 5, 8, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-m";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, -8, -8, -10, 10, -8, 8, 8, 8, 10, 6, 6, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-n";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -3, -4, -6, 8, 2, 5, -1, 10, -2, 5, 6, 0, -12, 13, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-o";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 2, -6, 2, 2, 2, -6, 2, 2, 6, 2, -2, -10, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1000.2-p";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -4, -8, -2, -8, 6, -10, -8, 0, -10, 6, 10, -4, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

