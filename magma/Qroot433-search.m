print "Field 2.2.433.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 108);
OK := Integers(K);
Plist := [];
Append(~Plist,(w + 10)*OK);
Append(~Plist,(-w + 11)*OK);
Append(~Plist,(-1202*w + 13107)*OK);
Append(~Plist,(-1202*w - 11905)*OK);
Append(~Plist,(324*w - 3533)*OK);
Append(~Plist,(324*w + 3209)*OK);
Append(~Plist,(-94*w + 1025)*OK);
Append(~Plist,(94*w + 931)*OK);
Append(~Plist,(-17152*w - 169879)*OK);
Append(~Plist,(-17152*w + 187031)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(12*w + 119)*OK);
Append(~Plist,(12*w - 131)*OK);
Append(~Plist,(-32*w + 349)*OK);
Append(~Plist,(-32*w - 317)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(6*w + 59)*OK);
Append(~Plist,(6*w - 65)*OK);
Append(~Plist,(14748*w - 160817)*OK);
Append(~Plist,(14748*w + 146069)*OK);
Append(~Plist,(-2728*w - 27019)*OK);
Append(~Plist,(-2728*w + 29747)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(366*w - 3991)*OK);
Append(~Plist,(-366*w - 3625)*OK);
Append(~Plist,(784*w + 7765)*OK);
Append(~Plist,(-784*w + 8549)*OK);
Append(~Plist,(9940*w - 108389)*OK);
Append(~Plist,(9940*w + 98449)*OK);
Append(~Plist,(-72*w + 785)*OK);
Append(~Plist,(72*w + 713)*OK);
Append(~Plist,(34*w - 371)*OK);
Append(~Plist,(34*w + 337)*OK);
Append(~Plist,(-240*w - 2377)*OK);
Append(~Plist,(240*w - 2617)*OK);
Append(~Plist,(4484*w + 44411)*OK);
Append(~Plist,(4484*w - 48895)*OK);
Append(~Plist,(-6*w + 67)*OK);
Append(~Plist,(-6*w - 61)*OK);
Append(~Plist,(-4*w - 37)*OK);
Append(~Plist,(4*w - 41)*OK);
Append(~Plist,(2958*w + 29297)*OK);
Append(~Plist,(2958*w - 32255)*OK);
Append(~Plist,(-65002*w - 643801)*OK);
Append(~Plist,(-65002*w + 708803)*OK);
Append(~Plist,(-198*w + 2159)*OK);
Append(~Plist,(198*w + 1961)*OK);
Append(~Plist,(21960*w - 239459)*OK);
Append(~Plist,(21960*w + 217499)*OK);
Append(~Plist,(-4254*w - 42133)*OK);
Append(~Plist,(-4254*w + 46387)*OK);
Append(~Plist,(596*w - 6499)*OK);
Append(~Plist,(-596*w - 5903)*OK);
Append(~Plist,(18*w + 179)*OK);
Append(~Plist,(18*w - 197)*OK);
Append(~Plist,(-26*w + 283)*OK);
Append(~Plist,(26*w + 257)*OK);
Append(~Plist,(1014*w + 10043)*OK);
Append(~Plist,(-1014*w + 11057)*OK);
Append(~Plist,(4*w + 43)*OK);
Append(~Plist,(-4*w + 47)*OK);
Append(~Plist,(-2310*w + 25189)*OK);
Append(~Plist,(-2310*w - 22879)*OK);
Append(~Plist,(6888*w + 68221)*OK);
Append(~Plist,(6888*w - 75109)*OK);
Append(~Plist,(37910*w - 413383)*OK);
Append(~Plist,(-37910*w - 375473)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-8*w + 85)*OK);
Append(~Plist,(8*w + 77)*OK);
Append(~Plist,(92*w - 1003)*OK);
Append(~Plist,(92*w + 911)*OK);
Append(~Plist,(-158*w + 1723)*OK);
Append(~Plist,(-158*w - 1565)*OK);
Append(~Plist,(24364*w - 265673)*OK);
Append(~Plist,(24364*w + 241309)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(-2*w - 5)*OK);
Append(~Plist,(25890*w - 282313)*OK);
Append(~Plist,(25890*w + 256423)*OK);
Append(~Plist,(-22*w - 217)*OK);
Append(~Plist,(22*w - 239)*OK);
Append(~Plist,(-10*w - 97)*OK);
Append(~Plist,(10*w - 107)*OK);
Append(~Plist,(-5362*w + 58469)*OK);
Append(~Plist,(-5362*w - 53107)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(-1160*w - 11489)*OK);
Append(~Plist,(-1160*w + 12649)*OK);
Append(~Plist,(930*w - 10141)*OK);
Append(~Plist,(930*w + 9211)*OK);
Append(~Plist,(-9062*w - 89753)*OK);
Append(~Plist,(-9062*w + 98815)*OK);
Append(~Plist,(-2*w + 31)*OK);
Append(~Plist,(2*w + 29)*OK);
Append(~Plist,(-16*w - 157)*OK);
Append(~Plist,(16*w - 173)*OK);
Append(~Plist,(-450*w - 4457)*OK);
Append(~Plist,(450*w - 4907)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("3.1-a",(-1202*w + 13107)*OK,[1, -1, 2, 0, 2, 1, 5, -3, -7, -2, -1, 3, -1, -9, -11, 9, -3, -14, -10, -12, 16, 3, -17, 14, 2, 3, -13, 8, -8]);
ECSearch("3.2-a",(-1202*w - 11905)*OK,[-1, 1, 2, 2, 0, 5, 1, -7, -3, -2, 3, -1, -9, -1, -11, -3, 9, -10, -14, 16, -12, -17, 3, 2, 14, -13, 3, -8, 8]);
ECSearch("4.1-a",(2)*OK,[3, -2, 4, -1, 4, 4, 6, -4, -7, 7, -3, -3, 2, -4, 6, -14, 6, -9, -15, -10, 10, 5, -10, -5, -17, 3, -14, -9]);
ECSearch("4.1-b",(2)*OK,[2, -1, 3, 0, 0, 0, 0, -6, 3, -3, -3, 6, -9, -4, 6, -6, -15, -6, 6, -3, -11, -2, 7, -2, 9, 21, 3, -6]);
ECSearch("4.1-c",(2)*OK,[-1, 2, 0, 3, 0, 0, -6, 0, 3, -3, -3, -9, 6, -4, -6, 6, -6, -15, -3, 6, -2, -11, -2, 7, 21, 9, -6, 3]);
ECSearch("4.1-d",(2)*OK,[-2, 3, -1, 4, 4, 4, -4, 6, -7, -3, 7, 2, -3, -4, -14, 6, -9, 6, -10, -15, 5, 10, -5, -10, 3, -17, -9, -14]);
ECSearch("4.1-e",(2)*OK,[-2, -2, -6, -6, -5, -5, 3, 3, -2, 7, 7, 3, 3, 11, -9, -9, 0, 0, -8, -8, 11, 11, -4, -4, -21, -21, -20, -20]);
ECSearch("6.2-a",(-7975*w + 86962)*OK,[-1, -2, 2, 0, -7, -7, -1, 3, -2, -11, 5, -5, 11, -5, -3, -11, 6, -2, 0, -4, -15, 1, -10, -2, 23, -1, 16, 0]);
ECSearch("6.3-a",(7975*w + 78987)*OK,[-1, -2, 0, 2, -7, -7, 3, -1, -2, 5, -11, 11, -5, -5, -11, -3, -2, 6, -4, 0, 1, -15, -2, -10, -1, 23, 0, 16]);
