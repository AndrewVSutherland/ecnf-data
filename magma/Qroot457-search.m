print "Field 2.2.457.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 114);
OK := Integers(K);
Plist := [];
Append(~Plist,(-6987*w + 78176)*OK);
Append(~Plist,(-6987*w - 71189)*OK);
Append(~Plist,(-196*w + 2193)*OK);
Append(~Plist,(196*w + 1997)*OK);
Append(~Plist,(16*w + 163)*OK);
Append(~Plist,(16*w - 179)*OK);
Append(~Plist,(6*w - 67)*OK);
Append(~Plist,(-6*w - 61)*OK);
Append(~Plist,(-90*w + 1007)*OK);
Append(~Plist,(-90*w - 917)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(11140*w - 124643)*OK);
Append(~Plist,(-11140*w - 113503)*OK);
Append(~Plist,(-53062*w - 540637)*OK);
Append(~Plist,(53062*w - 593699)*OK);
Append(~Plist,(2442*w - 27323)*OK);
Append(~Plist,(-2442*w - 24881)*OK);
Append(~Plist,(-302*w - 3077)*OK);
Append(~Plist,(-302*w + 3379)*OK);
Append(~Plist,(-94984*w - 967771)*OK);
Append(~Plist,(94984*w - 1062755)*OK);
Append(~Plist,(-14*w + 157)*OK);
Append(~Plist,(14*w + 143)*OK);
Append(~Plist,(3226*w - 36095)*OK);
Append(~Plist,(-3226*w - 32869)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(5864*w + 59747)*OK);
Append(~Plist,(-5864*w + 65611)*OK);
Append(~Plist,(874*w + 8905)*OK);
Append(~Plist,(-874*w + 9779)*OK);
Append(~Plist,(1266*w + 12899)*OK);
Append(~Plist,(1266*w - 14165)*OK);
Append(~Plist,(-36*w - 367)*OK);
Append(~Plist,(36*w - 403)*OK);
Append(~Plist,(19446*w + 198131)*OK);
Append(~Plist,(19446*w - 217577)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(-408*w - 4157)*OK);
Append(~Plist,(-408*w + 4565)*OK);
Append(~Plist,(-4*w - 43)*OK);
Append(~Plist,(-4*w + 47)*OK);
Append(~Plist,(22476*w - 251479)*OK);
Append(~Plist,(22476*w + 229003)*OK);
Append(~Plist,(132*w - 1477)*OK);
Append(~Plist,(132*w + 1345)*OK);
Append(~Plist,(3618*w - 40481)*OK);
Append(~Plist,(-3618*w - 36863)*OK);
Append(~Plist,(-10*w - 103)*OK);
Append(~Plist,(-10*w + 113)*OK);
Append(~Plist,(-24*w + 269)*OK);
Append(~Plist,(24*w + 245)*OK);
Append(~Plist,(8*w - 91)*OK);
Append(~Plist,(8*w + 83)*OK);
Append(~Plist,(6*w - 65)*OK);
Append(~Plist,(-6*w - 59)*OK);
Append(~Plist,(187134*w + 1906667)*OK);
Append(~Plist,(187134*w - 2093801)*OK);
Append(~Plist,(4*w + 37)*OK);
Append(~Plist,(4*w - 41)*OK);
Append(~Plist,(-46*w - 469)*OK);
Append(~Plist,(46*w - 515)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(-20*w - 203)*OK);
Append(~Plist,(-20*w + 223)*OK);
Append(~Plist,(257004*w + 2618557)*OK);
Append(~Plist,(257004*w - 2875561)*OK);
Append(~Plist,(-136906*w - 1394905)*OK);
Append(~Plist,(136906*w - 1531811)*OK);
Append(~Plist,(238*w + 2425)*OK);
Append(~Plist,(-238*w + 2663)*OK);
Append(~Plist,(334*w - 3737)*OK);
Append(~Plist,(334*w + 3403)*OK);
Append(~Plist,(-36450*w - 371381)*OK);
Append(~Plist,(-36450*w + 407831)*OK);
Append(~Plist,(1160*w - 12979)*OK);
Append(~Plist,(-1160*w - 11819)*OK);
Append(~Plist,(61368*w + 625265)*OK);
Append(~Plist,(61368*w - 686633)*OK);
Append(~Plist,(60*w + 611)*OK);
Append(~Plist,(60*w - 671)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(-2*w - 5)*OK);
Append(~Plist,(4296*w - 48067)*OK);
Append(~Plist,(-4296*w - 43771)*OK);
Append(~Plist,(-72704*w + 813469)*OK);
Append(~Plist,(72704*w + 740765)*OK);
Append(~Plist,(-2*w + 31)*OK);
Append(~Plist,(2*w + 29)*OK);
Append(~Plist,(186*w - 2081)*OK);
Append(~Plist,(186*w + 1895)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(556*w - 6221)*OK);
Append(~Plist,(556*w + 5665)*OK);
Append(~Plist,(28144*w - 314897)*OK);
Append(~Plist,(28144*w + 286753)*OK);
Append(~Plist,(206*w - 2305)*OK);
Append(~Plist,(206*w + 2099)*OK);
Append(~Plist,(-131238*w + 1468393)*OK);
Append(~Plist,(-131238*w - 1337155)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[-1, -1, 2, 2, -6, -6, -5, -5, 7, 6, 6, -6, -6, -8, -8, -5, -5, 2, 2, 3, 3, -4, -4, 22, 4, 4, -9, -9]);
ECSearch("4.1-b",(2)*OK,[-1, -1, -2, -2, -2, -2, -5, -5, 1, -10, -10, -2, -2, 8, 8, -11, -11, 10, 10, 3, 3, 0, 0, 22, -12, -12, 17, 17]);
ECSearch("6.1-a",(53*w + 540)*OK,[-1, 2, 0, -4, 0, 6, -2, 0, -2, -4, 6, 8, -2, 2, 12, -16, 4, 8, -4, -12, -18, -10, -14, 8, 4, 6, 12, -10]);
ECSearch("6.2-a",(5*w - 56)*OK,[-2, -1, -2, 3, 8, -2, -5, -5, 6, -5, 0, 3, -12, -2, 8, 4, 4, 0, -15, 8, 3, 15, 10, -3, -2, -7, 12, -8]);
ECSearch("6.2-b",(5*w - 56)*OK,[-1, -2, 4, 0, 4, -2, -4, 2, 6, -4, 6, -6, 12, -4, -2, 2, -10, -12, -12, 2, -12, 0, -8, 18, 2, -8, -6, -16]);
ECSearch("6.2-c",(5*w - 56)*OK,[0, -1, 2, 5, 0, 0, 1, 7, -2, 9, 6, -9, 12, 4, -2, -14, 10, -16, -1, 12, -3, 5, 14, -5, -20, 7, -6, 6]);
ECSearch("6.2-d",(5*w - 56)*OK,[1, 2, 4, 0, 2, 4, -8, -2, 6, 10, 0, 6, 0, 4, 2, -8, 4, -12, 0, 14, -12, 6, 10, -12, -2, 20, 6, 4]);
ECSearch("6.2-e",(5*w - 56)*OK,[-2, 3, 2, -1, 4, -2, 3, 7, 2, 7, -4, -9, 8, 6, -8, -8, 0, -4, 5, 0, -1, -5, 10, -3, 14, -7, 0, -16]);
ECSearch("6.2-f",(5*w - 56)*OK,[0, -1, -4, -1, 6, 0, -5, -5, -8, 3, 0, 3, 6, -8, -2, -8, 4, -10, 17, 0, -9, 11, -10, 13, 16, 13, 12, -18]);
ECSearch("6.2-g",(5*w - 56)*OK,[2, 1, -2, 3, -2, -2, 5, -7, 6, -1, -6, -3, 0, 8, -14, 2, -4, -6, 9, -4, -9, 15, -8, 15, 2, 7, 6, -10]);
ECSearch("6.2-h",(5*w - 56)*OK,[0, -1, -4, -1, 0, 0, 7, -5, 4, -9, 6, -9, -6, 10, 4, 10, 16, -4, -7, 12, 15, -1, 8, 13, 4, 13, -6, -12]);
ECSearch("6.2-i",(5*w - 56)*OK,[0, 3, 0, -5, -4, 0, 7, -1, 8, -5, 2, 3, 6, -14, -12, -2, -4, 8, 5, 12, -13, 11, 0, -3, -4, 13, 22, -4]);
ECSearch("6.2-j",(5*w - 56)*OK,[-2, 1, -4, -3, -4, 6, 7, -7, -8, -3, 0, 13, 2, -4, 10, 4, -14, -8, 7, -12, 5, 5, 8, 5, 2, 17, 8, -18]);
ECSearch("6.4-a",(-53*w + 593)*OK,[-1, 2, -4, 0, 6, 0, 0, -2, -2, 6, -4, -2, 8, 12, 2, 4, -16, -4, 8, -18, -12, -14, -10, 8, 6, 4, -10, 12]);
ECSearch("6.3-a",(5*w + 51)*OK,[-2, -1, 3, -2, -2, 8, -5, -5, 6, 0, -5, -12, 3, 8, -2, 4, 4, -15, 0, 3, 8, 10, 15, -3, -7, -2, -8, 12]);
ECSearch("6.3-b",(5*w + 51)*OK,[-1, -2, 0, 4, -2, 4, 2, -4, 6, 6, -4, 12, -6, -2, -4, -10, 2, -12, -12, -12, 2, -8, 0, 18, -8, 2, -16, -6]);
ECSearch("6.3-c",(5*w + 51)*OK,[0, -1, 5, 2, 0, 0, 7, 1, -2, 6, 9, 12, -9, -2, 4, 10, -14, -1, -16, -3, 12, 14, 5, -5, 7, -20, 6, -6]);
ECSearch("6.3-d",(5*w + 51)*OK,[1, 2, 0, 4, 4, 2, -2, -8, 6, 0, 10, 0, 6, 2, 4, 4, -8, 0, -12, -12, 14, 10, 6, -12, 20, -2, 4, 6]);
ECSearch("6.3-e",(5*w + 51)*OK,[-2, 3, -1, 2, -2, 4, 7, 3, 2, -4, 7, 8, -9, -8, 6, 0, -8, 5, -4, -1, 0, 10, -5, -3, -7, 14, -16, 0]);
ECSearch("6.3-f",(5*w + 51)*OK,[0, -1, -1, -4, 0, 6, -5, -5, -8, 0, 3, 6, 3, -2, -8, 4, -8, 17, -10, -9, 0, -10, 11, 13, 13, 16, -18, 12]);
ECSearch("6.3-g",(5*w + 51)*OK,[2, 1, 3, -2, -2, -2, -7, 5, 6, -6, -1, 0, -3, -14, 8, -4, 2, 9, -6, -9, -4, -8, 15, 15, 7, 2, -10, 6]);
ECSearch("6.3-h",(5*w + 51)*OK,[0, -1, -1, -4, 0, 0, -5, 7, 4, 6, -9, -6, -9, 4, 10, 16, 10, -7, -4, 15, 12, 8, -1, 13, 13, 4, -12, -6]);
ECSearch("6.3-i",(5*w + 51)*OK,[0, 3, -5, 0, 0, -4, -1, 7, 8, 2, -5, 6, 3, -12, -14, -4, -2, 5, 8, -13, 12, 0, 11, -3, 13, -4, -4, 22]);
ECSearch("6.3-j",(5*w + 51)*OK,[-2, 1, -3, -4, 6, -4, -7, 7, -8, 0, -3, 2, 13, 10, -4, -14, 4, 7, -8, 5, -12, 8, 5, 5, 17, 2, -18, 8]);
