print "Field 2.2.397.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 99);
OK := Integers(K);
Plist := [];
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(-w + 11)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(11*w + 104)*OK);
Append(~Plist,(11*w - 115)*OK);
Append(~Plist,(3*w - 31)*OK);
Append(~Plist,(3*w + 28)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(9*w + 85)*OK);
Append(~Plist,(9*w - 94)*OK);
Append(~Plist,(5*w - 52)*OK);
Append(~Plist,(5*w + 47)*OK);
Append(~Plist,(-3*w + 32)*OK);
Append(~Plist,(-3*w - 29)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(17*w + 161)*OK);
Append(~Plist,(17*w - 178)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(-4*w - 37)*OK);
Append(~Plist,(4*w - 41)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(w + 1)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(-7*w + 74)*OK);
Append(~Plist,(-7*w - 67)*OK);
Append(~Plist,(-16*w + 167)*OK);
Append(~Plist,(16*w + 151)*OK);
Append(~Plist,(-12*w - 113)*OK);
Append(~Plist,(-12*w + 125)*OK);
Append(~Plist,(3*w - 29)*OK);
Append(~Plist,(-3*w - 26)*OK);
Append(~Plist,(-9*w + 95)*OK);
Append(~Plist,(-9*w - 86)*OK);
Append(~Plist,(3*w - 34)*OK);
Append(~Plist,(3*w + 31)*OK);
Append(~Plist,(23*w + 218)*OK);
Append(~Plist,(23*w - 241)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(w + 16)*OK);
Append(~Plist,(w - 17)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(-3*w - 25)*OK);
Append(~Plist,(3*w - 28)*OK);
Append(~Plist,(-3*w - 32)*OK);
Append(~Plist,(3*w - 35)*OK);
Append(~Plist,(-13*w + 137)*OK);
Append(~Plist,(-13*w - 124)*OK);
Append(~Plist,(-6*w - 59)*OK);
Append(~Plist,(-6*w + 65)*OK);
Append(~Plist,(27*w + 256)*OK);
Append(~Plist,(27*w - 283)*OK);
Append(~Plist,(w + 19)*OK);
Append(~Plist,(w - 20)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(-3*w + 26)*OK);
Append(~Plist,(3*w + 23)*OK);
Append(~Plist,(7*w + 64)*OK);
Append(~Plist,(-7*w + 71)*OK);
Append(~Plist,(12*w + 115)*OK);
Append(~Plist,(-12*w + 127)*OK);
Append(~Plist,(-42*w + 439)*OK);
Append(~Plist,(42*w + 397)*OK);
Append(~Plist,(-3*w + 37)*OK);
Append(~Plist,(3*w + 34)*OK);
Append(~Plist,(9*w - 92)*OK);
Append(~Plist,(9*w + 83)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(-40*w + 419)*OK);
Append(~Plist,(40*w + 379)*OK);
Append(~Plist,(-14*w - 131)*OK);
Append(~Plist,(14*w - 145)*OK);
Append(~Plist,(-3*w + 23)*OK);
Append(~Plist,(3*w + 20)*OK);
Append(~Plist,(-38*w - 359)*OK);
Append(~Plist,(38*w - 397)*OK);
Append(~Plist,(-3*w - 35)*OK);
Append(~Plist,(3*w - 38)*OK);
Append(~Plist,(-19*w + 200)*OK);
Append(~Plist,(-19*w - 181)*OK);
Append(~Plist,(10*w - 107)*OK);
Append(~Plist,(-10*w - 97)*OK);
Append(~Plist,(33*w + 313)*OK);
Append(~Plist,(33*w - 346)*OK);
Append(~Plist,(-4*w + 35)*OK);
Append(~Plist,(4*w + 31)*OK);
Append(~Plist,(-2*w + 31)*OK);
Append(~Plist,(2*w + 29)*OK);
Append(~Plist,(-30*w - 283)*OK);
Append(~Plist,(30*w - 313)*OK);
Append(~Plist,(6*w - 67)*OK);
Append(~Plist,(6*w + 61)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[2, 2, 3, 0, 0, -2, -2, 6, 6, 6, -3, -3, -4, -4, -9, -9, 0, 0, 6, 6, 5, -12, -12, 7, 7, 6, 6, -12, -12, 3]);
ECSearch("3.1-a",(-2*w + 21)*OK,[-2, 1, 0, -6, 8, -4, -6, 6, -2, -3, -3, 2, 8, 7, 7, 10, -8, 0, -12, 5, -2, -2, -1, -1, -14, -8, 6, 6, -17]);
ECSearch("3.2-a",(2*w + 19)*OK,[-2, 1, -6, 0, -4, 8, 6, -6, -2, -3, -3, 8, 2, 7, 7, -8, 10, -12, 0, 5, -2, -2, -1, -1, -8, -14, 6, 6, -5]);
ECSearch("9.1-a",(3)*OK,[1, 3, 3, -4, -4, 3, 3, 7, 0, 0, -10, -10, 7, 7, 10, 10, -3, -3, -13, -8, -8, 5, 5, -2, -2, 9, 9, -2]);
ECSearch("9.1-b",(3)*OK,[-1, 1, 3, -4, 0, 7, -3, 1, -4, -4, -2, 6, 5, -11, 2, -10, 3, 9, -1, -4, -8, 13, -11, 6, -14, 9, -5, 10]);
ECSearch("9.1-c",(3)*OK,[-1, 3, 1, 0, -4, -3, 7, 1, -4, -4, 6, -2, -11, 5, -10, 2, 9, 3, -1, -8, -4, -11, 13, -14, 6, -5, 9, -6]);
ECSearch("9.2-a",(w + 9)*OK,[2, -3, 0, 0, -2, -2, 6, -6, -6, 3, -3, -4, -4, 9, 9, 0, 0, -6, 6, 5, 12, 12, 7, 7, -6, -6, -12, 12, -3]);
ECSearch("9.2-b",(w + 9)*OK,[-2, -1, 0, -6, 8, -4, -6, -6, 2, 3, -3, 2, 8, -7, -7, -10, 8, 0, -12, 5, 2, 2, -1, -1, 14, 8, 6, -6, 17]);
ECSearch("9.3-a",(w - 10)*OK,[2, -3, 0, 0, -2, -2, -6, 6, -6, -3, 3, -4, -4, 9, 9, 0, 0, 6, -6, 5, 12, 12, 7, 7, -6, -6, 12, -12, -3]);
ECSearch("9.3-b",(w - 10)*OK,[-2, -1, -6, 0, -4, 8, -6, -6, 2, -3, 3, 8, 2, -7, -7, 8, -10, -12, 0, 5, 2, 2, -1, -1, 8, 14, -6, 6, 5]);
