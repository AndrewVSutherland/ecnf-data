print "Field 2.2.301.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 75);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w + 9)*OK);
Append(~Plist,(-w - 8)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(-6*w + 55)*OK);
Append(~Plist,(6*w + 49)*OK);
Append(~Plist,(-23*w + 211)*OK);
Append(~Plist,(-5*w + 46)*OK);
Append(~Plist,(-5*w - 41)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(2*w - 19)*OK);
Append(~Plist,(-2*w - 17)*OK);
Append(~Plist,(57*w + 466)*OK);
Append(~Plist,(28*w - 257)*OK);
Append(~Plist,(-28*w - 229)*OK);
Append(~Plist,(13*w - 119)*OK);
Append(~Plist,(13*w + 106)*OK);
Append(~Plist,(-9*w + 83)*OK);
Append(~Plist,(-9*w - 74)*OK);
Append(~Plist,(w + 1)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(3*w + 26)*OK);
Append(~Plist,(3*w - 29)*OK);
Append(~Plist,(-9*w - 73)*OK);
Append(~Plist,(9*w - 82)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(45*w - 413)*OK);
Append(~Plist,(-45*w - 368)*OK);
Append(~Plist,(39*w + 319)*OK);
Append(~Plist,(-39*w + 358)*OK);
Append(~Plist,(-75*w + 688)*OK);
Append(~Plist,(75*w + 613)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(-3*w + 31)*OK);
Append(~Plist,(3*w + 28)*OK);
Append(~Plist,(w + 16)*OK);
Append(~Plist,(w - 17)*OK);
Append(~Plist,(64*w - 587)*OK);
Append(~Plist,(-64*w - 523)*OK);
Append(~Plist,(31*w - 284)*OK);
Append(~Plist,(31*w + 253)*OK);
Append(~Plist,(-12*w - 97)*OK);
Append(~Plist,(12*w - 109)*OK);
Append(~Plist,(38*w - 349)*OK);
Append(~Plist,(-38*w - 311)*OK);
Append(~Plist,(-5*w - 38)*OK);
Append(~Plist,(-5*w + 43)*OK);
Append(~Plist,(-3*w - 19)*OK);
Append(~Plist,(3*w - 22)*OK);
Append(~Plist,(5*w + 44)*OK);
Append(~Plist,(5*w - 49)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(-59*w - 482)*OK);
Append(~Plist,(-59*w + 541)*OK);
Append(~Plist,(-4*w + 41)*OK);
Append(~Plist,(4*w + 37)*OK);
Append(~Plist,(-24*w + 221)*OK);
Append(~Plist,(-24*w - 197)*OK);
Append(~Plist,(-14*w - 113)*OK);
Append(~Plist,(14*w - 127)*OK);
Append(~Plist,(125*w + 1022)*OK);
Append(~Plist,(125*w - 1147)*OK);
Append(~Plist,(-3*w + 34)*OK);
Append(~Plist,(3*w + 31)*OK);
Append(~Plist,(-144*w + 1321)*OK);
Append(~Plist,(144*w + 1177)*OK);
Append(~Plist,(-11*w + 103)*OK);
Append(~Plist,(-11*w - 92)*OK);
Append(~Plist,(110*w + 899)*OK);
Append(~Plist,(110*w - 1009)*OK);
Append(~Plist,(-15*w - 121)*OK);
Append(~Plist,(15*w - 136)*OK);
Append(~Plist,(w + 22)*OK);
Append(~Plist,(w - 23)*OK);
Append(~Plist,(-19*w + 173)*OK);
Append(~Plist,(-19*w - 154)*OK);
Append(~Plist,(-22*w + 203)*OK);
Append(~Plist,(22*w + 181)*OK);
Append(~Plist,(-3*w - 13)*OK);
Append(~Plist,(3*w - 16)*OK);
Append(~Plist,(21*w + 173)*OK);
Append(~Plist,(21*w - 194)*OK);
Append(~Plist,(99*w + 809)*OK);
Append(~Plist,(-99*w + 908)*OK);
Append(~Plist,(-3*w + 14)*OK);
Append(~Plist,(3*w + 11)*OK);
Append(~Plist,(-44*w - 359)*OK);
Append(~Plist,(44*w - 403)*OK);
Append(~Plist,(60*w - 551)*OK);
Append(~Plist,(-60*w - 491)*OK);
Append(~Plist,(-9*w + 86)*OK);
Append(~Plist,(-9*w - 77)*OK);
Append(~Plist,(-19*w + 176)*OK);
Append(~Plist,(-19*w - 157)*OK);
Append(~Plist,(5*w + 47)*OK);
Append(~Plist,(5*w - 52)*OK);
Append(~Plist,(-17*w - 137)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[0, 0, -3, 0, 0, 0, -4, -4, 0, 0, 8, 8, -12, 10, 10, 0, 0, -4, -4, 0, 0, -8, -8, 0, 0, 20, 20, 18, 18, -16]);
ECSearch("3.1-a",(-w + 9)*OK,[1, -3, 0, 3, 1, 0, 0, -6, 0, -6, -3, -8, 12, -9, -6, 3, -3, -12, 15, -3, 3, -3, 15, 12, -6, -3, 6, -18, -2]);
ECSearch("3.1-b",(-w + 9)*OK,[-1, -3, 0, -3, -1, 0, 0, 6, 0, -6, -3, -8, 12, -9, 6, -3, -3, -12, -15, 3, 3, -3, -15, -12, -6, -3, 6, -18, -2]);
ECSearch("3.2-a",(-w - 8)*OK,[1, -3, 3, 0, 1, 0, 0, 0, -6, -3, -6, -8, -9, 12, 3, -6, -12, -3, -3, 15, -3, 3, 12, 15, -3, -6, -18, 6, -20]);
ECSearch("3.2-b",(-w - 8)*OK,[-1, -3, -3, 0, -1, 0, 0, 0, 6, -3, -6, -8, -9, 12, -3, 6, -12, -3, 3, -15, -3, 3, -12, -15, -3, -6, -18, 6, -20]);
ECSearch("9.2-a",(-17*w + 156)*OK,[-1, 3, 0, 3, -1, 0, 0, -6, 0, -6, 3, -8, -12, -9, -6, 3, 3, 12, 15, -3, -3, 3, 15, -12, -6, 3, -6, 18, -2]);
ECSearch("9.2-b",(-17*w + 156)*OK,[1, 3, 0, -3, 1, 0, 0, 6, 0, -6, 3, -8, -12, -9, 6, -3, 3, 12, -15, 3, -3, 3, -15, 12, -6, 3, -6, 18, -2]);
ECSearch("9.2-c",(-17*w + 156)*OK,[0, 3, 0, 0, 0, -4, 4, 0, 0, 8, -8, -12, -10, 10, 0, 0, 4, 4, 0, 0, 8, 8, 0, 0, 20, -20, -18, -18, -16]);
ECSearch("9.3-a",(17*w + 139)*OK,[-1, 3, 3, 0, -1, 0, 0, 0, -6, 3, -6, -8, -9, -12, 3, -6, 12, 3, -3, 15, 3, -3, -12, 15, 3, -6, 18, -6, -20]);
ECSearch("9.3-b",(17*w + 139)*OK,[1, 3, -3, 0, 1, 0, 0, 0, 6, 3, -6, -8, -9, -12, -3, 6, 12, 3, 3, -15, 3, -3, 12, -15, 3, -6, 18, -6, -20]);
ECSearch("9.3-c",(17*w + 139)*OK,[0, 3, 0, 0, 0, 4, -4, 0, 0, -8, 8, -12, 10, -10, 0, 0, 4, 4, 0, 0, 8, 8, 0, 0, -20, 20, -18, -18, -16]);
ECSearch("15.1-a",(11*w + 90)*OK,[2, 4, 0, -2, -3, 3, 8, 2, 9, -3, -4, 9, 9, -4, 2, 13, -5, -4, 2, -8, 4, -18, 6, -12, 12, -5, 7, 17]);
ECSearch("15.1-b",(11*w + 90)*OK,[-2, 4, 0, 2, -3, 3, -8, -2, 9, -3, -4, 9, 9, 4, -2, 13, -5, 4, -2, -8, 4, 18, -6, -12, 12, -5, 7, 17]);
ECSearch("15.2-a",(-w + 10)*OK,[2, -3, 3, -1, 0, 0, 0, 3, 6, -9, 10, -12, -6, 0, 0, 12, 3, 0, 9, 0, -15, -18, -6, -12, 0, -12, 0, -11]);
ECSearch("15.2-b",(-w + 10)*OK,[0, -3, 2, 3, 3, 1, 4, 1, 4, 2, 1, 6, -12, 10, -5, 8, 14, -7, 4, 5, -2, 1, 0, 12, 12, 12, -10, -4]);
ECSearch("15.2-c",(-w + 10)*OK,[0, -3, -2, -3, 3, 1, -4, -1, 4, 2, 1, 6, -12, -10, 5, 8, 14, 7, -4, 5, -2, -1, 0, 12, 12, 12, -10, -4]);
ECSearch("15.2-d",(-w + 10)*OK,[-2, -3, -3, 1, 0, 0, 0, -3, 6, -9, 10, -12, -6, 0, 0, 12, 3, 0, -9, 0, -15, 18, 6, -12, 0, -12, 0, -11]);
ECSearch("15.4-a",(11*w - 101)*OK,[2, 4, 0, -2, 3, -3, 2, 8, -3, 9, -4, 9, 9, 2, -4, -5, 13, 2, -4, 4, -8, 6, -18, 12, -12, 7, -5, 11]);
ECSearch("15.4-b",(11*w - 101)*OK,[-2, 4, 0, 2, 3, -3, -2, -8, -3, 9, -4, 9, 9, -2, 4, -5, 13, -2, 4, 4, -8, -6, 18, 12, -12, 7, -5, 11]);
ECSearch("15.3-a",(-w - 9)*OK,[2, -3, 3, -1, 0, 0, 3, 0, -9, 6, 10, -6, -12, 0, 0, 3, 12, 9, 0, -15, 0, -6, -18, 0, -12, 0, -12, 7]);
ECSearch("15.3-b",(-w - 9)*OK,[0, -3, 2, 3, 1, 3, 1, 4, 2, 4, 1, -12, 6, -5, 10, 14, 8, 4, -7, -2, 5, 0, 1, 12, 12, -10, 12, -12]);
ECSearch("15.3-c",(-w - 9)*OK,[0, -3, -2, -3, 1, 3, -1, -4, 2, 4, 1, -12, 6, 5, -10, 14, 8, -4, 7, -2, 5, 0, -1, 12, 12, -10, 12, -12]);
ECSearch("15.3-d",(-w - 9)*OK,[-2, -3, -3, 1, 0, 0, -3, 0, -9, 6, 10, -6, -12, 0, 0, 3, 12, -9, 0, -15, 0, 6, 18, 0, -12, 0, -12, 7]);
ECSearch("20.1-a",(-12*w + 110)*OK,[2, 2, 3, -2, 0, 3, -1, 2, 3, 0, -1, 6, 0, 5, -1, 4, 13, 2, 11, -11, 10, 3, -6, 0, 18, 10, 16, 17]);
ECSearch("20.1-b",(-12*w + 110)*OK,[2, 0, -1, 4, -6, 5, 1, 0, -3, 0, -7, -2, 12, -7, 3, 12, -9, 16, -5, -9, -2, -5, -6, -2, 2, -20, -10, 7]);
ECSearch("20.1-c",(-12*w + 110)*OK,[-2, 0, 1, -4, -6, 5, -1, 0, -3, 0, -7, -2, 12, 7, -3, 12, -9, -16, 5, -9, -2, 5, 6, -2, 2, -20, -10, 7]);
ECSearch("20.1-d",(-12*w + 110)*OK,[-2, -2, -3, 2, 0, 3, 1, -2, 3, 0, -1, 6, 0, -5, 1, 4, 13, -2, -11, -11, 10, -3, 6, 0, 18, 10, 16, 17]);
ECSearch("20.2-a",(12*w + 98)*OK,[2, 2, 3, -2, 3, 0, 2, -1, 0, 3, -1, 0, 6, -1, 5, 13, 4, 11, 2, 10, -11, -6, 3, 18, 0, 16, 10, -1]);
ECSearch("20.2-b",(12*w + 98)*OK,[0, 2, -1, 4, 5, -6, 0, 1, 0, -3, -7, 12, -2, 3, -7, -9, 12, -5, 16, -2, -9, -6, -5, 2, -2, -10, -20, -15]);
ECSearch("20.2-c",(12*w + 98)*OK,[0, -2, 1, -4, 5, -6, 0, -1, 0, -3, -7, 12, -2, -3, 7, -9, 12, 5, -16, -2, -9, 6, 5, 2, -2, -10, -20, -15]);
ECSearch("20.2-d",(12*w + 98)*OK,[-2, -2, -3, 2, 3, 0, -2, 1, 0, 3, -1, 0, 6, 1, -5, 13, 4, -11, -2, 10, -11, 6, -3, 18, 0, 16, 10, -1]);
ECSearch("25.1-a",(5)*OK,[-3, 3, 0, 0, -1, -1, -6, 6, -4, -4, -6, 10, 10, 0, 0, 14, 14, 6, -6, 1, 1, -12, 12, 2, 2, -15, -15, 2]);
ECSearch("25.1-b",(5)*OK,[3, -3, 0, 0, -1, -1, 6, -6, -4, -4, -6, 10, 10, 0, 0, 14, 14, -6, 6, 1, 1, 12, -12, 2, 2, -15, -15, 2]);
ECSearch("25.2-a",(3*w + 25)*OK,[0, 0, -4, 0, 0, 1, 1, 0, 0, -7, 7, 0, -13, 13, 0, 0, 15, -15, 0, 0, 12, 12, 0, 0, 16, -16, -7, -7, -11]);
ECSearch("25.3-a",(-3*w + 28)*OK,[0, 0, -4, 0, 0, 1, 1, 0, 0, 7, -7, 0, 13, -13, 0, 0, -15, 15, 0, 0, 12, 12, 0, 0, -16, 16, -7, -7, 11]);
ECSearch("27.1-a",(-3*w + 27)*OK,[3, 3, 0, 1, 0, 0, 0, 6, -3, 6, -8, 9, 12, -3, 6, 12, 3, 3, -15, 3, -3, -12, 15, -3, 6, 18, -6, -20]);
ECSearch("27.1-b",(-3*w + 27)*OK,[3, -3, 0, -1, 0, 0, 0, -6, -3, 6, -8, 9, 12, 3, -6, 12, 3, -3, 15, 3, -3, 12, -15, -3, 6, 18, -6, -20]);
ECSearch("27.2-a",(-3*w - 24)*OK,[3, 0, 3, 1, 0, 0, 6, 0, 6, -3, -8, 12, 9, 6, -3, 3, 12, -15, 3, -3, 3, 15, -12, 6, -3, -6, 18, -2]);
ECSearch("27.2-b",(-3*w - 24)*OK,[3, 0, -3, -1, 0, 0, -6, 0, 6, -3, -8, 12, 9, -6, 3, 3, 12, 15, -3, -3, 3, -15, 12, 6, -3, -6, 18, -2]);
ECSearch("28.1-a",(-46*w + 422)*OK,[2, 2, 0, 0, 0, 0, -2, -2, 0, 0, 8, 6, 6, -8, -8, -4, -4, -2, -2, 8, 8, 6, 6, 12, 12, 2, 2, -16]);
ECSearch("28.1-b",(-46*w + 422)*OK,[-2, -2, 0, 0, 0, 0, 2, 2, 0, 0, 8, 6, 6, 8, 8, -4, -4, 2, 2, 8, 8, -6, -6, 12, 12, 2, 2, -16]);
ECSearch("33.2-a",(-29*w - 237)*OK,[3, 1, 0, 1, 3, 0, 2, 4, 6, 1, 8, -4, 3, 6, -3, 13, 12, 1, 7, -5, -3, -11, 0, 14, -7, 2, -2, -6]);
ECSearch("33.2-b",(-29*w - 237)*OK,[-3, 1, 0, -1, -3, 0, -2, -4, 6, 1, 8, -4, 3, -6, 3, 13, 12, -1, -7, -5, -3, 11, 0, 14, -7, 2, -2, -6]);
ECSearch("33.3-a",(29*w - 266)*OK,[3, 1, 1, 0, 3, 0, 4, 2, 1, 6, 8, 3, -4, -3, 6, 12, 13, 7, 1, -3, -5, 0, -11, -7, 14, -2, 2, -8]);
ECSearch("33.3-b",(29*w - 266)*OK,[-3, 1, -1, 0, -3, 0, -4, -2, 1, 6, 8, 3, -4, 3, -6, 12, 13, -7, -1, -3, -5, 0, 11, -7, 14, -2, 2, -8]);
ECSearch("35.1-a",(w + 10)*OK,[1, -2, 3, -3, -6, -3, -6, 0, -3, 9, -8, -3, -6, 3, 12, 3, -12, -6, 15, -12, 15, 18, 12, 0, 6, 9, 9, 16]);
ECSearch("35.1-b",(w + 10)*OK,[-1, 2, 3, 3, -6, -3, 6, 0, -3, 9, -8, -3, -6, -3, -12, 3, -12, 6, -15, -12, 15, -18, -12, 0, 6, 9, 9, 16]);
ECSearch("35.1-c",(w + 10)*OK,[2, 2, 0, 0, 3, 3, -6, 0, -3, 3, -8, 9, 3, 0, 0, -3, 3, 6, 0, 0, 0, 6, -12, 0, -12, -3, -3, 7]);
ECSearch("35.1-d",(w + 10)*OK,[1, -2, -1, 3, 0, 3, 2, 2, -9, 3, -10, -3, 12, 5, -10, 5, -4, -10, 5, 8, 5, 6, -6, 0, -18, 5, 17, 14]);
ECSearch("35.1-e",(w + 10)*OK,[-2, -2, 0, 0, 3, 3, 6, 0, -3, 3, -8, 9, 3, 0, 0, -3, 3, -6, 0, 0, 0, -6, 12, 0, -12, -3, -3, 7]);
ECSearch("35.1-f",(w + 10)*OK,[-1, 2, -1, -3, 0, 3, -2, -2, -9, 3, -10, -3, 12, -5, 10, 5, -4, 10, -5, 8, 5, -6, 6, 0, -18, 5, 17, 14]);
ECSearch("35.2-a",(w - 11)*OK,[-2, 1, 3, -3, -3, -6, 0, -6, 9, -3, -8, -6, -3, 12, 3, -12, 3, 15, -6, 15, -12, 12, 18, 6, 0, 9, 9, -2]);
ECSearch("35.2-b",(w - 11)*OK,[2, -1, 3, 3, -3, -6, 0, 6, 9, -3, -8, -6, -3, -12, -3, -12, 3, -15, 6, 15, -12, -12, -18, 6, 0, 9, 9, -2]);
ECSearch("35.2-c",(w - 11)*OK,[2, 2, 0, 0, 3, 3, 0, -6, 3, -3, -8, 3, 9, 0, 0, 3, -3, 0, 6, 0, 0, -12, 6, -12, 0, -3, -3, -11]);
ECSearch("35.2-d",(w - 11)*OK,[-2, 1, -1, 3, 3, 0, 2, 2, 3, -9, -10, 12, -3, -10, 5, -4, 5, 5, -10, 5, 8, -6, 6, -18, 0, 17, 5, 20]);
ECSearch("35.2-e",(w - 11)*OK,[-2, -2, 0, 0, 3, 3, 0, 6, 3, -3, -8, 3, 9, 0, 0, 3, -3, 0, -6, 0, 0, 12, -6, -12, 0, -3, -3, -11]);
ECSearch("35.2-f",(w - 11)*OK,[2, -1, -1, -3, 3, 0, -2, -2, 3, -9, -10, 12, -3, 10, -5, -4, 5, -5, 10, 5, 8, 6, -6, -18, 0, 17, 5, 20]);
ECSearch("36.1-a",(6)*OK,[-3, 3, -1, 3, -3, 7, -5, 0, 0, -4, 12, 12, 10, -2, -14, -2, 4, 16, -14, 10, -18, -6, -3, 3, -5, 7, 2]);
ECSearch("36.1-b",(6)*OK,[-1, 3, -2, 2, 0, -1, -7, 5, -1, -4, -1, -13, -14, 8, -5, 9, -2, -2, -12, -2, -10, -8, 0, -18, 0, -14, 6]);
ECSearch("36.1-c",(6)*OK,[-4, 4, 0, 4, 4, -4, 4, 0, 0, 4, 10, 10, -4, 4, -4, -4, -16, 16, 8, 8, -8, 8, -4, -4, -14, -14, 16]);
ECSearch("36.1-d",(6)*OK,[-3, 3, -2, 0, 6, -7, -1, 3, 3, -4, 9, -9, -4, 2, 7, 13, 14, -10, -2, -8, 0, -6, 6, 0, -2, 4, 2]);
ECSearch("36.1-e",(6)*OK,[-3, 3, 2, 6, 0, 1, 7, 3, 3, -4, -9, 9, -2, 4, 13, 7, 10, -14, -8, -2, 6, 0, 0, 6, 4, -2, 14]);
ECSearch("36.1-f",(6)*OK,[-3, 3, 1, -3, 3, 5, -7, 0, 0, -4, 12, 12, 2, -10, -2, -14, -16, -4, 10, -14, 6, 18, 3, -3, 7, -5, -10]);
ECSearch("36.1-g",(6)*OK,[-3, 1, 2, 0, 2, 7, 1, -1, 5, -4, -13, -1, -8, 14, 9, -5, 2, 2, -2, -12, 8, 10, -18, 0, -14, 0, 14]);
ECSearch("36.1-h",(6)*OK,[3, -1, -2, 0, 2, -7, -1, -1, 5, -4, -13, -1, 8, -14, 9, -5, -2, -2, -2, -12, -8, -10, -18, 0, -14, 0, 14]);
ECSearch("36.1-i",(6)*OK,[3, -3, -2, 6, 0, -1, -7, 3, 3, -4, -9, 9, 2, -4, 13, 7, -10, 14, -8, -2, -6, 0, 0, 6, 4, -2, 14]);
ECSearch("36.1-j",(6)*OK,[3, -3, 1, 3, -3, -7, 5, 0, 0, -4, 12, 12, -10, 2, -14, -2, -4, -16, -14, 10, 18, 6, -3, 3, -5, 7, 2]);
ECSearch("36.1-k",(6)*OK,[3, -3, -1, -3, 3, -5, 7, 0, 0, -4, 12, 12, -2, 10, -2, -14, 16, 4, 10, -14, -6, -18, 3, -3, 7, -5, -10]);
ECSearch("36.1-l",(6)*OK,[1, -3, 2, 2, 0, 1, 7, 5, -1, -4, -1, -13, 14, -8, -5, 9, 2, 2, -12, -2, 10, 8, 0, -18, 0, -14, 6]);
ECSearch("36.1-m",(6)*OK,[4, -4, 0, 4, 4, 4, -4, 0, 0, 4, 10, 10, 4, -4, -4, -4, 16, -16, 8, 8, 8, -8, -4, -4, -14, -14, 16]);
ECSearch("36.1-n",(6)*OK,[3, -3, 2, 0, 6, 7, 1, 3, 3, -4, 9, -9, 4, -2, 7, 13, -14, 10, -2, -8, 0, 6, 6, 0, -2, 4, 2]);
ECSearch("43.1-a",(57*w + 466)*OK,[2, 2, 0, 4, 4, 0, 3, 3, 2, 2, -1, -1, -5, -5, -2, -2, -3, -3, -2, -2, -8, -8, 4, 4, -12, -12, 7, 7, 1]);
ECSearch("43.1-b",(57*w + 466)*OK,[-2, -2, 0, -4, -4, 0, 3, 3, -2, -2, -1, -1, -5, -5, 2, 2, -3, -3, 2, 2, -8, -8, -4, -4, -12, -12, 7, 7, 1]);
