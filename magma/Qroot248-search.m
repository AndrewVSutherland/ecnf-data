print "Field 2.2.248.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 62);
OK := Integers(K);
Plist := [];
Append(~Plist,(w + 8)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-w + 7)*OK);
Append(~Plist,(-w - 7)*OK);
Append(~Plist,(w + 9)*OK);
Append(~Plist,(w - 9)*OK);
Append(~Plist,(2*w - 15)*OK);
Append(~Plist,(-2*w - 15)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(3*w - 23)*OK);
Append(~Plist,(-3*w - 23)*OK);
Append(~Plist,(4*w - 31)*OK);
Append(~Plist,(w + 5)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(w + 3)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(w + 11)*OK);
Append(~Plist,(w - 11)*OK);
Append(~Plist,(w + 1)*OK);
Append(~Plist,(w - 1)*OK);
Append(~Plist,(-3*w + 25)*OK);
Append(~Plist,(3*w + 25)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(-4*w + 33)*OK);
Append(~Plist,(4*w + 33)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 13)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(-5*w + 41)*OK);
Append(~Plist,(5*w + 41)*OK);
Append(~Plist,(4*w + 29)*OK);
Append(~Plist,(4*w - 29)*OK);
Append(~Plist,(w + 15)*OK);
Append(~Plist,(w - 15)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(-5*w + 37)*OK);
Append(~Plist,(-5*w - 37)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(-3*w - 19)*OK);
Append(~Plist,(3*w - 19)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(-7*w + 57)*OK);
Append(~Plist,(7*w + 57)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(2*w + 5)*OK);
Append(~Plist,(w + 17)*OK);
Append(~Plist,(w - 17)*OK);
Append(~Plist,(7*w + 53)*OK);
Append(~Plist,(7*w - 53)*OK);
Append(~Plist,(-4*w - 35)*OK);
Append(~Plist,(-4*w + 35)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(-8*w + 65)*OK);
Append(~Plist,(8*w + 65)*OK);
Append(~Plist,(-4*w + 27)*OK);
Append(~Plist,(4*w + 27)*OK);
Append(~Plist,(-3*w + 17)*OK);
Append(~Plist,(3*w + 17)*OK);
Append(~Plist,(10*w + 77)*OK);
Append(~Plist,(10*w - 77)*OK);
Append(~Plist,(-11*w + 85)*OK);
Append(~Plist,(-11*w - 85)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(-3*w - 29)*OK);
Append(~Plist,(3*w - 29)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(-9*w + 73)*OK);
Append(~Plist,(9*w + 73)*OK);
Append(~Plist,(-4*w - 25)*OK);
Append(~Plist,(4*w - 25)*OK);
Append(~Plist,(w + 21)*OK);
Append(~Plist,(w - 21)*OK);
Append(~Plist,(6*w + 43)*OK);
Append(~Plist,(6*w - 43)*OK);
Append(~Plist,(-3*w - 13)*OK);
Append(~Plist,(3*w - 13)*OK);
Append(~Plist,(-11*w + 89)*OK);
Append(~Plist,(11*w + 89)*OK);
Append(~Plist,(-7*w - 59)*OK);
Append(~Plist,(-7*w + 59)*OK);
Append(~Plist,(5*w + 33)*OK);
Append(~Plist,(5*w - 33)*OK);
Append(~Plist,(-4*w + 23)*OK);
Append(~Plist,(4*w + 23)*OK);
Append(~Plist,(w + 23)*OK);
Append(~Plist,(w - 23)*OK);
Append(~Plist,(8*w + 59)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[2, 2, -2, -5, -5, 6, -6, -9, 6, -6, 0, 8, -8, 5, 5, -13, -4, 4, -9, -9, -14, 14, 8, 8, -10, 10, -7, -7, -19]);
ECSearch("4.1-b",(2)*OK,[2, -2, 2, -5, -5, -6, 6, -9, -6, 6, 0, -8, 8, 5, 5, -13, 4, -4, -9, -9, 14, -14, 8, 8, 10, -10, -7, -7, -19]);
ECSearch("8.1-a",(2*w + 16)*OK,[2, 2, -2, -4, -4, -8, 8, -6, 6, -6, 0, -2, 2, -6, -6, 2, 2, -2, 12, 12, 2, -2, 4, 4, -4, 4, -14, -14, 12]);
ECSearch("8.1-b",(2*w + 16)*OK,[2, 2, -2, 1, 1, 2, -2, -1, 6, -6, 0, 8, -8, -11, -11, -13, 12, -12, -3, -3, 2, -2, -16, -16, -14, 14, 1, 1, 7]);
ECSearch("8.1-c",(2*w + 16)*OK,[2, -2, 2, -4, -4, 8, -8, -6, -6, 6, 0, 2, -2, -6, -6, 2, -2, 2, 12, 12, -2, 2, 4, 4, 4, -4, -14, -14, 12]);
ECSearch("8.1-d",(2*w + 16)*OK,[2, -2, 2, 1, 1, -2, 2, -1, -6, 6, 0, -8, 8, -11, -11, -13, -12, 12, -3, -3, -2, 2, -16, -16, 14, -14, 1, 1, 7]);
ECSearch("16.1-a",(4)*OK,[2, 2, -2, 5, 5, -6, 6, -9, 6, -6, 0, 8, -8, 5, 5, -13, -4, 4, 9, 9, -14, 14, -8, -8, 10, -10, -7, -7, 19]);
ECSearch("16.1-b",(4)*OK,[2, 2, -2, 4, 4, 8, -8, -6, 6, -6, 0, -2, 2, -6, -6, 2, 2, -2, -12, -12, 2, -2, -4, -4, 4, -4, -14, -14, -12]);
ECSearch("16.1-c",(4)*OK,[2, 2, -2, -1, -1, -2, 2, -1, 6, -6, 0, 8, -8, -11, -11, -13, 12, -12, 3, 3, 2, -2, 16, 16, 14, -14, 1, 1, -7]);
ECSearch("16.1-d",(4)*OK,[2, -2, 2, 5, 5, 6, -6, -9, -6, 6, 0, -8, 8, 5, 5, -13, 4, -4, 9, 9, 14, -14, -8, -8, -10, 10, -7, -7, 19]);
ECSearch("16.1-e",(4)*OK,[2, -2, 2, 4, 4, -8, 8, -6, -6, 6, 0, 2, -2, -6, -6, 2, -2, 2, -12, -12, -2, 2, -4, -4, -4, 4, -14, -14, -12]);
ECSearch("16.1-f",(4)*OK,[2, -2, 2, -1, -1, 2, -2, -1, -6, 6, 0, -8, 8, -11, -11, -13, -12, 12, 3, 3, -2, 2, 16, 16, -14, 14, 1, 1, -7]);
ECSearch("18.1-a",(3*w + 24)*OK,[-2, -2, 8, -1, 0, 6, -4, 6, -3, -5, -2, -2, 12, 0, 5, 9, 0, 12, 0, -8, 7, -4, 8, 4, -14, -13, 5, -6]);
ECSearch("18.1-b",(3*w + 24)*OK,[5, -5, -5, -5, 6, -6, -9, 6, -6, 0, -10, 10, -4, -4, 2, 8, -8, -6, -6, -5, 5, -7, -7, -1, 1, 17, 17, -4]);
ECSearch("18.1-c",(3*w + 24)*OK,[2, 2, 8, -1, 0, -6, -4, -6, 3, 5, 2, 2, 12, 0, 5, -9, 0, 12, 0, 8, -7, -4, 8, -4, 14, -13, 5, -6]);
ECSearch("18.1-d",(3*w + 24)*OK,[-2, -2, -1, 8, 6, 0, -4, -3, 6, -5, -2, -2, 0, 12, 5, 0, 9, 0, 12, 7, -8, 8, -4, -14, 4, 5, -13, -3]);
ECSearch("18.1-e",(3*w + 24)*OK,[2, 2, -1, 8, -6, 0, -4, 3, -6, 5, 2, 2, 0, 12, 5, 0, -9, 0, 12, -7, 8, 8, -4, 14, -4, 5, -13, -3]);
ECSearch("18.1-f",(3*w + 24)*OK,[-5, 5, -5, -5, -6, 6, -9, -6, 6, 0, 10, -10, -4, -4, 2, -8, 8, -6, -6, 5, -5, -7, -7, 1, -1, 17, 17, -4]);
ECSearch("23.1-a",(2*w - 15)*OK,[-2, -3, 6, -3, 3, 0, 9, -6, 6, -6, 3, 3, 6, -7, 2, -4, 6, 3, -7, -4, -6, 6, -9, -6, 0, -3, -1, -10, -16]);
ECSearch("23.1-b",(2*w - 15)*OK,[0, 1, 2, 5, -7, -4, 3, -4, 6, 0, 5, 11, 2, 9, -6, -4, -6, -9, -9, 12, 8, -10, -7, -4, -16, -1, -13, -10, -12]);
ECSearch("23.1-c",(2*w - 15)*OK,[0, 1, -2, -5, -7, -4, -3, -4, -6, 0, -5, -11, -2, 9, -6, -4, 6, 9, -9, 12, -8, 10, -7, -4, 16, 1, -13, -10, -12]);
ECSearch("23.1-d",(2*w - 15)*OK,[-2, -3, -6, 3, 3, 0, -9, -6, -6, 6, -3, -3, -6, -7, 2, -4, -6, -3, -7, -4, 6, -6, -9, -6, 0, 3, -1, -10, -16]);
ECSearch("23.2-a",(-2*w - 15)*OK,[-2, -3, -3, 6, 0, 3, 9, -6, -6, 6, 3, 6, 3, 2, -7, -4, 3, 6, -4, -7, 6, -6, -6, -9, -3, 0, -10, -1, 11]);
ECSearch("23.2-b",(-2*w - 15)*OK,[0, 1, 5, 2, -4, -7, 3, -4, 0, 6, 5, 2, 11, -6, 9, -4, -9, -6, 12, -9, -10, 8, -4, -7, -1, -16, -10, -13, -3]);
ECSearch("23.2-c",(-2*w - 15)*OK,[0, 1, -5, -2, -4, -7, -3, -4, 0, -6, -5, -2, -11, -6, 9, -4, 9, 6, 12, -9, 10, -8, -4, -7, 1, 16, -10, -13, -3]);
ECSearch("23.2-d",(-2*w - 15)*OK,[-2, -3, 3, -6, 0, 3, -9, -6, 6, -6, -3, -6, -3, 2, -7, -4, -3, -6, -4, -7, -6, 6, -6, -9, 3, 0, -10, -1, 11]);
ECSearch("32.1-a",(4*w + 32)*OK,[-6, -6, -6, 0, 0, 0, 0, -6, 10, 10, 0, 2, 2, 10, 10, -14, -14, -14, 0, 0, 10, 10, 0, 0, 0, 0, 18, 18, 0]);
ECSearch("32.1-b",(4*w + 32)*OK,[6, 4, -4, 0, 0, 0, 0, -6, -4, 4, 0, 12, -12, -10, -10, -14, 4, -4, 0, 0, -12, 12, 0, 0, 0, 0, -18, -18, 0]);
ECSearch("32.1-c",(4*w + 32)*OK,[6, -4, 4, 0, 0, 0, 0, -6, 4, -4, 0, -12, 12, -10, -10, -14, -4, 4, 0, 0, 12, -12, 0, 0, 0, 0, -18, -18, 0]);
ECSearch("32.1-d",(4*w + 32)*OK,[-6, 6, 6, 0, 0, 0, 0, -6, -10, -10, 0, -2, -2, 10, 10, -14, 14, 14, 0, 0, -10, -10, 0, 0, 0, 0, 18, 18, 0]);
ECSearch("36.1-a",(6)*OK,[4, -4, 4, 4, 0, 0, -6, 6, -6, 0, -8, 8, -10, -10, 2, -14, 14, 6, 6, 8, -8, -4, -4, 16, -16, 2, 2, 2]);
ECSearch("36.1-b",(6)*OK,[0, 4, 1, -3, 4, 0, 7, -8, 4, -4, 12, 0, -7, 9, -9, -12, 4, 9, -3, -8, 0, -8, 0, -12, -4, -7, 17, -13]);
ECSearch("36.1-c",(6)*OK,[-4, 4, 4, 4, 0, 0, -6, -6, 6, 0, 8, -8, -10, -10, 2, 14, -14, 6, 6, -8, 8, -4, -4, -16, 16, 2, 2, 2]);
ECSearch("36.1-d",(6)*OK,[4, 0, -3, 1, 0, 4, 7, 4, -8, -4, 0, 12, 9, -7, -9, 4, -12, -3, 9, 0, -8, 0, -8, -4, -12, 17, -7, -17]);
ECSearch("36.1-e",(6)*OK,[0, -4, 1, -3, -4, 0, 7, 8, -4, 4, -12, 0, -7, 9, -9, 12, -4, 9, -3, 8, 0, -8, 0, 12, 4, -7, 17, -13]);
ECSearch("36.1-f",(6)*OK,[-4, 0, -3, 1, 0, -4, 7, -4, 8, 4, 0, -12, 9, -7, -9, -4, 12, -3, 9, 0, 8, 0, -8, 4, 12, 17, -7, -17]);
ECSearch("38.1-a",(w + 10)*OK,[-2, 4, 4, -4, 0, 6, 2, 6, 6, 4, -2, 10, 6, 6, 2, -12, 12, -12, 0, -8, -2, -4, 8, 10, 10, 14, -10, 12]);
ECSearch("38.1-b",(w + 10)*OK,[-2, -4, -4, -4, 0, -6, 2, -6, -6, -4, 2, -10, 6, 6, 2, 12, -12, -12, 0, 8, 2, -4, 8, -10, -10, 14, -10, 12]);
ECSearch("38.2-a",(w - 10)*OK,[-2, 4, 4, -4, 6, 0, 2, 6, 6, 4, 10, -2, 6, 6, 2, 12, -12, 0, -12, -2, -8, 8, -4, 10, 10, -10, 14, 0]);
ECSearch("38.2-b",(w - 10)*OK,[-2, -4, -4, -4, -6, 0, 2, -6, -6, -4, -10, 2, 6, 6, 2, -12, 12, 0, -12, 2, 8, 8, -4, -10, -10, -10, 14, 0]);
ECSearch("46.1-a",(w + 4)*OK,[-2, 0, 2, 8, -4, 0, -2, -10, 8, 0, 6, 8, -10, 2, -2, 0, -2, -4, -4, 4, -14, 12, -4, -14, -14, 10, -10, -12]);
ECSearch("46.1-b",(w + 4)*OK,[1, 6, 1, 5, -4, 3, 4, -8, -8, -3, 3, 10, 5, 2, 4, 6, 11, 11, -4, 8, 2, -15, 8, 14, 11, -17, 14, 6]);
ECSearch("46.1-c",(w + 4)*OK,[1, -6, -1, 5, -4, -3, 4, 8, 8, 3, -3, -10, 5, 2, 4, -6, -11, 11, -4, -8, -2, -15, 8, -14, -11, -17, 14, 6]);
ECSearch("46.1-d",(w + 4)*OK,[-2, 0, -2, 8, -4, 0, -2, 10, -8, 0, -6, -8, -10, 2, -2, 0, 2, -4, -4, -4, 14, 12, -4, 14, 14, 10, -10, -12]);
ECSearch("46.2-a",(w - 4)*OK,[-2, 2, 0, -4, 8, 0, -2, 8, -10, 0, 8, 6, 2, -10, -2, -2, 0, -4, -4, -14, 4, -4, 12, -14, -14, -10, 10, -12]);
ECSearch("46.2-b",(w - 4)*OK,[1, 1, 6, -4, 5, 3, 4, -8, -8, -3, 10, 3, 2, 5, 4, 11, 6, -4, 11, 2, 8, 8, -15, 11, 14, 14, -17, 9]);
ECSearch("46.2-c",(w - 4)*OK,[1, -1, -6, -4, 5, -3, 4, 8, 8, 3, -10, -3, 2, 5, 4, -11, -6, -4, 11, -2, -8, 8, -15, -11, -14, 14, -17, 9]);
ECSearch("46.2-d",(w - 4)*OK,[-2, -2, 0, -4, 8, 0, -2, -8, 10, 0, -8, -6, 2, -10, -2, 2, 0, -4, -4, 14, -4, -4, 12, 14, 14, -10, 10, -12]);
ECSearch("49.1-a",(7)*OK,[1, 6, 6, -6, 0, 0, -6, 6, -6, 0, 0, 0, 0, 0, -10, -10, -12, 12, -4, -4, -6, 6, 12, 12, -6, 6, -10, -10, -4]);
ECSearch("49.1-b",(7)*OK,[1, 6, -6, 6, 0, 0, 6, -6, -6, 0, 0, 0, 0, 0, -10, -10, 12, -12, -4, -4, 6, -6, 12, 12, 6, -6, -10, -10, -4]);
ECSearch("58.1-a",(w + 2)*OK,[4, 2, -4, -7, -4, 3, -6, 2, 3, -4, -7, -7, 6, 12, -4, -6, -12, 12, 15, -7, -1, 2, -10, 5, 11, 14, 2, -3]);
ECSearch("58.1-b",(w + 2)*OK,[4, -2, 4, -7, -4, -3, 6, 2, -3, 4, 7, 7, 6, 12, -4, 6, 12, 12, 15, 7, 1, 2, -10, -5, -11, 14, 2, -3]);
ECSearch("58.2-a",(w - 2)*OK,[4, -4, 2, -4, -7, -6, 3, 2, 3, -4, -7, -7, 12, 6, -4, -12, -6, 15, 12, -1, -7, -10, 2, 11, 5, 2, 14, -9]);
ECSearch("58.2-b",(w - 2)*OK,[4, 4, -2, -4, -7, 6, -3, 2, -3, 4, 7, 7, 12, 6, -4, 12, 6, 15, 12, 1, 7, -10, 2, -11, -5, 2, 14, -9]);
