print "Field 2.2.461.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 115);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(w - 11)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-w + 12)*OK);
Append(~Plist,(w + 11)*OK);
Append(~Plist,(3*w + 31)*OK);
Append(~Plist,(-3*w + 34)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 13)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(w - 9)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(6*w + 61)*OK);
Append(~Plist,(-6*w + 67)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(2*w - 21)*OK);
Append(~Plist,(-2*w - 19)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(w + 6)*OK);
Append(~Plist,(w - 7)*OK);
Append(~Plist,(5*w - 57)*OK);
Append(~Plist,(5*w + 52)*OK);
Append(~Plist,(7*w + 71)*OK);
Append(~Plist,(-7*w + 78)*OK);
Append(~Plist,(w + 3)*OK);
Append(~Plist,(w - 4)*OK);
Append(~Plist,(3*w - 32)*OK);
Append(~Plist,(-3*w - 29)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(w + 1)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(-10*w - 103)*OK);
Append(~Plist,(-10*w + 113)*OK);
Append(~Plist,(8*w + 81)*OK);
Append(~Plist,(-8*w + 89)*OK);
Append(~Plist,(w + 16)*OK);
Append(~Plist,(w - 17)*OK);
Append(~Plist,(4*w - 43)*OK);
Append(~Plist,(-4*w - 39)*OK);
Append(~Plist,(3*w + 28)*OK);
Append(~Plist,(3*w - 31)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(-4*w - 43)*OK);
Append(~Plist,(-4*w + 47)*OK);
Append(~Plist,(w + 17)*OK);
Append(~Plist,(w - 18)*OK);
Append(~Plist,(8*w - 91)*OK);
Append(~Plist,(8*w + 83)*OK);
Append(~Plist,(5*w - 58)*OK);
Append(~Plist,(5*w + 53)*OK);
Append(~Plist,(-3*w + 37)*OK);
Append(~Plist,(3*w + 34)*OK);
Append(~Plist,(w + 18)*OK);
Append(~Plist,(w - 19)*OK);
Append(~Plist,(5*w - 54)*OK);
Append(~Plist,(-5*w - 49)*OK);
Append(~Plist,(-13*w - 134)*OK);
Append(~Plist,(-13*w + 147)*OK);
Append(~Plist,(-3*w + 29)*OK);
Append(~Plist,(3*w + 26)*OK);
Append(~Plist,(-5*w - 54)*OK);
Append(~Plist,(-5*w + 59)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(5*w + 48)*OK);
Append(~Plist,(5*w - 53)*OK);
Append(~Plist,(w + 21)*OK);
Append(~Plist,(w - 22)*OK);
Append(~Plist,(7*w - 81)*OK);
Append(~Plist,(7*w + 74)*OK);
Append(~Plist,(-9*w - 94)*OK);
Append(~Plist,(-9*w + 103)*OK);
Append(~Plist,(11*w + 111)*OK);
Append(~Plist,(-11*w + 122)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(-5*w + 52)*OK);
Append(~Plist,(-5*w - 47)*OK);
Append(~Plist,(-2*w + 31)*OK);
Append(~Plist,(2*w + 29)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(12*w + 121)*OK);
Append(~Plist,(-12*w + 133)*OK);
Append(~Plist,(8*w - 87)*OK);
Append(~Plist,(-8*w - 79)*OK);
Append(~Plist,(15*w - 167)*OK);
Append(~Plist,(15*w + 152)*OK);
Append(~Plist,(-3*w - 38)*OK);
Append(~Plist,(3*w - 41)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[-1, 1, 1, 6, 3, 3, 0, 0, -6, -6, 5, 5, -4, -4, 9, 6, 6, 6, 6, 7, 7, 2, 2, 6, 6, -11, -11, 2, 2, -14]);
