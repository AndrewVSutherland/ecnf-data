print "Field 2.2.269.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 67);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK);
Append(~Plist,(w - 9)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-w + 8)*OK);
Append(~Plist,(-w - 7)*OK);
Append(~Plist,(-2*w - 15)*OK);
Append(~Plist,(2*w - 17)*OK);
Append(~Plist,(w + 9)*OK);
Append(~Plist,(w - 10)*OK);
Append(~Plist,(w + 5)*OK);
Append(~Plist,(w - 6)*OK);
Append(~Plist,(-5*w - 39)*OK);
Append(~Plist,(5*w - 44)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(w - 11)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(3*w + 22)*OK);
Append(~Plist,(3*w - 25)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(w)*OK);
Append(~Plist,(w - 1)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(-6*w - 47)*OK);
Append(~Plist,(6*w - 53)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 13)*OK);
Append(~Plist,(-3*w + 28)*OK);
Append(~Plist,(3*w + 25)*OK);
Append(~Plist,(7*w + 53)*OK);
Append(~Plist,(7*w - 60)*OK);
Append(~Plist,(-7*w - 55)*OK);
Append(~Plist,(7*w - 62)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(-4*w + 37)*OK);
Append(~Plist,(4*w + 33)*OK);
Append(~Plist,(-3*w - 26)*OK);
Append(~Plist,(-3*w + 29)*OK);
Append(~Plist,(w + 15)*OK);
Append(~Plist,(w - 16)*OK);
Append(~Plist,(9*w + 68)*OK);
Append(~Plist,(9*w - 77)*OK);
Append(~Plist,(5*w + 36)*OK);
Append(~Plist,(5*w - 41)*OK);
Append(~Plist,(-5*w + 46)*OK);
Append(~Plist,(5*w + 41)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(2*w + 5)*OK);
Append(~Plist,(w + 17)*OK);
Append(~Plist,(w - 18)*OK);
Append(~Plist,(-3*w + 20)*OK);
Append(~Plist,(3*w + 17)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(-6*w + 55)*OK);
Append(~Plist,(6*w + 49)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(-4*w - 35)*OK);
Append(~Plist,(4*w - 39)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(w + 19)*OK);
Append(~Plist,(w - 20)*OK);
Append(~Plist,(-10*w - 79)*OK);
Append(~Plist,(10*w - 89)*OK);
Append(~Plist,(-4*w - 25)*OK);
Append(~Plist,(4*w - 29)*OK);
Append(~Plist,(-5*w + 39)*OK);
Append(~Plist,(5*w + 34)*OK);
Append(~Plist,(w + 20)*OK);
Append(~Plist,(w - 21)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(5*w - 48)*OK);
Append(~Plist,(5*w + 43)*OK);
Append(~Plist,(-11*w - 87)*OK);
Append(~Plist,(11*w - 98)*OK);
Append(~Plist,(5*w + 33)*OK);
Append(~Plist,(5*w - 38)*OK);
Append(~Plist,(7*w + 50)*OK);
Append(~Plist,(7*w - 57)*OK);
Append(~Plist,(w + 22)*OK);
Append(~Plist,(w - 23)*OK);
Append(~Plist,(-3*w + 14)*OK);
Append(~Plist,(3*w + 11)*OK);
Append(~Plist,(-8*w + 73)*OK);
Append(~Plist,(8*w + 65)*OK);
Append(~Plist,(-7*w - 58)*OK);
Append(~Plist,(-7*w + 65)*OK);
Append(~Plist,(-5*w + 37)*OK);
Append(~Plist,(-5*w - 32)*OK);
Append(~Plist,(-4*w - 21)*OK);
Append(~Plist,(4*w - 25)*OK);
Append(~Plist,(-3*w + 8)*OK);
Append(~Plist,(3*w + 5)*OK);
Append(~Plist,(17*w + 133)*OK);
Append(~Plist,(17*w - 150)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("9.1-a",(3)*OK,[4, 3, 3, 1, 1, -2, -2, -3, -3, -5, -5, -7, -7, 5, 5, -3, -3, 10, -1, -1, 15, 15, -9, -9, 6, 6, 8, 8, -13]);
ECSearch("11.1-a",(-w + 8)*OK,[1, 0, 0, -2, -2, -6, -1, 9, 4, -8, 2, 8, -7, -9, -9, 7, 2, 1, -3, 2, 2, 7, 16, -4, 6, -4, 0, 10, 0]);
ECSearch("11.1-b",(-w + 8)*OK,[-1, -4, 0, -4, 4, -2, 3, -5, -6, -8, -8, -6, 9, 13, -7, -3, -6, 5, -11, -6, -6, -1, -2, 0, 10, -4, -4, -2, 6]);
ECSearch("11.2-a",(-w - 7)*OK,[1, 0, 0, -2, -2, -1, -6, 4, 9, 2, -8, -7, 8, -9, -9, 2, 7, 1, 2, -3, 7, 2, -4, 16, -4, 6, 10, 0, 0]);
ECSearch("11.2-b",(-w - 7)*OK,[-1, 0, -4, -4, 4, 3, -2, -6, -5, -8, -8, 9, -6, -7, 13, -6, -3, 5, -6, -11, -1, -6, 0, -2, -4, 10, -2, -4, -16]);
