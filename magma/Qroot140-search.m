print "Field 2.2.140.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 35);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(5)*OK+(w)*OK);
Append(~Plist,(7)*OK+(w)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(13)*OK+(w + 3)*OK);
Append(~Plist,(13)*OK+(w + 10)*OK);
Append(~Plist,(17)*OK+(w + 1)*OK);
Append(~Plist,(17)*OK+(w + 16)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 4)*OK);
Append(~Plist,(23)*OK+(w + 9)*OK);
Append(~Plist,(23)*OK+(w + 14)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(43)*OK+(w + 11)*OK);
Append(~Plist,(43)*OK+(w + 32)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(67)*OK+(w + 13)*OK);
Append(~Plist,(67)*OK+(w + 54)*OK);
Append(~Plist,(73)*OK+(w + 20)*OK);
Append(~Plist,(73)*OK+(w + 53)*OK);
Append(~Plist,(97)*OK+(w + 36)*OK);
Append(~Plist,(97)*OK+(w + 61)*OK);
Append(~Plist,(107)*OK+(w + 28)*OK);
Append(~Plist,(107)*OK+(w + 79)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 12)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(127)*OK+(w + 17)*OK);
Append(~Plist,(127)*OK+(w + 110)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(2*w + 3)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(157)*OK+(w + 52)*OK);
Append(~Plist,(157)*OK+(w + 105)*OK);
Append(~Plist,(163)*OK+(w + 19)*OK);
Append(~Plist,(163)*OK+(w + 144)*OK);
Append(~Plist,(173)*OK+(w + 30)*OK);
Append(~Plist,(173)*OK+(w + 143)*OK);
Append(~Plist,(-4*w + 19)*OK);
Append(~Plist,(4*w + 19)*OK);
Append(~Plist,(-3*w + 8)*OK);
Append(~Plist,(3*w + 8)*OK);
Append(~Plist,(257)*OK+(w + 99)*OK);
Append(~Plist,(257)*OK+(w + 158)*OK);
Append(~Plist,(263)*OK+(w + 78)*OK);
Append(~Plist,(263)*OK+(w + 185)*OK);
Append(~Plist,(-4*w - 17)*OK);
Append(~Plist,(4*w - 17)*OK);
Append(~Plist,(-4*w + 29)*OK);
Append(~Plist,(4*w + 29)*OK);
Append(~Plist,(293)*OK+(w + 62)*OK);
Append(~Plist,(293)*OK+(w + 231)*OK);
Append(~Plist,(-3*w + 2)*OK);
Append(~Plist,(3*w + 2)*OK);
Append(~Plist,(313)*OK+(w + 40)*OK);
Append(~Plist,(313)*OK+(w + 273)*OK);
Append(~Plist,(347)*OK+(w + 27)*OK);
Append(~Plist,(347)*OK+(w + 320)*OK);
Append(~Plist,(353)*OK+(w + 68)*OK);
Append(~Plist,(353)*OK+(w + 285)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(397)*OK+(w + 157)*OK);
Append(~Plist,(397)*OK+(w + 240)*OK);
Append(~Plist,(-4*w - 31)*OK);
Append(~Plist,(4*w - 31)*OK);
Append(~Plist,(-6*w + 29)*OK);
Append(~Plist,(6*w + 29)*OK);
Append(~Plist,(-5*w + 36)*OK);
Append(~Plist,(5*w + 36)*OK);
Append(~Plist,(433)*OK+(w + 86)*OK);
Append(~Plist,(433)*OK+(w + 347)*OK);
Append(~Plist,(-4*w + 11)*OK);
Append(~Plist,(4*w + 11)*OK);
Append(~Plist,(443)*OK+(w + 56)*OK);
Append(~Plist,(443)*OK+(w + 387)*OK);
Append(~Plist,(w + 22)*OK);
Append(~Plist,(w - 22)*OK);
Append(~Plist,(463)*OK+(w + 31)*OK);
Append(~Plist,(463)*OK+(w + 432)*OK);
Append(~Plist,(-4*w - 9)*OK);
Append(~Plist,(4*w - 9)*OK);
Append(~Plist,(487)*OK+(w + 106)*OK);
Append(~Plist,(487)*OK+(w + 381)*OK);
Append(~Plist,(w + 24)*OK);
Append(~Plist,(w - 24)*OK);
Append(~Plist,(547)*OK+(w + 242)*OK);
Append(~Plist,(547)*OK+(w + 305)*OK);
Append(~Plist,(-5*w + 38)*OK);
Append(~Plist,(-5*w - 38)*OK);
Append(~Plist,(577)*OK+(w + 261)*OK);
Append(~Plist,(577)*OK+(w + 316)*OK);
Append(~Plist,(593)*OK+(w + 88)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("14.1-a",(w + 7)*OK,[0, -2, -4, -4, 6, 6, -2, -2, 0, 0, -6, -6, 4, 4, -8, -8, 6, 6, 4, 4, 2, 2, -10, -10, -12, -12, 2, 2]);
ECSearch("14.1-b",(w + 7)*OK,[0, -2, -4, -4, 6, 6, 2, 2, 0, 0, -6, -6, -4, -4, 8, 8, -6, -6, -4, -4, 2, 2, -10, -10, 12, 12, 2, 2]);
ECSearch("14.1-c",(w + 7)*OK,[0, -2, 4, 4, -6, -6, -2, -2, 0, 0, -6, -6, 4, 4, 8, 8, 6, 6, -4, -4, -2, -2, 10, 10, 12, 12, 2, 2]);
ECSearch("14.1-d",(w + 7)*OK,[0, -2, 4, 4, -6, -6, 2, 2, 0, 0, -6, -6, -4, -4, -8, -8, -6, -6, 4, 4, -2, -2, 10, 10, -12, -12, 2, 2]);
ECSearch("19.1-a",(w + 4)*OK,[2, 1, 2, 0, -1, -6, -7, -2, -5, 6, 6, 0, -5, 3, -2, -4, -9, 5, 0, 2, -3, -6, 4, 8, 13, -3, 12, -5, 10]);
ECSearch("19.1-b",(w + 4)*OK,[2, -1, 2, 0, 1, 6, 7, 2, 5, 6, 6, 0, -5, -3, 2, -4, -9, -5, 0, 2, -3, 6, -4, -8, -13, -3, 12, -5, 10]);
ECSearch("19.1-c",(w + 4)*OK,[-2, 1, -2, 0, -1, -6, -7, -2, 5, -6, -6, 0, -5, -3, 2, 4, 9, -5, 0, -2, 3, -6, 4, 8, 13, 3, -12, -5, 10]);
ECSearch("19.1-d",(w + 4)*OK,[-2, -1, -2, 0, 1, 6, 7, 2, -5, -6, -6, 0, -5, 3, -2, 4, 9, 5, 0, -2, 3, 6, -4, -8, -13, 3, -12, -5, 10]);
ECSearch("19.2-a",(w - 4)*OK,[2, 1, 2, 0, -6, -1, -2, -7, -5, 6, 6, -5, 0, -2, 3, -9, -4, 0, 5, -3, 2, 4, -6, 13, 8, 12, -3, 10, -5]);
ECSearch("19.2-b",(w - 4)*OK,[2, -1, 2, 0, 6, 1, 2, 7, 5, 6, 6, -5, 0, 2, -3, -9, -4, 0, -5, -3, 2, -4, 6, -13, -8, 12, -3, 10, -5]);
ECSearch("19.2-c",(w - 4)*OK,[-2, 1, -2, 0, -6, -1, -2, -7, 5, -6, -6, -5, 0, 2, -3, 9, 4, 0, -5, 3, -2, 4, -6, 13, 8, -12, 3, 10, -5]);
ECSearch("19.2-d",(w - 4)*OK,[-2, -1, -2, 0, 6, 1, 2, 7, -5, -6, -6, -5, 0, -2, 3, 9, 4, 0, 5, 3, -2, -4, 6, -13, -8, -12, 3, 10, -5]);
ECSearch("20.1-a",(10)*OK+(2*w)*OK,[-2, -2, -2, -2, 6, 6, -4, -4, -6, -6, 6, 6, -4, -4, 10, 10, 12, 12, -2, -2, -2, -2, -2, -2, 6, 6, 2, 2]);
ECSearch("20.1-b",(10)*OK+(2*w)*OK,[2, -2, -2, -2, 6, 6, 4, 4, 6, 6, 6, 6, 4, 4, -10, -10, -12, -12, 2, 2, -2, -2, -2, -2, -6, -6, 2, 2]);
ECSearch("20.1-c",(10)*OK+(2*w)*OK,[-2, -2, 2, 2, -6, -6, 4, 4, -6, -6, 6, 6, 4, 4, 10, 10, -12, -12, -2, -2, 2, 2, 2, 2, 6, 6, 2, 2]);
ECSearch("20.1-d",(10)*OK+(2*w)*OK,[2, -2, 2, 2, -6, -6, -4, -4, 6, 6, 6, 6, -4, -4, -10, -10, 12, 12, 2, 2, 2, 2, 2, 2, -6, -6, 2, 2]);
