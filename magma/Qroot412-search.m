print "Field 2.2.412.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 103);
OK := Integers(K);
Plist := [];
Append(~Plist,(47*w + 477)*OK);
Append(~Plist,(-w - 10)*OK);
Append(~Plist,(-w + 10)*OK);
Append(~Plist,(-27*w - 274)*OK);
Append(~Plist,(27*w - 274)*OK);
Append(~Plist,(6*w - 61)*OK);
Append(~Plist,(-6*w - 61)*OK);
Append(~Plist,(-13*w - 132)*OK);
Append(~Plist,(13*w - 132)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(2*w - 21)*OK);
Append(~Plist,(-2*w - 21)*OK);
Append(~Plist,(-8*w - 81)*OK);
Append(~Plist,(8*w - 81)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 12)*OK);
Append(~Plist,(-34*w - 345)*OK);
Append(~Plist,(34*w - 345)*OK);
Append(~Plist,(168*w - 1705)*OK);
Append(~Plist,(168*w + 1705)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(-114*w + 1157)*OK);
Append(~Plist,(-114*w - 1157)*OK);
Append(~Plist,(w + 6)*OK);
Append(~Plist,(w - 6)*OK);
Append(~Plist,(-15*w + 152)*OK);
Append(~Plist,(15*w + 152)*OK);
Append(~Plist,(3*w + 32)*OK);
Append(~Plist,(3*w - 32)*OK);
Append(~Plist,(w)*OK);
Append(~Plist,(-4*w + 39)*OK);
Append(~Plist,(4*w + 39)*OK);
Append(~Plist,(-7*w + 72)*OK);
Append(~Plist,(7*w + 72)*OK);
Append(~Plist,(107*w + 1086)*OK);
Append(~Plist,(107*w - 1086)*OK);
Append(~Plist,(-128*w - 1299)*OK);
Append(~Plist,(128*w - 1299)*OK);
Append(~Plist,(-12*w - 121)*OK);
Append(~Plist,(12*w - 121)*OK);
Append(~Plist,(-175*w + 1776)*OK);
Append(~Plist,(175*w + 1776)*OK);
Append(~Plist,(-55*w - 558)*OK);
Append(~Plist,(55*w - 558)*OK);
Append(~Plist,(-6*w + 59)*OK);
Append(~Plist,(6*w + 59)*OK);
Append(~Plist,(-3*w + 34)*OK);
Append(~Plist,(3*w + 34)*OK);
Append(~Plist,(-3*w + 26)*OK);
Append(~Plist,(3*w + 26)*OK);
Append(~Plist,(-36*w + 365)*OK);
Append(~Plist,(36*w + 365)*OK);
Append(~Plist,(-23*w + 234)*OK);
Append(~Plist,(-23*w - 234)*OK);
Append(~Plist,(-5*w - 48)*OK);
Append(~Plist,(-5*w + 48)*OK);
Append(~Plist,(-269*w - 2730)*OK);
Append(~Plist,(269*w - 2730)*OK);
Append(~Plist,(-14*w - 141)*OK);
Append(~Plist,(14*w - 141)*OK);
Append(~Plist,(-396*w + 4019)*OK);
Append(~Plist,(-396*w - 4019)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(147*w + 1492)*OK);
Append(~Plist,(147*w - 1492)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(21*w + 214)*OK);
Append(~Plist,(21*w - 214)*OK);
Append(~Plist,(-410*w - 4161)*OK);
Append(~Plist,(410*w - 4161)*OK);
Append(~Plist,(-69*w - 700)*OK);
Append(~Plist,(69*w - 700)*OK);
Append(~Plist,(44*w - 447)*OK);
Append(~Plist,(-44*w - 447)*OK);
Append(~Plist,(72*w + 731)*OK);
Append(~Plist,(72*w - 731)*OK);
Append(~Plist,(51*w + 518)*OK);
Append(~Plist,(-51*w + 518)*OK);
Append(~Plist,(-551*w - 5592)*OK);
Append(~Plist,(551*w - 5592)*OK);
Append(~Plist,(-3*w - 22)*OK);
Append(~Plist,(3*w - 22)*OK);
Append(~Plist,(295*w - 2994)*OK);
Append(~Plist,(-295*w - 2994)*OK);
Append(~Plist,(-739*w + 7500)*OK);
Append(~Plist,(692*w - 7023)*OK);
Append(~Plist,(-21*w + 212)*OK);
Append(~Plist,(-21*w - 212)*OK);
Append(~Plist,(-76*w - 771)*OK);
Append(~Plist,(76*w - 771)*OK);
Append(~Plist,(-10*w + 99)*OK);
Append(~Plist,(10*w + 99)*OK);
Append(~Plist,(17*w + 174)*OK);
Append(~Plist,(17*w - 174)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(-15*w + 154)*OK);
Append(~Plist,(-15*w - 154)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("3.1-a",(-w - 10)*OK,[1, 1, 3, -2, -2, 3, 1, -4, -2, 6, 1, -8, 2, 3, -12, 11, -9, -7, -2, 1, -8, 12, 10, 10, 3, 8, -7, 18, 12]);
ECSearch("3.1-b",(-w - 10)*OK,[1, -1, -3, 2, -2, 3, 1, -4, -2, 6, 1, 8, -2, 3, -12, -11, 9, 7, 2, 1, -8, 12, -10, -10, -3, -8, -7, 18, -12]);
ECSearch("3.2-a",(-w + 10)*OK,[1, 1, -2, 3, 3, -2, -4, 1, -2, 1, 6, 2, -8, -12, 3, -9, 11, -2, -7, 1, 12, -8, 10, 10, 8, 3, 18, -7, 12]);
ECSearch("3.2-b",(-w + 10)*OK,[1, -1, 2, -3, 3, -2, -4, 1, -2, 1, 6, -2, 8, -12, 3, 9, -11, 2, 7, 1, 12, -8, -10, -10, -8, -3, 18, -7, -12]);
ECSearch("6.1-a",(-7*w + 71)*OK,[1, -3, 0, 2, 5, 3, 0, -4, -6, -3, 2, -10, -9, 12, -7, -1, -3, 0, 5, 8, -10, 8, -10, -3, 6, 5, -10, -4]);
ECSearch("6.1-b",(-7*w + 71)*OK,[-1, 3, 0, 2, 5, 3, 0, -4, -6, -3, -2, 10, -9, 12, 7, 1, 3, 0, 5, 8, -10, -8, 10, 3, -6, 5, -10, 4]);
ECSearch("6.2-a",(-7*w - 71)*OK,[1, 0, -3, 5, 2, 0, 3, -4, -3, -6, -10, 2, 12, -9, -1, -7, 0, -3, 5, -10, 8, -10, 8, 6, -3, -10, 5, -4]);
ECSearch("6.2-b",(-7*w - 71)*OK,[-1, 0, 3, 5, 2, 0, 3, -4, -3, -6, 10, -2, 12, -9, 1, 7, 0, 3, 5, -10, 8, 10, -8, -6, 3, -10, 5, 4]);
ECSearch("8.1-a",(94*w + 954)*OK,[-1, 2, -5, -6, 5, 0, -2, 6, -8, 8, -3, -2, -4, -9, 2, 5, -2, -12, -2, 5, -12, 2, -12, 4, 8, -3, -1, 17, 19]);
ECSearch("8.1-b",(94*w + 954)*OK,[-2, 1, 6, 5, 0, 5, 6, -2, -8, -3, 8, 4, 2, 2, -9, 2, -5, 2, 12, 5, 2, -12, -4, 12, 3, -8, 17, -1, -19]);
ECSearch("8.1-c",(94*w + 954)*OK,[2, -1, -6, -5, 0, 5, 6, -2, -8, -3, 8, -4, -2, 2, -9, -2, 5, -2, -12, 5, 2, -12, 4, -12, -3, 8, 17, -1, 19]);
ECSearch("8.1-d",(94*w + 954)*OK,[1, -2, 5, 6, 5, 0, -2, 6, -8, 8, -3, 2, 4, -9, 2, -5, 2, 12, 2, 5, -12, 2, 12, -4, -8, 3, -1, 17, -19]);
ECSearch("9.2-a",(-20*w + 203)*OK,[0, 3, 6, 1, 1, -6, 0, -7, 6, -5, -2, 4, 4, -10, 3, -7, -7, -8, 1, -11, -10, 4, -4, 10, 2, -9, -10, -3, -12]);
ECSearch("9.2-b",(-20*w + 203)*OK,[-2, 0, 0, 0, 6, -6, -8, -2, -8, 10, 4, 0, 0, -8, 10, 0, 0, 0, 0, 14, -12, 12, 0, 0, 0, 0, 18, -18, 0]);
ECSearch("9.2-c",(-20*w + 203)*OK,[2, 1, 2, 3, -3, -2, 4, 5, -8, -1, 0, 2, -8, 6, 3, -9, -1, -10, -5, 1, -6, 10, 4, -8, 10, -3, -18, 5, -6]);
ECSearch("9.2-d",(-20*w + 203)*OK,[2, -1, -2, -3, -3, -2, 4, 5, -8, -1, 0, -2, 8, 6, 3, 9, 1, 10, 5, 1, -6, 10, -4, 8, -10, 3, -18, 5, 6]);
ECSearch("9.2-e",(-20*w + 203)*OK,[0, -3, -6, -1, 1, -6, 0, -7, 6, -5, -2, -4, -4, -10, 3, 7, 7, 8, -1, -11, -10, 4, 4, -10, -2, 9, -10, -3, 12]);
ECSearch("9.3-a",(20*w + 203)*OK,[0, 3, 1, 6, -6, 1, -7, 0, 6, -2, -5, 4, 4, 3, -10, -7, -7, 1, -8, -11, 4, -10, 10, -4, -9, 2, -3, -10, -12]);
ECSearch("9.3-b",(20*w + 203)*OK,[-2, 0, 0, 0, -6, 6, -2, -8, -8, 4, 10, 0, 0, 10, -8, 0, 0, 0, 0, 14, 12, -12, 0, 0, 0, 0, -18, 18, 0]);
ECSearch("9.3-c",(20*w + 203)*OK,[2, 1, 3, 2, -2, -3, 5, 4, -8, 0, -1, -8, 2, 3, 6, -1, -9, -5, -10, 1, 10, -6, -8, 4, -3, 10, 5, -18, -6]);
ECSearch("9.3-d",(20*w + 203)*OK,[2, -1, -3, -2, -2, -3, 5, 4, -8, 0, -1, 8, -2, 3, 6, 1, 9, 5, 10, 1, 10, -6, 8, -4, 3, -10, 5, -18, 6]);
ECSearch("9.3-e",(20*w + 203)*OK,[0, -3, -1, -6, -6, 1, -7, 0, 6, -2, -5, -4, -4, 3, -10, 7, 7, -1, 8, -11, 4, -10, -10, 4, 9, -2, -3, -10, 12]);
