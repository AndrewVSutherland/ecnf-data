print "Field 2.2.13.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 3);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w)*OK);
Append(~Plist,(-w + 1)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(-3*w - 1)*OK);
Append(~Plist,(3*w - 4)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(-3*w + 2)*OK);
Append(~Plist,(3*w - 1)*OK);
Append(~Plist,(-4*w - 1)*OK);
Append(~Plist,(4*w - 5)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(-5*w + 7)*OK);
Append(~Plist,(-5*w - 2)*OK);
Append(~Plist,(-5*w + 4)*OK);
Append(~Plist,(5*w - 1)*OK);

effort := 400;
print "Isogeny class 4.1-a";
N := (2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, 3, 3, -6, -6, 1, 0, 0, -1, -1, 5, -6, -6, -8, -8, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 9.1-a";
N := (3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, -6, 0, 0, 10, 6, 6, -4, -4, 2, 6, 6, -2, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 17.1-a";
N := (w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -4, 3, 3, 6, -4, -9, 6, -4, -10, -4, 6, 6, 5, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 17.2-a";
N := (w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -4, 3, 6, 3, -4, 6, -9, -10, -4, -4, 6, 6, 8, 5, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 23.1-a";
N := (-3*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, -2, -8, 6, 4, 6, 4, 4, 6, 4, -8, -2, -6, 2, -2, -16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 23.2-a";
N := (3*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, -2, 6, -8, 4, 6, 4, 4, 4, 6, -8, -6, -2, -2, 2, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.1-a";
N := (-3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 6, 0, 0, -10, 6, -6, -4, -4, 2, 6, -6, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.2-a";
N := (-3*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, -6, 0, 0, -10, -6, 6, -4, -4, 2, -6, 6, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.1-a";
N := (6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -2, 4, 4, 6, -10, -10, 4, 4, 10, -6, -6, 2, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.2-a";
N := (2*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 3, -3, -6, 6, -1, 0, 0, -1, -1, 5, -6, 6, 8, 8, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.3-a";
N := (-2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -3, 3, 6, -6, -1, 0, 0, -1, -1, 5, 6, -6, 8, 8, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 39.1-a";
N := (w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, -2, 4, -8, -2, -2, -6, 12, -8, -2, -10, -2, 14, 6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 39.2-a";
N := (w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, 6, -8, 4, -2, -6, -2, -8, 12, -2, -2, -10, 6, 14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.1-a";
N := (-4*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -6, 0, 0, 6, -2, -6, 0, 8, -4, -10, -6, -6, 10, -2, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.2-a";
N := (-4*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, -6, 6, 0, -2, 0, -6, -4, 8, -10, -6, -6, -2, 10, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 51.1-a";
N := (-4*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 6, -6, 0, -8, 0, 6, 8, 2, 8, 6, 0, -8, -14, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 51.1-b";
N := (-4*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, -6, -4, 0, -2, 2, -2, 4, 8, -2, -10, 2, 10, -10, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 51.1-c";
N := (-4*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 6, -2, 6, 8, -4, -4, 6, 0, 6, -4, 6, -4, -12, 10, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 51.2-a";
N := (-2*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -3, -9, 0, -8, 3, -6, 2, 8, -10, 0, 12, 7, 10, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 51.4-a";
N := (4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 6, 0, -6, -8, 6, 0, 2, 8, 8, 0, 6, -14, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 51.4-b";
N := (4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, -6, 0, -4, -2, -2, 2, 8, 4, -2, 2, -10, -10, 10, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 51.4-c";
N := (4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 6, -2, 8, 6, -4, 6, -4, 6, 0, -4, -4, 6, 10, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 51.3-a";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -3, 0, -9, -8, -6, 3, 8, 2, -10, 12, 0, 10, 7, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.1-a";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -3, -3, 0, 0, -1, 6, 6, -1, -1, -13, 0, 0, 8, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 52.1-b";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -3, -3, -4, -4, -9, 2, 2, -5, -5, -13, 12, 12, -8, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 53.1-a";
N := (w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, 3, -4, -6, 1, -6, 4, -6, -10, 7, 0, -1, 1, 7, 8, -17, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 53.2-a";
N := (w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -1, 3, -6, -4, -6, 1, 4, -10, -6, 0, 7, -1, 1, 8, 7, 10, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.1-a";
N := (8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -4, 7, -1, 2, 2, -7, -8, 0, -1, -5, 1, 2, -6, 0, -8, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.1-b";
N := (8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -4, -1, 7, 2, 2, -7, 0, -8, -5, -1, 1, -6, 2, -8, 0, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.1-a";
N := (2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -2, 0, 4, -2, 2, -4, -10, 2, 6, 12, -4, -6, -12, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.2-a";
N := (2*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -2, 4, 0, -2, -4, 2, 2, -10, 6, -4, 12, -12, -6, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 69.2-a";
N := (-5*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 2, 6, 8, 2, -6, 2, -12, -8, -10, 6, 6, -2, -10, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 69.3-a";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 6, 2, 8, 2, 2, -6, -8, -12, -10, 6, 6, -10, -2, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-a";
N := (-5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 0, 0, 0, -6, 6, -6, 2, 8, -10, 6, -6, -2, 10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-b";
N := (-5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -2, 6, 8, -4, -2, 6, -8, -12, -6, -10, -10, -2, -2, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-c";
N := (-5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, -4, -4, -8, -2, -10, 2, -10, 8, -2, 6, -6, -2, 10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.2-a";
N := (-5*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 0, 0, -6, 0, -6, 6, 8, 2, -10, -6, 6, 10, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.2-b";
N := (-5*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 6, -2, -4, 8, 6, -2, -12, -8, -6, -10, -10, -2, -2, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.2-c";
N := (-5*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, -4, -4, -2, -8, 2, -10, 8, -10, -2, -6, 6, 10, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.1-a";
N := (9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 6, 0, 0, 10, -6, -6, -4, -4, 2, -6, -6, -2, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.2-a";
N := (3*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 6, -6, -6, -6, -1, 0, -6, -7, 11, -1, 12, 6, 5, 14, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.2-b";
N := (3*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 6, 6, -6, 6, 1, 0, 6, -7, 11, -1, 12, -6, -5, -14, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.4-a";
N := (5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -5, -3, 3, 6, 6, 1, -6, 9, 2, -4, -13, -9, -3, -5, -14, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.4-b";
N := (5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, -3, -3, 0, -3, -1, 9, -3, -4, -7, 5, -9, 3, 2, 11, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.4-c";
N := (5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, 3, -3, 0, -3, 1, -9, -3, -4, -7, 5, 9, 3, -2, -11, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.4-d";
N := (5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, 3, 3, -6, 6, -1, 6, 9, 2, -4, -13, 9, -3, 5, 14, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.3-a";
N := (-3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -6, 6, -6, -6, -1, -6, 0, 11, -7, -1, 6, 12, 14, 5, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.3-b";
N := (-3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 6, 6, 6, -6, 1, 6, 0, 11, -7, -1, -6, 12, -14, -5, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.5-a";
N := (5*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -5, 3, -3, 6, 6, 1, 9, -6, -4, 2, -13, -3, -9, -14, -5, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.5-b";
N := (5*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, -3, -3, -3, 0, -1, -3, 9, -7, -4, 5, 3, -9, 11, 2, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.5-c";
N := (5*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, -3, 3, -3, 0, 1, -3, -9, -7, -4, 5, 3, 9, -11, -2, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.5-d";
N := (5*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, 3, 3, 6, -6, -1, 9, 6, -4, 2, -13, -3, 9, 14, 5, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.1-a";
N := (w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, 2, -2, -8, -4, 2, -6, 4, 4, 2, 14, 2, -14, -2, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.4-a";
N := (w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -2, 2, -4, -8, 2, -6, 4, 4, 2, 2, 14, -2, -14, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 92.1-a";
N := (-6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 6, -6, 0, -2, 0, 0, 2, -4, 2, 0, 6, -8, 10, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 92.1-b";
N := (-6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -2, -5, -3, 4, 3, -8, -2, -9, -5, 1, -14, -12, -10, 10, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 92.2-a";
N := (6*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -6, 6, 0, -2, 0, 0, -4, 2, 2, 6, 0, 10, -8, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 92.2-b";
N := (6*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -2, -3, -5, 4, 3, -2, -8, -5, -9, 1, -12, -14, 10, -10, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-a";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -6, -6, 0, 0, 6, 6, -10, -10, 14, 0, 0, 10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-a";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 2, 4, -4, -6, -10, 10, 4, 4, 10, -6, 6, -2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-b";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -6, 6, -6, 2, 6, 0, 8, -4, -10, -12, -6, 2, -10, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-c";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, 6, -2, 6, 0, 8, -4, -10, -12, 6, -2, 10, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-a";
N := (-2*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -3, 6, 3, 9, -8, -6, -3, -10, -1, -4, 6, 6, 1, 1, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-b";
N := (-2*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 6, -6, -3, 3, 8, -9, 0, -1, -10, -4, 6, 3, 8, -10, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-c";
N := (-2*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -6, -6, 3, 3, -8, 9, 0, -1, -10, -4, -6, 3, -8, 10, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-d";
N := (-2*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 3, 6, -3, 9, 8, 6, -3, -10, -1, -4, -6, 6, -1, -1, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-a";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -2, -4, 4, -6, 10, -10, 4, 4, 10, 6, -6, -2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-b";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 0, -6, 6, 2, 0, 6, -4, 8, -10, -6, -12, -10, 2, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-c";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 0, 6, 6, -2, 0, 6, -4, 8, -10, 6, -12, 10, -2, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-a";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 6, -3, 9, 3, -8, -3, -6, -1, -10, -4, 6, 6, 1, 1, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-b";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -6, 6, 3, -3, 8, 0, -9, -10, -1, -4, 3, 6, -10, 8, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-c";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -6, -6, 3, 3, -8, 0, 9, -10, -1, -4, 3, -6, 10, -8, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-d";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 6, 3, 9, -3, 8, -3, 6, -1, -10, -4, 6, -6, -1, -1, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-a";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, -7, 3, -6, 4, 1, -10, 9, -11, -5, 4, 4, 12, 2, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-a";
N := (6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, 3, -7, 4, -6, 1, -10, -11, 9, -5, 4, 4, 2, 12, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.1-a";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 8, 0, -6, 6, -2, 4, -4, -6, 6, -10, -10, 6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.1-b";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, 0, 0, -6, -10, -10, -12, -12, 2, 6, 6, -2, -2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.1-c";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 0, 8, -6, -2, 6, -4, 4, -6, -10, 6, 6, -10, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.2-a";
N := (-7*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 6, 0, 0, -6, -2, 6, 6, -10, -4, -4, 12, -6, 4, -8, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.2-b";
N := (-7*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 6, 8, 4, 2, 6, -2, -8, 12, -2, 2, -10, -6, -14, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.2-c";
N := (-7*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, 0, 0, -6, 2, -6, 6, -10, -4, -4, -12, -6, -4, 8, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.3-a";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, 6, -6, 0, -2, 6, 6, -4, -10, -4, -6, 12, -8, 4, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.3-b";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, 2, 4, 8, 2, -2, 6, 12, -8, -2, -10, 2, -14, -6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 117.3-c";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, -6, -6, 0, 2, 6, -6, -4, -10, -4, -6, -12, 8, -4, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-a";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 4, -2, -2, -1, -1, -9, 0, 0, -6, -6, -10, -6, -6, 12, 12, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 127.1-a";
N := (-3*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, -5, 6, 0, -3, -6, -8, 0, -6, -1, 8, -4, 3, 6, 1, 1, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 127.1-b";
N := (-3*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -1, -6, -2, 1, -8, 2, 8, 2, -5, -8, -6, -1, 12, 1, 1, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 127.2-a";
N := (3*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, -5, 0, 6, -6, -3, -8, -6, 0, 8, -1, -4, 6, 3, 1, 1, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 127.2-b";
N := (3*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -1, -2, -6, -8, 1, 2, 2, 8, -8, -5, -6, 12, -1, 1, 1, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.1-a";
N := (w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 4, -4, 2, -8, 4, -6, 0, 4, -8, -12, -10, -2, -6, -14, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.1-b";
N := (w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, 0, 2, 0, -4, 6, 4, 4, 8, 4, 10, 6, -2, -6, -14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.2-a";
N := (7*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 5, -4, 4, 1, -6, 9, -2, 1, -12, 2, 7, -9, -14, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.2-b";
N := (7*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, -3, 4, -4, 3, -2, 9, 2, 9, 8, -2, 5, 13, 6, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.4-a";
N := (w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 4, 2, -4, 4, -8, -6, 4, 0, -8, -12, -2, -10, -14, -6, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.4-b";
N := (w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, 2, 0, -4, 0, 6, 4, 4, 8, 4, 6, 10, -6, -2, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.3-a";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, -4, 5, 1, 4, -6, -2, 9, 1, -12, 7, 2, -14, -9, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 129.3-b";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, 4, -3, 3, -4, -2, 2, 9, 9, 8, 5, -2, 6, 13, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-a";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, -2, -8, -8, 6, 2, 2, -8, -8, -2, 6, 6, 2, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-b";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 6, 0, 0, -2, -6, -6, 8, 8, 14, 6, 6, 10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-a";
N := (4*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, -6, 0, 6, -4, 6, 6, -4, -4, 2, 6, 12, -4, 8, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-b";
N := (4*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -6, 0, 0, -6, 2, -6, 0, 8, -4, -10, -6, 6, -10, 2, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-c";
N := (4*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 6, 0, -6, 4, 6, -6, -4, -4, 2, 6, -12, 4, -8, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-a";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 6, 6, 0, -4, 6, 6, -4, -4, 2, 12, 6, 8, -4, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-b";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, -6, -6, 0, 2, 0, -6, -4, 8, -10, 6, -6, 2, -10, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-c";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 6, -6, 0, 4, -6, 6, -4, -4, 2, -12, 6, -8, 4, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-a";
N := (-7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 8, -6, 1, 1, 1, -9, -5, -3, -7, 3, -13, -8, 0, -17, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.2-a";
N := (-7*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -6, 8, 1, 1, 1, -5, -9, -7, -3, -13, 3, 0, -8, 3, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.1-a";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, -8, 8, 2, -2, -10, -4, -4, 2, 6, -2, 14, 6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.1-b";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 2, -4, 0, 2, -2, -6, -8, 8, 10, -10, 2, 2, -10, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.1-c";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 0, 0, 2, -6, 6, -4, 8, -10, -6, 6, 2, -10, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.1-d";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, 8, 0, 2, -2, 6, 4, -4, 10, 14, -10, 14, -10, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.1-e";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -2, -4, 0, 2, -6, 2, 0, -12, -10, 2, -6, -2, 6, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.3-a";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 6, -6, 0, 8, 0, -6, 8, 2, 8, 6, 0, 8, 14, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.3-b";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 3, 6, -3, 4, 6, 9, -10, -4, -4, 6, -6, -8, -5, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.3-c";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -6, -2, 6, -8, 4, -4, -6, 0, 6, -4, 6, 4, 12, -10, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.3-d";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, -6, -4, 0, 2, 2, 2, 4, 8, -2, -10, -2, -10, 10, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.4-a";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 3, -9, 0, 8, 3, 6, 2, 8, -10, 0, -12, -7, -10, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.4-b";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, -3, 3, -6, 4, -9, -6, -4, -10, -4, 6, -6, -5, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.2-a";
N := (3*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, 8, -8, 2, -10, -2, -4, -4, 2, -2, 6, 6, 14, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.2-b";
N := (3*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 2, 0, -4, 2, -6, -2, 8, -8, 10, 2, -10, -10, 2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.2-c";
N := (3*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 0, 0, 2, 6, -6, 8, -4, -10, 6, -6, -10, 2, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.2-d";
N := (3*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, 0, 8, 2, 6, -2, -4, 4, 10, -10, 14, -10, 14, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.2-e";
N := (3*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -2, 0, -4, 2, 2, -6, -12, 0, -10, -6, 2, 6, -2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.6-a";
N := (w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 6, 0, -6, 8, -6, 0, 2, 8, 8, 0, 6, 14, 8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.6-b";
N := (w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 3, -3, 6, 4, 9, 6, -4, -10, -4, -6, 6, -5, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.6-c";
N := (w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -6, -2, -8, 6, 4, -6, -4, 6, 0, -4, 4, 6, -10, 12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.6-d";
N := (w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, -6, 0, -4, 2, 2, 2, 8, 4, -2, -2, -10, 10, -10, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.5-a";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 3, 0, -9, 8, 6, 3, 8, 2, -10, -12, 0, -10, -7, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.5-b";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, -3, -6, 3, 4, -6, -9, -10, -4, -4, -6, 6, -8, -5, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 156.1-a";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 6, 6, 0, 10, -6, 6, -10, 8, -4, -6, 12, -8, -8, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 156.2-a";
N := (2*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 0, 0, 6, 10, 6, -6, 8, -10, -4, 12, -6, -8, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.1-a";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 0, -6, 0, 0, 2, 0, -6, -10, -4, 2, 6, -10, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.2-a";
N := (-8*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 0, -6, 3, 6, -8, -6, -6, -7, 8, 11, -3, -5, 4, 1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.4-a";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -6, 0, 0, 0, 2, -6, 0, -4, -10, 2, 6, -10, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.3-a";
N := (-8*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, -6, 0, 6, 3, -8, -6, -6, 8, -7, 11, -3, 4, -5, -2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-a";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 1, -3, -3, -6, -6, 7, 3, 3, 8, 8, 14, -3, -3, 1, 1, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 169.1-b";
N := (13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, 3, 3, 6, 6, -7, 3, 3, -8, -8, -14, -3, -3, 1, 1, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 183.1-a";
N := (-8*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 4, -4, -4, 0, -2, 6, -10, -8, -8, 4, 2, -2, 2, -10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 183.2-a";
N := (-2*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 3, 3, 4, 4, 6, -10, 0, 4, -11, 10, -1, 14, -8, -10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 183.2-b";
N := (-2*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -5, 3, -6, 6, -4, 0, -2, -4, 1, -12, -5, -10, -6, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 183.2-c";
N := (-2*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, -2, 2, 0, -6, -2, -4, -4, 6, 4, -8, 2, -10, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 183.2-d";
N := (-2*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -4, -5, -7, 6, 6, -8, -4, 2, 0, 1, -8, -13, 2, 14, 4, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 183.4-a";
N := (8*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -4, 4, 0, -4, -2, -10, 6, -8, -8, 4, -2, 2, 2, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 183.3-a";
N := (2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 3, 3, 4, 4, 6, 0, -10, -11, 4, 10, 14, -1, -8, 5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 183.3-b";
N := (2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 3, -5, 6, -6, -4, -2, 0, 1, -4, -12, -10, -5, -6, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 183.3-c";
N := (2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, 2, -2, -6, 0, -2, -4, -4, 4, 6, -8, -10, 2, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 183.3-d";
N := (2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -4, -7, -5, 6, 6, -8, 2, -4, 1, 0, -8, 2, -13, 14, -17, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-a";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 6, -8, -4, 2, -2, 2, -12, -4, 2, 6, 6, 14, -10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-b";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 6, 0, 4, 2, 6, -6, 4, -12, -6, -10, -2, 6, 14, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-c";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -6, -8, -8, 2, -2, 10, -8, 0, 4, 6, -6, 2, 2, -10, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-d";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -2, 8, -4, 2, 6, 10, 4, -4, 10, 6, -10, -2, 6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-e";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, -4, 0, 6, 6, -6, 4, -8, -4, -10, 10, -6, -6, -10, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-a";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, -6, -4, -8, 2, 2, -2, -4, -12, 2, 6, 6, -10, 14, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-b";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, 2, 4, 0, 2, -6, 6, -12, 4, -6, -2, -10, 14, 6, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-c";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -8, -6, 2, -8, -2, -8, 10, 4, 0, 6, 2, -6, -10, 2, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-d";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 2, -4, 8, 2, 10, 6, -4, 4, 10, -10, 6, 6, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-e";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, 2, 6, 0, 6, 4, -6, -4, -8, -10, -6, 10, -10, -6, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-a";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, -2, -2, 9, 9, 6, 0, 0, 4, 4, 14, 14, -13, -13, -15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-b";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, 6, 6, 0, 0, -10, -6, -6, 8, 8, 6, 6, 8, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-a";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, 0, 2, 10, 6, -8, 0, -6, 2, 2, 10, 6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-b";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -2, -8, 4, -4, -10, 8, 6, 4, -2, -4, -12, -6, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.4-a";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, 0, 2, 6, 10, 0, -8, -6, 2, 2, 6, 10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.4-b";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -8, -2, 4, -10, -4, 6, 8, 4, -4, -2, -6, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.1-a";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 2, -4, 2, -6, -2, 0, -4, -6, -6, 6, -10, 10, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.1-b";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 0, 2, -2, 6, -4, -4, 2, -10, 6, -10, -2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.1-c";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -6, 2, -8, -6, 6, 6, -12, -4, 10, -10, -10, -2, -2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.3-a";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -6, -8, -4, -6, -4, 4, 4, 6, -8, 6, -2, 2, -2, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.3-b";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, -2, 6, -8, -2, 6, 2, -12, -8, -10, -6, 6, 2, 10, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.4-a";
N := (-8*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 8, 6, 4, -6, -4, 4, 6, 4, -8, 2, -6, -2, 2, 16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.2-a";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, -2, -4, 2, -2, -6, -4, 0, -6, 6, -6, 10, -10, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.2-b";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 0, 2, 6, -2, -4, -4, 2, 6, -10, -2, -10, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.2-c";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, -6, -8, -6, 6, 6, -4, -12, 10, -10, -10, -2, -2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.6-a";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -8, -6, -4, -6, 4, -4, 6, 4, -8, -2, 6, -2, 2, 16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.6-b";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, 6, -2, -8, -2, 2, 6, -8, -12, -10, 6, -6, 10, 2, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 207.5-a";
N := (-8*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 6, 8, 4, -6, 4, -4, 4, 6, -8, -6, 2, 2, -2, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 208.1-a";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 6, 8, 8, -6, 2, 2, 4, 4, -10, 6, 6, -2, -2, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.1-a";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -5, -4, -6, -3, 2, 4, -6, 6, -5, 8, -9, 9, -1, 8, 11, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.1-b";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -2, -1, 3, -6, 8, -5, 6, -6, 1, -13, -9, -12, 2, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.2-a";
N := (2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -5, -6, -4, 2, -3, 4, 6, -6, 8, -5, -9, 9, 8, -1, 2, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 212.2-b";
N := (2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, 3, -1, 8, -6, -5, -6, 6, -13, 1, -9, -12, 2, 2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 221.1-a";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 6, 6, -9, -7, 0, -3, -10, 2, -13, -6, 12, -10, -7, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 221.1-b";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 1, -6, -3, -2, 8, -1, -8, -8, -2, 10, -12, -6, 1, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 221.1-c";
N := (9*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 1, -2, 6, -3, 7, -4, -7, -2, 10, 1, -2, -12, -6, 1, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 221.2-a";
N := (9*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, 6, -9, 6, -7, -3, 0, 2, -10, -13, 12, -6, -7, -10, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 221.2-b";
N := (9*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 1, -3, -6, -2, -1, 8, -8, -8, -2, -12, 10, 1, -6, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 221.2-c";
N := (9*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 1, -2, -3, 6, 7, -7, -4, 10, -2, 1, -12, -2, 1, -6, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-a";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 3, 3, -3, -3, -6, -6, -10, -10, 5, -3, -3, 1, 1, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-b";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, 2, 0, 0, -2, -2, 4, 4, -14, -10, -10, -2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-c";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, 2, 2, -8, -8, 2, 2, -4, -4, 10, -6, -6, 10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-a";
N := (5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, -4, 4, -8, 2, -10, -2, -10, 8, -2, 6, 6, 2, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-b";
N := (5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -2, -6, 8, 4, -2, -6, -8, -12, -6, -10, 10, 2, 2, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-c";
N := (5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 0, 0, 0, 6, 6, 6, 2, 8, -10, 6, 6, 2, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-a";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 4, -4, 2, -8, -2, -10, 8, -10, -2, 6, 6, -10, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-b";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -6, -2, 4, 8, -6, -2, -12, -8, -6, 10, -10, 2, 2, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-c";
N := (-5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 0, 0, 6, 0, 6, 6, 8, 2, -10, 6, 6, -10, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 237.1-a";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 0, 6, 0, -6, 10, -6, 0, 8, -4, 8, 6, -6, 10, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 237.1-b";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 0, 2, 6, 2, -6, -6, -10, -4, 6, -4, -2, 10, -2, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 237.1-c";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -4, 4, 6, 4, -2, -6, -6, 0, -8, -8, -12, -10, 10, -14, -10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 237.4-a";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 6, 0, -6, 0, 10, 0, -6, -4, 8, 8, -6, 6, -14, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 237.4-b";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 2, 0, 2, 6, -6, -10, -6, 6, -4, -4, 10, -2, 0, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 237.4-c";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -4, 6, 4, -2, 4, -6, 0, -6, -8, -8, -12, 10, -10, -10, -14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-a";
N := (-9*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -6, -6, 6, -6, 1, 0, -6, -7, 11, -1, -12, 6, -5, -14, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-b";
N := (-9*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 0, 0, 0, 0, 5, 0, 0, 5, -13, -13, 0, 0, -13, 14, 17, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-c";
N := (-9*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 0, 0, 0, 0, -5, 0, 0, 5, -13, -13, 0, 0, 13, -14, -17, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-d";
N := (-9*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -6, 6, 6, 6, -1, 0, 6, -7, 11, -1, -12, -6, 5, 14, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.5-a";
N := (2*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 6, -3, 9, 6, 8, 0, -3, 2, 8, 2, 0, -6, -10, 8, -13, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.5-b";
N := (2*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -6, -3, -9, 6, -8, 0, -3, 2, 8, 2, 0, -6, 10, -8, 13, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-a";
N := (-9*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -6, -6, -6, 6, 1, -6, 0, 11, -7, -1, 6, -12, -14, -5, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-b";
N := (-9*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 0, 0, 0, 0, 5, 0, 0, -13, 5, -13, 0, 0, 14, -13, 17, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-c";
N := (-9*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 0, 0, 0, 0, -5, 0, 0, -13, 5, -13, 0, 0, -14, 13, -17, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-d";
N := (-9*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 6, -6, 6, 6, -1, 6, 0, 11, -7, -1, -6, -12, 14, 5, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.6-a";
N := (-2*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, -3, 6, 6, 9, 8, -3, 0, 8, 2, 2, -6, 0, 8, -10, -1, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.6-b";
N := (-2*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -3, -6, 6, -9, -8, -3, 0, 8, 2, 2, -6, 0, -8, 10, 1, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.1-a";
N := (-10*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 3, 0, 3, -6, 1, -9, 6, 8, -1, -4, -6, 3, 10, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.1-b";
N := (-10*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 5, 0, -3, 6, 6, -1, -6, 9, -10, 8, 14, 0, -9, 8, 17, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.1-c";
N := (-10*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, 0, 3, 6, 6, 7, 6, -3, -10, -4, 2, 12, -3, 4, -11, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.1-d";
N := (-10*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -4, -3, 8, -4, -9, -4, -1, 2, -8, -6, -2, 13, -14, -7, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.1-e";
N := (-10*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -5, -4, 3, -4, 4, -9, -4, -5, 2, 4, 6, 10, -1, 14, -11, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.1-f";
N := (-10*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, 5, 3, -4, -4, -3, -4, 2, 5, 1, -3, -8, -8, 4, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.2-a";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 0, 3, -6, 3, 1, 6, -9, -1, 8, -4, 3, -6, 10, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.2-b";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 5, -3, 0, 6, 6, -1, 9, -6, 8, -10, 14, -9, 0, 8, -1, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.2-c";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 3, 0, 6, 6, 7, -3, 6, -4, -10, 2, -3, 12, 4, 13, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.2-d";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -3, -4, -4, 8, -9, -1, -4, -8, 2, -6, 13, -2, -14, 15, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.2-e";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -5, 3, -4, 4, -4, -9, -5, -4, 4, 2, 6, -1, 10, 14, -3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 244.2-f";
N := (-10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -4, 3, 5, -4, -4, -3, 2, -4, 1, 5, -3, -8, -8, 4, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-a";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 4, -7, 1, 2, -2, -7, 8, 0, 1, -5, -1, 2, -6, 0, -8, 10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-b";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, 1, -7, -2, 2, -7, 0, 8, -5, 1, -1, -6, 2, -8, 0, 14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-c";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 3, 3, 6, 6, 1, 0, 0, 1, 1, 5, -6, -6, -8, -8, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-d";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -3, -3, 6, -6, 1, 0, 0, -1, 1, -5, -6, -6, -8, -8, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-e";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -4, -1, 7, -2, -2, -7, 0, -8, 5, 1, 1, -6, 2, -8, 0, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-f";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, -3, -3, -6, 6, 1, 0, 0, 1, -1, -5, -6, -6, -8, -8, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-g";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 4, 1, -7, 2, -2, -7, 0, 8, 5, -1, -1, -6, 2, -8, 0, -14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-h";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -4, 7, -1, -2, -2, -7, -8, 0, 1, 5, 1, 2, -6, 0, -8, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-i";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 4, -7, 1, -2, 2, -7, 8, 0, -1, 5, -1, 2, -6, 0, -8, -10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.1-a";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 0, 6, 0, -8, 0, 2, 8, -10, 6, 0, 10, 4, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.1-b";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -6, -4, 6, 8, -4, -4, 6, -8, -2, -14, 0, 6, -8, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.1-c";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 6, -4, -8, 6, 10, -8, 4, 2, -10, -6, 6, 10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.1-d";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 0, 8, 2, -2, 12, 12, 2, -2, -10, -2, 6, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.1-e";
N := (-9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, -2, -4, 0, -6, -6, 0, 4, 2, 2, 6, 10, -2, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.3-a";
N := (-5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 3, 3, -6, 6, 8, 6, -1, 5, -4, -6, -3, -4, 11, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.3-b";
N := (-5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 3, -3, -6, -6, -8, 6, -1, 5, -4, -6, 3, 4, -11, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.4-a";
N := (10*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, -6, 6, 6, 0, 4, -6, -4, 8, 14, -6, -6, -8, -2, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.4-b";
N := (10*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 2, 2, 4, -8, -2, 6, 4, 4, 2, -2, 14, 2, 14, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.4-c";
N := (10*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 6, 6, -6, 0, -4, 6, -4, 8, 14, 6, -6, 8, 2, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.2-a";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 6, 0, 6, -8, 0, 8, 2, -10, 0, 6, 4, 10, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.2-b";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -4, -6, 8, 6, -4, -4, -8, 6, -2, 0, -14, -8, 6, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.2-c";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 2, -8, -4, 6, 10, 4, -8, 2, -6, -10, 10, 6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.2-d";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 8, 0, 2, -2, 12, 12, 2, -10, -2, 6, -2, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.2-e";
N := (9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, -2, 0, -4, -6, -6, 4, 0, 2, 6, 2, -2, 10, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.6-a";
N := (5*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 3, 3, 6, -6, 8, 6, 5, -1, -4, -3, -6, 11, -4, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.6-b";
N := (5*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, -3, 3, -6, -6, -8, 6, 5, -1, -4, 3, -6, -11, 4, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.5-a";
N := (10*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 6, -6, 0, 6, 4, -6, 8, -4, 14, -6, -6, -2, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.5-b";
N := (10*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 2, 2, -8, 4, -2, 6, 4, 4, 2, 14, -2, 14, 2, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 261.5-c";
N := (10*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 6, 6, 0, -6, -4, 6, 8, -4, 14, -6, 6, 2, 8, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.1-a";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, 3, 9, -6, 4, 3, 6, -4, 2, -4, 6, 6, 1, -8, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.2-a";
N := (4*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 3, -6, 9, 4, 6, 3, 2, -4, -4, 6, 6, -8, 1, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 276.1-a";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 7, -3, 3, -3, 1, 6, 3, 5, -4, -10, 6, 12, 10, 1, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 276.1-b";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 3, -1, 5, 3, -2, 7, -11, -4, 2, -6, -4, 10, -13, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 276.1-c";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 6, 0, 2, -6, -6, 8, 8, 8, 0, 6, -4, -10, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 276.1-d";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, -8, -6, -2, -2, 12, 4, -2, -14, 6, 2, -2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 276.2-a";
N := (-10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 0, -4, -2, -8, 0, -4, -6, -8, 2, 10, 6, -2, -6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 276.4-a";
N := (2*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 7, 3, -3, -3, 1, 3, 6, -4, 5, -10, 12, 6, 1, 10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 276.4-b";
N := (2*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, 3, 5, 3, 7, -2, -4, -11, 2, -4, -6, -13, 10, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 276.4-c";
N := (2*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 0, 0, 2, -6, -6, 8, 8, 8, 6, 0, -10, -4, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 276.4-d";
N := (2*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, -2, -8, -6, -2, -2, 4, 12, -2, 6, -14, -2, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 276.3-a";
N := (10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -2, -4, -2, 0, -8, -6, -4, -8, 10, 2, -2, 6, -16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-a";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 1, -2, 6, 6, -2, -6, -6, 8, 8, 2, -6, -6, 10, 10, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-b";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -2, 4, 4, -6, 6, 6, 4, 4, 2, 6, 6, -10, -10, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.2-a";
N := (-10*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 4, 3, -6, 3, 4, -6, -9, 10, 4, 4, -6, -6, -8, 5, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.3-a";
N := (10*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 4, 3, 3, -6, 4, -9, -6, 4, 10, 4, -6, -6, 5, -8, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 299.1-a";
N := (5*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 0, 6, 0, -4, -6, 6, 8, -4, -4, -6, 6, -10, 14, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 299.2-a";
N := (5*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 6, 0, 0, -4, 6, -6, -4, 8, -4, 6, -6, 14, -10, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-a";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -4, 6, -4, -2, -6, -10, 4, -2, 12, 8, 10, -14, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-b";
N := (-10*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, -4, -4, 2, 6, -6, -2, -8, -10, 2, -10, -2, 2, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-a";
N := (-10*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 0, -4, 6, -6, -2, 4, -10, -2, 8, 12, -14, 10, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-b";
N := (-10*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 4, 2, -4, -6, 6, -8, -2, -10, -10, 2, 2, -2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 303.1-a";
N := (w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -2, -6, 0, 0, 2, -10, 6, 4, -8, -2, -10, -10, -2, 14, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 303.1-b";
N := (w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 6, -4, -2, -8, -8, -2, 10, -6, -4, 10, -12, -6, 2, 6, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 303.2-a";
N := (-11*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -4, -6, 0, -8, -2, 8, 0, -8, -2, 4, 2, 6, -2, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 303.4-a";
N := (w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -6, -2, 0, 0, 2, 6, -10, -8, 4, -2, -10, -10, 14, -2, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 303.4-b";
N := (w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 6, -2, -4, -8, -8, -2, -6, 10, 10, -4, -12, 2, -6, 2, 6, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 303.3-a";
N := (-11*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -6, -4, -8, 0, -2, 0, 8, -2, -8, 4, 6, 2, 2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 309.1-a";
N := (-10*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -2, -4, 3, -3, -2, -1, -3, -4, -3, -5, 14, -9, -14, 8, 9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 309.1-b";
N := (-10*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 5, -6, -4, -7, -5, -2, -1, 1, 0, -9, -5, 2, 11, 6, 4, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 309.1-c";
N := (-10*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 4, 2, 6, -6, 4, 2, -6, -4, -6, 10, -10, -6, 4, -4, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 309.2-a";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -8, 0, -4, -6, 6, -2, -6, 2, -4, -6, 10, -6, 10, 6, 16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 309.4-a";
N := (10*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -4, -2, -3, 3, -2, -3, -1, -3, -4, -5, -9, 14, 8, -14, -3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 309.4-b";
N := (10*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 5, -4, -6, -5, -7, -2, 1, -1, -9, 0, -5, 11, 2, 4, 6, -5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 309.4-c";
N := (10*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 2, 4, -6, 6, 4, -6, 2, -6, -4, 10, -6, -10, -4, 4, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 309.3-a";
N := (4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 0, -8, -6, -4, 6, -6, -2, -4, 2, -6, -6, 10, 6, 10, 14, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 316.1-a";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, -7, -5, 6, -6, 9, -6, 4, 1, 11, -1, -12, 0, -14, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 316.1-b";
N := (-10*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, -3, -5, -2, 2, 1, -6, 4, 1, -9, 11, 4, 0, 2, -14, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 316.2-a";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 2, -5, -7, -6, 6, 9, 4, -6, 11, 1, -1, 0, -12, -6, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 316.2-b";
N := (10*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -6, -5, -3, 2, -2, 1, 4, -6, -9, 1, 11, 0, 4, -14, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.1-a";
N := (10*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 6, -2, 0, 4, -6, -6, -2, 0, 4, 6, 6, 6, 6, -2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.1-b";
N := (10*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 0, 0, 0, -6, -10, 0, -6, 2, -4, 8, 6, -6, 2, -10, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.2-a";
N := (-11*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 2, -2, 0, 4, 6, 2, 2, 4, -8, -2, 6, 2, 6, 14, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.2-b";
N := (-11*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -7, 5, -3, 2, -3, -4, 1, 1, -8, -2, -6, -5, -12, -2, 8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.2-c";
N := (-11*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -3, -3, -3, -6, 1, 0, -3, 5, 2, 8, -12, 3, -8, 4, -8, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.4-a";
N := (10*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -2, 6, 4, 0, -6, -2, -6, 4, 0, 6, 6, 6, -2, 6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.4-b";
N := (10*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 0, 0, -6, 0, -10, -6, 0, -4, 2, 8, -6, 6, -10, 2, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.3-a";
N := (-11*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -2, 2, 4, 0, 6, 2, 2, -8, 4, -2, 2, 6, 14, 6, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.3-b";
N := (-11*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 5, -7, 2, -3, -3, 1, -4, -8, 1, -2, -5, -6, -2, -12, 5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.3-c";
N := (-11*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -3, -3, -6, -3, 1, -3, 0, 2, 5, 8, 3, -12, 4, -8, -11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-a";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -3, -3, 6, 6, 1, 0, 0, -1, -1, 5, 6, 6, -8, -8, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-b";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, -6, -6, -2, 0, -6, -4, 8, -10, -6, 12, 10, -2, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-c";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 6, -6, 6, 2, -6, 0, 8, -4, -10, 12, 6, 2, -10, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-d";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, -6, -2, -6, 0, 8, -4, -10, 12, -6, -2, 10, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-e";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 0, 6, -6, 2, 0, -6, -4, 8, -10, 6, 12, -10, 2, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-f";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 2, -4, -4, 6, 10, 10, 4, 4, 10, 6, 6, 2, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-a";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -8, 1, 1, 1, 6, -7, 8, 7, 4, -8, 12, 6, 5, -7, 6, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-b";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, 6, -6, 1, 3, -3, -10, 8, 5, 9, -9, 10, 10, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-c";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -8, -1, 1, -1, -6, -7, -8, 7, 4, -8, 12, -6, -5, 7, -6, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-d";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -3, -3, -3, -2, -3, 0, -1, -4, 8, -12, 6, -11, 1, -2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-e";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, -2, 2, 3, 5, 1, 10, 4, 1, 3, -9, 10, -2, 15, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-f";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 3, -3, 3, 2, -3, 0, -1, -4, 8, -12, -6, 11, -1, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-g";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, 6, 6, -1, 3, 3, -10, 8, 5, 9, 9, -10, -10, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-h";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, -2, -2, -3, 5, -1, 10, 4, 1, 3, 9, -10, 2, -15, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.4-a";
N := (10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 3, 3, 6, -6, 7, 6, -3, -10, -4, 11, -3, 9, 1, -2, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.4-b";
N := (10*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 3, -6, -6, -7, -6, -3, -10, -4, 11, 3, 9, -1, 2, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-a";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 1, -8, 1, 1, 6, 8, -7, 4, 7, -8, 6, 12, -7, 5, -15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-b";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, -6, 6, 1, -3, 3, 8, -10, 5, -9, 9, 10, 10, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-c";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -1, -8, -1, 1, -6, -8, -7, 4, 7, -8, -6, 12, 7, -5, 15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-d";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, -3, -3, -2, 0, -3, -4, -1, 8, 6, -12, 1, -11, 1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-e";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 2, -2, 3, 1, 5, 4, 10, 1, -9, 3, -2, 10, 3, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-f";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 3, -3, 2, 0, -3, -4, -1, 8, -6, -12, -1, 11, -1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-g";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, 6, 6, -1, 3, 3, 8, -10, 5, 9, 9, -10, -10, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-h";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, -2, -2, -3, -1, 5, 4, 10, 1, 9, 3, 2, -10, -3, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.5-a";
N := (10*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 3, 3, -6, 6, 7, -3, 6, -4, -10, 11, 9, -3, -2, 1, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.5-b";
N := (10*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 3, -3, -6, -6, -7, -3, -6, -4, -10, 11, 9, 3, 2, -1, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 325.1-a";
N := (-10*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -3, 2, 2, -6, -6, 2, 2, 10, 10, 2, 2, 2, 2, 2, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 337.1-a";
N := (11*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 3, 0, -5, -4, 6, -6, -5, -6, -4, 8, 0, 3, -4, -11, 10, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 337.1-b";
N := (11*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, 3, 0, 3, 4, -2, 4, 3, -8, 4, -6, -6, -9, 2, -7, 0, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 337.2-a";
N := (11*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, 3, -5, 0, 6, -4, -6, -6, -5, 8, -4, 0, -4, 3, 10, -11, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 337.2-b";
N := (11*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, 3, 3, 0, -2, 4, 4, -8, 3, -6, 4, -6, 2, -9, 0, -7, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 339.1-a";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -5, -4, -2, -3, 6, 1, -5, 3, -9, -5, 4, -9, -4, 2, 5, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 339.2-a";
N := (-5*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, 2, 0, 6, 4, -8, -2, 2, -4, 12, 10, 6, 6, 4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 339.2-b";
N := (-5*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 2, 4, 2, -4, -4, -10, 10, 12, -4, 10, 6, 6, -8, 0, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 339.4-a";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -5, -2, -4, 6, -3, 1, 3, -5, -5, -9, 4, -4, -9, 5, 2, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 339.3-a";
N := (-5*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, 0, 2, 4, 6, -8, 2, -2, 12, -4, 10, 6, 6, -4, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 339.3-b";
N := (-5*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 4, 2, -4, 2, -4, 10, -10, -4, 12, 10, 6, 6, 0, -8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-a";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 3, 3, 3, -6, -4, 0, -4, -10, 11, -3, 0, 14, -1, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-b";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 6, -4, 4, -6, -2, 10, 4, -10, -4, 6, -6, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-c";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 3, -7, -1, -6, -4, 0, 4, -6, -5, -11, 4, 2, -3, -15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-d";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -7, -9, 2, 8, -8, -12, -6, -1, -5, -4, 10, 15, 5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-e";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -7, -3, 3, -8, -2, 2, -12, 4, -11, -11, -2, 0, 11, 15, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-f";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -7, 3, -1, 4, 6, 10, 4, 4, 5, -1, -6, 12, 7, 5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-g";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -7, -3, -3, 3, -4, -2, 2, -12, -12, 1, -9, -2, -8, 13, 3, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-a";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 3, -7, 4, -6, -4, -10, -1, -1, -10, 9, 4, -13, -8, 15, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-b";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 3, 0, 6, -8, -6, -7, 11, -10, -3, 0, 7, -8, -17, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-c";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 4, 8, 0, 8, 2, 6, -4, -4, -6, 6, 0, -10, 8, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.4-a";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 3, 3, -6, 3, -4, 0, -10, -4, 11, 0, -3, -1, 14, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.4-b";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 2, 4, -4, -6, -2, 4, 10, -10, 6, -4, 4, -6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.4-c";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -7, 3, -6, -1, -4, 0, -6, 4, -5, 4, -11, -3, 2, 0, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.4-d";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -7, -1, 2, -9, 8, -8, -6, -12, -1, -4, -5, 15, 10, 8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.4-e";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -3, -7, -8, 3, -2, 2, 4, -12, -11, -2, -11, 11, 0, -10, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.4-f";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 3, -7, 4, -1, 6, 10, 4, 4, 5, -6, -1, 7, 12, -10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.4-g";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -7, -3, -3, -4, 3, -2, 2, -12, -12, 1, -2, -9, 13, -8, 10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.3-a";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -7, 3, -6, 4, -4, -10, -1, -1, -10, 4, 9, -8, -13, 5, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.3-b";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 3, -3, 6, 0, -8, -6, 11, -7, -10, 0, -3, -8, 7, -17, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.3-c";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 8, 4, 8, 0, 2, 6, -4, -4, -6, 0, 6, 8, -10, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.1-a";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 0, -2, 2, 2, 0, -10, 4, 0, -2, 10, 4, 6, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.1-b";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 0, -8, 6, -2, -6, -4, 4, -6, -10, -6, -6, 10, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.1-c";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 0, 6, 6, -2, 0, -6, -4, 8, 14, -6, 12, 10, -14, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.1-d";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -6, -8, -4, 2, -6, 2, -8, 12, -2, -2, 10, -6, -14, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.1-e";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 8, 0, 6, 6, 2, 4, -4, -6, 6, 10, 10, -6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.1-f";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 0, 0, 6, -10, 10, -12, -12, 2, 6, -6, 2, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.1-g";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, -2, -2, -2, 0, 10, 4, 0, -2, 10, -4, -6, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.1-h";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 0, 6, -6, 2, 0, 6, -4, 8, 14, -6, -12, -10, 14, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.3-a";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 3, -6, -6, -9, 7, 0, -6, -1, 5, -4, -6, 3, 4, -8, -17, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.3-b";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 7, 0, 7, 4, 7, 0, 1, -8, -6, 10, -14, 5, 0, 14, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.3-c";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, -6, 6, -9, -7, 0, -6, -1, 5, -4, 6, 3, -4, 8, 17, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.3-d";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 3, 5, 4, -7, 3, 4, 1, -6, -5, -10, 11, -12, 4, 4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.3-e";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 3, -6, 3, -6, -1, 0, 9, 8, -10, -4, 0, 9, 8, -10, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.3-f";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -7, 0, -7, 4, -7, 0, 1, -8, -6, 10, 14, 5, 0, -14, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.3-g";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 3, -5, 4, 7, -3, 4, 1, -6, -5, 10, 11, 12, -4, -4, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.3-h";
N := (-11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -3, -6, -3, -6, 1, 0, 9, 8, -10, -4, 0, 9, -8, 10, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.2-a";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -2, 2, -2, 2, -10, 0, 0, 4, -2, 4, 10, -2, 6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.2-b";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -8, 0, 6, -6, -2, 4, -4, -6, -6, -10, 10, -6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.2-c";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 6, 6, 6, -2, -6, 0, 8, -4, 14, 12, -6, -14, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.2-d";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -2, -4, -8, 2, 2, -6, 12, -8, -2, 10, -2, -14, -6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.2-e";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 0, 8, 6, 2, 6, -4, 4, -6, 10, 6, -6, 10, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.2-f";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 2, 0, 0, 6, 10, -10, -12, -12, 2, -6, 6, 2, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.2-g";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -2, -2, -2, -2, 10, 0, 0, 4, -2, -4, 10, 2, -6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.2-h";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, -6, 6, 2, 6, 0, 8, -4, 14, -12, -6, 14, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.4-a";
N := (11*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -6, 3, -9, -6, 7, -6, 0, 5, -1, -4, 3, -6, -8, 4, -8, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.4-b";
N := (11*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 7, 4, 7, 7, 1, 0, -6, -8, 10, 5, -14, 14, 0, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.4-c";
N := (11*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, -3, -9, 6, -7, -6, 0, 5, -1, -4, 3, 6, 8, -4, 8, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.4-d";
N := (11*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, 2, 4, 5, -7, 4, 3, -6, 1, -5, 11, -10, 4, -12, -11, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.4-e";
N := (11*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -6, 3, -6, 3, -1, 9, 0, -10, 8, -4, 9, 0, -10, 8, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.4-f";
N := (11*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -7, 4, -7, -7, 1, 0, -6, -8, 10, 5, 14, -14, 0, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.4-g";
N := (11*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -2, 4, -5, 7, 4, -3, -6, 1, -5, 11, 10, -4, 12, 11, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 351.4-h";
N := (11*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -6, -3, -6, -3, 1, 9, 0, -10, 8, -4, 9, 0, 10, -8, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-a";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, -3, -3, 0, 0, -1, 6, 6, -1, -1, -13, 12, 12, -1, -1, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 373.1-a";
N := (-11*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, -2, -4, 0, 4, -6, 6, -1, 1, 7, -9, -2, -10, -11, -5, 0, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 373.2-a";
N := (11*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, -2, 0, -4, -6, 4, 6, 1, -1, -9, 7, -2, -11, -10, 0, -5, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.1-a";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 6, 4, -4, -6, -8, 6, 6, 0, -4, -4, -8, -6, -10, 10, 2, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.1-b";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 4, -6, 4, 4, 8, 2, -10, -2, -8, 6, -12, 2, -14, -14, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.1-c";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 2, 6, -4, -8, -2, -2, 2, -8, 4, 6, -6, -10, -10, -10, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.1-d";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, 0, 2, 4, -4, 4, -6, -2, 2, 0, -10, 0, -14, 10, -6, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.2-a";
N := (11*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 2, 0, -9, -4, -2, 6, -6, -5, 6, -4, 1, 2, 3, -5, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.4-a";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 6, -4, 4, -8, -6, 6, 0, 6, -4, -4, -8, -10, -6, 2, 10, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.4-b";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, -6, 4, 4, 4, 8, -10, 2, -8, -2, 6, 2, -12, -14, -14, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.4-c";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 6, 2, -8, -4, -2, 2, -2, 4, -8, 6, -10, -6, -10, -10, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.4-d";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, 2, 0, -4, 4, 4, -2, -6, 0, 2, -10, -14, 0, -6, 10, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.3-a";
N := (11*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 0, 2, -4, -9, -2, -6, 6, 6, -5, -4, 2, 1, -5, 3, -2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.1-a";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, -6, 0, 0, -2, -6, 2, -4, 6, -6, -2, -6, 14, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.1-b";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 0, -4, -6, -4, -6, 4, -2, -4, -2, -8, 12, -14, 6, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.1-c";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -2, -4, -8, -2, -10, 2, 4, 6, -2, 2, 2, -10, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.1-d";
N := (-12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -4, 6, -4, -2, 0, -6, -4, -6, 0, -8, 6, -2, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.3-a";
N := (-11*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, -4, -7, -8, -5, -3, 6, -2, -8, 6, 2, -8, 15, 10, -11, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.3-b";
N := (-11*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 0, 2, 0, -4, -6, -4, 4, 8, 4, -10, 6, 2, 6, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.3-c";
N := (-11*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 4, -7, 8, -5, 3, -6, -2, -8, 6, -2, -8, -15, -10, 11, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.3-d";
N := (-11*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -4, 4, 2, 8, 4, 6, 0, 4, -8, -12, 10, -2, 6, 14, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.4-a";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, -3, -4, -4, -3, 2, 9, -2, 9, 8, -2, -5, -13, -6, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.4-b";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -7, 4, -8, -1, 6, -3, -10, 1, -6, -4, 5, 9, -10, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.4-c";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -7, -4, -8, 1, -6, -3, 10, 1, -6, -4, -5, -9, 10, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.4-d";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 5, 4, 4, -1, 6, 9, 2, 1, -12, 2, -7, 9, 14, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.2-a";
N := (12*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -6, -2, 0, 0, -2, 2, -6, -4, 6, -2, -6, 14, -6, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.2-b";
N := (12*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -4, 0, -4, -6, -6, -2, 4, -4, -2, 12, -8, 6, -14, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.2-c";
N := (12*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -6, -8, -4, -2, 2, -10, 4, 6, 2, -2, -10, 2, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.2-d";
N := (12*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -4, -4, 6, -2, -6, 0, -4, -6, -8, 0, -2, 6, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.6-a";
N := (-11*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, -7, -4, -5, -8, -3, -2, 6, -8, 6, -8, 2, 10, 15, 3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.6-b";
N := (-11*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 2, 0, -4, 0, -6, 4, -4, 8, 4, 6, -10, 6, 2, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.6-c";
N := (-11*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, -7, 4, -5, 8, 3, -2, -6, -8, 6, -8, -2, -10, -15, -3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.6-d";
N := (-11*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -4, 2, 4, 4, 8, 6, 4, 0, -8, -12, -2, 10, 14, 6, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.5-a";
N := (2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, -4, -3, -3, -4, 2, -2, 9, 9, 8, -5, -2, -6, -13, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.5-b";
N := (2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 4, -7, -1, -8, 6, -10, -3, 1, -6, 5, -4, -10, 9, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.5-c";
N := (2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -4, -7, 1, -8, -6, 10, -3, 1, -6, -5, -4, 10, -9, 6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 387.5-d";
N := (2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 4, 5, -1, 4, 6, 2, 9, 1, -12, -7, 2, 14, 9, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 389.1-a";
N := (-4*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 3, 0, 0, 2, 3, 4, -7, -8, 1, -5, -2, 11, -2, 6, 2, -14, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 389.1-b";
N := (-4*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, 3, 3, 2, 6, 4, -2, -7, -8, -5, 1, -10, 11, -12, -14, -4, -15, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 389.2-a";
N := (4*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 0, 2, 0, 4, 3, -7, 1, -8, -2, -5, 11, 6, -2, -14, 2, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 389.2-b";
N := (4*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 3, 2, 3, 4, 6, -2, -8, -7, 1, -5, -10, -12, 11, -4, -14, -14, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 391.1-a";
N := (-11*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -4, 1, -5, 2, -3, -6, -6, 2, -2, 6, -2, -7, 0, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 391.1-b";
N := (-11*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 2, 0, 0, 8, 0, -6, -4, -10, 2, 6, 12, 2, 8, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 391.2-a";
N := (-3*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, 1, 0, 3, 1, 3, 0, -10, 8, -10, -9, -12, -2, -8, -11, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 391.2-b";
N := (-3*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -3, -5, 0, 5, 7, -1, -8, 10, 8, -6, 9, -4, -6, -4, 9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 391.4-a";
N := (-11*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -4, 1, -5, 2, -6, -3, 2, -6, -2, -2, 6, 0, -7, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 391.4-b";
N := (-11*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 2, 0, 0, 8, -6, 0, -10, -4, 2, 12, 6, 8, 2, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 391.3-a";
N := (3*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, 1, 0, 3, 1, 0, 3, 8, -10, -10, -12, -9, -8, -2, -14, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 391.3-b";
N := (3*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, -5, 0, 5, 7, -8, -1, 8, 10, -6, -4, 9, -4, -6, 10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 393.1-a";
N := (-13*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, 6, -6, 6, -8, -2, 8, 4, -12, 2, -6, 10, -2, -6, -10, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 393.2-a";
N := (11*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -2, -2, 8, 8, -6, 2, 6, 0, 4, -6, -6, 6, 10, 2, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 393.2-b";
N := (11*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, 4, 4, -4, -1, 6, 5, 3, 12, -8, 3, -9, 6, 13, 2, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 393.4-a";
N := (-13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, -6, 6, -8, 6, -2, 4, 8, 2, -12, -6, -2, 10, -10, -6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 393.3-a";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -2, -2, 8, 8, -6, 6, 2, 4, 0, -6, 6, -6, 2, 10, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 393.3-b";
N := (11*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, 4, 4, -1, -4, 6, 3, 5, -8, 12, 3, 6, -9, 2, 13, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-a";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -6, -6, 6, 6, 6, 6, -10, -10, -10, -6, -6, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-a";
N := (-12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -5, -1, -6, 0, -7, -6, -6, 7, 11, -5, -2, -2, 6, -6, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-a";
N := (12*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -1, -5, 0, -6, -7, -6, -6, 11, 7, -5, -2, -2, -6, 6, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-a";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 5, -6, 0, -9, 3, 8, 3, 9, 8, -1, 5, -6, 9, 8, 8, 17, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-b";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, 2, 0, -3, 1, -4, -1, -3, -8, 1, -11, 10, -11, 12, 0, -5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-c";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 1, -2, -4, 3, 1, 2, -9, -3, 4, -7, -9, -2, 3, -2, -8, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-d";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -7, -3, 0, -2, -1, 8, 0, -11, -5, 1, -8, 4, 0, -12, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-a";
N := (6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 5, 0, -6, 3, -9, 8, 9, 3, -1, 8, 5, 9, -6, 8, 8, -1, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-b";
N := (6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 0, 2, 1, -3, -4, -3, -1, 1, -8, -11, -11, 10, 0, 12, -3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-c";
N := (6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -4, -2, 1, 3, 2, -3, -9, -7, 4, -9, 3, -2, -8, -2, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-d";
N := (6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -3, -7, -2, 0, -1, 0, 8, -5, -11, 1, 4, -8, -12, 0, 6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.1-a";
N := (w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 1, -2, -2, 0, 6, -4, -2, 3, 0, 1, 3, -6, -3, -5, 0, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.1-b";
N := (w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -2, -2, -6, -6, 6, 0, -5, -6, 9, -5, -6, -11, -3, 2, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.2-a";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -4, 0, -8, -4, 6, -6, -4, -6, -12, 10, -2, -6, 2, 6, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.2-b";
N := (13*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -6, -6, 0, 8, -6, -2, -10, -4, 4, -14, -2, -2, 2, 14, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.4-a";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 1, -2, -2, 6, 0, -4, 3, -2, 1, 0, 3, -3, -6, 0, -5, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.4-b";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -2, -2, -6, -6, 6, -5, 0, 9, -6, -5, -11, -6, 2, -3, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.3-a";
N := (-13*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 0, -4, -4, -8, 6, -4, -6, -12, -6, 10, -6, -2, 6, 2, 6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.3-b";
N := (-13*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -6, -6, 8, 0, -6, -10, -2, 4, -4, -14, -2, -2, 14, 2, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 425.1-a";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -2, 5, -3, 4, 3, 8, 4, -4, -6, -4, -6, -11, 2, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 425.2-a";
N := (5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, 5, 4, -3, 8, 3, -4, 4, -6, -6, -4, 2, -11, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 428.1-a";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -2, 5, -1, 0, 2, 3, 8, 4, 7, -5, 1, -6, -8, -6, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 428.1-b";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -3, -5, -6, -8, 7, 6, 4, -3, 9, -11, -14, -6, 10, -6, -14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 428.1-c";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 0, 3, -3, -8, 8, 7, -6, -8, 5, 7, -9, 6, 4, -12, -6, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 428.1-d";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 2, -7, 7, -6, 4, -9, 2, -4, 1, 1, 1, -6, 2, 6, -10, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 428.2-a";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -2, -1, 5, 2, 0, 3, 4, 8, -5, 7, 1, -8, -6, -8, -6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 428.2-b";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -5, -3, -8, -6, 7, 4, 6, 9, -3, -11, -6, -14, -6, 10, 2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 428.2-c";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -3, 3, 8, -8, 7, -8, -6, 7, 5, -9, 4, 6, -6, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 428.2-d";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 2, 7, -7, 4, -6, -9, -4, 2, 1, 1, 1, 2, -6, -10, 6, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-a";
N := (-12*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -6, 0, 0, 2, -6, 6, 8, 8, 14, 6, -6, -10, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-b";
N := (-12*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 6, 6, 0, 2, 0, 6, -4, 8, -10, -6, 6, 2, -10, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-c";
N := (-12*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 2, -8, 8, -6, 2, -2, -8, -8, -2, 6, -6, -2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-a";
N := (-4*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -6, 0, 3, 3, 2, 3, 6, 5, 8, 8, 0, 9, 2, -10, -16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-b";
N := (-4*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 6, 0, -3, 3, -2, -3, 6, 5, 8, 8, 0, 9, -2, 10, 16, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-a";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 6, 0, 0, 2, 6, -6, 8, 8, 14, -6, 6, -10, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-b";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 0, 0, 6, 2, 6, 0, 8, -4, -10, 6, -6, -10, 2, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-c";
N := (-12*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -2, 8, -8, -6, -2, 2, -8, -8, -2, -6, 6, -2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-a";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 0, -6, 3, 3, 2, 6, 3, 8, 5, 8, 9, 0, -10, 2, 14, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-b";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, 6, 3, -3, -2, 6, -3, 8, 5, 8, 9, 0, 10, -2, -14, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.1-a";
N := (-3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -4, -6, 3, 0, -6, 8, 3, -6, -7, 8, -4, 3, 6, -7, -10, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.1-b";
N := (-3*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, -2, 2, 2, -4, 0, -6, -2, -2, 8, -12, -6, 6, -10, -2, 6, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.2-a";
N := (3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -4, 3, -6, -6, 0, 8, -6, 3, 8, -7, -4, 6, 3, -10, -7, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.2-b";
N := (3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, -2, 2, 2, 0, -4, -6, -2, -2, -12, 8, -6, -10, 6, 6, -2, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-a";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -6, -6, 0, 0, -6, -2, -2, -4, -4, 6, 6, -2, -2, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-b";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -8, 4, -6, -6, 6, -6, 2, -8, 8, 2, -14, 2, 10, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-c";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, -2, 3, -9, -3, -7, -3, -7, 1, 13, -7, -8, 8, 11, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-d";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -2, 2, 0, 4, -2, -2, 6, -4, 4, -2, 6, -2, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-e";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, -2, -1, -1, 1, 5, 5, 9, 9, 9, 9, -8, -8, 15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-f";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 2, -2, 4, 0, -2, 6, -2, 4, -4, 6, -2, 6, -2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-g";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 2, 6, 4, -8, -2, 6, -2, -12, -4, 6, 14, -2, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-h";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, -2, -9, 3, -3, -3, -7, 1, -7, -7, 13, 8, -8, 11, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-i";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 4, -8, -6, -6, 6, 2, -6, 8, -8, -14, 2, 10, 2, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-j";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 6, 2, -8, 4, -2, -2, 6, -4, -12, 14, 6, 6, -2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.2-a";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -3, 0, -6, 6, 2, -6, 9, -1, -4, -9, -12, 5, -10, -1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.2-b";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -3, 0, -6, -6, -2, -6, -9, -1, -4, -9, 12, -5, 10, 1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.2-c";
N := (7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 8, 6, 1, -1, -1, -9, 5, -3, -7, 3, 13, 8, 0, 17, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.3-a";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 0, -3, 6, -6, 2, 9, -6, -4, -1, -12, -9, -10, 5, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.3-b";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, 0, -3, -6, -6, -2, -9, -6, -4, -1, 12, -9, 10, -5, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.3-c";
N := (-7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 6, 8, -1, 1, -1, 5, -9, -7, -3, 13, 3, 0, 8, -3, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 443.1-a";
N := (-12*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 0, -6, -7, -1, 4, 2, 0, 5, -6, 1, 4, -7, -12, 2, 2, 1, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 443.1-b";
N := (-12*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -3, 4, 2, -3, -9, -4, 6, 4, 1, 2, 9, 8, 1, 0, -14, 6, 9, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 443.2-a";
N := (12*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 0, -7, -6, 4, -1, 2, 5, 0, 1, -6, 4, -12, -7, 2, 2, 11, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 443.2-b";
N := (12*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -3, 4, -3, 2, -4, -9, 6, 1, 4, 9, 2, 8, 0, 1, 6, -14, -17, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 452.1-a";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 2, -3, 3, 2, -2, -5, -6, 2, 1, 1, -1, 6, -4, -14, 8, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 452.1-b";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 0, -7, 3, 0, 0, 3, -10, -2, -7, 1, 11, -2, 2, 4, 14, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 452.1-c";
N := (-12*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -6, -3, -1, -6, -2, 7, -6, 10, 9, -3, -1, 6, -12, 2, -8, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 452.2-a";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 2, 3, -3, -2, 2, -5, 2, -6, 1, 1, -1, -4, 6, 8, -14, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 452.2-b";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 0, 3, -7, 0, 0, 3, -2, -10, 1, -7, 11, 2, -2, 14, 4, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 452.2-c";
N := (12*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -6, -1, -3, -2, -6, 7, 10, -6, -3, 9, -1, -12, 6, -8, 2, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.1-a";
N := (-12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 0, 0, -2, 6, 6, 8, -4, -10, 6, 6, 10, -2, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.1-b";
N := (-12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, 0, -8, -2, 6, 2, -4, 4, 10, -10, -14, 10, -14, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.1-c";
N := (-12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 8, 8, -2, -10, 2, -4, -4, 2, -2, -6, -6, -14, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.1-d";
N := (-12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, 0, 4, -2, -6, 2, 8, -8, 10, 2, 10, 10, -2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.1-e";
N := (-12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, -2, 0, 4, -2, 2, 6, -12, 0, -10, -6, -2, -6, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.1-f";
N := (-12*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -3, 0, 9, 8, -6, -3, 8, 2, -10, 12, 0, -10, -7, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-a";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, 2, 8, -6, 4, 6, 4, 6, 0, -4, -4, -6, -10, 12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-b";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 0, 6, 8, 6, 0, 2, 8, 8, 0, -6, 14, 8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-c";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 4, 2, 0, 8, -6, 2, 6, -6, 2, -10, -6, 10, 0, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-d";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, 0, 4, 2, -2, -2, 8, 4, -2, 2, 10, 10, -10, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-e";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, -8, -8, -2, -2, 10, -4, -4, 2, 6, 2, -14, -6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-f";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 8, 0, -2, -2, -6, 4, -4, 10, 14, 10, -14, 10, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-g";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 6, 8, 4, -2, 2, -10, -2, -2, 2, 2, -10, 4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-h";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 2, -4, 0, -2, -6, -2, 0, -12, -10, 2, 6, 2, -6, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-i";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -2, -4, 0, -2, -2, 6, -8, 8, 10, -10, -2, -2, 10, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-j";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -4, 2, 0, -8, -6, -2, 6, -6, 2, -10, 6, -10, 0, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-k";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 0, 0, -2, -6, -6, -4, 8, -10, -6, -6, -2, 10, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.2-l";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 6, -8, -4, -2, -2, -10, -2, -2, 2, -2, 10, -4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.5-a";
N := (w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, -6, -9, 9, 8, -6, -3, -4, -1, 2, -9, 6, -4, -10, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.5-b";
N := (w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 3, 0, 3, -2, 6, 0, 2, -1, 5, 12, -3, -2, 1, -17, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.5-c";
N := (w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -3, 0, -3, 2, 6, 0, 2, -1, 5, 12, 3, 2, -1, 17, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.5-d";
N := (w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 6, -9, -9, -8, -6, 3, -4, -1, 2, -9, -6, 4, 10, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.6-a";
N := (13*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 3, 0, -3, -1, -4, -1, 2, 5, -8, 10, 4, -1, -8, 8, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.6-b";
N := (13*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, -2, -5, 9, -2, -9, 8, -9, 6, -4, 4, -9, -10, 0, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.6-c";
N := (13*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 6, 9, -3, 2, -3, 0, 11, -10, -4, 12, 3, 2, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.6-d";
N := (13*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 0, 3, 3, 4, 9, -6, -7, 8, 2, 12, 3, -8, -8, 16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.6-e";
N := (13*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, -6, -6, 0, -1, 3, -3, -7, -10, -10, 9, 12, -4, -10, 14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.6-f";
N := (13*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -6, 6, 0, 1, -3, -3, -7, -10, -10, -9, 12, 4, 10, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.6-g";
N := (13*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 0, -3, 3, -4, -9, -6, -7, 8, 2, -12, 3, 8, 8, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.6-h";
N := (13*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 6, -9, -3, -2, 3, 0, 11, -10, -4, -12, 3, -2, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.6-i";
N := (13*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, -2, 5, 9, 2, 9, 8, -9, 6, -4, -4, -9, 10, 0, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.6-j";
N := (13*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -3, 0, 3, -1, 4, 1, 2, 5, -8, 10, -4, -1, 8, -8, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.4-a";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 0, 0, -2, 6, 6, -4, 8, -10, 6, 6, -2, 10, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.4-b";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, -8, 0, -2, 2, 6, 4, -4, 10, -14, -10, -14, 10, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.4-c";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 8, 8, -2, 2, -10, -4, -4, 2, -6, -2, -14, -6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.4-d";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, 4, 0, -2, 2, -6, -8, 8, 10, 10, 2, -2, 10, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.4-e";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, -2, 4, 0, -2, 6, 2, 0, -12, -10, -2, -6, 2, -6, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.4-f";
N := (12*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -3, 9, 0, 8, -3, -6, 2, 8, -10, 0, 12, -7, -10, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-a";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, 2, -6, 8, 4, 4, 6, 0, 6, -4, -6, -4, 12, -10, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-b";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 6, 0, 8, 0, 6, 8, 2, 8, -6, 0, 8, 14, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-c";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 4, 0, 2, 8, 2, -6, -6, 6, 2, -6, -10, 0, 10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-d";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, 4, 0, 2, -2, -2, 4, 8, -2, 10, 2, -10, 10, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-e";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, -8, -8, -2, 10, -2, -4, -4, 2, 2, 6, -6, -14, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-f";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 0, 8, -2, -6, -2, -4, 4, 10, 10, 14, 10, -14, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-g";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 8, 6, 4, 2, -2, -2, -10, -2, 2, 2, 4, -10, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-h";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 2, 0, -4, -2, -2, -6, -12, 0, -10, 6, 2, -6, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-i";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -2, 0, -4, -2, 6, -2, 8, -8, 10, -2, -10, 10, -2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-j";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -4, 0, 2, -8, -2, -6, -6, 6, 2, 6, -10, 0, -10, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-k";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 0, 0, -2, -6, -6, 8, -4, -10, -6, -6, 10, -2, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.3-l";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -8, 6, -4, -2, -2, -2, -10, -2, -2, 2, -4, 10, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.8-a";
N := (w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, -6, 9, -9, 8, -3, -6, -1, -4, 2, 6, -9, -10, -4, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.8-b";
N := (w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 3, 3, 0, -2, 0, 6, -1, 2, 5, -3, 12, 1, -2, 1, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.8-c";
N := (w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -3, -3, 0, 2, 0, 6, -1, 2, 5, 3, 12, -1, 2, -1, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.8-d";
N := (w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 6, -9, -9, -8, 3, -6, -1, -4, 2, -6, -9, 10, 4, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.7-a";
N := (13*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 3, 0, -1, -3, -4, 2, -1, -8, 5, 10, -1, 4, 8, -8, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.7-b";
N := (13*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, -2, 9, -5, -2, 8, -9, 6, -9, -4, -9, 4, 0, -10, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.7-c";
N := (13*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 6, -3, 9, 2, 0, -3, -10, 11, -4, 3, 12, 8, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.7-d";
N := (13*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 0, 3, 3, 4, -6, 9, 8, -7, 2, 3, 12, -8, -8, 10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.7-e";
N := (13*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, -6, 0, -6, -1, -3, 3, -10, -7, -10, 12, 9, -10, -4, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.7-f";
N := (13*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -6, 0, 6, 1, -3, -3, -10, -7, -10, 12, -9, 10, 4, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.7-g";
N := (13*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 0, 3, -3, -4, -6, -9, 8, -7, 2, 3, -12, 8, 8, -10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.7-h";
N := (13*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 6, -3, -9, -2, 0, 3, -10, 11, -4, 3, -12, -8, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.7-i";
N := (13*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, -2, 9, 5, 2, 8, 9, 6, -9, -4, -9, -4, 0, 10, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 459.7-j";
N := (13*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -3, 0, -1, 3, 4, 2, 1, -8, 5, 10, -1, -4, -8, 8, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-a";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, -8, -2, 2, -2, -8, 0, -6, -6, -2, 10, 2, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-b";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 8, -4, 0, 6, 0, 4, -8, -4, 6, 0, 8, -10, 6, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-c";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 6, 0, 0, -2, 6, -6, 8, 8, 2, 6, -6, 10, -14, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-d";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [8, -4, 0, -4, 6, 4, 0, -4, -8, 6, 8, 0, 6, -10, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-e";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, -6, 6, 6, 4, 4, 2, -10, -10, -2, -2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-f";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -8, 0, -2, -2, 2, 0, -8, -6, -2, -6, 2, 10, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-g";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 0, 0, -2, -6, 6, 8, 8, 2, -6, 6, -14, 10, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-h";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, 4, 2, 8, -8, -8, 4, -10, 4, -8, 2, 10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.1-i";
N := (-12*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 8, 2, -8, 8, 4, -8, -10, -8, 4, 10, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-a";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 4, -4, -6, -2, -10, -2, -2, 2, -6, -6, 14, 2, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-b";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -3, 0, 0, 1, -6, 6, -1, -1, -13, 0, 0, -8, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-c";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -3, 4, -4, 9, -2, 2, -5, -5, -13, -12, 12, 8, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-d";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, 0, 6, -10, -6, -6, 8, -10, -4, -12, -6, 8, 8, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.2-e";
N := (-14*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, -4, -4, 6, 2, -10, -2, -2, 2, 6, -6, -14, -2, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.3-a";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, -4, 4, -6, -10, -2, -2, -2, 2, -6, -6, 2, 14, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.3-b";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, 0, 0, 1, 6, -6, -1, -1, -13, 0, 0, -8, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.3-c";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 3, -4, 4, 9, 2, -2, -5, -5, -13, 12, -12, 8, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.3-d";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 6, 0, -10, -6, -6, -10, 8, -4, -6, -12, 8, 8, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 468.3-e";
N := (-14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, -4, -4, 6, -10, 2, -2, -2, 2, -6, 6, -2, -14, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-a";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, -6, 0, 6, -2, -4, -2, 2, 0, -2, 2, -10, -10, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-b";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, -6, 6, -4, 8, 6, -10, -6, -8, -8, 2, -10, -2, 10, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-c";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 2, -8, -4, -6, -6, -2, 8, -4, -6, -2, -10, -2, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-d";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, 2, 0, -6, -2, 0, 6, -2, -8, 6, -6, -2, -10, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-e";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 0, 8, 10, -2, -2, 4, 4, -14, -10, 14, -2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-f";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 6, -4, -6, -6, -4, -6, -2, 4, 6, -6, -2, 2, -16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.3-a";
N := (-4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 6, 0, 0, 0, -2, 6, 0, -4, -10, 2, 6, 10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.3-b";
N := (-4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 4, -6, -1, -6, -4, 6, -10, 7, 0, -1, 1, -7, -8, 17, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.4-a";
N := (13*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -3, -4, 6, 1, 6, -4, -6, 10, 7, 0, -1, -1, -7, -8, 17, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.4-b";
N := (13*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -4, 6, -2, -6, 2, 0, -2, -8, -6, -10, -4, 8, 10, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.4-c";
N := (13*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 0, 6, 3, -6, 8, -6, 6, -7, 8, 11, 3, 5, -4, -1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.4-d";
N := (13*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, -4, -6, -2, 6, -2, 0, 2, -8, -6, -10, 4, -8, -10, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-a";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -6, 0, 6, 0, -2, -2, -4, 0, 2, -2, 2, -10, -10, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-b";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 6, -6, 8, -4, 6, -6, -10, -8, -8, 2, -10, 10, -2, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-c";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, -4, -8, -6, -2, -6, -4, 8, -6, -2, -2, -10, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-d";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, 4, -6, 0, -2, 6, 0, -8, -2, 6, -6, -10, -2, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-e";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 8, 0, 10, -2, -2, 4, 4, -14, -10, -2, 14, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-f";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 0, -6, -4, -6, -6, -4, 4, -2, 6, -6, 2, -2, -6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.6-a";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 0, 6, 0, 0, -2, 0, 6, -10, -4, 2, 6, 10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.6-b";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, -6, 4, -6, -1, -4, -10, 6, 0, 7, -1, 1, -8, -7, -10, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.5-a";
N := (13*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -3, 6, -4, 6, 1, -4, 10, -6, 0, 7, -1, -1, -8, -7, -10, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.5-b";
N := (13*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, 6, -4, -6, -2, 2, -2, 0, -6, -8, -10, -4, 10, 8, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.5-c";
N := (13*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 6, 0, -6, 3, 8, 6, -6, 8, -7, 11, 3, -4, 5, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.5-d";
N := (13*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, -6, -4, 6, -2, -2, 2, 0, -6, -8, -10, 4, -10, -8, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-a";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 6, 7, -5, -4, -4, 1, 6, 0, 9, -9, -5, -6, 0, 8, 8, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-b";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -8, -8, 5, 5, 1, 3, 3, 9, 9, 13, 6, 6, -1, -1, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-c";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 6, -5, 7, -4, -4, 1, 0, 6, -9, 9, -5, 0, -6, 8, 8, 16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-d";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, -1, 3, 0, 8, -7, 10, 0, -11, -1, -9, 10, -12, -8, 8, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-e";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 2, 3, -1, 8, 0, -7, 0, 10, -1, -11, -9, -12, 10, 8, -8, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-f";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 2, 2, 0, 0, 6, 8, 8, -6, -6, -2, 6, 6, 4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-g";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -4, -1, -1, -6, -6, 9, -4, -4, -9, -9, 13, 6, 6, -8, -8, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 493.2-a";
N := (-14*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, -2, 3, 3, 6, -2, 9, 2, 8, -4, 12, 6, 1, 10, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 493.3-a";
N := (-14*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, 3, 6, 3, -2, 9, 8, 2, -4, 6, 12, 10, 1, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-a";
N := (-13*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -6, 6, 6, 0, 6, 6, 0, 0, 6, 6, 6, -6, -10, 10, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-b";
N := (-13*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, 2, -4, 8, 2, -2, -6, -12, 8, 2, -10, -2, 14, 6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-c";
N := (-13*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 0, 7, 1, 1, -2, -8, 6, 6, -8, 4, 5, -2, 8, -6, -4, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-d";
N := (-13*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 3, 9, -3, -2, 0, 6, -10, 8, -4, -3, 6, -8, 10, 4, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-e";
N := (-13*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -3, -9, 3, 2, 0, 6, 10, -8, 4, -3, 6, -8, 10, 4, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-f";
N := (-13*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 0, -7, -1, -1, 2, -8, 6, -6, 8, -4, 5, -2, 8, -6, -4, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-g";
N := (-13*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 6, -6, -6, 0, -6, 6, 0, 0, -6, -6, 6, -6, -10, 10, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.2-a";
N := (-13*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 6, -6, 0, 6, 6, 0, 6, 6, 0, 6, -6, 6, 10, -10, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.2-b";
N := (-13*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, -6, 8, -4, 2, -6, -2, 8, -12, 2, -2, -10, 6, 14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.2-c";
N := (-13*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 7, 0, 1, 1, -2, 6, -8, -8, 6, 4, -2, 5, -6, 8, 17, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.2-d";
N := (-13*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 3, 0, -3, 9, -2, 6, 0, 8, -10, -4, 6, -3, 10, -8, 13, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.2-e";
N := (-13*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 0, 3, -9, 2, 6, 0, -8, 10, 4, 6, -3, 10, -8, 13, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.2-f";
N := (-13*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -7, 0, -1, -1, 2, 6, -8, 8, -6, -4, -2, 5, -6, 8, 17, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.2-g";
N := (-13*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -6, 6, 0, -6, -6, 0, 6, -6, 0, -6, -6, 6, 10, -10, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.1-a";
N := (-6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 3, 3, 6, 0, -1, 0, 6, -1, -1, 5, 6, 6, 14, -4, -16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.2-a";
N := (6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 3, 3, 0, 6, -1, 6, 0, -1, -1, 5, 6, 6, -4, 14, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.1-a";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -6, 0, -6, -2, -6, -6, -4, -4, 6, 12, -2, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.1-b";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 2, 0, -4, -6, 6, -10, -4, -2, -2, -6, -10, 2, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.1-c";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -3, 6, -3, 7, 6, 0, -4, -4, -6, -12, 7, -8, 1, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.1-d";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, 1, -6, 3, -1, -2, -8, 4, -4, -6, -12, 15, 8, 11, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.1-e";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, -6, 0, 0, -10, 0, 0, 8, -4, -6, -6, -10, -10, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.2-a";
N := (14*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 7, 0, -8, 3, 7, 4, -4, -6, 4, -9, 14, 12, 1, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.2-b";
N := (14*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, 3, 4, -6, 1, -5, 5, -6, -5, 9, 14, 12, 7, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.2-c";
N := (14*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 2, -5, -8, -2, 7, -1, -9, -6, -11, 11, -6, -8, 11, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.2-d";
N := (14*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 3, -8, -4, -9, 3, 8, 4, 2, -12, -11, 2, 8, 7, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.2-e";
N := (14*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, -3, 0, 6, 1, 3, -3, -10, 5, -9, 6, -8, 1, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.2-f";
N := (14*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 5, -6, 0, -7, -5, 1, 6, -11, -5, 0, -2, 5, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.2-g";
N := (14*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -1, -2, -8, -9, -9, -5, 10, 9, -13, 4, 6, -5, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.2-h";
N := (14*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -6, -5, 8, 6, 1, 3, 5, -6, -13, 1, 2, -8, 15, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.4-a";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 0, -6, 0, -2, -6, -6, -4, -4, 12, 6, -8, -2, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.4-b";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -2, -4, 0, -6, -10, 6, -4, -2, -6, -2, 2, -10, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.4-c";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, 0, -3, 6, 7, 0, 6, -4, -4, -12, -6, -8, 7, -17, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.4-d";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 1, 0, 3, -6, -1, -8, -2, 4, -4, -12, -6, 8, 15, -7, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.4-e";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -6, 0, 0, 0, -10, 0, 0, 8, -4, -6, -6, -10, -10, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.3-a";
N := (14*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, 7, 3, -8, 7, -4, 4, -6, 4, 14, -9, 1, 12, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.3-b";
N := (14*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 3, -2, -6, 4, 1, 5, -5, -6, -5, 14, 9, 7, 12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.3-c";
N := (14*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -5, 2, -2, -8, 7, -9, -1, -6, -11, -6, 11, 11, -8, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.3-d";
N := (14*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -8, 3, -9, -4, 3, 4, 8, 2, -12, 2, -11, 7, 8, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.3-e";
N := (14*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -3, -6, 6, 0, 1, -3, 3, -10, 5, 6, -9, 1, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.3-f";
N := (14*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 5, 0, 0, -6, -7, 1, -5, 6, -11, 0, -5, 5, -2, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.3-g";
N := (14*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, -4, -8, -2, -9, -5, -9, 10, 9, 4, -13, -5, 6, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 516.3-h";
N := (14*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -5, -6, 6, 8, 1, 5, 3, -6, -13, 2, 1, 15, -8, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.1-a";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 6, -2, 2, -8, -6, 6, -2, 0, -10, 0, 12, 6, -6, -6, 14, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.1-b";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 6, 3, 0, -3, 1, 3, 0, 11, 5, -10, 0, -12, 10, -11, -8, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.1-c";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, -2, -7, 4, 3, 3, -5, 0, -1, 9, -6, -12, -12, -6, -1, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.1-d";
N := (-13*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 1, -2, -5, 0, -1, 1, 3, 4, -7, -1, -10, 8, 0, 14, 13, -4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.4-a";
N := (13*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 6, 2, -2, -6, -8, 6, 0, -2, 0, -10, 12, -6, 6, 14, -6, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.4-b";
N := (13*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 3, 6, -3, 0, 1, 0, 3, 5, 11, -10, -12, 0, -11, 10, 7, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.4-c";
N := (13*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, -7, -2, 3, 4, 3, 0, -5, 9, -1, -6, -12, -12, -1, -6, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.4-d";
N := (13*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 1, -5, -2, -1, 0, 1, 4, 3, -1, -7, -10, 0, 8, 13, 14, -11, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-a";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -4, 3, 0, 6, -4, 6, -3, 0, 5, -2, 0, -2, 1, 13, -13, -8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-a";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -4, 0, 3, -4, 6, 6, 0, -3, -2, 5, 0, 1, -2, -13, 13, -1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-a";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, -2, -4, 2, -4, -6, -6, -6, -4, 2, 14, -2, -2, 2, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-b";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, -2, 2, -4, -4, -6, -6, -4, -6, 2, -2, 14, 2, -2, 14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-c";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 1, -4, 2, -7, 3, -9, 2, -6, 2, -2, -10, -10, 4, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-d";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 1, 2, -4, -7, -9, 3, -6, 2, 2, -10, -2, 4, -10, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-e";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, -2, 0, 0, 7, 6, 6, -4, -4, 2, 6, 6, -8, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.2-a";
N := (13*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -2, 6, 8, 4, -6, -4, -4, 4, -6, 8, -6, 2, -2, -2, -2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.3-a";
N := (13*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -2, 8, 6, 4, -6, -4, -4, -6, 4, 8, 2, -6, -2, -2, -16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 537.1-a";
N := (13*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, 4, 6, 0, 0, 6, 8, 10, 0, -12, 4, 6, -6, 14, -14, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 537.2-a";
N := (-14*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 6, -2, 4, 4, 2, -6, 2, -4, 4, -10, -10, 10, 10, -14, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 537.2-b";
N := (-14*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, 1, 4, -2, -4, 6, 2, 5, 1, 8, -1, 13, 10, 13, -7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 537.2-c";
N := (-14*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -7, -3, 0, -6, 0, 2, 3, 0, -10, -7, 11, -9, 9, -1, -1, -1, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 537.4-a";
N := (13*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, 6, 4, 0, 0, 6, 10, 8, -12, 0, 4, -6, 6, -14, 14, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 537.3-a";
N := (-14*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -2, 6, 4, 4, 2, 2, -6, 4, -4, -10, 10, -10, -14, 10, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 537.3-b";
N := (-14*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 1, 0, -2, 4, -4, 2, 6, 1, 5, 8, 13, -1, 13, 10, 6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 537.3-c";
N := (-14*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -7, 0, -3, 0, -6, 2, 0, 3, -7, -10, 11, 9, -9, -1, -1, 11, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 543.2-a";
N := (7*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, 6, -3, 6, -6, 2, 3, -6, 8, -10, -4, 12, 0, -1, -10, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 543.2-b";
N := (7*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 5, -2, -7, -8, 0, -8, -5, -4, -8, 0, 10, 6, -10, 7, 8, 14, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 543.3-a";
N := (7*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, -3, 6, -6, 6, 2, -6, 3, -10, 8, -4, 0, 12, -10, -1, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 543.3-b";
N := (7*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 5, -7, -2, 0, -8, -8, -4, -5, 0, -8, 10, -10, 6, 8, 7, 16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.1-a";
N := (-15*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -2, 6, 0, 0, 2, 6, -2, -4, 4, 6, -2, -10, 6, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.1-b";
N := (-15*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, 0, -8, -6, -2, -2, 4, -4, 2, -10, 6, -2, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.1-c";
N := (-15*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -2, -8, 0, 6, -6, -2, -8, 4, 10, -10, -6, -14, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.1-d";
N := (-15*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, -6, 0, 4, -6, -6, 2, 8, 4, -2, 6, 6, -10, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.1-e";
N := (-15*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, -6, 0, -8, -2, 2, -2, 0, -4, -10, -2, -6, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.3-a";
N := (w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -4, -4, 4, 0, 2, -6, -10, -8, -8, 4, -2, -2, -2, 10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.4-a";
N := (13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 4, -5, 7, 6, -6, 8, -4, -2, 0, 1, -8, -13, -2, -14, -4, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.4-b";
N := (13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 2, 7, -1, -6, -6, 4, -4, 8, -6, 1, 4, 11, 14, -4, -2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.4-c";
N := (13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, -2, -2, 0, 6, 2, -4, 4, 6, 4, -8, 2, 10, 10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.4-d";
N := (13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -5, -3, -6, -6, 4, 0, 2, -4, 1, -12, -5, 10, 6, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.4-e";
N := (13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -2, 7, 1, -6, 6, -4, -4, -8, -6, 1, 4, 11, -14, 4, 2, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.4-f";
N := (13*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 3, -3, 4, -4, -6, -10, 0, 4, -11, 10, -1, -14, 8, 10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.2-a";
N := (-15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 6, -2, 0, 0, 2, -2, 6, 4, -4, 6, -10, -2, 6, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.2-b";
N := (-15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -8, 0, -6, -2, -2, -4, 4, 2, 6, -10, -2, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.2-c";
N := (-15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -6, 0, -8, 6, -2, -6, 4, -8, 10, -6, -10, -14, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.2-d";
N := (-15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -6, 2, 4, 0, -6, 2, -6, 4, 8, -2, 6, 6, -10, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.2-e";
N := (-15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, 6, -8, 0, -2, -2, 2, -4, 0, -10, -6, -2, -6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.6-a";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -4, -4, 0, 4, 2, -10, -6, -8, -8, 4, -2, -2, -2, 16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.5-a";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 4, 7, -5, -6, 6, 8, -2, -4, 1, 0, -8, -2, -13, -14, 17, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.5-b";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 2, -1, 7, -6, -6, 4, 8, -4, 1, -6, 4, 14, 11, -4, -11, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.5-c";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, -2, -2, 6, 0, 2, 4, -4, 4, 6, -8, 10, 2, 10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.5-d";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -3, -5, -6, -6, 4, 2, 0, 1, -4, -12, 10, -5, 6, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.5-e";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -2, 1, 7, 6, -6, -4, -8, -4, 1, -6, 4, -14, 11, 4, 11, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 549.5-f";
N := (13*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -3, 3, -4, 4, -6, 0, -10, -11, 4, 10, -14, -1, 8, -5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.1-a";
N := (-14*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, -7, 6, -3, 3, 7, -6, 1, -8, 6, 10, -3, 0, -7, 14, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.1-b";
N := (-14*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, 3, -4, -3, 3, -3, -6, 6, -8, 1, -10, 2, -5, 8, -1, -13, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.1-c";
N := (-14*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -3, 0, 3, -1, 9, -2, -4, -4, -5, 4, 4, -5, -10, -13, 5, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.1-d";
N := (-14*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -5, 0, -1, -6, 0, -3, 0, -6, -2, -11, -1, 2, 4, 5, 2, 2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.1-e";
N := (-14*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -5, 0, 3, 0, 0, 1, -6, 0, -10, -1, -13, -6, -12, 1, 10, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.2-a";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 6, 6, -7, 3, -3, 7, 1, -6, 6, -8, 10, 0, -3, 14, -7, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.2-b";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 1, -4, 3, 3, -3, -3, 6, -6, 1, -8, -10, -5, 2, -1, 8, -8, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.2-c";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, 0, -3, -1, 3, 9, -4, -2, -5, -4, 4, -5, 4, -13, -10, -14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.2-d";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -5, -1, 0, 0, -6, -3, -6, 0, -11, -2, -1, 4, 2, 2, 5, 16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.2-e";
N := (14*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -5, 3, 0, 0, 0, 1, 0, -6, -1, -10, -13, -12, -6, 10, 1, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 571.1-a";
N := (-3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 1, -4, 0, -7, -1, 8, -1, 3, -5, -8, -2, 10, -6, 9, -7, 5, -15, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 571.2-a";
N := (3*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -4, -7, 0, 8, -1, -1, -5, 3, -2, -8, 10, 9, -6, 5, -7, 12, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.1-a";
N := (-14*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -4, 2, 6, -2, -4, 6, 6, 0, 4, -4, -8, 2, 6, 6, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.1-b";
N := (-14*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 2, -4, 0, 1, 2, -3, 6, 9, 1, -4, -2, 14, -3, -6, 15, -14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.1-c";
N := (-14*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -6, -6, 4, 0, -6, 6, -6, -4, 12, 6, 14, -10, -2, -2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.1-d";
N := (-14*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, 4, 0, -7, -6, -7, 6, -3, 9, -12, -2, -2, -3, 2, -5, 10, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.2-a";
N := (-4*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, 2, 1, 0, 0, 8, -9, -1, 1, -1, -10, 6, -12, 0, 3, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.4-a";
N := (14*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -4, 6, 2, -4, -2, 6, 0, 6, -4, 4, -8, 6, 2, 6, 6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.4-b";
N := (14*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 2, 0, -4, 2, 1, -3, 9, 6, -4, 1, -2, -3, 14, 15, -6, -3, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.4-c";
N := (14*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -6, -6, 0, 4, -6, -6, 6, 12, -4, 6, -10, 14, -2, -2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.4-d";
N := (14*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, 0, 4, -6, -7, -7, -3, 6, -12, 9, -2, -3, -2, -5, 2, -15, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 573.3-a";
N := (4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, 1, 2, 0, 0, 8, -1, -9, -1, 1, -10, -12, 6, 3, 0, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.1-a";
N := (-15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 3, 2, 0, 2, 8, 0, 0, -10, -4, -4, -2, 10, 10, 14, 16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.1-b";
N := (-15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, -5, 0, -6, -9, -3, 6, -10, 2, -1, 9, 12, 10, -5, -11, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.2-a";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 3, 2, 2, 0, 8, 0, 0, -4, -10, -4, 10, -2, 14, 10, -10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 575.2-b";
N := (15*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, -5, -6, 0, -9, 6, -3, 2, -10, -1, 12, 9, -5, 10, 7, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-a";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 8, 0, 2, -2, 6, 4, 4, 2, 6, 6, 6, -10, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-b";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, 0, 0, 10, -2, -2, -4, -4, 10, -10, -10, -2, -2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-c";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 6, 6, -4, -4, 6, 6, 6, -4, -4, 10, 2, 2, -14, -14, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-d";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, 0, 2, -2, 6, 4, -4, 2, -10, 14, 14, -2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-e";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, -6, 8, 8, -6, 6, 6, -4, -4, 10, -10, -10, -2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-f";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, 0, 8, 2, 6, -2, 4, 4, 2, 6, 6, -10, 6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-g";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, 0, 2, 6, -2, -4, 4, 2, 14, -10, -2, 14, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-h";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, 0, 0, -6, -2, 6, -4, 4, 2, 6, -2, -10, 6, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-i";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, 4, -4, -2, -2, -2, 12, 4, -6, -6, 2, 2, 2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-j";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 0, 8, -6, -2, -2, 12, -12, 2, -10, -2, -10, -10, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-k";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -4, 4, -2, -2, -2, 4, 12, -6, 2, -6, 2, 2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-l";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, 8, 0, -6, -2, -2, -12, 12, 2, -2, -10, -10, -10, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-m";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, 0, 0, -6, 6, -2, 4, -4, 2, -2, 6, 6, -10, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-n";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -8, -8, -6, 6, 6, 4, 4, -14, -2, -2, -2, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-o";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, -8, 0, -6, -10, -2, -4, -4, -6, -10, 6, -2, 14, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-p";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 0, -8, -6, -2, -10, -4, -4, -6, 6, -10, 14, -2, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-a";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, -4, -4, -8, -8, -6, -4, 4, 8, -2, -6, -8, 8, 0, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-b";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -6, 8, -8, -2, 2, 10, 8, 0, 4, 6, -6, -2, -2, 10, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-c";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, -6, -8, 4, -2, -2, -2, -12, -4, 2, 6, -6, -14, 10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-d";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, 4, 0, -6, -6, -6, -4, -8, -4, -10, 10, 6, 6, 10, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-e";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, -1, -7, 2, -2, 7, 0, 8, -5, -1, 1, -6, -2, 8, 0, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-f";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 7, 1, 2, -2, 7, -8, 0, -1, -5, 1, 2, 6, 0, 8, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-g";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 0, -4, -2, 6, 6, 4, -12, -6, -10, 2, -6, -14, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-h";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -2, 8, -2, 4, -2, -6, -4, 4, 10, -10, -12, -12, 8, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-i";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 4, -4, 8, 8, -6, 4, 4, 8, -2, -6, 8, -8, 0, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-j";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 2, 8, 2, -4, -2, 6, -4, 4, 10, -10, 12, 12, -8, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-k";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 2, 8, 4, -2, 6, -10, 4, -4, 10, 6, 10, 2, -6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-a";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, 2, -8, -4, -8, -4, -6, 8, 4, -2, -8, -6, 0, 8, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-b";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 8, -6, -2, -8, 2, 8, 10, 4, 0, 6, -2, -6, 10, -2, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-c";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, -6, 4, -8, -2, -2, -2, -4, -12, 2, -6, 6, 10, -14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-d";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, 2, -6, 0, -6, -4, -6, -4, -8, -10, 6, 10, 10, 6, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-e";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, -7, -1, -2, 2, 7, 8, 0, -1, -5, 1, -2, -6, 0, 8, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-f";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 1, 7, -2, 2, 7, 0, -8, -5, -1, 1, 6, 2, 8, 0, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-g";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 2, -4, 0, -2, 6, 6, -12, 4, -6, 2, -10, -14, -6, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-h";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -2, -2, 8, 4, -6, -2, 4, -4, 10, -12, -10, 8, -12, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-i";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 2, 8, -4, 8, 4, -6, 8, 4, -2, 8, -6, 0, -8, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-j";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -2, 2, 8, -4, 6, -2, 4, -4, 10, 12, -10, -8, 12, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-k";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 2, 4, 8, -2, -10, 6, -4, 4, 10, 10, 6, -6, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-a";
N := (-14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -7, -2, 4, -6, -4, 0, -5, 9, 4, -11, -6, -13, 2, -5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-b";
N := (-14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -7, 4, -4, 6, -4, -9, 0, 2, 3, 8, -3, 12, -10, -7, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-c";
N := (-14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, 2, 2, -2, -2, -5, -8, -8, -7, 6, 1, -10, 4, -9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-d";
N := (-14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, -2, -4, -6, 8, 0, 3, 5, -12, -7, 6, -3, -10, -1, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-e";
N := (-14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, -3, 0, 0, 6, -8, -9, 0, -10, -1, -12, 9, -8, 10, 1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-f";
N := (-14*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -1, 0, -8, 6, 4, -1, 8, -10, 3, -12, 3, -4, -2, 15, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-a";
N := (-14*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, -7, -6, 4, -4, -5, 0, 4, 9, -6, -11, 2, -13, -10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-b";
N := (-14*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 4, -7, 6, -4, -4, 0, -9, 3, 2, -3, 8, -10, 12, -2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-c";
N := (-14*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -3, -2, 2, -2, -8, -5, -7, -8, 1, 6, 4, -10, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-d";
N := (-14*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -1, -6, -4, 8, 3, 0, -12, 5, 6, -7, -10, -3, -14, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-e";
N := (-14*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 0, -3, 6, 0, -8, 0, -9, -1, -10, 9, -12, 10, -8, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-f";
N := (-14*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 0, -1, 6, -8, 4, 8, -1, 3, -10, 3, -12, -2, -4, -10, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 597.1-a";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 3, 0, 3, 0, -1, 3, 9, 8, -1, 8, -9, 3, 14, 8, -10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 597.1-b";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -5, 4, 5, 6, 7, 3, 1, 0, 5, -6, -9, -5, -2, -6, 8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 597.2-a";
N := (7*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, -6, 6, 6, 6, 2, 0, -6, 8, -10, -10, -6, -6, 8, 8, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 597.2-b";
N := (7*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, 2, 0, 0, 2, -10, 8, 4, -6, -4, 6, -10, 6, 10, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 597.4-a";
N := (w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 0, 3, 0, 3, -1, 9, 3, -1, 8, 8, 3, -9, 8, 14, 11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 597.4-b";
N := (w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, 4, -5, 6, 5, 7, 1, 3, 5, 0, -6, -5, -9, -6, -2, -15, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 597.3-a";
N := (7*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 6, -6, 6, 6, 2, -6, 0, -10, 8, -10, -6, -6, 8, 8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 597.3-b";
N := (7*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, 0, 2, 2, 0, -10, 4, 8, -4, -6, 6, 6, -10, -10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 607.1-a";
N := (16*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, 1, 3, -6, 9, -4, 2, 6, -2, -10, 5, -2, 1, -11, 1, -7, 8, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 607.2-a";
N := (-16*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 1, 1, -6, 3, -4, 9, 2, -2, 6, 5, -10, -2, -11, 1, -7, 1, -13, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-a";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 4, 0, 2, 6, -6, -8, -8, -6, -10, 2, 2, 14, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-b";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 8, 2, -6, -2, -12, 12, -6, -2, 6, -2, -6, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-c";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -4, -2, 6, 6, 4, -4, 2, 10, 2, 2, 2, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-d";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, -6, -8, 2, -6, -8, -10, 0, -6, -4, 2, 10, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-e";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, 0, 6, -4, -6, 8, 0, 2, 6, 10, -2, 4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-f";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 0, -6, 4, -6, -6, 8, 2, -4, 6, -12, -2, -2, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.1-g";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -6, 0, -2, 0, 6, -4, -4, 2, 6, 6, 10, 4, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.3-a";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, 8, -4, -4, 10, 8, 6, 4, -2, 4, 12, 6, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.3-b";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 4, 0, 2, -4, -2, 2, -10, 6, -4, -12, 12, 6, -12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.3-c";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, 0, -2, 10, -6, -8, 0, -6, 2, -2, -10, -6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.4-a";
N := (-14*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 0, -4, 2, 2, 4, -10, 2, 6, 12, 4, 6, 12, 16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.2-a";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 0, 4, 2, -6, 6, -8, -8, -6, 2, -10, 14, 2, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.2-b";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 8, 4, 2, -2, -6, 12, -12, -6, 6, -2, -6, -2, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.2-c";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 4, -2, 6, 6, -4, 4, 2, 2, 10, 2, 2, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.2-d";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 4, -8, -6, 2, -10, -8, 0, -4, -6, 10, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.2-e";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 0, 2, 6, -6, -4, 0, 8, 2, 10, 6, 4, -2, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.2-f";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, -6, 0, 4, -6, -6, 2, 8, -4, -12, 6, -2, -2, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.2-g";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 0, -6, -2, 6, 0, -4, -4, 2, 6, 6, 4, 10, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.6-a";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 8, -2, -4, 10, -4, 6, 8, 4, 4, -2, 6, 12, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.6-b";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 0, 4, 2, -2, -4, -10, 2, 6, -12, -4, 6, 12, 16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.6-c";
N := (2*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, 0, -2, -6, 10, 0, -8, -6, -2, 2, -6, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 612.5-a";
N := (14*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -4, 0, 2, 4, 2, 2, -10, 6, 4, 12, 12, 6, -12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.1-a";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -6, -6, 8, -6, -6, -10, -4, -10, 6, 6, 8, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.1-b";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -6, -6, -8, 6, -6, -10, -4, -10, -6, 6, -8, 10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.1-c";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, 0, -2, 2, 6, -4, -4, 2, 10, 6, 10, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.1-d";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, 2, -4, -2, 6, -2, 0, -4, -6, 6, 6, 10, -10, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.1-e";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 6, 2, -8, 6, -6, 6, -12, -4, 10, 10, -10, 2, 2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.1-f";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -6, 2, 8, -2, -2, -6, -8, -12, -10, -6, 6, 10, 2, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.2-a";
N := (-15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, -2, 4, -2, 2, -6, -4, 0, -6, -6, -6, -10, 10, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.2-b";
N := (-15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, 0, -2, -6, -2, -4, -4, 2, -6, -10, 2, 10, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.2-c";
N := (-15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, -6, 8, 6, -6, 6, -4, -12, 10, 10, -10, 2, 2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.5-a";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 0, -4, -5, -3, 1, 2, -8, -6, -5, -3, 5, -10, 13, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.5-b";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 1, 0, 4, -5, 3, 1, -2, -8, -6, -5, -3, -5, 10, -13, 5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.6-a";
N := (-14*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -3, -3, -6, 10, 0, -3, -4, -10, 2, -6, -12, 4, 13, -11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.6-b";
N := (-14*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -7, -3, -5, 2, 6, -4, -5, -8, 6, -2, 6, 4, 8, -5, -5, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.6-c";
N := (-14*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 7, 3, -5, -2, -6, 4, -5, -8, 6, -2, -6, 4, -8, 5, 5, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.6-d";
N := (-14*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 3, -3, 6, -10, 0, -3, -4, -10, 2, 6, -12, -4, -13, 11, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.4-a";
N := (3*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -6, -6, 8, -6, -6, -4, -10, -10, 6, 6, -10, 8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.4-b";
N := (3*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 6, -6, -8, -6, 6, -4, -10, -10, 6, -6, 10, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.4-c";
N := (3*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -2, 0, -2, 6, 2, -4, -4, 2, 6, 10, 2, 10, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.4-d";
N := (3*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, 2, -4, -2, -2, 6, -4, 0, -6, 6, 6, -10, 10, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.4-e";
N := (3*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, 6, -8, 6, 6, -6, -4, -12, 10, -10, 10, 2, 2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.4-f";
N := (3*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, -6, 8, -2, -6, -2, -12, -8, -10, 6, -6, 2, 10, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.3-a";
N := (15*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, -2, 4, -2, -6, 2, 0, -4, -6, -6, -6, 10, -10, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.3-b";
N := (15*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -2, 0, -2, -2, -6, -4, -4, 2, -10, -6, 10, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.3-c";
N := (15*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -6, -2, 8, 6, 6, -6, -12, -4, 10, -10, 10, 2, 2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.8-a";
N := (5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, -4, 0, -5, -3, 2, 1, -6, -8, -5, 5, -3, 13, -10, 1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.8-b";
N := (5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 1, 4, 0, -5, 3, -2, 1, -6, -8, -5, -5, -3, -13, 10, -1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.7-a";
N := (-14*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -3, -3, -6, 10, -3, 0, -10, -4, 2, -12, -6, 13, 4, -8, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.7-b";
N := (-14*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -7, -5, -3, 2, 6, -5, -4, 6, -8, -2, 4, 6, -5, 8, 16, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.7-c";
N := (-14*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 7, -5, 3, -2, -6, -5, 4, 6, -8, -2, 4, -6, 5, -8, -16, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 621.7-d";
N := (-14*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, -3, 3, 6, -10, -3, 0, -10, -4, 2, -12, 6, -13, -4, 8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 624.1-a";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 6, 2, 8, 6, 2, 8, -6, 4, 2, 6, -6, -6, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 624.2-a";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 2, 6, 8, 2, 6, -6, 8, 4, 6, 2, -6, -6, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-a";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 3, -6, 5, 5, 4, 4, -1, -1, -4, -4, -11, -3, -3, 1, 1, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-b";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 3, 4, 0, 0, -6, -6, -6, -6, 6, 6, 14, 12, 12, 6, 6, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-c";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 6, 2, 2, 1, 1, 5, 5, 11, 11, 10, -9, -9, 7, 7, -5, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-d";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -6, -2, -2, -1, -1, 5, 5, -11, -11, 10, 9, 9, 7, 7, -5, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-e";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, -4, 0, 0, 6, 6, -6, -6, -6, -6, 14, -12, -12, 6, 6, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-f";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 6, -5, -5, -4, -4, -1, -1, 4, 4, -11, 3, 3, 1, 1, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.1-a";
N := (14*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 4, 3, 3, 2, -2, -3, 0, 0, 3, -5, 5, 6, -2, -4, -4, -10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.1-b";
N := (14*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 7, -1, 6, 4, 3, -8, 0, -3, -11, -11, -8, 0, -10, 10, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.2-a";
N := (14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 4, 3, 3, -2, 2, -3, 0, 0, -5, 3, 5, -2, 6, -4, -4, -6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.2-b";
N := (14*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -1, 7, 4, 6, 3, 0, -8, -11, -3, -11, 0, -8, 10, -10, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 633.1-a";
N := (-8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, 2, -6, 9, 9, -8, 6, -2, 2, -10, -8, 13, 8, 1, 8, 1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 633.4-a";
N := (8*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, -6, 2, 9, 9, -8, -2, 6, -10, 2, -8, 8, 13, 8, 1, -1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-a";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -7, 0, 1, 4, -9, 0, -1, -6, -5, 4, -14, -10, 1, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-b";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -3, -2, -9, 2, -3, -6, 5, 6, -11, -8, -4, 12, -13, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-c";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 3, -6, 3, -6, -5, -6, -9, 2, 11, -4, -12, -8, 7, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-d";
N := (14*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, 6, -8, -8, 6, -6, 2, -12, 4, -14, -2, 2, 10, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.2-a";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 8, -1, 4, -4, 0, 0, -1, 4, -5, 9, 7, 2, -5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.2-b";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -2, 0, 3, -4, 4, -8, 0, -5, -4, -5, -3, 11, 10, 11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.2-c";
N := (-16*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 4, -2, -5, -6, -8, -2, -2, -3, 0, -5, -11, -5, 8, 5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.4-a";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -7, 4, 1, -9, -1, 0, -5, -6, 4, -14, 1, -10, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.4-b";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -3, 2, -9, -3, 5, -6, -11, 6, -8, -4, -13, 12, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.4-c";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 3, -6, 3, -5, -9, -6, 11, 2, -4, -12, 7, -8, 16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.4-d";
N := (14*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 2, -8, -8, 6, 2, -6, 4, -12, -14, -2, 10, 2, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.3-a";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 8, -2, 4, -1, -4, 0, 0, 4, -1, -5, 9, 2, 7, -10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.3-b";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, -2, -4, 3, 4, 0, -8, -4, -5, -5, -3, 10, 11, -10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.3-c";
N := (-16*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -2, 4, -6, -5, -8, -2, -2, 0, -3, -5, -11, 8, -5, -2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 637.1-a";
N := (-14*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 4, 4, 3, 3, -1, -5, -5, -1, -1, -9, -9, -10, -10, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 637.1-b";
N := (-14*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -6, -6, 3, 3, -1, -9, -9, -1, -1, -9, -9, -10, -10, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 641.1-a";
N := (15*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, -4, -4, 5, -6, -8, 6, 0, -1, -8, -4, 5, 2, -8, -7, 6, 13, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 641.2-a";
N := (15*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -4, 5, -4, -8, -6, 6, -1, 0, -4, -8, 5, -8, 2, 6, -7, 9, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 647.1-a";
N := (w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, -4, 6, 3, 0, -3, 2, -3, 3, 8, -1, -4, -12, 12, 2, 2, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 647.1-b";
N := (w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 2, 2, -6, -6, 4, 4, 2, 0, 4, 6, 0, 1, -8, -6, -4, -7, -15, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 647.2-a";
N := (w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, -4, 3, 6, -3, 0, 2, 3, -3, -1, 8, -4, 12, -12, 2, 2, -1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 647.2-b";
N := (w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 2, 2, -6, -6, 4, 4, 2, 4, 0, 0, 6, 1, -6, -8, -7, -4, 1, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.1-a";
N := (16*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 3, -4, -4, 3, -2, -2, 8, -10, -8, -8, -1, -14, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.1-b";
N := (16*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -7, 1, 6, -2, -1, 0, -4, -4, 10, 0, -2, -11, 6, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.2-a";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 3, -3, -2, -6, 0, -1, 11, 5, 0, -3, -2, -8, -11, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.2-b";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 6, 0, -2, 2, 8, 4, -2, -2, 10, 12, 0, 10, -6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.2-c";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 4, 3, 3, -2, 2, 2, -5, -5, 1, -2, -9, 6, -8, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.2-d";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 1, 3, 6, 6, -4, 5, 1, -9, -4, 1, -2, 0, -7, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.2-e";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 4, 0, 6, 6, 2, -4, -8, 6, -10, -2, -2, 6, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.2-f";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 1, 3, 6, -2, -2, -7, -7, -5, 2, -3, -14, 4, 1, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.2-g";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -6, -2, 8, 8, -8, 2, 0, -10, -4, -2, -4, -4, 2, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.4-a";
N := (16*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, -4, 3, -4, -2, 3, 8, -2, -10, -8, -8, -14, -1, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.4-b";
N := (16*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -7, 6, 1, -2, 0, -1, -4, -4, 10, -2, 0, 6, -11, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.3-a";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, -3, 3, -2, 0, -6, 11, -1, 5, -3, 0, -8, -2, 10, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.3-b";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 0, 6, -2, 8, 2, -2, 4, -2, 12, 10, 10, 0, -10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.3-c";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 4, 3, 3, -2, 2, 2, -5, -5, 1, -9, -2, -8, 6, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.3-d";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 3, 1, 6, -4, 6, 1, 5, -9, 1, -4, 0, -2, -2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.3-e";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 0, 4, 6, 2, 6, -8, -4, 6, -2, -10, 6, -2, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.3-f";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 3, 1, 6, -2, -2, -7, -7, -5, -3, 2, 4, -14, -12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 663.3-g";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -6, 8, -2, 8, 2, -8, -10, 0, -4, -4, -2, 2, -4, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 667.1-a";
N := (-17*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 4, -4, -6, 8, 6, 4, -10, 3, 1, 10, -10, -8, 8, 10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 667.2-a";
N := (-6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 1, 2, -1, 7, -9, 6, -8, -8, 5, -1, -6, -10, 9, -7, -14, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 667.2-b";
N := (-6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, -2, -7, 5, -9, 6, 4, 4, -7, 5, -6, -2, -15, -11, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 667.4-a";
N := (-17*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 4, -6, -4, 8, 6, 4, 3, -10, 1, -10, 10, 8, -8, -3, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 667.3-a";
N := (6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, 2, 7, -1, -9, 6, -8, 5, -8, -1, -10, -6, -7, 9, 3, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 667.3-b";
N := (6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, -2, 5, -7, -9, 6, 4, -7, 4, 5, -2, -6, -11, -15, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-a";
N := (-15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, -4, -4, 4, 0, 2, 12, 4, 6, -4, -2, -10, 14, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-b";
N := (-15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, -2, 0, 0, -2, 2, 4, 4, -14, -10, 10, 2, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-c";
N := (-15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 3, -3, -3, 3, -6, 6, -10, -10, 5, -3, 3, -1, -1, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-d";
N := (-15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 2, -4, -8, 6, 2, -12, -8, -6, -10, 10, 2, 2, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-e";
N := (-15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 4, -4, -4, 0, -2, 12, 4, 6, -4, 2, 10, -14, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-f";
N := (-15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 2, -2, -8, 8, 2, -2, -4, -4, 10, -6, 6, -10, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-g";
N := (-15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, -6, 0, -6, -6, 8, 2, -10, -6, -6, -10, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-h";
N := (-15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -4, 4, -2, 8, 2, 10, 8, -10, -2, -6, -6, -10, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-i";
N := (-15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -7, -1, -5, 1, -4, 8, -4, 2, -11, 3, 9, 7, -5, -5, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-j";
N := (-15*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -7, 1, -5, -1, -4, -8, -4, 2, -11, 3, -9, -7, 5, 5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-a";
N := (-5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 2, 2, -5, 7, -1, -4, 5, -4, 10, 6, -9, -2, 4, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-b";
N := (-5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, -6, 3, 6, 0, 9, 6, 8, -7, 8, 9, -6, -8, -2, -5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-c";
N := (-5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, 2, 5, -2, 4, -1, 2, -4, -1, 4, 9, 6, 4, -14, -11, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-d";
N := (-5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, -2, 2, 5, 7, 1, -4, 5, -4, 10, -6, -9, 2, -4, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-e";
N := (-5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 6, 3, -6, 0, -9, 6, 8, -7, 8, -9, -6, 8, 2, 5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-f";
N := (-5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, -2, 5, 2, 4, 1, 2, -4, -1, 4, -9, 6, -4, 14, 11, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-a";
N := (-15*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 6, 4, -4, 2, 0, 4, 12, 6, -2, -4, 14, -10, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-b";
N := (-15*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 2, 0, 0, 2, -2, 4, 4, -14, 10, -10, 2, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-c";
N := (-15*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -3, 3, 3, -3, 6, -6, -10, -10, 5, 3, -3, -1, -1, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-d";
N := (-15*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 6, -8, -4, 2, 6, -8, -12, -6, 10, -10, 2, 2, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-e";
N := (-15*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, 6, -4, -4, -2, 0, 4, 12, 6, 2, -4, -14, 10, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-f";
N := (-15*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, -2, 2, 8, -8, -2, 2, -4, -4, 10, 6, -6, -10, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-g";
N := (-15*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, 0, -6, -6, -6, 2, 8, -10, -6, -6, 2, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-h";
N := (-15*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 4, -4, 8, -2, 10, 2, -10, 8, -2, -6, -6, 2, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-i";
N := (-15*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -1, -7, 1, -5, 8, -4, 2, -4, -11, 9, 3, -5, 7, -5, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-j";
N := (-15*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 1, -7, -1, -5, -8, -4, 2, -4, -11, -9, 3, 5, -7, 5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-a";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 2, 2, 7, -5, -4, -1, -4, 5, 10, -9, 6, 4, -2, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-b";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 3, -6, 0, 6, 6, 9, -7, 8, 8, -6, 9, -2, -8, 10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-c";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, 5, 2, 4, -2, 2, -1, -1, -4, 4, 6, 9, -14, 4, -14, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-d";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, 2, -2, 7, 5, -4, 1, -4, 5, 10, -9, -6, -4, 2, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-e";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 3, 6, 0, -6, 6, -9, -7, 8, 8, -6, -9, 2, 8, -10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-f";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, 5, -2, 4, 2, 2, 1, -1, -4, 4, 6, -9, 14, -4, 14, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-a";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 3, 3, 4, 4, 9, 2, 2, 5, 5, 13, 12, 12, -8, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-b";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 3, -4, -4, -9, -1, -1, -8, -8, 2, -9, -9, 7, 7, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-c";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 3, 0, 0, 1, 6, 6, 1, 1, 13, 0, 0, 8, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-d";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, -3, 6, 6, -1, 0, 0, 1, 1, -5, -6, -6, -8, -8, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-e";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -3, 4, 4, 9, -1, -1, 8, 8, -2, -9, -9, 7, 7, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.1-a";
N := (-16*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 2, 6, -4, 6, -2, 0, 12, 8, 2, 6, 14, 2, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 688.2-a";
N := (16*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 2, -2, -4, 6, 6, 0, -2, 12, 8, 6, 2, 2, 14, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 689.1-a";
N := (-15*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 6, -3, 0, 3, 7, -6, 6, -1, -1, -4, 6, 10, 7, 13, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 689.2-a";
N := (15*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -3, 6, 3, 0, 7, 6, -6, -1, -1, -4, 6, 7, 10, 10, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 692.1-a";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 3, 0, 6, -6, -8, 0, -6, -4, -4, 8, -3, -6, -8, 7, -5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 692.1-b";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, -7, 0, 6, 0, -2, 10, -4, -8, 0, 6, -1, 12, -8, -7, 13, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 692.2-a";
N := (8*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 0, 3, -6, 6, -8, -6, 0, -4, -4, 8, -6, -3, 7, -8, -2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 692.2-b";
N := (8*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 0, -7, 0, 6, -2, -4, 10, 0, -8, 6, 12, -1, -7, -8, -6, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.1-a";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -8, -2, -2, 4, -2, 0, -8, 4, -4, 2, 10, 6, -10, 2, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.2-a";
N := (17*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, 6, 4, -6, 4, -2, 4, 0, 4, 2, -6, 2, 2, -2, 10, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.2-b";
N := (17*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 4, -2, -2, 6, -8, -4, 0, 6, -12, -8, 2, 8, -10, 6, -12, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.2-c";
N := (17*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, -2, -4, 6, -6, 8, -2, -8, -8, -4, 2, 0, 2, 14, 4, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.2-d";
N := (17*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -5, -2, 3, -8, -4, 6, 0, 6, 4, -13, -4, 5, -9, 0, 0, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.2-e";
N := (17*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 4, -2, 4, 6, 0, -2, 4, 8, 4, -10, 2, -6, -14, -2, 2, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.2-f";
N := (17*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -2, 7, -2, 3, 0, 4, -2, 8, -2, -4, 11, -12, 13, -5, 8, 0, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.2-g";
N := (17*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 6, -6, 6, 0, 8, 0, -6, -4, -4, 2, -12, 6, -10, 8, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.4-a";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -2, -8, 4, -2, -2, -8, 0, -4, 4, 2, 6, 10, 2, -10, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.3-a";
N := (-17*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, 4, 6, 4, -6, -2, 0, 4, 2, 4, -6, 2, 2, 10, -2, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.3-b";
N := (-17*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 4, -2, -2, -8, 6, -4, 6, 0, -8, -12, 2, -10, 8, -12, 6, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.3-c";
N := (-17*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, -4, -2, -6, 6, 8, -8, -2, -4, -8, 2, 2, 0, 4, 14, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.3-d";
N := (-17*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -2, -5, -8, 3, -4, 0, 6, 4, 6, -13, 5, -4, 0, -9, 1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.3-e";
N := (-17*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 4, 4, -2, 0, 6, -2, 8, 4, -10, 4, 2, -14, -6, 2, -2, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.3-f";
N := (-17*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -2, -2, 7, 0, 3, 4, 8, -2, -4, -2, 11, 13, -12, 8, -5, 1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.3-g";
N := (-17*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -6, 6, 0, 6, 8, -6, 0, -4, -4, 2, 6, -12, 8, -10, -10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 701.1-a";
N := (15*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -1, -6, -6, -2, 0, -3, -7, -6, 4, -6, 8, -12, -11, -4, 5, -2, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 701.2-a";
N := (15*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, -6, -2, -6, -3, 0, -7, 4, -6, 8, -6, -12, -4, -11, -2, 5, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.1-a";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, 4, -3, -6, 1, -1, 3, 6, 13, 4, -9, -9, -4, 3, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.1-b";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -6, 6, -6, 0, -2, -6, 8, -12, -10, 6, -10, 2, 2, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.1-c";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, -6, 4, -8, 6, 6, -6, 4, 4, -6, 2, -2, 10, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.1-d";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 2, 2, 0, -8, -6, -2, 6, 12, 4, 2, 6, 6, -2, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.1-e";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 3, 6, 9, 1, 3, -6, -7, -4, 5, -3, -12, 13, 10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.1-f";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 8, -1, -6, 7, -9, 1, -6, 9, 4, -1, -3, -12, -5, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.1-g";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -2, -2, 8, -2, -6, 4, 4, -6, -10, -2, -6, 2, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.1-h";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 2, 0, 0, 6, 6, -2, 4, 0, 10, -14, -10, -6, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.1-i";
N := (-15*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -7, 4, -3, -2, 7, -3, 9, 6, -11, 4, 9, 11, 4, 1, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.3-a";
N := (16*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 4, -6, 4, 2, 4, 6, 0, -6, -8, -8, -12, -10, -10, 10, 14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.3-b";
N := (16*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -2, 0, -2, 6, 6, 10, -6, 6, -4, -4, -10, -2, 0, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.3-c";
N := (16*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -6, 0, 6, 0, -10, 0, -6, -4, 8, 8, 6, 6, 14, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.2-a";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, -3, 4, 1, -6, -1, 6, 3, 4, 13, -9, -4, -9, 2, 3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.2-b";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 6, -6, 0, -6, -2, 8, -6, -10, -12, 6, 2, -10, -12, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.2-c";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -6, -2, -8, 4, 6, -6, 6, 4, 4, -6, -2, 2, 2, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.2-d";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 2, 2, -8, 0, -6, 6, -2, 4, 12, 2, 6, 6, -10, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.2-e";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 0, 9, 6, 1, -6, 3, -4, -7, 5, -12, -3, 10, 13, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.2-f";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -1, 8, 7, -6, -9, -6, 1, 4, 9, -1, -12, -3, 2, -5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.2-g";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -6, 8, -2, -2, 4, -6, -6, 4, -10, -6, -2, -8, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.2-h";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 6, 0, 0, 6, -2, 6, 0, 4, 10, -10, -14, -10, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.2-i";
N := (15*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -7, -3, 4, 7, -2, -3, 6, 9, 4, -11, 9, 4, 11, 2, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.6-a";
N := (16*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 4, 4, -6, 4, 2, 6, -6, 0, -8, -8, -12, -10, -10, 14, 10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.6-b";
N := (16*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 0, -2, 6, -2, 6, -6, 10, -4, 6, -4, -2, -10, 2, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 711.6-c";
N := (16*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 0, -6, 0, 6, -10, -6, 0, 8, -4, 8, 6, 6, -10, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.1-a";
N := (2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -5, 6, 2, -1, 0, 7, 2, 0, 10, -5, 13, 12, -6, 1, 3, 5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 716.2-a";
N := (2*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -5, 2, 6, 0, -1, 7, 0, 2, -5, 10, 13, -6, 12, 3, 1, -1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 724.1-a";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 1, -1, -8, 0, 5, 2, -4, -7, 1, -5, -2, -6, -8, 12, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 724.1-b";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -2, -2, 4, -6, 1, 5, -5, -1, 4, 10, 4, -6, 2, 12, -5, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 724.2-a";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -1, 1, 0, -8, 5, -4, 2, 1, -7, -5, -6, -2, 12, -8, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 724.2-b";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -2, -2, -6, 4, 1, -5, 5, 4, -1, 10, -6, 4, 12, 2, -5, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.1-a";
N := (-15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 4, 0, 6, -2, -4, 10, -6, 6, -10, 8, 4, 10, 2, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.1-b";
N := (-15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 1, 2, -6, -6, -6, 2, 2, -2, 2, 2, 2, -6, -14, 2, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.1-c";
N := (-15*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -2, -6, -6, 4, -4, -2, 0, 0, 2, 14, -2, -2, 14, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.2-a";
N := (15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 4, 6, 0, -4, -2, 10, 6, -6, -10, 4, 8, 2, 10, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.2-b";
N := (15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 1, 2, -6, -6, 2, -6, 2, 2, -2, 2, -6, 2, 2, -14, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 725.2-c";
N := (15*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -2, -6, -6, -4, 4, -2, 0, 0, 2, -2, 14, 14, -2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-a";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 3, 3, 6, 3, 1, 9, -6, -4, -4, 2, 6, 6, 7, -2, -17, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-b";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, -3, 6, -3, -1, 9, 6, -4, -4, 2, 6, -6, -7, 2, 17, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-c";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -5, 0, 0, 0, 0, 10, 0, 0, 8, 8, -13, 0, 0, 1, 1, -17, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-d";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, -3, -3, -6, 1, 6, -9, -4, -4, 2, -6, -6, -2, 7, 10, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-e";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, 3, -3, 6, -1, 6, 9, -4, -4, 2, -6, 6, 2, -7, -10, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-f";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 3, 3, 3, 6, 1, -6, 9, -4, -4, 2, 6, 6, -2, 7, 10, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-g";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, -3, 3, -6, -1, -6, -9, -4, -4, 2, 6, -6, 2, -7, -10, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-h";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 5, 0, 0, 0, 0, -10, 0, 0, 8, 8, -13, 0, 0, -1, -1, 17, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-i";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, -3, -6, -3, 1, -9, 6, -4, -4, 2, -6, -6, 7, -2, -17, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.1-j";
N := (27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, 3, -6, 3, -1, -9, -6, -4, -4, 2, -6, 6, -7, 2, 17, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.2-a";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -3, 6, 9, 3, -4, -6, 6, -1, 2, -4, -6, 9, -10, -10, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.2-b";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -3, 3, -6, -6, 1, -9, 6, -4, 2, -13, 3, 9, -14, -5, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.2-c";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -3, -3, -6, 6, -1, -9, -6, -4, 2, -13, 3, -9, 14, 5, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.2-d";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 3, 6, -9, 3, 4, 6, 6, -1, 2, -4, 6, 9, 10, 10, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.2-e";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 3, -3, 3, 0, 1, 3, 9, -7, -4, 5, -3, -9, -11, -2, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.2-f";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 3, 3, 3, 0, -1, 3, -9, -7, -4, 5, -3, 9, 11, 2, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.2-g";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -3, -6, 9, -3, 4, -6, -6, -1, 2, -4, -6, -9, 10, 10, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.2-h";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 3, -6, -9, -3, -4, 6, -6, -1, 2, -4, 6, -9, -10, -10, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.4-a";
N := (15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, 6, 6, -1, -6, -6, 5, -4, 11, 0, 0, 5, 5, 5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.4-b";
N := (15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -3, -3, -3, -6, 1, -3, -9, -1, -10, -4, 12, -6, -11, 7, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.4-c";
N := (15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 3, -3, 3, -6, -1, 3, -9, -1, -10, -4, -12, -6, 11, -7, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.4-d";
N := (15*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 0, -6, 6, 1, 6, -6, 5, -4, 11, 0, 0, -5, -5, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.3-a";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 6, -3, 3, 9, -4, 6, -6, 2, -1, -4, 9, -6, -10, -10, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.3-b";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 3, -3, -6, -6, 1, 6, -9, 2, -4, -13, 9, 3, -5, -14, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.3-c";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -3, -3, 6, -6, -1, -6, -9, 2, -4, -13, -9, 3, 5, 14, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.3-d";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 6, 3, 3, -9, 4, 6, 6, 2, -1, -4, 9, 6, 10, 10, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.3-e";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -3, 3, 0, 3, 1, 9, 3, -4, -7, 5, -9, -3, -2, -11, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.3-f";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 3, 3, 0, 3, -1, -9, 3, -4, -7, 5, 9, -3, 2, 11, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.3-g";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -6, -3, -3, 9, 4, -6, -6, 2, -1, -4, -9, -6, 10, 10, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.3-h";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -6, 3, -3, -9, -4, -6, 6, 2, -1, -4, -9, 6, -10, -10, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.5-a";
N := (15*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, 6, 6, -1, -6, -6, -4, 5, 11, 0, 0, 5, 5, -1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.5-b";
N := (15*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -3, -3, -6, -3, 1, -9, -3, -10, -1, -4, -6, 12, 7, -11, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.5-c";
N := (15*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -3, 3, -6, 3, -1, -9, 3, -10, -1, -4, -6, -12, -7, 11, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 729.5-d";
N := (15*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 0, 6, -6, 1, -6, 6, -4, 5, 11, 0, 0, -5, -5, 1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 731.1-a";
N := (15*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -6, -5, -6, 1, -2, 0, -3, 8, 10, -2, 6, 2, 9, -10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 731.2-a";
N := (-5*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, -4, -5, 7, -6, -4, -1, -6, -2, -4, -6, 6, -7, 4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 731.4-a";
N := (15*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -6, -5, 1, -6, -2, -3, 0, 8, 10, 6, -2, 9, 2, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 731.3-a";
N := (5*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, -4, -5, -6, 7, -4, -6, -1, -2, -4, 6, -6, 4, -7, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.1-a";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 7, 2, 8, -9, -8, 9, 2, 7, 7, -5, 5, 1, 2, -7, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.1-b";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -5, 0, 1, -2, -9, 3, 6, -10, -5, 2, -6, 3, 4, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.1-c";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 0, 3, -4, -4, 3, -8, 3, -6, 0, -2, 6, 7, 6, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.1-d";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, -7, -6, -6, 1, 0, 5, -6, -6, 10, -6, -1, -8, -5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.1-e";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, -6, 0, -9, 4, 3, -6, -1, 11, -1, 3, 9, -2, -5, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.1-f";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, -5, -2, -2, 1, 0, -3, 2, -6, -10, -2, -11, 8, 15, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.1-g";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, 0, -4, 8, 6, -2, 6, 0, 0, -8, -6, -2, -6, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.1-h";
N := (-16*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 3, -2, 4, -1, -4, -5, 10, 9, -1, 5, 9, -1, 2, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.2-a";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -2, -4, -6, 6, -4, 0, 2, 4, -4, 10, -6, -6, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.2-b";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -1, -6, 5, 8, 3, -1, -4, -4, -11, 6, 4, -11, -2, 2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.4-a";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 2, 7, -9, 8, -8, 2, 9, 7, 7, -5, 1, 5, 2, 8, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.4-b";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, -5, -2, 1, -9, 6, 3, -5, -10, 2, 3, -6, 4, -3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.4-c";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 3, 0, -4, -4, 3, 3, -8, 0, -6, -2, 7, 6, 6, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.4-d";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -7, -2, -6, -6, 1, 5, 0, -6, -6, 10, -1, -6, -8, 5, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.4-e";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -3, -9, 0, 4, -6, 3, 11, -1, -1, 9, 3, -2, 16, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.4-f";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -5, -6, -2, -2, 1, -3, 0, -6, 2, -10, -11, -2, 8, 11, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.4-g";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, 0, 8, -4, 6, 6, -2, 0, 0, -8, -2, -6, -6, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.4-h";
N := (16*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, 3, -1, 4, -4, 10, -5, -1, 9, 5, -1, 9, 2, 0, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.3-a";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 6, -6, -4, 6, 0, -4, 4, 2, -4, -6, 10, -6, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 732.3-b";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -6, -1, 8, 5, 3, -4, -1, -11, -4, 6, -11, 4, -2, -15, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.1-a";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 5, -5, -8, -5, -1, -8, -3, -6, -1, -4, 4, 0, 8, 2, -10, -3, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.1-b";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, -3, 4, -7, 3, -4, -5, 6, -5, -4, 8, -4, -4, 10, -6, -9, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.1-c";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, 0, 7, -5, -6, -8, 2, -6, 4, 11, -1, 10, 8, -13, 0, 12, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.1-d";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, -4, 1, -3, 6, 8, -6, -6, 8, 5, -13, -6, 4, -15, 4, -12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.1-e";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 3, 0, 3, 3, -8, -3, -6, -1, -4, -4, 0, 0, -14, -2, 1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.1-f";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, 4, -2, 4, 8, -2, 0, 0, -4, 8, -2, 6, 2, 2, -10, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.1-g";
N := (w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, -7, 4, 9, -3, -4, -9, -6, -1, -4, -4, 0, 4, 6, -14, -3, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.2-a";
N := (-8*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -3, -6, -9, -4, 4, 3, -2, -1, 6, -3, -11, 6, -10, 0, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.2-b";
N := (-8*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, -3, 4, 3, -4, -2, -5, 2, -5, 2, 1, 5, -2, 6, -8, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.4-a";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 5, -8, -5, -1, -5, -8, -6, -3, -4, -1, 4, 8, 0, -10, 2, -14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.4-b";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, 4, -3, 3, -7, -4, 6, -5, -4, -5, 8, -4, -4, -6, 10, -14, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.4-c";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, 7, 0, -6, -5, -8, -6, 2, 11, 4, -1, 8, 10, 0, -13, 11, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.4-d";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 1, -4, 6, -3, 8, -6, -6, 5, 8, -13, 4, -6, 4, -15, -5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.4-e";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 0, 3, 3, 3, -8, -6, -3, -4, -1, -4, 0, 0, -2, -14, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.4-f";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, -2, 4, 8, 4, -2, 0, 0, 8, -4, -2, 2, 6, -10, 2, -14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.4-g";
N := (w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, 4, -7, -3, 9, -4, -6, -9, -4, -1, -4, 4, 0, -14, 6, 10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.3-a";
N := (-8*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -6, -3, -4, -9, 4, -2, 3, 6, -1, -3, 6, -11, 0, -10, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 753.3-b";
N := (-8*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, 4, -3, -4, 3, -2, 2, -5, 2, -5, 1, -2, 5, -8, 6, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 757.1-a";
N := (-17*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, -4, 0, 6, 3, 3, 2, 6, 3, -7, -4, -4, -6, -6, -1, 2, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 757.2-a";
N := (17*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, -4, 6, 0, 3, 3, 2, 3, 6, -4, -7, -4, -6, -6, 2, -1, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-a";
N := (-18*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -6, 1, 5, 6, 4, -3, 6, 6, 9, 7, -11, -6, 4, 0, -4, -2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-b";
N := (-18*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -2, 2, 0, 0, 2, 2, 0, 8, -8, -10, 12, -6, -12, 6, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.1-c";
N := (-18*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 2, -4, 5, 2, -1, -4, -5, -3, 8, 6, -6, -1, -8, 3, -14, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-a";
N := (-18*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -6, 5, 1, 4, 6, -3, 6, 6, 7, 9, -11, 4, -6, -4, 0, 14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-b";
N := (-18*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 2, -2, 0, 0, 2, 0, 2, -8, 8, -10, -6, 12, 6, -12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 764.2-c";
N := (-18*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -4, 2, 2, 5, -1, -5, -4, 8, -3, 6, -1, -6, 3, -8, 1, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-a";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 6, 8, 8, 2, -2, -10, 8, 0, -4, -6, -6, 2, 2, -10, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-b";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, -6, -8, 4, 2, 2, -2, 12, -4, -2, 6, 6, 14, -10, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-c";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 6, 8, -8, -2, -2, -10, 8, 0, 4, -6, -6, 2, 2, -10, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-d";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -2, -8, 4, 2, 6, 10, -4, 4, 10, 6, -10, -2, 6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-e";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, -6, 8, -4, 2, 2, -2, -12, 4, -2, 6, 6, 14, -10, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-f";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 6, 0, 0, 6, -2, 6, 0, 8, 4, 10, -6, -6, 10, -2, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-g";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, 0, -6, 6, -6, 4, 8, 4, -10, 10, -6, -6, -10, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-h";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, 0, 4, 2, -6, 6, 4, 12, 6, -10, -2, 6, 14, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-i";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 6, 0, 0, -6, -2, 6, 0, -8, -4, 10, -6, -6, 10, -2, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-j";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 6, 0, -4, 2, 6, -6, -4, 12, -6, -10, -2, 6, 14, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-k";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 4, 0, 6, 6, 6, -4, -8, 4, 10, 10, -6, -6, -10, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-l";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, 0, -4, 2, -6, 6, -4, -12, 6, -10, -2, 6, 14, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-m";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -6, 0, 0, -6, -2, -6, 0, -8, 4, -10, -6, -6, 10, -2, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-n";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 4, 0, -6, 6, 6, -4, 8, -4, 10, 10, -6, -6, -10, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-o";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 2, 8, 4, 2, -6, -10, -4, -4, -10, 6, -10, -2, 6, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-p";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 6, 8, 4, 2, -2, 2, 12, 4, 2, 6, 6, 14, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-q";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 2, -8, -4, 2, -6, -10, 4, 4, -10, 6, -10, -2, 6, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.1-r";
N := (-16*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -6, -8, 8, -2, -2, 10, -8, 0, -4, 6, -6, 2, 2, -10, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-a";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 8, 6, 2, 8, -2, 8, -10, -4, 0, -6, 2, -6, -10, 2, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-b";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 6, 4, -8, 2, -2, 2, -4, 12, -2, 6, 6, -10, 14, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-c";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 8, 6, -2, -8, -2, 8, -10, 4, 0, -6, 2, -6, -10, 2, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-d";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 2, 4, -8, 2, 10, 6, 4, -4, 10, -10, 6, 6, -2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-e";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 6, -4, 8, 2, -2, 2, 4, -12, -2, 6, 6, -10, 14, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-f";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 6, 6, 0, -2, 0, 6, 4, 8, 10, -6, -6, -2, 10, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-g";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 2, -6, 0, 6, 4, -6, 4, 8, -10, -6, 10, -10, -6, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-h";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, -2, 4, 0, 2, 6, -6, 12, 4, 6, -2, -10, 14, 6, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-i";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 6, -6, 0, -2, 0, 6, -4, -8, 10, -6, -6, -2, 10, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-j";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, 2, -4, 0, 2, -6, 6, 12, -4, -6, -2, -10, 14, 6, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-k";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, -2, 6, 0, 6, -4, 6, 4, -8, 10, -6, 10, -10, -6, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-l";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, -2, -4, 0, 2, 6, -6, -12, -4, 6, -2, -10, 14, 6, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-m";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, -6, -6, 0, -2, 0, -6, 4, -8, -10, -6, -6, -2, 10, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-n";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, -2, -6, 0, 6, -4, 6, -4, 8, 10, -6, 10, -10, -6, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-o";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -2, 4, 8, 2, -10, -6, -4, -4, -10, -10, 6, 6, -2, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-p";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, -6, 4, 8, 2, 2, -2, 4, 12, 2, 6, 6, -10, 14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-q";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -2, -4, -8, 2, -10, -6, 4, 4, -10, -10, 6, 6, -2, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 768.2-r";
N := (-16*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -8, -6, -2, 8, -2, -8, 10, -4, 0, 6, 2, -6, -10, 2, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 771.1-a";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, 0, -6, -4, -4, -4, 8, -10, 4, 10, 8, -2, -2, -4, 0, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 771.1-b";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 0, 0, -8, 8, -2, -8, 8, 4, 4, -4, -10, -2, -14, 6, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 771.1-c";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, 0, 2, 4, -4, -4, 0, 6, -4, 6, -8, 6, 6, 4, 8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 771.2-a";
N := (-2*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -6, 2, -3, -1, 6, 2, -9, 7, -3, 3, -5, -10, -9, 13, 1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 771.2-b";
N := (-2*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -6, 2, -2, 1, 7, 2, -10, -3, -1, -1, 1, -3, -2, 1, -13, 5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 771.4-a";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, -6, 0, -4, -4, -4, -10, 8, 10, 4, 8, -2, -2, 0, -4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 771.4-b";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 0, 0, 8, -8, -2, 8, -8, 4, 4, -4, -2, -10, 6, -14, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 771.4-c";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, 2, 0, -4, 4, -4, 6, 0, 6, -4, -8, 6, 6, 8, 4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 771.3-a";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 2, -6, -1, -3, 6, -9, 2, -3, 7, 3, -10, -5, 13, -9, -4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 771.3-b";
N := (2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -6, -2, 2, 7, 1, 2, -3, -10, -1, -1, 1, -2, -3, -13, 1, 8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.1-a";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, 2, -4, 0, 6, 6, 0, 4, 2, 2, -6, -10, 2, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.1-b";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -2, 0, -8, -2, 2, 12, 12, 2, -2, 10, 2, -6, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.1-c";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -6, -4, 8, -6, -10, -8, 4, 2, -10, 6, -6, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.1-d";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 0, 6, 0, 8, 0, 2, 8, -10, 6, 0, -10, -4, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.1-e";
N := (3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -6, 4, 6, -8, 4, 4, 6, -8, -2, -14, 0, -6, 8, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-a";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 6, -4, -6, 8, 4, -4, 6, -8, -2, 14, 0, -6, 8, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-b";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, -2, 4, 0, 6, -6, 0, 4, 2, -2, 6, -10, 2, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-c";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -4, 6, -4, -4, -8, -6, -12, 2, 10, 2, 10, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-d";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -4, -6, -4, 4, -8, -6, -12, 2, -10, 2, -10, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-e";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -2, -2, 8, -4, -2, -6, 4, 4, 2, -14, 2, 14, 2, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-f";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, 4, -2, -4, -4, 0, 10, 4, 2, 2, 2, 10, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-g";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, 0, 8, -2, -2, 12, 12, 2, 2, -10, 2, -6, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-h";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 4, 2, -4, 4, 0, 10, 4, 2, -2, 2, -10, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-i";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, 0, -6, 0, 8, 0, 2, 8, -10, -6, 0, -10, -4, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.2-j";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 6, 4, -8, -6, 10, -8, 4, 2, 10, -6, -6, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.6-a";
N := (17*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 5, -4, -2, -3, 1, 4, 5, -6, 3, 2, -5, -2, -4, -12, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.6-b";
N := (17*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -5, -4, 2, -3, -1, -4, -5, -6, 3, 2, -5, 2, 4, 12, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.4-a";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, -2, 0, -4, 6, 6, 4, 0, 2, -6, 2, 2, -10, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.4-b";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, -8, 0, -2, 2, 12, 12, 2, 10, -2, -6, 2, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.4-c";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, 2, 8, -4, -6, -10, 4, -8, 2, 6, -10, -10, -6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.4-d";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 6, 0, 6, 8, 0, 8, 2, -10, 0, 6, -4, -10, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.4-e";
N := (3*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 4, -6, -8, 6, 4, 4, -8, 6, -2, 0, -14, 8, -6, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.3-a";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -4, 6, 8, -6, 4, -4, -8, 6, -2, 0, 14, 8, -6, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.3-b";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, 2, 0, 4, 6, -6, 4, 0, 2, 6, -2, 2, -10, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.3-c";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 2, -4, 6, -4, -8, -12, -6, 2, 2, 10, -12, 10, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.3-d";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, -2, -4, -6, 4, -8, -12, -6, 2, 2, -10, 12, -10, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.3-e";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -2, -2, -4, 8, -2, -6, 4, 4, 2, 2, -14, 2, 14, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.3-f";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 4, 2, -4, -2, -4, 0, 4, 10, 2, 2, 2, 4, 10, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.3-g";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -2, 8, 0, -2, -2, 12, 12, 2, -10, 2, -6, 2, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.3-h";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 4, -2, -4, 2, 4, 0, 4, 10, 2, 2, -2, -4, -10, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.3-i";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, -6, 0, -6, 8, 0, 8, 2, -10, 0, -6, -4, -10, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.3-j";
N := (6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, -2, -8, 4, -6, 10, 4, -8, 2, -6, 10, -10, -6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.7-a";
N := (17*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 5, -2, -4, 1, -3, 4, 5, 3, -6, 2, -2, -5, -12, -4, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 783.7-b";
N := (17*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -5, 2, -4, -1, -3, -4, -5, 3, -6, 2, 2, -5, 12, 4, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 789.2-a";
N := (5*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, 0, -2, 6, -6, 4, -4, -2, -4, 4, 4, 6, 2, 0, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 789.3-a";
N := (5*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, -2, 0, -6, 6, 4, -2, -4, 4, -4, 4, 2, 6, 4, 0, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 793.1-a";
N := (-9*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, 2, -2, 0, 8, -6, 6, -2, -4, 4, -2, 6, 14, -2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 793.2-a";
N := (9*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, -2, 2, 8, 0, -6, -2, 6, 4, -4, -2, 14, 6, -2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 797.1-a";
N := (18*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 1, 2, -3, 3, -6, 3, 2, -2, -1, 8, -12, -6, -4, -11, -9, 1, 9, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 797.1-b";
N := (18*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 3, 2, -7, 7, 6, 1, -2, -2, 3, -8, 8, -6, 0, -3, -1, 9, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 797.2-a";
N := (-18*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 1, 2, 3, -3, 3, -6, 2, -1, -2, -12, 8, -6, -11, -4, 1, -9, 16, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 797.2-b";
N := (-18*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 2, 7, -7, 1, 6, -2, 3, -2, 8, -8, -6, -3, 0, 9, -1, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 807.2-a";
N := (-17*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, 2, 2, 0, 0, 2, -2, 2, -4, 12, 10, 6, -10, 2, -14, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 807.3-a";
N := (-17*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, 2, 2, 0, 0, 2, 2, -2, 12, -4, 10, -10, 6, -14, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 809.1-a";
N := (w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 3, 5, -4, 3, -3, -5, 1, 6, 3, -6, 6, -11, 12, 10, 7, -5, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 809.1-b";
N := (w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -1, 1, 0, 3, 7, 1, -7, 2, 7, 10, 2, -11, 4, 10, -13, 15, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 809.1-c";
N := (w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 5, 0, 3, -3, 3, -7, 6, 3, 2, 2, 5, 0, -6, -1, -13, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 809.1-d";
N := (w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -1, 8, -7, -3, -3, -3, 8, -3, -8, 0, 11, 10, -2, -5, 7, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 809.2-a";
N := (w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 5, 3, -4, -5, -3, 1, 3, 6, 6, -6, -11, 10, 12, -5, 7, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 809.2-b";
N := (w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, 1, 3, 0, 1, 7, -7, 7, 2, 2, 10, -11, 10, 4, 15, -13, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 809.2-c";
N := (w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, 5, 3, 0, 3, -3, -7, 3, 6, 2, 2, 5, -6, 0, -13, -1, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 809.2-d";
N := (w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, -1, -7, 8, -3, -3, -3, -3, 8, 0, -8, 11, -2, 10, 7, -5, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 816.2-a";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 1, -3, -8, -8, -1, 2, -10, 8, 6, 0, -4, -9, -6, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 816.2-b";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, 0, 2, 2, 2, -4, 4, -2, -2, 6, -2, -2, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 816.2-c";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, -4, -2, -4, -2, -2, -8, -12, 2, -6, -4, 10, -4, -14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 816.2-d";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -8, 2, 2, -6, -8, 0, -12, 6, 10, 6, -14, -6, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 816.3-a";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 1, -8, -3, -8, 2, -1, 8, -10, 6, -4, 0, -6, -9, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 816.3-b";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 4, 2, 2, 2, 4, -4, -2, 6, -2, -2, -2, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 816.3-c";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, -2, -4, -4, -2, -2, -12, -8, 2, -4, -6, -4, 10, -2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 816.3-d";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 2, -8, 2, -8, -6, -12, 0, 6, 6, 10, -6, -14, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 823.1-a";
N := (16*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 1, -5, -8, -8, -2, 6, -2, -10, 1, -6, -4, -3, -9, 8, -11, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 823.2-a";
N := (16*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 1, -8, -5, -2, -8, 6, -10, -2, -6, 1, -4, -9, -3, -11, 8, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-a";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, 8, -6, -2, -2, 4, -4, 2, 6, 14, -2, 14, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-b";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -7, 9, -3, 4, -3, 3, 10, -12, -4, 6, -14, -11, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-c";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 6, 4, -9, 9, 5, -7, -1, 6, -9, 1, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-d";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 7, 2, 4, -3, -3, -11, -11, -5, 10, -1, 7, -4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-e";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 0, -3, 2, 8, -1, -3, -9, 9, -3, 6, -7, -1, 4, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-f";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -5, 2, 4, 9, 7, -9, 5, 1, -2, -1, 7, 0, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-g";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 7, -2, 4, 3, 3, -1, 1, -3, -14, -1, -7, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-h";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -5, -3, -3, -7, 4, -3, -9, -6, 12, -4, -2, -6, -11, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-i";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, -3, 1, 0, -9, 5, -10, -4, 0, -6, 10, 7, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-j";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 5, -3, -1, 4, -3, 11, -10, -4, 8, -6, 2, -5, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.1-k";
N := (-18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, -8, -6, 2, 2, 4, 4, 10, 10, -6, 2, 6, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.3-a";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 6, 0, 2, 0, 0, -4, 2, 2, -6, 0, -10, 8, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.3-b";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, -5, -4, -3, 2, -8, -5, -9, 1, 12, -14, -10, 10, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.3-c";
N := (2*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 0, 4, 2, 8, 0, -4, -6, -8, -2, 10, -6, 2, 6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.4-a";
N := (-16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -1, 5, -3, 2, 7, -11, -4, 2, 6, -4, -10, 13, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.4-b";
N := (-16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -6, 0, 2, 0, 0, 2, -4, 2, 0, 6, 8, -10, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.4-c";
N := (-16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 5, -3, 4, -3, 8, -2, -9, -5, 1, 14, -12, 10, -10, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.4-d";
N := (-16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 1, -3, 1, -9, -8, -5, -9, -8, -8, 10, 0, -4, 1, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.4-e";
N := (-16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -3, 1, 9, 8, -5, -9, -8, -8, -10, 0, 4, -1, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.4-f";
N := (-16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 6, 0, -2, 6, -6, 8, 8, 8, 0, 6, 4, 10, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.4-g";
N := (-16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, -8, 6, 2, -2, 12, 4, -2, 14, 6, -2, 2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.4-h";
N := (-16*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -7, 3, 3, -3, -1, -6, 3, 5, -4, -10, -6, 12, -10, -1, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-a";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 8, -6, -2, -2, -4, 4, 2, 14, 6, 14, -2, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-b";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -7, 3, 9, -3, -3, 4, 10, 3, -12, 6, -4, -11, -14, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-c";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 6, 4, 9, -9, -7, 5, -1, -9, 6, -8, 1, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-d";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 7, -4, 2, 4, -3, -3, -11, -11, -5, -1, 10, -4, 7, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-e";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -3, 0, 2, 8, -3, -1, 9, -9, -3, -7, 6, 4, -1, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-f";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 0, 2, 4, 7, 9, 5, -9, 1, -1, -2, 0, 7, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-g";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 7, 4, -2, 4, 3, 3, 1, -1, -3, -1, -14, 4, -7, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-h";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -3, -5, -3, -7, -3, 4, -6, -9, 12, -2, -4, -11, -6, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-i";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 3, -3, 1, -9, 0, -10, 5, -4, -6, 0, 7, 10, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-j";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 5, -3, -1, -3, 4, -10, 11, -4, -6, 8, -5, 2, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.2-k";
N := (18*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, -8, -6, 2, 2, 4, 4, 10, -6, 10, 6, 2, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.6-a";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 6, 0, 2, 0, 0, 2, -4, 2, 0, -6, 8, -10, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.6-b";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -5, 3, -4, -3, -8, 2, -9, -5, 1, -14, 12, 10, -10, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.6-c";
N := (2*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 2, 4, 2, 0, 8, -6, -4, -8, 10, -2, 2, -6, 16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.5-a";
N := (-16*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -3, 5, -3, 7, 2, -4, -11, 2, -4, 6, 13, -10, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.5-b";
N := (-16*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -6, 0, 2, 0, 0, -4, 2, 2, 6, 0, -10, 8, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.5-c";
N := (-16*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -3, 5, 4, -3, -2, 8, -5, -9, 1, -12, 14, -10, 10, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.5-d";
N := (-16*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 1, 1, -9, -5, -8, -8, -9, -8, 0, 10, 1, -4, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.5-e";
N := (-16*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, -1, 1, 9, -5, 8, -8, -9, -8, 0, -10, -1, 4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.5-f";
N := (-16*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 0, 0, -2, -6, 6, 8, 8, 8, 6, 0, 10, 4, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.5-g";
N := (-16*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 2, -8, 6, -2, 2, 4, 12, -2, 6, 14, 2, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 828.5-h";
N := (-16*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -7, 3, 3, -3, -1, 3, -6, -4, 5, -10, 12, -6, -1, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 829.1-a";
N := (17*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, -1, 3, -5, -6, -1, -9, -4, 6, -12, -2, 2, 6, -6, -6, 4, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 829.2-a";
N := (17*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, -1, -5, 3, -1, -6, -9, 6, -4, -2, -12, 2, -6, 6, 4, -6, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 831.1-a";
N := (-19*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, 2, -6, -8, 8, -6, -2, 10, -4, -8, 2, -2, 6, 14, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 831.1-b";
N := (-19*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 6, 0, 4, 4, -7, 6, -6, -1, 9, 10, -8, 0, -10, -5, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 831.1-c";
N := (-19*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, -4, 3, -5, 5, -6, -8, -2, 8, -11, -1, 1, 0, -7, -2, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 831.4-a";
N := (-19*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, -6, 2, 8, -8, -6, 10, -2, -8, -4, 2, 6, -2, -2, 14, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 831.4-b";
N := (-19*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 0, 6, 4, 4, -7, -6, 6, 9, -1, 10, 0, -8, -5, -10, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 831.4-c";
N := (-19*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, 3, -4, 5, -5, -6, -2, -8, -11, 8, -1, 0, 1, -2, -7, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 832.1-a";
N := (-16*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -3, -3, 4, 4, -9, -6, -6, -1, -1, 11, -12, -12, 0, 0, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 833.1-a";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -6, 0, 5, -3, 1, -1, 3, -11, -7, 3, -1, -4, -12, 7, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 833.2-a";
N := (7*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -6, 0, -3, 5, 1, 3, -1, -7, -11, -1, 3, -12, -4, -9, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 841.1-a";
N := (29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, 7, -6, -6, -6, -6, 7, -1, -1, 14, 9, 9, 10, 10, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 841.1-b";
N := (29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 1, -2, 6, 6, 0, 0, 10, -10, -10, 14, -6, -6, -14, -14, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 841.2-a";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -2, -6, -6, -6, -9, 1, 0, 1, -10, -4, 3, -6, -7, 1, 14, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 841.2-b";
N := (-3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, -2, -6, 6, -6, -9, 1, 0, -1, -10, -4, -3, 6, 7, 1, -14, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 841.3-a";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, -2, -6, -6, -9, -6, 1, 0, -10, 1, -4, -6, 3, 1, -7, 1, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 841.3-b";
N := (3*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, -2, 6, -6, -9, -6, 1, 0, -10, -1, -4, 6, -3, 1, 7, 1, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 844.1-a";
N := (-6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -5, 0, -3, -3, 6, 10, 9, -6, 8, -1, -4, 6, 12, 1, 10, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 844.2-a";
N := (6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -5, -3, 0, 6, -3, 10, -6, 9, -1, 8, -4, 12, 6, 10, 1, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.1-a";
N := (4*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 1, 8, -6, -9, 2, -8, 6, -6, -5, 8, 9, -3, -13, -4, -7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 848.2-a";
N := (4*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -6, 8, 2, -9, -8, -6, 6, 8, -5, 9, -3, -4, -13, -10, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 849.1-a";
N := (-17*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 4, 0, 4, -4, 6, 8, -6, -4, -10, -2, -6, 6, 6, 10, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 849.2-a";
N := (-5*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -3, -3, -4, 7, 1, 9, 6, 4, 2, -2, 10, -10, -6, 2, -1, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 849.2-b";
N := (-5*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, -3, -6, 6, -9, 1, 6, 6, -1, 8, 5, -3, -3, -8, -8, -17, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 849.4-a";
N := (17*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 0, 4, -4, 4, 6, -6, 8, -10, -4, -2, 6, -6, 10, 6, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 849.3-a";
N := (-5*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -3, -3, 7, -4, 1, 6, 9, 2, 4, -2, -10, 10, 2, -6, -14, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 849.3-b";
N := (-5*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, -6, -3, -9, 6, 1, 6, 6, 8, -1, 5, -3, -3, -8, -8, -8, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.1-a";
N := (-17*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 4, -6, 8, 4, -2, -2, -8, 4, -4, 0, 4, 14, 14, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.1-b";
N := (-17*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -4, 8, 6, 6, -2, 4, -4, 6, -6, -6, -2, 6, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.1-c";
N := (-17*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 6, 0, -4, 6, 6, 8, -4, -4, 0, 12, -10, -10, -10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.1-d";
N := (-17*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -4, 0, -2, -10, -2, 4, -4, -2, 2, 2, -2, -10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.3-a";
N := (w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -1, -4, -1, -8, 0, -9, -4, -12, -4, 4, 12, -12, -3, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.3-b";
N := (w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -3, 0, -9, 8, 6, 3, -8, -2, 10, -12, 0, -10, 7, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.3-c";
N := (w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -3, 0, 0, 4, 3, -6, -1, 8, -4, -6, 9, -8, -8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.3-d";
N := (w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, -3, 0, 0, -4, -3, -6, 1, -8, 4, 6, -9, 8, -8, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.3-e";
N := (w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, -1, 4, -1, 8, 0, -9, 4, 12, 4, -4, -12, 12, -3, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.4-a";
N := (19*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -6, -2, -6, 8, 4, 4, 6, 0, -6, 4, -6, 4, 12, 10, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.4-b";
N := (19*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -6, 4, 0, 2, -2, -2, -4, -8, 2, 10, -2, -10, -10, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.4-c";
N := (19*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 6, 6, 0, 8, 0, 6, -8, -2, -8, -6, 0, 8, -14, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.2-a";
N := (-17*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 4, 8, -6, 4, -2, -2, 4, -8, -4, 4, 0, 14, 14, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.2-b";
N := (-17*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 8, -4, 6, -2, 6, -4, 4, 6, -6, -6, 6, -2, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.2-c";
N := (-17*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 0, 6, -4, 6, 6, -4, 8, -4, 12, 0, -10, -10, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.2-d";
N := (-17*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, 0, -4, -2, -2, -10, -4, 4, -2, 2, 2, -10, -2, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.6-a";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -1, -1, -4, -8, -9, 0, -12, -4, -4, 12, 4, -3, -12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.6-b";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -3, -9, 0, 8, 3, 6, -2, -8, 10, 0, -12, 7, -10, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.6-c";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -3, 0, 0, 4, -6, 3, 8, -1, -4, 9, -6, -8, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.6-d";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, -3, 0, 0, -4, -6, -3, -8, 1, 4, -9, 6, -8, 8, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.6-e";
N := (w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, -1, -1, 4, 8, -9, 0, 12, 4, 4, -12, -4, -3, 12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.5-a";
N := (-19*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -6, -2, 8, -6, 4, 6, 4, -6, 0, 4, 4, -6, 10, 12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.5-b";
N := (-19*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -6, 0, 4, 2, -2, -2, -8, -4, 2, -2, 10, -10, -10, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 867.5-c";
N := (-19*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 6, 0, 6, 8, 6, 0, -2, -8, -8, 0, -6, -14, 8, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.1-a";
N := (18*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, -2, 3, -1, 8, 1, -2, 6, 5, -2, 8, -6, 5, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 884.2-a";
N := (18*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, 3, -2, -1, 1, 8, 6, -2, 5, 8, -2, 5, -6, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 887.1-a";
N := (-2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -4, -7, -4, -4, 3, -8, -8, 2, 1, -1, -1, -6, -13, 3, 10, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 887.2-a";
N := (2*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -4, -4, -7, 3, -4, -8, 2, -8, -1, 1, -1, -13, -6, 10, 3, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 897.1-a";
N := (-7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -2, -4, 2, -8, 0, 2, -4, -8, 6, -6, -6, -2, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 897.2-a";
N := (17*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 6, -8, 6, -2, -2, 0, -8, 10, 10, 6, 2, -2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 897.4-a";
N := (7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 0, -4, 2, 0, -8, -4, 2, -8, -6, 6, -2, -6, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 897.3-a";
N := (17*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, -2, -8, 6, -2, -2, -8, 0, 10, 6, 10, -2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-a";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 4, 4, 6, 6, 4, 4, -12, -12, 14, -2, -2, -10, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-b";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 6, 0, 0, -6, -6, -4, -4, 2, -6, -6, -10, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-c";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, -4, 4, 2, -6, -4, 12, 2, 6, 6, -10, 6, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-d";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -2, 4, -4, -6, 2, 12, -4, 2, 6, 6, 6, -10, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-e";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, -6, 2, 2, -6, 0, -8, -2, 0, -8, -6, -6, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-f";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, -6, 6, 6, -6, -6, 8, 8, 14, -12, -12, 10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-g";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, 2, -6, -6, 2, -8, 0, -2, -8, 0, -6, -6, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-h";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -6, -8, 0, -2, -2, -4, 4, 2, -2, -2, -2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.1-i";
N := (30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -6, 0, -8, -2, -2, 4, -4, 2, -2, -2, -2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-a";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 4, -4, -2, 6, 6, -2, -8, -10, 2, 10, 2, -2, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-b";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 4, 6, 4, -2, 6, -10, 4, -2, 12, -8, -10, 14, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.2-c";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -6, 6, 0, 0, 6, -6, -10, -10, 14, 0, 0, -10, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-a";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 4, 4, -2, -4, 6, 6, -8, -2, -10, 10, 2, -2, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-b";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 0, 4, 6, 6, -2, 4, -10, -2, -8, 12, 14, -10, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 900.3-c";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 6, -6, 0, 0, -6, 6, -10, -10, 14, 0, 0, -10, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 901.1-a";
N := (-3*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 0, 5, 3, -2, 4, -7, -6, -12, -2, 2, -8, -1, -14, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 901.1-b";
N := (-3*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, -1, 4, 6, -5, 4, 2, 6, -8, -11, -5, 13, 12, -5, 2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 901.2-a";
N := (19*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -5, -6, -7, -6, 6, -4, 0, -9, -8, -5, -9, -5, 6, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 901.4-a";
N := (3*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 0, 5, -2, 3, 4, -6, -7, -2, -12, 2, -8, -14, -1, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 901.4-b";
N := (3*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, -1, 4, -5, 6, 4, 6, 2, -11, -8, -5, 13, -5, 12, 5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 901.3-a";
N := (-19*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, -5, -6, -6, -7, 6, 0, -4, -8, -9, -5, -9, 6, -5, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 909.1-a";
N := (-18*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -6, 6, -4, 0, 2, -6, 10, -4, 8, -10, -2, 6, 6, 2, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 909.1-b";
N := (-18*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 2, 4, 8, 2, -2, 6, 8, -8, -6, 6, -2, 6, -14, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 909.3-a";
N := (-4*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -6, 4, -8, 0, 2, 0, -8, -2, -8, 4, 6, -2, -2, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 909.4-a";
N := (-17*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 2, -6, 0, 0, -2, 10, 6, 4, -8, -2, 10, -10, 2, -14, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 909.4-b";
N := (-17*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -6, 4, -2, 8, -8, 2, -10, -6, -4, 10, -12, 6, 2, -6, -2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 909.2-a";
N := (18*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 6, -6, 0, -4, 2, 10, -6, 8, -4, -10, 6, -2, 2, 6, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 909.2-b";
N := (18*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 2, 8, 4, 2, 6, -2, -8, 8, -6, -2, 6, -14, 6, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 909.6-a";
N := (4*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 4, -6, 0, -8, 2, -8, 0, -8, -2, 4, -2, 6, 2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 909.5-a";
N := (-17*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -6, 2, 0, 0, -2, 6, 10, -8, 4, -2, -10, 10, -14, 2, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 909.5-b";
N := (-17*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -6, -2, 4, -8, 8, 2, -6, -10, 10, -4, -12, 2, 6, -2, -6, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 911.1-a";
N := (-5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -3, 0, 8, 2, 4, 0, 2, -8, -6, -4, 10, 12, 6, -6, -2, 2, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 911.2-a";
N := (5*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -3, 0, 2, 8, 0, 4, 2, -6, -8, 10, -4, 12, -6, 6, 2, -2, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 919.1-a";
N := (17*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 2, -4, 5, -3, 9, 0, -1, 8, 6, -8, -4, -2, 9, 0, 8, 0, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 919.2-a";
N := (17*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -4, -3, 5, 0, 9, -1, 6, 8, -4, -8, -2, 0, 9, 0, 8, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-a";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, -2, -2, -4, 0, -6, -10, 6, 4, -8, 2, -2, -10, -10, 14, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-b";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, -6, 8, 0, 2, -2, -2, -4, -4, -14, 6, 6, 6, -10, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-c";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 1, -1, -3, 3, -2, 8, 0, 11, -12, -2, 11, 12, 4, 2, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-d";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -2, 6, -2, -8, -2, 4, -8, -4, -8, -10, 4, 6, 6, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-e";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 0, 0, -6, -6, -6, -12, -8, 10, -6, 6, -2, 6, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-f";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 7, -3, -5, 1, -2, -8, 4, -13, -8, -10, -11, -12, 12, -2, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-g";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 3, -1, -9, 3, -2, -4, -4, -5, -4, 6, 1, -8, 4, -14, -14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-h";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 2, -8, -8, 2, -2, -2, 12, 12, -14, -2, -10, 6, -10, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-i";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -7, -3, -1, -7, -5, -8, 8, -2, -9, 6, -14, 11, -4, 6, 10, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.1-j";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -3, 5, 1, 1, -4, 4, 10, -9, -6, -14, -5, 8, -6, -10, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.3-a";
N := (w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 4, -2, 6, 6, -4, 2, 6, -4, -6, 10, -10, 6, -4, 4, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.3-b";
N := (w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -5, -6, 4, -7, 5, 2, -1, -1, 0, -9, -5, 2, -11, -6, -4, 9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.3-c";
N := (w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, -2, 4, 3, 3, 2, -1, 3, -4, -3, -5, 14, 9, 14, -8, -9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.4-a";
N := (-17*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -8, 0, -4, 6, -6, -2, 6, 2, -4, -6, 10, 6, -10, -6, -16, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-a";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, -2, -2, 0, -4, -6, 6, -10, -8, 4, 2, -10, -2, 14, -10, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-b";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -6, 2, 0, 8, 2, -2, -2, -4, -4, -14, 6, 6, -10, 6, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-c";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, 1, 3, -3, -2, 0, 8, -12, 11, -2, 12, 11, 2, 4, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-d";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 6, -2, -8, -2, -2, -8, 4, -8, -4, -10, 6, 4, -2, 6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-e";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 0, 0, -6, -6, -6, -8, -12, 10, 6, -6, 6, -2, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-f";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -3, 7, 1, -5, -2, 4, -8, -8, -13, -10, -12, -11, -2, 12, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-g";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -1, 3, 3, -9, -2, -4, -4, -4, -5, 6, -8, 1, -14, 4, 2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-h";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, -8, -8, 2, -2, -2, 12, 12, -14, -10, -2, -10, 6, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-i";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -7, -1, -3, -5, -7, -8, -2, 8, 6, -9, -14, -4, 11, 10, 6, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.2-j";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 5, -3, 1, 1, -4, 10, 4, -6, -9, -14, 8, -5, -10, -6, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.6-a";
N := (w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, -2, 4, 6, 6, -4, 6, 2, -6, -4, 10, 6, -10, 4, -4, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.6-b";
N := (w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -5, 4, -6, 5, -7, 2, -1, -1, -9, 0, -5, -11, 2, -4, -6, 5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.6-c";
N := (w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, 4, -2, 3, 3, 2, 3, -1, -3, -4, -5, 9, 14, -8, 14, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 927.5-a";
N := (17*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 0, -8, 6, -4, -6, 6, -2, -4, 2, -6, 6, 10, -6, -10, -14, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.1-a";
N := (19*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, 3, 3, 0, 5, 4, -1, 1, -7, -11, -10, 13, 2, 4, -1, -14, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.2-a";
N := (-17*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 5, 0, -6, -2, -9, 4, 4, -8, -9, -5, -2, 6, -10, -9, -10, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.2-b";
N := (-17*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 4, 2, -4, 0, 2, 4, -6, 0, -8, -10, 10, 6, 6, 2, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.2-c";
N := (-17*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, 4, -6, 6, -3, -8, 8, 4, -11, 7, -10, 2, -6, 13, -6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.2-d";
N := (-17*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 2, -2, 0, 0, -5, 3, -8, 10, -2, 10, 4, -10, -12, -5, -11, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.2-e";
N := (-17*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 6, 2, 0, -8, 10, -6, -10, 4, 4, -6, 6, 6, -10, -2, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.2-f";
N := (-17*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -4, 2, 6, -8, 0, 3, 7, 0, 2, 6, 2, 12, -2, 4, 11, -7, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.4-a";
N := (19*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, 3, 3, 5, 0, 4, 1, -1, -11, -7, -10, 2, 13, -1, 4, -11, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.3-a";
N := (-17*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 5, -6, 0, -9, -2, 4, -8, 4, -5, -9, -2, -10, 6, -10, -9, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.3-b";
N := (-17*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 2, 4, 0, -4, 2, -6, 4, -8, 0, -10, 6, 10, 2, 6, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.3-c";
N := (-17*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, -6, 4, -3, 6, -8, 4, 8, 7, -11, -10, -6, 2, -6, 13, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.3-d";
N := (-17*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, -2, 2, 0, 0, -5, -8, 3, -2, 10, 10, -10, 4, -5, -12, -2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.3-e";
N := (-17*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 2, 6, -8, 0, 10, -10, -6, 4, 4, -6, 6, 6, -2, -10, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 933.3-f";
N := (-17*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -4, 6, 2, 0, -8, 3, 0, 7, 6, 2, 2, -2, 12, 11, 4, 14, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.1-a";
N := (-17*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, 6, 2, -2, -6, 8, 6, -6, 6, 4, 2, 12, 2, 6, 14, -6, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 937.2-a";
N := (17*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, 6, -2, 2, 8, -6, 6, 6, -6, 2, 4, 12, 6, 2, -6, 14, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 939.2-a";
N := (20*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 4, -8, 0, 3, -3, 3, -4, 5, 0, 4, -6, -7, 9, 0, 6, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 939.2-b";
N := (20*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 5, 1, -3, -1, -4, -7, -6, -4, 1, -12, -5, 1, 6, -4, -11, -10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 939.2-c";
N := (20*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, 0, 0, -3, -3, 1, 0, 3, 8, -4, 2, 9, 3, -8, 10, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 939.2-d";
N := (20*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 4, 4, -9, -5, -7, -4, 7, -8, -4, 6, 9, 3, -8, -14, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 939.2-e";
N := (20*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 0, 2, -2, 8, -8, 8, -6, 4, 10, -4, 6, 0, 10, 4, 16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 939.3-a";
N := (-20*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 4, 0, -8, -3, 3, 3, 5, -4, 4, 0, -6, 9, -7, 6, 0, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 939.3-b";
N := (-20*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 5, -3, 1, -4, -1, -7, -4, -6, -12, 1, -5, 6, 1, -11, -4, 16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 939.3-c";
N := (-20*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, 0, 0, -3, -3, 1, 3, 0, -4, 8, 2, 3, 9, 10, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 939.3-d";
N := (-20*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 4, 4, -5, -9, -7, 7, -4, -4, -8, 6, 3, 9, -14, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 939.3-e";
N := (-20*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 2, 0, 8, -2, -8, -6, 8, 10, 4, -4, 0, 6, 4, 10, 14, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.1-a";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 6, -4, 2, -6, 2, 0, 8, 4, 8, 2, -6, -6, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.1-b";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -6, -2, 4, 0, -2, 10, 4, 12, -6, -10, 12, -14, -2, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.1-c";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, 0, 6, -4, 2, 4, -8, 0, -7, 4, 8, -3, 9, -1, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.1-d";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, -2, -6, 6, -6, 6, -8, -8, -4, -4, -12, -6, -2, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.1-e";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -6, -6, -6, 2, -6, 6, -4, -10, -4, -6, -6, -10, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.1-f";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 8, -2, 4, -6, -4, 0, 0, 9, 4, 0, 9, 9, 7, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.1-g";
N := (2*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, -6, 0, 4, -6, -10, -6, 4, -4, -10, -2, -10, -2, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.2-a";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, -7, -6, 4, -4, 5, 5, -11, 4, -10, -6, -6, 2, 7, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.2-b";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, -6, -4, -2, 6, 2, -6, -12, 4, -6, -4, 8, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.2-c";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, 1, -4, -8, -2, -3, -7, -5, -2, 2, 4, -4, 6, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.2-d";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -3, 2, 4, -8, -5, -9, -9, 4, -10, 6, -2, -2, 5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.2-e";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -2, -3, 6, -4, 4, 3, -1, 3, 0, -2, -6, 2, -10, 5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.4-a";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 6, 0, 2, -4, -6, 0, 2, 4, 8, 8, -6, 2, -6, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.4-b";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, -6, 0, 4, -2, 4, 10, -6, 12, -10, -14, 12, 12, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.4-c";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, 6, 0, 2, -4, 4, 0, -8, 4, -7, 8, 9, -3, 4, -1, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.4-d";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, -4, 6, -6, -6, -8, 6, -4, -8, -4, -6, -12, 6, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.4-e";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 0, -6, -6, 2, 6, -6, -10, -4, -4, -6, -6, 8, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.4-f";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, 8, -6, 4, -4, 0, 0, 4, 9, 0, 9, 9, 12, 7, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.4-g";
N := (2*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 6, 4, 0, -6, -6, -10, -4, 4, -10, -10, -2, -10, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.3-a";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -7, -2, 4, -6, -4, 5, 5, 4, -11, -10, -6, -6, 7, 2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.3-b";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -2, -4, -6, -2, 2, 6, -12, -6, 4, -4, -6, -10, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.3-c";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, -6, -8, -4, -2, -7, -3, -2, -5, 2, -4, 4, -5, 6, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.3-d";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, -2, 4, 2, -8, -9, -5, 4, -9, -10, -2, 6, 5, -2, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 948.3-e";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -3, -2, -4, 6, 4, -1, 3, 0, 3, -2, 2, -6, 5, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 953.1-a";
N := (-18*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -4, -3, -6, -4, 0, -4, -6, 4, -8, -1, -9, -8, -6, -7, 2, 4, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 953.2-a";
N := (18*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, -4, -6, -3, 0, -4, -4, 4, -6, -1, -8, -9, -6, -8, 2, -7, -15, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 961.1-a";
N := (31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -4, -2, -2, -4, -4, -6, 8, 8, 4, 4, 10, -4, -4, 10, 10, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.1-a";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 2, 0, 0, 6, 10, -2, 4, 0, -6, -6, 6, 6, -10, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.1-b";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 2, 4, 7, 2, -10, -8, -8, 10, 1, -13, 5, -7, -1, -8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.1-c";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -3, 3, 9, 6, -1, 0, -9, -7, 8, -10, -6, -3, 8, -10, -16, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.1-d";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 3, -2, 0, 1, -2, -6, -8, -12, -6, -11, 1, 3, 13, 3, 4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.1-e";
N := (3*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, -6, -4, -7, -2, -2, 0, -4, 6, -1, 1, -11, -5, -3, 4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.3-a";
N := (-19*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 2, 2, -4, 0, -6, -2, 2, -8, 4, -2, -2, 6, -14, -6, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.3-b";
N := (-19*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 3, -3, 6, -3, -1, 3, 0, 2, 5, 8, -3, -12, -4, 8, 11, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.3-c";
N := (-19*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -5, -7, -2, -3, 3, -1, -4, -8, 1, -2, 5, -6, 2, 12, -5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.4-a";
N := (7*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 4, 6, 4, 6, -2, 4, 6, 0, -12, -8, 6, -2, 12, -8, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.4-b";
N := (7*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 0, 0, 0, 6, 10, 0, 6, 2, -4, 8, 6, 6, -2, 10, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.4-c";
N := (7*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 6, 2, 0, -4, 6, -6, 2, 0, 4, 6, 6, -6, -6, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.4-d";
N := (7*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 4, -6, 4, -6, 2, 4, -6, 0, -12, -8, 6, 2, -12, 8, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.2-a";
N := (3*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -6, 0, 0, 6, -2, 10, 0, 4, -6, 6, -6, -10, 6, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.2-b";
N := (3*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, -3, 7, 4, 2, -8, -10, 10, -8, 1, 5, -13, -1, -7, 15, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.2-c";
N := (3*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, -3, 6, 9, -1, -9, 0, 8, -7, -10, -3, -6, -10, 8, -1, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.2-d";
N := (3*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, 3, 1, 0, -2, -8, -6, -6, -12, -11, 3, 1, 3, 13, -13, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.2-e";
N := (3*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -6, 1, -7, -4, -2, 0, -2, 6, -4, -1, -11, 1, -3, -5, -5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.6-a";
N := (-19*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 2, 2, 0, -4, -6, 2, -2, 4, -8, -2, 6, -2, -6, -14, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.6-b";
N := (-19*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -3, 3, -3, 6, -1, 0, 3, 5, 2, 8, -12, -3, 8, -4, 8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.6-c";
N := (-19*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -7, -5, -3, -2, 3, -4, -1, 1, -8, -2, -6, 5, 12, 2, -8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.5-a";
N := (7*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 6, 4, 6, 4, -2, 6, 4, -12, 0, -8, -2, 6, -8, 12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.5-b";
N := (7*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 0, 0, 6, 0, 10, 6, 0, -4, 2, 8, 6, 6, 10, -2, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.5-c";
N := (7*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 2, 6, -4, 0, 6, 2, -6, 4, 0, 6, -6, 6, 2, -6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 963.5-d";
N := (7*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -6, 4, -6, 4, 2, -6, 4, -12, 0, -8, 2, 6, 8, -12, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 971.1-a";
N := (-10*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, -2, 0, -6, -4, -6, 6, -6, 4, -12, -7, 5, 12, -10, -3, -13, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 971.2-a";
N := (10*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -3, -2, -6, 0, -6, -4, 6, 4, -6, -7, -12, 5, -10, 12, -13, -3, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-a";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -6, 0, -6, -7, 3, -3, -4, -10, -1, 3, -3, 8, 2, -1, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-b";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 3, -9, -3, -8, 3, 6, -1, -10, -4, -6, -6, 1, 1, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-c";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -3, -9, 3, 8, 3, -6, -1, -10, -4, -6, 6, -1, -1, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-d";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 2, 2, -3, -5, 1, 10, 4, 1, -3, -9, -10, 2, -15, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-e";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 6, 0, 6, 7, 3, 3, -4, -10, -1, 3, 3, -8, -2, 1, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-f";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 2, -2, 3, -5, -1, 10, 4, 1, -3, 9, 10, -2, 15, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-g";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -3, 3, -3, 2, 3, 0, -1, -4, 8, 12, 6, 11, -1, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-h";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, -6, 6, 1, -3, 3, -10, 8, 5, -9, 9, 10, 10, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-i";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, -6, -6, -1, -3, -3, -10, 8, 5, -9, -9, -10, -10, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-j";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 3, 3, 3, -2, 3, 0, -1, -4, 8, 12, -6, -11, 1, -2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-k";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 6, -6, -3, 3, 8, 0, 9, -10, -1, -4, -3, -6, -10, 8, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-l";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -6, 0, -6, 7, -3, -3, -4, -10, -1, -3, -3, -8, -2, 1, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-m";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 8, -1, -1, -1, 6, 7, -8, 7, 4, -8, -12, -6, 5, -7, 6, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-n";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 6, 0, 6, -7, -3, 3, -4, -10, -1, -3, 3, 8, 2, -1, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-o";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 6, 6, -3, -3, -8, 0, -9, -10, -1, -4, -3, 6, 10, -8, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.1-p";
N := (-18*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 8, 1, -1, 1, -6, 7, 8, 7, 4, -8, -12, 6, -5, 7, -6, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-a";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [7, 3, -6, 9, -6, 4, -6, 3, 8, 2, -1, 0, -3, 1, -5, -2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-b";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 3, 6, -3, -6, -4, 6, 9, -4, -10, -1, 12, -9, -13, -7, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-c";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 7, 4, 1, 4, 6, -4, -7, -2, -8, -11, 0, -3, -1, 5, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-d";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -5, -4, -8, 3, -2, -1, -8, -8, -5, -9, -9, -5, -2, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-e";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -3, -3, 0, 8, 3, 0, 11, -4, 8, -12, 6, -1, -1, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-f";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, -9, 3, -2, 0, 6, -10, -1, -4, 9, 12, -14, -8, 10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-g";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, 9, 3, 2, 0, 6, -10, -1, -4, -9, 12, 14, 8, -10, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-h";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -3, 3, 0, -8, -3, 0, 11, -4, 8, 12, 6, 1, 1, 4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-i";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -5, 4, -8, -3, 2, -1, -8, -8, -5, 9, -9, 5, 2, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-j";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -7, 4, -1, 4, -6, 4, -7, -2, -8, -11, 0, -3, 1, -5, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-k";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -3, 6, 3, -6, 4, -6, 9, -4, -10, -1, -12, -9, 13, 7, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.3-l";
N := (-6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-7, -3, -6, -9, -6, -4, 6, 3, 8, 2, -1, 0, -3, -1, 5, 2, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.5-a";
N := (4*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 6, -6, -6, -3, 4, 6, -6, 8, -4, 5, -3, 0, 7, 1, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.5-b";
N := (4*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 0, 6, 0, 3, 2, 6, -6, -10, 8, -1, 3, 6, -7, -13, 2, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.5-c";
N := (4*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 3, 0, 0, 0, -2, 6, 9, 8, -1, -10, -9, 0, -2, -5, 7, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.5-d";
N := (4*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -6, -3, -3, -8, -6, -9, -10, 11, 2, 9, -12, -11, -2, 13, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.5-e";
N := (4*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, 6, 0, 3, -2, -6, -6, -10, 8, -1, -3, 6, 7, 13, -2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.5-f";
N := (4*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, -3, -9, -6, 2, 6, 3, -10, -10, -10, -6, 6, 2, -4, -7, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.5-g";
N := (4*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -3, 0, 0, 0, 2, -6, 9, 8, -1, -10, 9, 0, 2, 5, -7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.5-h";
N := (4*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -6, 3, -3, 8, 6, -9, -10, 11, 2, -9, -12, 11, 2, -13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.5-i";
N := (4*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, -3, 9, -6, -2, -6, 3, -10, -10, -10, 6, 6, -2, 4, 7, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.5-j";
N := (4*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, -6, 6, -3, -4, -6, -6, 8, -4, 5, 3, 0, -7, -1, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-a";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -6, -6, 0, -7, -3, 3, -10, -4, -1, -3, 3, 2, 8, -7, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-b";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 3, -6, -3, -9, -8, 6, 3, -10, -1, -4, -6, -6, 1, 1, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-c";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -3, -6, 3, -9, 8, -6, 3, -10, -1, -4, 6, -6, -1, -1, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-d";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 2, 2, -3, 1, -5, 4, 10, 1, -9, -3, 2, -10, -3, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-e";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -6, 6, 0, 7, 3, 3, -10, -4, -1, 3, 3, -2, -8, 7, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-f";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, -2, 2, 3, -1, -5, 4, 10, 1, 9, -3, -2, 10, 3, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-g";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, -3, 3, 2, 0, 3, -4, -1, 8, 6, 12, -1, 11, -1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-h";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, 6, -6, 1, 3, -3, 8, -10, 5, 9, -9, 10, 10, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-i";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, -6, -6, -1, -3, -3, 8, -10, 5, -9, -9, -10, -10, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-j";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, 3, 3, -2, 0, 3, -4, -1, 8, -6, 12, 1, -11, 1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-k";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -6, 6, 3, -3, 8, 9, 0, -1, -10, -4, -6, -3, 8, -10, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-l";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 6, -6, 0, 7, -3, -3, -10, -4, -1, -3, -3, -2, -8, 7, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-m";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -1, 8, -1, -1, 6, -8, 7, 4, 7, -8, -6, -12, -7, 5, -15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-n";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 6, 6, 0, -7, 3, -3, -10, -4, -1, 3, -3, 2, 8, -7, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-o";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 6, 6, -3, -3, -8, -9, 0, -1, -10, -4, 6, -3, -8, 10, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.2-p";
N := (-18*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 1, 8, 1, -1, -6, 8, 7, 4, 7, -8, 6, -12, 7, -5, 15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-a";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [7, -6, 3, -6, 9, 4, 3, -6, 2, 8, -1, -3, 0, -5, 1, 10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-b";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 6, 3, -6, -3, -4, 9, 6, -10, -4, -1, -9, 12, -7, -13, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-c";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 7, 4, 1, 6, -7, -4, -8, -2, -11, -3, 0, 5, -1, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-d";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -5, -1, -8, -4, 3, -1, -2, -8, -8, -5, -9, -9, -2, -5, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-e";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, 0, -3, 8, 0, 3, -4, 11, 8, 6, -12, -1, -1, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-f";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 3, -9, -2, 6, 0, -1, -10, -4, 12, 9, -8, -14, 7, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-g";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, 3, 9, 2, 6, 0, -1, -10, -4, 12, -9, 8, 14, -7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-h";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, 0, 3, -8, 0, -3, -4, 11, 8, 6, 12, 1, 1, -5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-i";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, 1, -8, 4, -3, -1, 2, -8, -8, -5, -9, 9, 2, 5, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-j";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, -7, 4, -1, -6, -7, 4, -8, -2, -11, -3, 0, -5, 1, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-k";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 6, -3, -6, 3, 4, 9, -6, -10, -4, -1, -9, -12, 7, 13, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.4-l";
N := (6*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-7, -6, -3, -6, -9, -4, 3, 6, 2, 8, -1, -3, 0, 5, -1, -10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.6-a";
N := (-4*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -6, 6, -3, -6, 4, -6, 6, -4, 8, 5, 0, -3, 1, 7, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.6-b";
N := (-4*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 6, 0, 3, 0, 2, -6, 6, 8, -10, -1, 6, 3, -13, -7, -10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.6-c";
N := (-4*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 3, 0, 0, -2, 9, 6, -1, 8, -10, 0, -9, -5, -2, 10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.6-d";
N := (-4*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 6, -3, -3, -8, -9, -6, 11, -10, 2, -12, 9, -2, -11, 10, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.6-e";
N := (-4*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 6, 0, 3, 0, -2, -6, -6, 8, -10, -1, 6, -3, 13, 7, 10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.6-f";
N := (-4*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -3, 0, -6, -9, 2, 3, 6, -10, -10, -10, 6, -6, -4, 2, 17, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.6-g";
N := (-4*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, -3, 0, 0, 2, 9, -6, -1, 8, -10, 0, 9, 5, 2, -10, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.6-h";
N := (-4*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -6, -3, 3, 8, -9, 6, 11, -10, 2, -12, -9, 2, 11, -10, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.6-i";
N := (-4*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -3, 0, -6, 9, -2, 3, -6, -10, -10, -10, 6, 6, 4, -2, -17, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 972.6-j";
N := (-4*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, -6, -3, 6, -4, -6, -6, -4, 8, 5, 0, 3, -1, -7, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 976.1-a";
N := (-20*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 2, 0, 2, -8, 6, -4, 10, 8, 4, -12, -2, -10, 2, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 976.2-a";
N := (-20*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 0, 2, -8, 2, 6, 10, -4, 4, 8, -12, -10, -2, 2, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 989.1-a";
N := (w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -2, 0, -2, 4, 2, -8, 4, 2, -4, -6, -14, -14, 6, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 989.4-a";
N := (w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -2, -2, 0, 4, 2, 4, -8, 2, -4, -14, -6, 6, -14, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 997.1-a";
N := (9*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, 4, -1, -4, 6, -3, 2, 5, -6, -1, 4, 2, -4, 4, 10, -7, 2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 997.1-b";
N := (9*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, -2, 5, 2, 0, 0, -4, 5, -6, 2, 10, 11, 2, -8, -8, -13, -1, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 997.2-a";
N := (9*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, 4, -4, -1, -3, 6, 2, -6, 5, 4, -1, 2, 4, -4, -7, 10, -9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 997.2-b";
N := (9*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, -2, 2, 5, 0, 0, -4, -6, 5, 10, 2, 11, -8, 2, -13, -8, 12, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1004.1-a";
N := (-18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -4, -3, -3, 4, -6, -7, -6, 4, -3, -1, -3, -2, 8, -8, 4, 6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1004.1-b";
N := (-18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 6, -3, -3, -6, 4, -3, 4, 0, -1, 5, 5, -6, -4, -2, 0, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1004.1-c";
N := (-18*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, 5, -3, 0, 2, -7, 6, -4, 9, 11, -11, -2, -4, -8, -4, -2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1004.2-a";
N := (18*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -4, -3, -3, -6, 4, -7, 4, -6, -1, -3, -3, 8, -2, 4, -8, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1004.2-b";
N := (18*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 6, -3, -3, 4, -6, -3, 0, 4, 5, -1, 5, -4, -6, 0, -2, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1004.2-c";
N := (18*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -3, 5, 2, 0, -7, -4, 6, 11, 9, -11, -4, -2, -4, -8, 10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1011.2-a";
N := (-2*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 2, 2, 4, 2, -4, 4, 2, 4, 0, 10, -6, 0, 2, 8, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1011.2-b";
N := (-2*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -7, 0, -7, -4, -6, 2, -3, -6, -4, -4, -4, 3, -4, 1, -6, 4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1011.3-a";
N := (2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 2, 2, 2, 4, -4, 2, 4, 0, 4, 10, 0, -6, 8, 2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1011.3-b";
N := (2*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -7, -7, 0, -6, -4, 2, -6, -3, -4, -4, -4, -4, 3, -6, 1, 9, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.1-a";
N := (-18*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 0, 6, -7, -2, -9, 3, -3, 11, -5, 4, -5, -12, -2, -13, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.1-b";
N := (-18*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 2, -8, 8, 2, 2, -6, -4, 8, 10, -2, -2, -2, -2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.1-c";
N := (-18*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 2, -5, 2, -3, -3, -7, 7, -11, 12, -9, 0, 2, 1, -15, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.3-a";
N := (-8*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -2, -2, 0, -6, 4, 8, 2, 2, -4, 12, 10, -6, 6, -4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.3-b";
N := (-8*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, -2, 4, -2, -4, 4, 10, 10, 12, -4, 10, -6, 6, 8, 0, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.4-a";
N := (19*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 5, 2, -4, -6, -3, -1, -3, -5, -5, -9, 4, 4, -9, -5, -2, 4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.2-a";
N := (18*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 6, 0, -2, -7, -9, -3, 3, -5, 11, 4, -12, -5, -13, -2, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.2-b";
N := (18*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 6, 8, -8, 2, -6, 2, 8, -4, 10, -2, -2, -2, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.2-c";
N := (18*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 0, 2, -5, -3, -7, -3, -11, 7, 12, 0, -9, 1, 2, 4, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.6-a";
N := (8*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -2, 0, -2, 4, -6, 8, 2, 2, 12, -4, 10, 6, -6, 4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.6-b";
N := (8*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 4, -2, -4, -2, 4, 10, 10, -4, 12, 10, 6, -6, 0, 8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1017.5-a";
N := (19*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 5, -4, 2, -3, -6, -1, -5, -3, -9, -5, 4, -9, 4, -2, -5, 5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-a";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -2, -2, 0, 0, -6, 10, 10, 0, 0, 14, 14, 14, -10, -10, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-b";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 4, 5, 5, 6, -6, 1, 4, 4, -3, 3, -13, -2, -2, -12, -12, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-c";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 3, -5, -2, -6, 1, -4, 0, -7, 1, -3, -10, 2, 4, -8, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-d";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 3, -5, 2, 6, 1, -4, 0, 7, -1, -3, -10, 2, 4, -8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-e";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -5, 3, -6, -2, 1, 0, -4, 1, -7, -3, 2, -10, -8, 4, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-f";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -5, 3, 6, 2, 1, 0, -4, -1, 7, -3, 2, -10, -8, 4, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-g";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 5, -3, -6, 2, 1, 0, 4, -1, -7, 3, 2, -10, -8, 4, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-h";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -3, 5, 2, -6, 1, 4, 0, -7, -1, 3, -10, 2, 4, -8, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-i";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -4, -5, -5, 6, 6, 1, -4, -4, 3, 3, 13, -2, -2, -12, -12, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-j";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -4, -5, -5, -6, -6, 1, -4, -4, -3, -3, 13, -2, -2, -12, -12, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-k";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 4, 5, 5, -6, 6, 1, 4, 4, 3, -3, -13, -2, -2, -12, -12, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-l";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 2, 2, 0, 0, -6, -10, -10, 0, 0, -14, 14, 14, -10, -10, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-m";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 5, -3, 6, -2, 1, 0, 4, 1, 7, 3, 2, -10, -8, 4, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1024.1-n";
N := (32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -3, 5, -2, 6, 1, 4, 0, 7, 1, 3, -10, 2, 4, -8, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1027.1-a";
N := (-3*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, -6, -3, -6, -3, -4, 0, -9, -10, -4, -4, 6, -3, -7, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1027.2-a";
N := (3*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, -3, -6, -3, -6, -4, -9, 0, -4, -10, -4, -3, 6, 14, -7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1028.1-a";
N := (18*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -1, 4, -4, 0, -4, -6, 10, 9, -8, 8, 8, -5, 6, 11, -11, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1028.1-b";
N := (18*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 2, 2, 0, 8, 6, -4, 0, -8, 2, -10, -4, 6, 4, 8, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1028.1-c";
N := (18*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, 0, 0, 0, 0, -2, 6, -9, 8, 8, 8, 9, 6, 1, 7, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1028.2-a";
N := (18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -1, -4, 4, -4, 0, -6, 9, 10, 8, -8, 8, 6, -5, -11, 11, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1028.2-b";
N := (18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 2, 2, 8, 0, 6, 0, -4, 2, -8, -10, 6, -4, 8, 4, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1028.2-c";
N := (18*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 0, 0, 0, 0, -2, -9, 6, 8, 8, 8, 6, 9, 7, 1, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1031.1-a";
N := (7*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, -2, 6, 3, -2, 1, -1, 0, 2, 7, -8, 1, 6, 0, 4, -9, -17, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1031.1-b";
N := (7*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, 2, 2, -3, -2, 1, 7, 4, 6, 7, 4, -1, -6, -8, 0, 7, 1, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1031.1-c";
N := (7*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 1, -7, 0, -5, -4, -7, -2, 3, -11, 1, 8, -12, -4, 0, -7, 8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1031.2-a";
N := (7*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, -2, 3, 6, 1, -2, -1, 2, 0, -8, 7, 1, 0, 6, -9, 4, -3, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1031.2-b";
N := (7*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -1, 2, -3, 2, 1, -2, 7, 6, 4, 4, 7, -1, -8, -6, 7, 0, -3, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1031.2-c";
N := (7*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 1, 0, -7, -4, -5, -7, 3, -2, 1, -11, 8, -4, -12, -7, 0, -15, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1037.1-a";
N := (-4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 6, 3, -6, 3, -2, -4, -1, -12, 6, 8, 12, 6, -7, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1037.1-b";
N := (-4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, -2, -3, -3, -3, 4, -6, 3, -1, -10, -10, 6, 3, -5, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1037.4-a";
N := (4*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 6, 3, 3, -6, -2, -1, -4, 6, -12, 8, 6, 12, -7, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1037.4-b";
N := (4*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, -2, -3, -3, -3, 4, 3, -6, -10, -1, -10, 3, 6, -5, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1039.1-a";
N := (-6*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -1, 6, -6, 4, -4, -4, 1, -2, 3, -2, -1, -4, -10, -3, -2, 1, 5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1039.2-a";
N := (6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -1, 6, 4, -6, -4, -4, 1, 3, -2, -1, -2, -4, -3, -10, 1, -2, 2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1041.2-a";
N := (19*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 6, 4, -8, 7, 9, -4, 7, -10, -11, 10, -12, 9, 2, -10, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1041.2-b";
N := (19*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, 3, 1, 0, 1, -7, 5, 8, -6, -8, -8, 12, 3, -12, 8, -6, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1041.3-a";
N := (19*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 4, 6, 7, -8, 9, 7, -4, -11, -10, 10, 9, -12, -10, 2, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1041.3-b";
N := (19*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, 1, 3, 1, 0, -7, 8, 5, -8, -6, -8, 3, 12, 8, -12, -1, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-a";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 8, -2, -6, 4, -4, 0, -6, 4, 10, 14, -6, 2, 2, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-b";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 3, -3, 9, 7, 0, 2, -1, -1, -6, 0, -5, 4, -5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-c";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 5, 3, -7, 5, 4, 6, -9, -13, 10, -4, 7, 0, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-d";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -2, 6, -8, 8, -8, -2, 4, -6, -10, 6, 10, -10, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-e";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -6, -8, 4, -4, 6, -8, -2, -2, -8, -6, -4, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-f";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -2, 0, -4, 2, -6, 8, -4, 10, 2, 10, 2, 2, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-g";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 3, 9, -1, 1, 0, -6, -1, -5, -6, 4, -13, 12, -5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-h";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -6, 6, 0, -8, 0, -10, -4, 2, 6, -6, -14, 10, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-i";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 6, 0, 0, -2, 6, -4, -4, 2, -6, 6, 10, -2, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-j";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -2, 2, -4, -8, -4, -2, 4, -6, 2, -2, -2, -10, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-k";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 2, -4, 0, 2, -6, -8, -12, -14, 10, -14, 2, -6, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.1-l";
N := (-18*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -8, -4, -6, 2, -8, -4, -6, -6, 10, 2, -6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.3-a";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 8, -4, 8, 0, -2, 6, -4, -4, -6, 0, -6, -8, 10, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.3-b";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 3, 7, 4, 6, -1, -10, -11, 9, -5, 4, -4, -2, -12, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.3-c";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, 1, -2, -6, -4, 2, -5, -9, -8, -2, 5, 4, 3, -11, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.3-d";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -7, -3, -6, -4, 4, -10, -1, -1, -10, 4, -9, 8, 13, -5, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.3-e";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, 3, 6, 0, 8, -6, 11, -7, -10, 0, 3, 8, -7, 17, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.3-f";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, -1, -2, 6, 4, 2, -5, -9, -8, -2, -5, -4, -3, 11, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-a";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -3, -7, -4, -6, -1, 10, -11, 9, -5, -4, 4, -2, -12, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-b";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 7, 3, -3, 4, 3, 2, -2, -12, -12, 1, 2, -9, -13, 8, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-c";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -3, -7, -4, -1, -6, -10, 4, 4, 5, 6, -1, -7, -12, 10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-d";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 3, -7, 8, 3, 2, -2, 4, -12, -11, 2, -11, -11, 0, 10, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-e";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, -3, -6, 9, -2, 6, 2, -4, 5, 0, 3, 1, -8, -8, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-f";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, -3, 6, 9, 2, -6, 2, -4, 5, 0, 3, -1, 8, 8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-g";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 7, -1, -2, -9, -8, 8, -6, -12, -1, 4, -5, -15, -10, -8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-h";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 7, 3, 6, -1, 4, 0, -6, 4, -5, -4, -11, 3, -2, 0, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-i";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, 5, 2, -3, 2, 10, 10, -12, -11, 8, 1, -5, 12, -8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-j";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, -4, -4, 6, 2, 4, 10, -10, -6, -4, -4, 6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-k";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -3, 3, 6, 3, 4, 0, -10, -4, 11, 0, -3, 1, -14, 4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.4-l";
N := (20*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, 5, -2, -3, -2, -10, 10, -12, -11, -8, 1, 5, -12, 8, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-a";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 8, 4, -6, -4, 0, 4, -6, 10, -6, 14, 2, 2, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-b";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 3, 6, 9, -3, 7, 0, -1, 2, -1, 0, -6, 4, -5, 4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-c";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 5, 2, -7, 3, 5, 4, -9, 6, -13, -4, 10, 0, 7, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-d";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 4, -8, 6, 8, -8, 4, -2, -6, 6, -10, -10, 10, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-e";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -8, -6, 4, -4, -8, 6, -2, -8, -2, -4, -6, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-f";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 2, -4, 0, 2, -6, -4, 8, 10, 10, 2, 2, 2, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-g";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 3, -2, -1, 9, 1, 0, -1, -6, -5, 4, -6, 12, -13, 0, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-h";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 0, 0, 6, -8, 0, -4, -10, 2, -6, 6, 10, -14, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-i";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -6, 0, 0, -2, 6, -4, -4, 2, 6, -6, -2, 10, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-j";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -4, -4, 2, -8, -4, 4, -2, -6, -2, 2, -10, -2, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-k";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, 0, -4, 2, -6, -12, -8, -14, -14, 10, -6, 2, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.2-l";
N := (18*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -4, -8, -6, 2, -4, -8, -6, 10, -6, -6, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.6-a";
N := (10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -4, 8, 0, 8, -2, 6, -4, -4, -6, -6, 0, 10, -8, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.6-b";
N := (10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 7, 3, 6, 4, -1, -10, 9, -11, -5, -4, 4, -12, -2, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.6-c";
N := (10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 1, -3, -6, -2, -4, 2, -9, -5, -8, 5, -2, 3, 4, 3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.6-d";
N := (10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -3, -7, -4, -6, 4, -10, -1, -1, -10, -9, 4, 13, 8, -15, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.6-e";
N := (10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, 3, 0, 6, 8, -6, -7, 11, -10, 3, 0, -7, 8, 17, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.6-f";
N := (10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, -3, 6, -2, 4, 2, -9, -5, -8, -5, -2, -3, -4, -3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-a";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -7, -3, -6, -4, -1, 10, 9, -11, -5, 4, -4, -12, -2, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-b";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 7, -3, 3, 3, 4, 2, -2, -12, -12, 1, -9, 2, 8, -13, -3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-c";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -7, -3, -1, -4, -6, -10, 4, 4, 5, -1, 6, -12, -7, -5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-d";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -7, 3, 3, 8, 2, -2, -12, 4, -11, -11, 2, 0, -11, -15, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-e";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, -3, 9, -6, -2, 6, -4, 2, 5, 3, 0, -8, 1, -11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-f";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, 3, 9, 6, 2, -6, -4, 2, 5, 3, 0, 8, -1, 11, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-g";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 7, -9, -2, -8, 8, -12, -6, -1, -5, 4, -10, -15, -5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-h";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 7, -1, 6, 4, 0, 4, -6, -5, -11, -4, -2, 3, 15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-i";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 5, -3, -3, 2, 2, 10, -12, 10, -11, 1, 8, 12, -5, 9, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-j";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -6, -4, -4, 6, 2, 10, 4, -10, -4, -6, 6, -4, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-k";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 3, -3, 3, 6, 4, 0, -4, -10, 11, -3, 0, -14, 1, 1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1044.5-l";
N := (20*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 5, 3, -3, -2, -2, -10, -12, 10, -11, 1, -8, -12, 5, -9, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-a";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 0, -6, 6, 2, 0, -6, -4, 8, 14, 6, 12, -10, 14, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-b";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 0, -6, -6, -2, 0, 6, -4, 8, 14, 6, -12, 10, -14, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-c";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, 2, -4, 8, -2, 2, 6, 12, -8, -2, 10, 2, 14, 6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-d";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -8, 0, -6, -6, 2, 4, -4, -6, -6, 10, -10, 6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-e";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 0, 0, 6, -2, -6, -6, -10, -4, -4, -12, 6, 4, -8, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-f";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 2, -2, 2, 2, 10, 0, 0, 4, -2, -4, -10, -2, 6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-g";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -6, -6, -2, 6, 0, 8, -4, 14, -12, 6, -14, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-h";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, 0, 0, -6, 10, 10, -12, -12, 2, -6, -6, -2, -2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-i";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 2, 2, -2, -10, 0, 0, 4, -2, 4, -10, 2, -6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-j";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 0, -8, -6, 2, -6, -4, 4, -6, 10, -6, 6, -10, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-k";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, 6, 0, 2, -6, 6, -4, -10, -4, 6, 12, 8, -4, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-l";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, 2, 2, -2, 0, -10, 4, 0, -2, -10, 4, -6, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-m";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 0, 0, 6, 2, 6, -6, -10, -4, -4, 12, 6, -4, 8, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-n";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, 2, -2, 2, 0, 10, 4, 0, -2, -10, -4, 6, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-o";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, 6, -6, 2, -6, 0, 8, -4, 14, 12, 6, 14, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-p";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, 6, 0, -2, -6, -6, -4, -10, -4, 6, -12, -8, 4, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.1-q";
N := (-18*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -6, 8, -4, -2, 6, 2, -8, 12, -2, 2, 10, 6, 14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.2-a";
N := (-21*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 1, -1, 4, -1, -1, 0, -9, -2, -11, -14, 7, 4, 0, 4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.2-b";
N := (-21*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 4, 5, -8, 5, 8, 9, 0, 10, -2, -14, 13, -8, -6, -2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.2-c";
N := (-21*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 5, -3, -4, -3, -7, 0, -13, -2, 9, -2, -9, -12, -8, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.2-d";
N := (-21*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, 3, 0, 3, -8, -7, 0, -6, -10, 6, -3, 8, -10, 10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.2-e";
N := (-21*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -8, -7, -2, -1, 2, 3, -6, 4, -2, -8, -5, 10, 6, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.2-f";
N := (-21*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, 3, -4, 3, 7, 0, -13, -2, 9, 2, -9, 12, 8, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.2-g";
N := (-21*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, -5, -8, -5, -8, 9, 0, 10, -2, 14, 13, 8, 6, 2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.2-h";
N := (-21*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -8, 7, -2, 1, -2, 3, -6, 4, -2, 8, -5, -10, -6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.2-i";
N := (-21*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -4, -3, 0, -3, 8, -7, 0, -6, -10, -6, -3, -8, 10, -10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.2-j";
N := (-21*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 1, 1, 4, 1, 1, 0, -9, -2, -11, 14, 7, -4, 0, -4, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.4-a";
N := (w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, 0, -6, 6, -4, -3, -9, -4, -4, -4, -6, -9, 5, 2, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.4-b";
N := (w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -6, 0, 6, 6, 4, 3, -9, -4, -4, -4, 6, -9, -5, -2, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.3-a";
N := (-21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -6, 4, -1, -1, 0, -1, -2, -9, -11, 7, -14, 0, 4, -11, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.3-b";
N := (-21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -3, -8, 5, 5, 9, 8, 10, 0, -2, 13, -14, -6, -8, -14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.3-c";
N := (-21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -2, -4, -3, -3, 0, -7, -2, -13, 9, -9, -2, -8, -12, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.3-d";
N := (-21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -5, 0, 3, 3, -7, -8, -6, 0, -10, -3, 6, -10, 8, -2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.3-e";
N := (-21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -8, -3, -2, -7, -1, 3, 2, 4, -6, -2, -5, -8, 6, 10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.3-f";
N := (-21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 2, -4, 3, 3, 0, 7, -2, -13, 9, -9, 2, 8, 12, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.3-g";
N := (-21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 3, -8, -5, -5, 9, -8, 10, 0, -2, 13, 14, 6, 8, 14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.3-h";
N := (-21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -8, 3, -2, 7, 1, 3, -2, 4, -6, -2, -5, 8, -6, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.3-i";
N := (-21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 5, 0, -3, -3, -7, 8, -6, 0, -10, -3, -6, 10, -8, 2, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.3-j";
N := (-21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 6, 4, 1, 1, 0, 1, -2, -9, -11, 7, 14, 0, -4, 11, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.5-a";
N := (w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 6, 6, -6, -4, -9, -3, -4, -4, -4, -9, -6, 2, 5, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1053.5-b";
N := (w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -6, 6, 6, 4, -9, 3, -4, -4, -4, -9, 6, -2, -5, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1063.1-a";
N := (-19*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 7, -6, -4, 4, 0, 4, -1, 4, -4, 6, 3, 4, -3, -1, -6, -14, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1063.1-b";
N := (-19*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 2, 4, 0, 0, 4, -2, 2, 8, 4, -12, 6, 6, -2, 2, 6, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1063.1-c";
N := (-19*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, -5, -2, 4, -8, 4, 8, 3, -6, 4, 12, 3, 4, 5, -5, 0, -2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1063.2-a";
N := (19*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, 7, -4, -6, 0, 4, 4, 4, -1, 6, -4, 3, -3, 4, -6, -1, 1, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1063.2-b";
N := (19*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 2, 0, 4, 4, 0, -2, 8, 2, -12, 4, 6, -2, 6, 6, 2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1063.2-c";
N := (19*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, -5, 4, -2, 4, -8, 8, -6, 3, 12, 4, 3, 5, 4, 0, -5, -11, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1075.1-a";
N := (-20*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 1, 4, 0, 4, 2, -4, -10, -6, 10, 2, 2, 6, 10, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1075.2-a";
N := (20*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, 4, 4, 0, -4, 2, -6, -10, 10, 2, 6, 2, -10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1076.1-a";
N := (2*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 3, -3, -6, -6, -7, -6, 6, -7, 11, 5, -12, 12, 2, -10, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1076.1-b";
N := (2*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 0, -3, -6, 6, 2, -3, 6, -7, -7, 8, 9, -9, 8, -10, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1076.1-c";
N := (2*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -5, 0, -7, -6, -2, 2, 1, -6, -11, 1, -12, 1, -1, 8, -6, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1076.2-a";
N := (2*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -3, 3, -6, -6, -7, 6, -6, 11, -7, 5, 12, -12, -10, 2, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1076.2-b";
N := (2*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, -3, 0, 6, -6, 2, 6, -3, -7, -7, 8, -9, 9, -10, 8, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1076.2-c";
N := (2*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -5, -7, 0, -2, -6, 2, -6, 1, 1, -11, -12, -1, 1, -6, 8, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1083.1-a";
N := (-19*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 1, -6, -3, 3, -1, -6, -6, -11, -8, -1, 0, 10, 2, -1, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1083.1-b";
N := (-19*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -6, -1, 3, -5, 5, 8, -4, 4, 9, 3, 2, -12, 1, -2, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1083.1-c";
N := (-19*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -3, -2, -7, -3, -3, 0, -10, 1, -4, 3, -2, 12, 6, 13, -14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1083.2-a";
N := (-19*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -6, 1, 3, -3, -1, -6, -6, -8, -11, -1, 10, 0, -1, 2, 6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1083.2-b";
N := (-19*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -1, -6, -5, 3, 5, -4, 8, 9, 4, 3, -12, 2, -2, 1, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1083.2-c";
N := (-19*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -2, -3, -3, -7, -3, -10, 0, -4, 1, 3, 12, -2, 13, 6, 14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1088.1-a";
N := (8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 7, -7, 6, 8, -9, -6, -8, -2, 4, 2, -6, 1, 0, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1088.1-b";
N := (8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -1, -3, 2, 8, 7, -10, 4, -10, -4, 2, -6, -15, -8, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1088.1-c";
N := (8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 3, 1, -2, -4, -5, 2, 8, 10, -12, -2, -2, 9, 0, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1088.1-d";
N := (8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -2, 0, -4, 6, -6, 0, -6, -2, -2, 0, 0, 2, 8, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1088.2-a";
N := (8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, 7, 6, -7, 8, -6, -9, -2, -8, 4, -6, 2, 0, 1, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1088.2-b";
N := (8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -1, 2, -3, 8, -10, 7, -10, 4, -4, -6, 2, -8, -15, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1088.2-c";
N := (8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 3, -2, 1, -4, 2, -5, 10, 8, -12, -2, -2, 0, 9, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1088.2-d";
N := (8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, -2, -4, 0, 6, 0, -6, -2, -6, -2, 0, 0, 8, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1089.1-a";
N := (33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -4, -8, 4, 2, 6, -8, -2, -8, -10, 14, -6, 0, 0, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1089.1-b";
N := (33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -6, 4, -8, 2, -8, 6, -8, -2, -10, -6, 14, 0, 0, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1089.1-c";
N := (33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 2, 0, 0, 2, 10, -2, -4, 8, 10, 6, 6, 10, -6, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1089.1-d";
N := (33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, -2, 8, 8, -6, -6, -6, 0, 0, 2, 6, 6, 6, 6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1089.1-e";
N := (33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -2, 0, 0, 2, -2, 10, 8, -4, 10, 6, 6, -6, 10, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1089.2-a";
N := (11*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -2, 2, -1, 1, 9, 0, 0, -6, -6, -10, -6, 6, -12, -12, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1089.3-a";
N := (-11*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 2, -2, 1, -1, 9, 0, 0, -6, -6, -10, 6, -6, -12, -12, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1101.1-a";
N := (-19*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -6, -6, 0, 0, -2, -2, -6, 12, -4, 2, -2, -6, -2, -10, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1101.4-a";
N := (19*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -6, -6, 0, 0, -2, -6, -2, -4, 12, 2, -6, -2, -10, -2, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1104.2-a";
N := (-20*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, -2, 0, -4, -6, -2, 0, 0, 6, -2, 2, -2, -12, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1104.2-b";
N := (-20*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, -6, 0, 8, 6, -6, 8, -4, 2, 6, -6, -10, 8, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1104.2-c";
N := (-20*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 4, 2, -10, 10, -4, -12, 2, 8, -6, -10, -2, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1104.3-a";
N := (20*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, 0, 0, -4, -2, -6, 0, 0, 6, 2, -2, -12, -2, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1104.3-b";
N := (20*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -6, 0, 0, 8, -6, 6, -4, 8, 2, -6, 6, 8, -10, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1104.3-c";
N := (20*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 4, 2, -10, -4, 10, 2, -12, 8, -10, -6, -10, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1117.1-a";
N := (19*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 1, 0, -3, -4, 3, -7, 6, 2, 1, 9, -10, -13, 9, -9, 5, -9, 1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1117.2-a";
N := (19*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 1, 0, -4, -3, -7, 3, 6, 1, 2, -10, 9, -13, -9, 9, -9, 5, 0, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1119.2-a";
N := (10*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 3, 2, 0, 4, 7, 0, -3, -8, -5, 9, -1, -9, -11, 0, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1119.2-b";
N := (10*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -6, 6, 4, -4, 6, 10, 2, -12, 4, 2, -10, -6, -6, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1119.3-a";
N := (10*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 2, 3, 4, 0, 7, -3, 0, -5, -8, 9, -9, -1, 0, -11, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1119.3-b";
N := (10*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 6, -6, -4, 4, 6, 2, 10, 4, -12, 2, -6, -10, -2, -6, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.1-a";
N := (19*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -2, 6, 2, 4, 6, 0, -8, -6, -10, -6, -4, 12, -2, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.1-b";
N := (19*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 2, -6, -4, 2, 4, 0, -6, 2, 10, -4, 4, 6, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.2-a";
N := (-20*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, -2, 4, 4, 4, 4, 6, 4, 4, 2, -8, -10, 0, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.2-b";
N := (-20*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, -6, 6, -6, -8, 0, 8, 8, -4, 6, 0, -2, -8, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.2-c";
N := (-20*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -6, -4, 4, 2, 6, 0, 12, 2, -2, 6, -2, 14, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.2-d";
N := (-20*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -2, 6, -6, -2, 4, -4, 4, -4, -4, -10, 0, 6, 8, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.4-a";
N := (19*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 6, -2, 4, 2, 6, 0, -6, -8, -10, -4, -6, -2, 12, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.4-b";
N := (19*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 2, -4, -6, 2, 4, -6, 0, 2, -4, 10, 6, 4, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.3-a";
N := (-20*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -6, 4, 4, 4, 4, 4, 6, 4, -8, 2, 0, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.3-b";
N := (-20*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, -6, -6, 6, -8, 0, 8, 8, -4, 0, 6, -8, -2, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.3-c";
N := (-20*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, 2, 4, -4, 2, 6, 12, 0, 2, 6, -2, 14, -2, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1131.3-d";
N := (-20*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 6, -2, -2, -6, 4, -4, -4, 4, -4, 0, -10, 8, 6, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1132.1-a";
N := (-22*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -3, 7, 6, 0, 3, 0, -2, -5, -5, -9, -6, 0, 4, -6, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1132.2-a";
N := (-22*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, 7, -3, 0, 6, 3, -2, 0, -5, -5, -9, 0, -6, -6, 4, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.1-a";
N := (-9*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -6, 6, 0, 8, -2, -10, 6, 4, 0, 2, -10, -6, -10, 6, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.3-a";
N := (-19*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, 2, 0, -4, -4, -4, -2, 6, 0, 2, -10, -14, 0, 6, -10, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.3-b";
N := (-19*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 6, -2, -8, 4, 2, 2, 2, 4, -8, 6, -10, 6, 10, 10, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.3-c";
N := (-19*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 5, 6, 0, -3, 6, 8, 0, 6, -1, 8, -4, 3, -6, -1, -1, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.3-d";
N := (-19*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, -6, 2, 1, 8, -2, 8, -2, -5, -8, -6, -1, -12, -1, -1, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.3-e";
N := (-19*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -6, -4, 4, -4, -8, -10, -2, -8, -2, 6, 2, 12, 14, 14, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.3-f";
N := (-19*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, -4, -4, -8, 6, -6, 0, -6, -4, -4, -8, -10, 6, -2, -10, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.4-a";
N := (-2*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 5, -6, 0, 3, -6, 8, 0, -6, -1, 8, -4, -3, 6, -1, -1, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.4-b";
N := (-2*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, 6, -2, -1, -8, -2, -8, 2, -5, -8, -6, 1, 12, -1, -1, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.4-c";
N := (-2*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, -2, 0, 9, -4, 2, -6, -6, -5, 6, -4, -1, 2, -3, 5, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.2-a";
N := (9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 6, -6, 8, 0, -2, 6, -10, 0, 4, 2, -6, -10, 6, -10, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.6-a";
N := (-19*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, 0, 2, -4, -4, -4, 6, -2, 2, 0, -10, 0, -14, -10, 6, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.6-b";
N := (-19*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -2, 6, 4, -8, 2, 2, 2, -8, 4, 6, 6, -10, 10, 10, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.6-c";
N := (-19*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 5, 0, 6, 6, -3, 8, 6, 0, 8, -1, -4, -6, 3, -1, -1, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.6-d";
N := (-19*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 2, -6, 8, 1, -2, -2, 8, -8, -5, -6, -12, -1, -1, -1, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.6-e";
N := (-19*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -4, -6, -4, 4, -8, -2, -10, -2, -8, 6, 12, 2, 14, 14, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.6-f";
N := (-19*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, -4, -4, 6, -8, -6, -6, 0, -4, -4, -8, 6, -10, -10, -2, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.5-a";
N := (2*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 5, 0, -6, -6, 3, 8, -6, 0, 8, -1, -4, 6, -3, -1, -1, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.5-b";
N := (2*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -2, 6, -8, -1, -2, 2, -8, -8, -5, -6, 12, 1, -1, -1, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1143.5-c";
N := (2*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 0, -2, -4, 9, 2, -6, -6, 6, -5, -4, 2, -1, 5, -3, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1153.1-a";
N := (-19*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 1, 2, 0, -2, -6, 2, 1, -9, 3, -12, 2, 12, -8, 6, 5, -3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1153.2-a";
N := (-19*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 1, 0, 2, -6, -2, 2, -9, 1, -12, 3, 2, -8, 12, 5, 6, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.1-a";
N := (34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, -6, -3, 1, 0, 6, -7, -4, 8, -12, 0, -5, 1, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.1-b";
N := (34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -3, -6, 3, -7, 4, 6, 1, 0, -4, 4, -12, -11, 7, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.1-c";
N := (34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 3, 3, 6, 3, -2, -8, -4, 11, -4, -8, -8, -9, 15, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.1-d";
N := (34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 0, 0, -10, 0, 0, 8, 8, 2, -6, -6, -4, -4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.1-e";
N := (34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, -3, -6, 1, 6, 0, -4, -7, 8, 0, -12, 1, -5, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.1-f";
N := (34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -5, 0, 9, -7, 2, -4, 5, 2, 6, 2, -4, -1, -7, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.1-g";
N := (34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 3, 6, 3, 3, -8, -2, 11, -4, -4, -8, -8, 15, -9, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.1-h";
N := (34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, 3, -6, -7, 6, 4, 0, 1, -4, -12, 4, 7, -11, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.1-i";
N := (34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -5, 9, 0, -7, -4, 2, 2, 5, 6, -4, 2, -7, -1, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.2-a";
N := (-20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 6, -3, 0, -1, 9, -3, -1, 8, 2, 12, -6, -10, -10, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.2-b";
N := (-20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 3, 6, -6, -1, 0, 0, 1, 1, -5, 6, 6, 8, -8, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.2-c";
N := (-20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, -8, -7, -6, -7, 7, 5, -5, -2, -6, -2, 0, -6, 0, -15, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.2-d";
N := (-20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 6, 3, 0, 1, -9, -3, 1, -8, -2, -12, 6, 10, -10, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.2-e";
N := (-20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, -8, 7, -6, 7, -7, 5, 5, 2, 6, 2, 0, 6, 0, 15, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.2-f";
N := (-20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, -2, -4, 0, 2, 4, 2, -2, 10, -6, 4, -12, 12, -6, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.3-a";
N := (20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 6, 0, -3, -1, -3, 9, 8, -1, 2, -6, 12, -10, -10, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.3-b";
N := (20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 3, -6, 6, -1, 0, 0, 1, 1, -5, 6, 6, -8, 8, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.3-c";
N := (20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 6, -8, -6, -7, -7, 5, 7, -2, -5, -6, 0, -2, 0, -6, 8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.3-d";
N := (20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 6, 0, 3, 1, -3, -9, -8, 1, -2, 6, -12, -10, 10, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.3-e";
N := (20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -8, -6, 7, 7, 5, -7, 2, 5, 6, 0, 2, 0, 6, 8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1156.3-f";
N := (20*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -2, 0, -4, 2, 2, 4, 10, -2, -6, -12, 4, -6, 12, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.1-a";
N := (3*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -6, -2, 8, 0, -2, -6, 8, 12, -4, -2, 2, 10, 0, 16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.1-b";
N := (3*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 6, 0, 0, -2, -6, 0, -4, -4, 6, -6, 10, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.1-c";
N := (3*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -5, -4, -4, 1, 6, -9, -2, 1, -12, -2, 7, 9, 14, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.1-d";
N := (3*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 0, -4, 6, -4, 6, -4, -2, -4, -2, 8, 12, 14, -6, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.1-e";
N := (3*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, -6, 0, 0, 2, 6, 2, -4, 6, 6, -2, 6, -14, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.1-f";
N := (3*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, -4, -6, -4, 2, 0, -6, -4, -6, 0, -8, -6, 2, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.1-g";
N := (3*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 3, 4, 4, 3, 2, -9, 2, 9, 8, 2, 5, -13, -6, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.1-h";
N := (3*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 6, 0, 0, 2, 6, 0, -4, -4, -6, -6, -10, 8, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.1-i";
N := (3*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -2, 4, -8, 2, 10, 2, 4, 6, 2, 2, -2, 10, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.1-j";
N := (3*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, -2, -8, 0, 2, 6, 8, 12, -4, 2, 2, -10, 0, -16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.2-a";
N := (21*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 0, 4, -6, 4, 6, 4, 2, -4, -2, -8, -12, 14, -6, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.2-b";
N := (21*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, -2, -4, 6, 6, 2, -8, 12, 2, 14, 6, 8, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.2-c";
N := (21*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, -2, 0, 4, -6, 4, -4, 8, 4, 10, -6, 2, 6, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.2-d";
N := (21*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 2, -2, 4, -6, 6, -2, -8, 12, 2, -14, -6, -8, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.2-e";
N := (21*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, -6, 2, 6, -4, -6, -2, -2, 8, 4, 10, -6, 10, 0, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.2-f";
N := (21*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 4, 6, 4, 2, 0, 6, -4, -6, 0, 8, -6, 2, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.2-g";
N := (21*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, 6, 0, 0, 2, -6, -2, -4, 6, -6, 2, 6, -14, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.2-h";
N := (21*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, -2, -8, -4, 6, 0, -4, -8, -12, -10, 2, 6, 14, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.2-i";
N := (21*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 2, -4, 8, 2, -10, -2, 4, 6, -2, -2, -2, 10, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.2-j";
N := (21*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -6, -2, 6, 4, 6, -2, 2, 8, 4, 10, 6, -10, 0, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.6-a";
N := (19*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, -6, 0, 6, 0, 1, 6, 3, -1, -4, -12, -9, 10, -8, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.6-b";
N := (19*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -4, -2, 1, -1, -6, 0, -1, 1, -6, -1, 8, 6, -4, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.6-c";
N := (19*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, -4, 2, 1, 1, 6, 0, 1, 1, -6, -1, -8, -6, 4, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.6-d";
N := (19*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, -6, 0, 6, 0, -1, 6, -3, -1, -4, -12, 9, -10, 8, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.4-a";
N := (3*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, -6, 0, 8, -2, 8, -6, 12, -4, 2, -2, 0, 10, 2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.4-b";
N := (3*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -6, 0, 0, -2, 0, -6, -4, -4, -6, 6, -8, 10, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.4-c";
N := (3*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, -5, 1, -4, 6, -2, -9, 1, -12, 7, -2, 14, 9, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.4-d";
N := (3*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, -4, 0, -4, 6, 6, -2, -4, -4, -2, 12, 8, -6, 14, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.4-e";
N := (3*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -6, 2, 0, 0, 2, 2, 6, -4, 6, -2, 6, -14, 6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.4-f";
N := (3*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 4, -4, -6, 2, -6, 0, -4, -6, -8, 0, 2, -6, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.4-g";
N := (3*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 3, 3, 4, 2, 2, -9, 9, 8, 5, 2, -6, -13, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.4-h";
N := (3*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 6, 0, 0, 2, 0, 6, -4, -4, -6, -6, 8, -10, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.4-i";
N := (3*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 6, -8, 4, 2, 2, 10, 4, 6, 2, 2, 10, -2, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.4-j";
N := (3*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, 6, 0, -8, 2, 8, 6, 12, -4, 2, 2, 0, -10, -2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.3-a";
N := (21*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 4, 0, 4, -6, 6, 2, 4, -4, -2, -12, -8, -6, 14, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.3-b";
N := (21*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 2, -4, -2, 6, 2, 6, -8, 12, 14, 2, 8, 6, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.3-c";
N := (21*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -2, 0, 4, 0, -6, -4, 4, 8, 4, -6, 10, 6, 2, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.3-d";
N := (21*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 2, 4, -2, -6, -2, 6, -8, 12, -14, 2, -8, -6, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.3-e";
N := (21*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 2, -6, -4, 6, -6, -2, -2, 8, 4, -6, 10, 0, 10, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.3-f";
N := (21*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, -4, 4, 6, 2, 6, 0, -4, -6, 8, 0, 2, -6, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.3-g";
N := (21*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 6, -2, 0, 0, 2, -2, -6, -4, 6, 2, -6, -14, 6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.3-h";
N := (21*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -4, -4, -8, 6, -4, 0, -8, -12, 2, -10, 14, 6, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.3-i";
N := (21*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, 8, -4, 2, -2, -10, 4, 6, -2, -2, 10, -2, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.3-j";
N := (21*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -2, -6, 4, 6, 6, 2, -2, 8, 4, 6, 10, 0, -10, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.7-a";
N := (19*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 0, -6, 0, 6, 1, 3, 6, -1, -4, -9, -12, -8, 10, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.7-b";
N := (19*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -2, -4, -1, 1, -6, -1, 0, 1, -6, 8, -1, -4, 6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.7-c";
N := (19*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, 2, -4, 1, 1, 6, 1, 0, 1, -6, -8, -1, 4, -6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1161.7-d";
N := (19*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, 0, -6, 0, 6, -1, -3, 6, -1, -4, 9, -12, 8, -10, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1167.1-a";
N := (-11*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -4, -3, 5, 3, 8, 6, 4, 4, 2, 11, 11, -10, 8, 5, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1167.1-b";
N := (-11*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 3, 0, -1, -3, 1, -4, -2, -2, 4, -8, -1, 7, 6, 2, 7, -3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1167.1-c";
N := (-11*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, 2, 6, 8, 0, 2, 6, -2, 4, -4, 2, -10, 2, -10, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1167.2-a";
N := (19*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, 3, 8, -6, 4, -4, -5, -5, 4, 4, 5, 4, -6, 2, 7, -15, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1167.2-b";
N := (19*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, -3, 2, 2, 6, -6, -3, -5, 4, -6, -3, -6, -6, -6, -3, -1, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1167.4-a";
N := (11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -3, -4, 3, 5, 8, 4, 6, 2, 4, 11, -10, 11, 5, 8, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1167.4-b";
N := (11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 3, -1, 0, 1, -3, -4, -2, -2, -8, 4, -1, 6, 7, 7, 2, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1167.4-c";
N := (11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, 6, 2, 0, 8, 2, -2, 6, -4, 4, 2, 2, -10, 2, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1167.3-a";
N := (-19*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, 8, 3, 4, -6, -4, -5, -5, 4, 4, 5, -6, 4, 7, 2, 5, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1167.3-b";
N := (-19*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 2, -3, 6, 2, -6, -5, -3, -6, 4, -3, -6, -6, -3, -6, -17, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.1-a";
N := (19*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -4, 2, 6, 6, 10, -2, -4, -4, -2, -2, -12, 8, 12, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.1-b";
N := (19*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -6, -8, -2, -6, 2, 4, 0, -2, -6, 6, -10, -2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.1-c";
N := (19*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -6, -6, 2, 6, -6, -4, 8, 2, -6, 0, 8, 8, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.2-a";
N := (22*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -6, 4, -2, -6, -2, 4, 8, 6, 6, 2, -6, -2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.2-b";
N := (22*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -6, 6, -2, -8, 2, 6, 0, -4, 6, -10, 4, 6, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.3-a";
N := (-4*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, -2, 4, -4, 8, 6, 8, 12, -12, 4, -2, 12, 10, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.3-b";
N := (-4*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 4, 4, -6, 10, 10, -12, -2, -2, -2, 6, -10, -2, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.3-c";
N := (-4*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -3, -1, 4, 10, -9, 4, -6, -2, 0, 12, -10, -5, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.3-d";
N := (-4*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, -2, -4, -4, 0, 6, 0, 4, 12, -12, -2, -4, 10, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.3-e";
N := (-4*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 2, 0, -2, 2, 6, 4, -4, -10, -14, 6, -6, -2, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.4-a";
N := (7*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 6, 4, -4, 2, 0, -4, 12, -6, 8, 2, -6, -2, 6, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.4-b";
N := (7*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, 6, 0, 2, 2, -6, 4, -8, -2, 6, -2, -2, -10, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.8-a";
N := (19*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -4, 2, 6, 6, -2, 10, -4, -4, -2, -12, -2, 12, 8, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.8-b";
N := (19*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -6, -8, -2, 2, -6, 0, 4, -2, 6, -6, -2, -10, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.8-c";
N := (19*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -6, -6, 2, -6, 6, 8, -4, 2, 0, -6, 8, 8, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.7-a";
N := (-22*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -6, 4, -2, -2, -6, 8, 4, 6, 2, 6, -2, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.7-b";
N := (-22*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -6, 6, -2, 2, -8, 0, 6, -4, -10, 6, 6, 4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.6-a";
N := (4*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, -2, 4, -4, 6, 8, 12, 8, -12, -2, 4, 10, 12, 14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.6-b";
N := (4*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 4, 4, -6, 10, 10, -2, -12, -2, 6, -2, -2, -10, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.6-c";
N := (4*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -3, -1, 4, -9, 10, -6, 4, -2, 12, 0, -5, -10, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.6-d";
N := (4*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, -2, -4, -4, 6, 0, 4, 0, 12, -2, -12, 10, -4, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.6-e";
N := (4*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 2, 0, -2, 6, 2, -4, 4, -10, 6, -14, -2, -6, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.5-a";
N := (7*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 6, 4, -4, 2, -4, 0, -6, 12, 8, -6, 2, 6, -2, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1173.5-b";
N := (7*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, 6, 0, 2, -6, 2, -8, 4, -2, -2, 6, -10, -2, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.1-a";
N := (-6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 0, 0, 3, 4, -2, -1, -5, 0, 8, 3, 10, 1, 6, -1, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.1-b";
N := (-6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 0, 3, -4, -2, -9, -1, -8, -8, -5, 2, -11, -10, -5, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.1-c";
N := (-6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 2, -8, -4, 2, -10, 6, 8, -8, 2, -6, -2, 10, -14, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.1-d";
N := (-6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, 2, 1, -8, 2, 9, -5, -2, -2, -9, -6, 5, 10, 1, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.3-a";
N := (-20*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, -6, -6, -6, -8, 2, -8, 4, -12, 2, -6, -10, -2, 6, 10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.4-a";
N := (-5*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, -4, 4, 4, -1, -6, -5, 3, 12, -8, 3, 9, 6, -13, -2, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.4-b";
N := (-5*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 2, -2, -8, 8, 6, -2, 6, 0, 4, -6, 6, 6, -10, -2, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.2-a";
N := (6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 0, 0, 4, 3, -2, -5, -1, 8, 0, 3, 1, 10, -1, 6, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.2-b";
N := (6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 0, -4, 3, -2, -1, -9, -8, -8, -5, -11, 2, -5, -10, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.2-c";
N := (6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 6, -4, -8, 2, 6, -10, -8, 8, 2, -2, -6, -14, 10, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.2-d";
N := (6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -6, -8, 1, 2, -5, 9, -2, -2, -9, 5, -6, 1, 10, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.6-a";
N := (20*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, -6, -6, -8, -6, 2, 4, -8, 2, -12, -6, -2, -10, 10, 6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.5-a";
N := (-5*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 4, -4, -1, 4, -6, 3, -5, -8, 12, 3, 6, 9, -2, -13, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1179.5-b";
N := (-5*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -2, 2, 8, -8, 6, 6, -2, 4, 0, -6, 6, 6, -2, -10, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.1-a";
N := (10*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 6, -7, 0, -2, -4, 8, 6, 0, -6, -6, -2, 3, -12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.1-b";
N := (10*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 6, 0, -8, 4, 0, 6, 8, -4, -12, 6, 0, 2, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.1-c";
N := (10*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 3, -2, -6, 10, -8, 6, -8, -2, -2, 0, -7, -2, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.1-d";
N := (10*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -5, 5, -4, 7, -4, -10, -5, -5, 9, -10, -4, 2, -2, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.1-e";
N := (10*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, -6, -4, -6, -2, -2, -4, 12, 8, -4, -10, -8, 10, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.1-f";
N := (10*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, -3, -4, 6, -8, -8, -10, 0, 2, 2, 2, 7, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.2-a";
N := (10*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -7, 6, 0, -2, 8, -4, 0, 6, -6, -2, -6, -12, 3, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.2-b";
N := (10*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -4, 0, -8, 0, 4, 8, 6, -4, 6, -12, 2, 0, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.2-c";
N := (10*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 4, -2, -6, -8, 10, -8, 6, -2, 0, -2, -2, -7, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.2-d";
N := (10*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 5, -5, -4, 7, -10, -4, -5, -5, 9, -4, -10, -2, 2, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.2-e";
N := (10*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, -4, -4, -6, -2, -2, 12, -4, 8, -10, -4, 10, -8, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1196.2-f";
N := (10*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -3, 2, -4, 6, -8, -8, 0, -10, 2, 2, 2, -8, 7, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1200.1-a";
N := (-20*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 8, -6, 4, -8, -6, -8, -10, -4, 10, 6, -10, -6, 14, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1200.1-b";
N := (-20*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, -4, 8, -6, -6, 8, 4, 12, -2, -14, -6, -6, 6, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1200.2-a";
N := (-20*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 8, -8, 4, -8, -6, -4, -10, 10, -10, 6, 14, -6, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1200.2-b";
N := (-20*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 6, -6, 8, 8, -6, 12, 4, -2, -6, -14, 6, -6, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-a";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -7, 4, -3, -5, 4, 3, 7, 6, -9, 6, 8, 12, 5, -10, -13, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-b";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -1, 6, 3, 3, -4, 9, -1, 0, -9, 6, -10, -6, 7, -8, 17, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-c";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -7, -2, 9, -1, -4, -5, -5, 4, -1, -10, 14, -6, -3, -8, -5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-d";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -2, 0, -4, -2, 6, -6, -12, -6, 12, 6, -6, 2, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-e";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 0, -3, -3, 8, 3, -1, -6, 9, -6, -4, 12, -5, 10, 11, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-f";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, -2, 3, -7, -2, 3, -9, 12, -3, 6, -6, 0, -7, -2, -11, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-g";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 3, 0, 3, -9, 8, 9, 3, -10, -1, -10, 0, -12, 11, 2, 5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-h";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, -6, 3, 9, 4, -3, -9, 8, 5, 2, -6, 6, -11, -8, 1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-i";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 5, -4, -5, -7, -4, 1, 3, 2, 1, -6, -12, 4, -3, -2, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-j";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 5, -6, -1, 5, -2, -1, -1, -8, 1, -10, -2, -12, 1, -6, -7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.1-k";
N := (2*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 7, 7, -6, 3, -5, 6, -5, -9, -4, -1, -6, -2, 0, -5, 10, 13, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.2-a";
N := (-22*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 8, 4, -6, 6, 10, -10, 4, -6, -5, 9, 9, -8, -13, 0, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.2-b";
N := (-22*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -6, 0, 0, -6, -2, -6, -6, -4, 2, 5, 3, 3, 4, 1, 4, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.2-c";
N := (-22*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 4, 2, 8, 4, -2, 0, 4, -4, -10, -8, 2, 14, 10, 10, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-a";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, -7, -5, -3, 4, 7, 3, -9, 6, 6, 12, 8, -10, 5, -2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-b";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 6, -1, 3, 3, -4, -1, 9, -9, 0, 6, -6, -10, -8, 7, 10, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-c";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, -7, -1, 9, -4, -5, -5, -1, 4, -10, -6, 14, -8, -3, -10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-d";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 0, -4, 0, -2, -6, 6, -6, -12, 12, -6, 6, -2, 2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-e";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -1, -3, -3, 8, -1, 3, 9, -6, -6, 12, -4, 10, -5, 10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-f";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -3, -7, 3, -2, -9, 3, -3, 12, 6, 0, -6, -2, -7, 4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-g";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 0, 3, -9, 3, 8, 3, 9, -1, -10, -10, -12, 0, 2, 11, -10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-h";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -6, -3, 9, 3, 4, -9, -3, 5, 8, 2, 6, -6, -8, -11, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-i";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, 5, -7, -5, -4, 3, 1, 1, 2, -6, 4, -12, -2, -3, -6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-j";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -6, 5, 5, -1, -2, -1, -1, 1, -8, -10, -12, -2, -6, 1, 4, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.4-k";
N := (2*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 7, -6, 7, -5, 3, 6, -9, -5, -1, -4, -6, 0, -2, 10, -5, 8, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.3-a";
N := (-22*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 8, -2, -6, 4, 6, -10, 10, -6, 4, -5, 9, 9, -13, -8, -5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.3-b";
N := (-22*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, -6, -6, 0, -2, -6, -6, 2, -4, 5, 3, 3, 1, 4, -17, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1212.3-c";
N := (-22*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, 4, 4, 8, -2, 4, 0, -10, -4, -8, 14, 2, 10, 10, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1219.1-a";
N := (-20*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -1, 3, -4, -3, 4, 1, 9, -1, -11, 6, 2, -2, 13, 2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1219.1-b";
N := (-20*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, -2, 6, 4, -4, 4, 4, 0, 12, 10, -6, 6, 2, 8, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1219.1-c";
N := (-20*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, 7, 0, -5, -4, -5, -1, 1, 7, -10, -6, -14, -11, -10, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1219.1-d";
N := (-20*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, 5, 0, 3, 0, -7, 3, -3, -1, 8, -10, 0, -7, 2, -10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1219.2-a";
N := (9*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, -2, 6, -1, 4, -1, 4, -10, -8, -10, -1, 1, 2, -2, -2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1219.4-a";
N := (20*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, 3, -3, -4, 4, 1, -1, 9, 6, -11, 2, -2, 2, 13, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1219.4-b";
N := (20*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, -2, 4, 6, -4, 4, 0, 4, 10, 12, -6, 6, 8, 2, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1219.4-c";
N := (20*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 1, 7, -5, 0, -4, -5, 1, -1, -10, 7, -6, -14, -10, -11, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1219.4-d";
N := (20*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 5, 3, 0, 0, -7, -3, 3, 8, -1, -10, 0, 2, -7, 2, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1219.3-a";
N := (9*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, -2, -1, 6, 4, -1, -10, 4, -10, -8, -1, 1, -2, 2, -5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1225.1-a";
N := (35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 5, 3, 3, -6, -6, 3, 3, -10, -10, 12, 12, 8, 8, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.1-a";
N := (-20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 0, 4, 2, -4, 2, 2, -2, 4, -4, -6, -4, -2, -8, -4, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.1-b";
N := (-20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 6, -4, 0, -6, -2, -2, 12, -4, 2, 2, 6, -14, -6, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.1-c";
N := (-20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 6, -6, -6, 4, -6, -6, -4, 2, 2, -6, -6, -8, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.1-d";
N := (-20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 2, 4, 4, 2, 10, -2, 0, 6, -14, 4, 2, -12, -4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.1-e";
N := (-20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 0, -3, -3, -2, -3, 9, 2, 5, -1, -12, 3, -8, 10, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.1-f";
N := (-20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -7, 6, 5, -4, 4, 7, 2, 1, -6, 12, -5, -1, -7, 0, -8, 15, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.1-g";
N := (-20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 0, 6, 4, 2, 2, 6, 4, -8, 10, 4, -2, 0, 12, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.1-h";
N := (-20*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -8, -8, 3, -9, -2, -3, -3, -10, 3, -9, -4, -9, 0, 10, -13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.2-a";
N := (-8*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 4, 4, 4, 6, -2, -2, -6, 6, 4, -6, -6, -6, 10, -2, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.4-a";
N := (20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 4, 0, -4, 2, 2, -2, 2, -4, 4, -6, -2, -4, -4, -8, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.4-b";
N := (20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, -2, 0, -4, -6, -2, -2, -4, 12, 2, 6, 2, -6, -14, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.4-c";
N := (20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, 0, -6, -6, 4, -6, -6, 2, -4, 2, -6, -6, -8, -8, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.4-d";
N := (20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 6, 4, 4, 2, -2, 10, 6, 0, -14, 2, 4, -4, -12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.4-e";
N := (20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 0, -3, -3, -2, 9, -3, 5, 2, -1, 3, -12, 10, -8, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.4-f";
N := (20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -7, 5, 6, 4, -4, 7, 1, 2, 12, -6, -5, -7, -1, -8, 0, 13, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.4-g";
N := (20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -4, 4, 6, 2, 6, 2, -8, 4, 10, -2, 4, 12, 0, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.4-h";
N := (20*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -8, -8, -9, 3, -2, -3, -3, 3, -10, -9, -9, -4, 10, 0, 11, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1236.3-a";
N := (8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 4, 4, 6, 4, -2, -6, -2, 4, 6, -6, -6, -6, -2, 10, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1244.1-a";
N := (-4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 6, 2, 4, 0, 2, 2, -8, 4, 2, 14, -4, -4, -6, 8, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1244.1-b";
N := (-4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 3, -7, -2, 4, 1, -2, -10, -5, -3, -3, 6, -12, 14, 0, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1244.2-a";
N := (4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 2, 6, 0, 4, 2, -8, 2, 2, 4, 14, -4, -4, 8, -6, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1244.2-b";
N := (4*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -7, 3, 4, -2, 1, -10, -2, -3, -5, -3, -12, 6, 0, 14, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1247.2-a";
N := (11*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 1, -6, -6, 6, -6, -8, -6, -4, -4, -3, -9, -14, -8, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1247.2-b";
N := (11*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -2, -3, 2, -2, -4, -8, -8, 8, -6, -4, -9, -3, 6, -12, 1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1247.3-a";
N := (11*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 1, -6, -6, -6, 6, -8, -6, -4, -4, -9, -3, -8, -14, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1247.3-b";
N := (11*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -2, -3, -2, 2, -8, -4, -8, 8, -6, -4, -3, -9, -12, 6, -10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1249.1-a";
N := (22*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, -3, 0, 8, 6, -3, 2, 6, 9, -2, 1, -4, 11, 0, 2, -2, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1249.2-a";
N := (22*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -3, 8, 0, -3, 6, 2, 9, 6, 1, -2, -4, 0, 11, -2, 2, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.1-a";
N := (-21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 0, -3, -3, 1, -6, 0, -4, -7, 2, 0, 3, 4, -11, 1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.1-b";
N := (-21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -3, 4, 1, -5, 1, 6, 0, -12, 1, -10, -4, -9, 0, 5, 9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.1-c";
N := (-21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -6, -4, -4, -6, -6, -10, 0, 12, 10, 2, 6, 10, 6, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.1-d";
N := (-21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -2, 4, -6, 6, -6, 0, -8, 0, 0, -2, -12, -2, -6, 2, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.1-e";
N := (-21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -8, -6, 2, 2, -8, -4, 4, -8, -2, 0, 14, -10, -6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.1-f";
N := (-21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -7, 4, -3, -1, -7, -2, 8, 4, 1, -2, -12, -13, 8, -3, 1, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.1-g";
N := (-21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 3, 0, 1, -3, -7, 2, -8, -12, 1, 10, 0, -1, -4, -11, 1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.3-a";
N := (-5*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 6, -6, -8, 0, 6, 10, -2, 4, -4, -14, 2, -2, -14, -2, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.3-b";
N := (-5*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 0, -4, 4, -8, -6, 4, -6, -12, -6, 10, 6, -2, -6, -2, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.4-a";
N := (-20*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -2, -2, -6, -6, -4, -2, -6, -6, 4, 6, 6, -6, -2, 0, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.4-b";
N := (-20*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, 2, -2, 6, -6, -6, 0, -5, -6, 9, -5, 6, -11, 3, -2, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.4-c";
N := (-20*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -1, 2, -2, 0, 6, 4, 2, 3, 0, 1, 3, 6, -3, 5, 0, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.4-d";
N := (-20*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 2, -2, 6, -6, 4, 2, -6, -6, 4, 6, -6, -6, 2, 0, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.2-a";
N := (21*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 3, -3, -3, 1, 0, -6, -7, -4, 2, 3, 0, -11, 4, -2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.2-b";
N := (21*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 4, -3, -5, 1, 1, 0, 6, 1, -12, -10, -9, -4, 5, 0, -6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.2-c";
N := (21*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -2, -4, -4, -6, -10, -6, 12, 0, 10, 6, 2, 6, 10, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.2-d";
N := (21*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 4, -2, 6, -6, -6, -8, 0, 0, 0, -2, -2, -12, 2, -6, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.2-e";
N := (21*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -8, 2, 2, -6, 2, -4, -8, -8, 4, -2, 14, 0, -6, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.2-f";
N := (21*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 4, -7, -1, -3, -7, 8, -2, 1, 4, -2, -13, -12, -3, 8, -14, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.2-g";
N := (21*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 0, 3, -3, 1, -7, -8, 2, 1, -12, 10, -1, 0, -11, -4, -10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.6-a";
N := (5*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -6, 6, 0, -8, 6, -2, 10, -4, 4, -14, -2, 2, -2, -14, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.6-b";
N := (5*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -4, 0, -8, 4, -6, -6, 4, -6, -12, 10, -2, 6, -2, -6, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.5-a";
N := (-20*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -2, -2, -6, -6, -4, -6, -2, 4, -6, 6, -6, 6, 0, -2, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.5-b";
N := (-20*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -2, 2, -6, 6, -6, -5, 0, 9, -6, -5, -11, 6, -2, 3, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.5-c";
N := (-20*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -1, -2, 2, 6, 0, 4, 3, 2, 1, 0, 3, -3, 6, 0, 5, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1251.5-d";
N := (-20*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, -2, 2, -6, 6, 4, -6, 2, 4, -6, 6, -6, -6, 0, 2, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1252.1-a";
N := (-6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, 0, -3, 0, 3, 8, 6, 3, -10, -1, -4, -12, 3, 8, -10, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1252.2-a";
N := (6*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -3, 0, 3, 0, 8, 3, 6, -1, -10, -4, 3, -12, -10, 8, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.1-a";
N := (w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 1, 0, -4, -4, 1, 8, 8, -3, 4, -10, 2, -11, -10, 6, -6, 14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.1-b";
N := (w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -5, -8, 4, 4, -9, -4, 0, -7, 0, -6, -6, -5, 6, 10, -10, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.1-c";
N := (w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, -4, -4, -4, -4, -2, 0, -2, -4, 4, 6, -10, 6, -2, 2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.1-d";
N := (w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, 4, 8, 4, 0, -2, 0, -2, -12, -12, 6, 10, 6, 2, 10, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.2-a";
N := (23*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -2, 7, 4, 6, -5, -1, 8, 0, 6, -9, -12, -3, 4, -10, -8, 16, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.2-b";
N := (23*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 3, 3, -4, -2, 4, 4, -1, 4, -11, 10, 12, 14, 12, -15, 0, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.2-c";
N := (23*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -6, 5, 0, -6, 1, -1, -4, 4, 6, 7, 8, -3, -8, 14, 4, 0, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.4-a";
N := (w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 1, -4, 0, 1, -4, 8, -3, 8, -10, 4, 2, -10, -11, -6, 6, 10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.4-b";
N := (w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -5, 4, -8, -9, 4, -4, -7, 0, -6, 0, -6, 6, -5, -10, 10, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.4-c";
N := (w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, -4, -4, -4, -4, -2, -2, 0, 4, -4, 6, 6, -10, 2, -2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.4-d";
N := (w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, 8, 4, 0, 4, -2, -2, 0, -12, -12, 6, 6, 10, 10, 2, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.3-a";
N := (-23*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -2, 4, 7, -5, 6, -1, 0, 8, -9, 6, -12, 4, -3, -8, -10, 1, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.3-b";
N := (-23*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 3, 3, -2, -4, 4, -1, 4, -11, 4, 10, 14, 12, -15, 12, -15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1257.3-c";
N := (-23*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -6, 0, 5, 1, -6, -1, 4, -4, 7, 6, 8, -8, -3, 4, 14, 3, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1275.1-a";
N := (-20*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 1, -4, -7, -5, -9, 4, -6, -9, 11, 2, -11, 4, -2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1275.1-b";
N := (-20*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, 1, -4, 5, -9, 3, 12, 2, -5, -9, 10, -3, -4, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1275.1-c";
N := (-20*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, -2, 0, 4, 6, 6, 8, -4, 2, 14, 6, -2, -2, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1275.2-a";
N := (-10*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -4, -5, -3, -6, -5, 0, -6, -2, 8, -10, 0, 3, -12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1275.4-a";
N := (20*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 1, -7, -4, -9, -5, -6, 4, -9, 2, 11, 4, -11, 14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1275.4-b";
N := (20*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, 1, 5, -4, 3, -9, 2, 12, -5, 10, -9, -4, -3, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1275.4-c";
N := (20*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, -2, 4, 0, 6, 6, -4, 8, 2, 6, 14, -2, -2, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1275.3-a";
N := (10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -4, -5, -6, -3, 0, -5, -2, -6, 8, 0, -10, -12, 3, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1284.1-a";
N := (20*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, 4, -4, 8, -2, -6, -2, -6, -4, -4, -8, -14, 0, -8, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1284.4-a";
N := (20*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 4, 0, 8, -4, -2, -2, -6, -4, -6, -4, -14, -8, -8, 0, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.1-a";
N := (36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 0, 0, -10, 0, 0, 8, 8, 2, 0, 0, 14, 14, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.1-b";
N := (36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -6, -6, 0, -4, -6, -6, -4, -4, 2, -12, -6, 8, -4, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.1-c";
N := (36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 0, 0, -6, -2, 6, 0, 8, -4, -10, 6, 6, 10, -2, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.1-d";
N := (36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 6, 0, -6, -4, -6, -6, -4, -4, 2, -6, -12, -4, 8, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.1-e";
N := (36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -6, 0, 0, -2, 6, 6, 8, 8, 14, -6, -6, 10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.1-f";
N := (36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 6, -6, 0, -2, 0, 6, -4, 8, -10, 6, 6, -2, 10, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.1-g";
N := (36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -6, 6, 0, 4, 6, -6, -4, -4, 2, 12, -6, -8, 4, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.1-h";
N := (36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -6, 0, 6, 4, -6, 6, -4, -4, 2, -6, 12, 4, -8, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.1-i";
N := (36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, 8, 8, 6, -2, -2, -8, -8, -2, -6, -6, 2, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.1-j";
N := (36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 0, 0, 10, 0, 0, 8, 8, 2, 0, 0, -14, -14, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.2-a";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 6, 6, 6, -6, -7, 0, 6, -1, 5, -1, -12, -6, -1, 2, -13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.2-b";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 6, -6, 6, 6, 7, 0, -6, -1, 5, -1, -12, 6, 1, -2, 13, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.4-a";
N := (20*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 3, -3, -6, 6, 1, 6, 3, -10, 8, 5, 3, 9, 7, 10, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.4-b";
N := (20*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, -3, 0, -9, -7, 3, 9, -4, -1, 5, -3, -9, -10, -7, 8, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.4-c";
N := (20*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, -3, 0, -9, 7, -3, 9, -4, -1, 5, 3, -9, 10, 7, -8, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.4-d";
N := (20*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -3, 6, 6, -1, -6, 3, -10, 8, 5, -3, 9, -7, -10, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.3-a";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 6, 6, -6, 6, -7, 6, 0, 5, -1, -1, -6, -12, 2, -1, 11, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.3-b";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -6, 6, 6, 6, 7, -6, 0, 5, -1, -1, 6, -12, -2, 1, -11, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.5-a";
N := (20*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -3, 3, 6, -6, 1, 3, 6, 8, -10, 5, 9, 3, 10, 7, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.5-b";
N := (20*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, 3, -9, 0, -7, 9, 3, -1, -4, 5, -9, -3, -7, -10, -13, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.5-c";
N := (20*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, -3, -9, 0, 7, 9, -3, -1, -4, 5, -9, 3, 7, 10, 13, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1296.5-d";
N := (20*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -3, 6, 6, -1, 3, -6, 8, -10, 5, 9, -3, -10, -7, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1299.1-a";
N := (23*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 2, -6, 4, 0, -2, 8, -2, 4, 2, -4, 14, 6, 6, 2, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1299.4-a";
N := (-23*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -6, 2, 0, 4, -2, -2, 8, 2, 4, -4, 6, 14, 2, 6, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-a";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 0, 0, -3, -3, 3, -4, -4, -1, -9, -3, -4, -4, 2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-b";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 8, -4, -1, 1, -9, 4, -4, -1, 5, -9, -8, 8, -14, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-c";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -6, 6, 6, -6, -6, 2, 2, 2, 6, 6, 2, 2, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-d";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 0, 3, 6, 9, -5, 4, -6, -3, -5, 1, 8, -6, 1, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-e";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 4, -6, 0, -2, -6, -6, -8, 6, 4, -8, -6, 2, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-f";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 8, 0, -1, -4, -9, 1, -4, 4, -1, -9, 5, 8, -8, 13, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-g";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 2, -4, -4, -2, -2, 0, 0, -14, 6, 6, -2, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-h";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -2, 6, 3, -5, 9, -6, 4, -3, 1, -5, -6, 8, -6, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-i";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 2, 6, 6, 2, 2, -10, -10, 2, 2, 2, 2, 2, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-j";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, -3, 0, 3, -3, -4, -4, -1, -3, -9, -4, -4, -7, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1300.1-k";
N := (-20*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 0, 0, -6, -6, -2, -8, -6, 6, -8, 4, 2, -6, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1303.1-a";
N := (-3*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 4, -2, 4, -1, -5, 2, 3, -4, 2, 4, 12, 0, 9, 2, -6, 3, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1303.2-a";
N := (3*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 4, 4, -2, -5, -1, 2, -4, 3, 4, 2, 12, 9, 0, -6, 2, -17, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1313.1-a";
N := (-8*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 0, 0, -9, 0, 8, -6, -6, -4, -1, 5, -3, 6, 8, 14, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1313.2-a";
N := (-8*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 0, 0, 0, -9, 8, -6, -6, -1, -4, 5, 6, -3, 14, 8, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1317.2-a";
N := (-22*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, -6, 0, -6, -8, -10, 0, 0, 8, 0, -10, -6, -2, 14, -14, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1317.3-a";
N := (22*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 0, -6, -8, -6, -10, 0, 0, 0, 8, -10, -2, -6, -14, 14, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-a";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, -6, 4, 8, 2, 6, 2, -12, -4, 6, -14, 2, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-b";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -6, 6, 0, -2, -6, 0, 8, -4, 6, -12, 4, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-c";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, -8, 1, -1, -1, -5, 9, -7, -3, -13, -3, 0, 8, -3, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-d";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 2, 2, 4, 0, 2, 6, 2, 4, -4, 6, 2, -6, 2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-e";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -2, -2, 0, -4, 2, -2, -6, -4, 4, -2, -6, 2, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-f";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, 2, 3, 9, 3, -7, 3, -7, 1, 13, 7, 8, -8, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-g";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 6, -2, -8, -4, 2, -2, -6, -4, -12, 14, -6, -6, 2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-h";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, 6, 6, 0, 2, -6, 0, 8, -4, 6, 12, -4, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-i";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 2, -1, 1, -1, 5, -5, 9, 9, 9, -9, 8, 8, -15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-j";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, -6, -2, -2, 8, 2, 10, 0, 8, 12, -10, 12, 12, 8, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-k";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, -6, 2, -2, -8, -2, 10, 0, 8, 12, -10, -12, -12, -8, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-l";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -8, -4, -6, 6, -6, -6, -2, -8, 8, 2, 14, -2, -10, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-m";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -6, 6, 0, 0, 6, -2, 2, -4, -4, 6, -6, 2, 2, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-n";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, 2, -9, -3, 3, -3, 7, 1, -7, -7, -13, -8, 8, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.1-o";
N := (-21*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 4, 8, -6, 6, -6, 2, 6, 8, -8, -14, -2, -10, -2, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-a";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -6, 2, 8, 4, 2, 2, 6, -4, -12, -14, 6, -6, 2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-b";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -6, 0, 6, -2, 0, -6, -4, 8, -12, 6, -8, 4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-c";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -8, -6, -1, 1, -1, 9, -5, -3, -7, -3, -13, 8, 0, 17, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-d";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 2, 2, 0, 4, 2, 2, 6, -4, 4, 2, 6, 2, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-e";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -2, -2, -4, 0, 2, -6, -2, 4, -4, -6, -2, -6, 2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-f";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, -2, 9, 3, 3, 3, -7, 1, -7, 7, 13, -8, 8, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-g";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -2, 6, -4, -8, 2, -6, -2, -12, -4, -6, 14, 2, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-h";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, -6, 0, 6, 2, 0, -6, -4, 8, 12, 6, 8, -4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-i";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, -2, 1, -1, -1, -5, 5, 9, 9, -9, 9, 8, 8, -15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-j";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, -2, -6, 8, -2, 2, 0, 10, 12, 8, 12, -10, 8, 12, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-k";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, 2, -6, -8, -2, -2, 0, 10, 12, 8, -12, -10, -8, -12, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-l";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -4, -8, 6, -6, -6, -2, -6, 8, -8, 14, 2, -10, -2, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-m";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 6, -6, 0, 0, 6, 2, -2, -4, -4, -6, 6, 2, 2, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-n";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, -2, -3, -9, 3, 7, -3, -7, 1, -13, -7, 8, -8, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1323.2-o";
N := (-21*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 8, 4, 6, -6, -6, 6, 2, -8, 8, -2, -14, -2, -10, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1325.1-a";
N := (5*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -3, 0, 0, -4, 6, 4, 2, -6, 4, 2, 6, -2, 2, 14, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1325.1-b";
N := (5*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, -4, -8, 4, 4, -2, 2, -6, -2, -12, 6, 2, 6, 10, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1325.2-a";
N := (5*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -3, 0, -4, 0, 4, 6, -6, 2, 2, 4, 6, -2, 14, 2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1325.2-b";
N := (5*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 1, -4, 4, -8, -2, 4, -6, 2, -12, -2, 6, 2, 10, 6, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1327.1-a";
N := (-6*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 6, -4, -2, 9, 5, -2, -8, 0, -13, 0, 11, 9, -6, 7, -2, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1327.2-a";
N := (6*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, 6, -2, -4, 5, 9, -2, 0, -8, 0, -13, 11, -6, 9, -2, 7, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1329.1-a";
N := (w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, 3, 8, 0, 0, -3, 6, -4, -8, 5, -6, 7, 1, -15, 10, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1329.2-a";
N := (-11*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 0, -6, 6, 4, 6, 10, -6, 8, -4, 4, 10, -2, 10, 2, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1329.2-b";
N := (-11*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -2, 2, 4, -4, -2, 2, 6, 8, -12, 6, -10, 6, 2, -6, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1329.4-a";
N := (w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, 8, 3, 0, 0, -3, -4, 6, 5, -8, -6, 1, 7, 10, -15, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1329.3-a";
N := (-11*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, -6, 0, 4, 6, 6, -6, 10, -4, 8, 4, -2, 10, 2, 10, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1329.3-b";
N := (-11*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 2, -2, -4, 4, -2, 6, 2, -12, 8, 6, 6, -10, -6, 2, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1339.1-a";
N := (-23*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 3, 4, -4, 4, 0, 4, 10, 2, 8, -4, 10, -2, -14, -10, -2, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1339.2-a";
N := (-23*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 3, -4, 4, 0, 4, 4, 2, 10, -4, 8, 10, -14, -2, -2, -10, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1343.1-a";
N := (-21*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, 2, -1, 2, -7, -2, 4, -5, 10, -10, -2, -2, -2, 8, 13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1343.1-b";
N := (-21*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, 0, 4, 8, 1, 4, 4, 6, -6, -2, 8, 6, 1, -5, 5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1343.1-c";
N := (-21*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 3, 4, 8, 8, 1, -4, -4, 2, -6, 10, -12, 2, -9, 13, 5, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1343.2-a";
N := (24*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 1, 2, -1, 6, -2, -2, 2, -5, 0, 4, 6, 12, -6, -2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1343.2-b";
N := (24*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, -2, -1, 2, -6, -2, 2, -9, -8, 0, -6, -4, 2, -6, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1343.4-a";
N := (21*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, 2, -1, -7, 2, -2, -5, 4, -10, 10, -2, -2, -2, 13, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1343.4-b";
N := (21*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, 0, 4, 1, 8, 4, 6, 4, -2, -6, 8, 1, 6, 5, -5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1343.4-c";
N := (21*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, 4, 8, 1, 8, -4, 2, -4, 10, -6, -12, -9, 2, 5, 13, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1343.3-a";
N := (-24*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 1, 2, -1, -2, 6, -2, -5, 2, 4, 0, 6, -6, 12, -4, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1343.3-b";
N := (-24*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -2, -1, -6, 2, -2, -9, 2, 0, -8, -6, 2, -4, -8, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1348.1-a";
N := (22*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 2, 4, -3, -4, -6, 4, 0, 5, 6, -1, 4, -6, 6, 2, 1, 10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1348.1-b";
N := (22*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 0, -1, 0, 6, -4, -4, -3, 10, 3, -8, 2, 10, -6, 11, -14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1348.1-c";
N := (22*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, -8, -3, 0, -6, -8, -7, -8, -12, -2, -10, 11, -2, 5, 0, 8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1348.2-a";
N := (22*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 2, -3, 4, -6, -4, 4, 5, 0, -1, 6, 4, 6, -6, 1, 2, 9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1348.2-b";
N := (22*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -1, 0, 6, 0, -4, -3, -4, 3, 10, -8, 10, 2, 11, -6, -3, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1348.2-c";
N := (22*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, -3, -8, -6, 0, -8, -8, -7, -2, -12, -10, -2, 11, 0, 5, 15, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.1-a";
N := (2*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -8, 6, 7, -2, 7, 9, -9, -1, -11, 4, -5, -12, -2, -1, 7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.1-b";
N := (2*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, -2, -3, -2, -3, 3, -1, -9, 11, -4, -9, -4, 2, -15, 15, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.2-a";
N := (-10*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 3, -6, 9, 0, -1, 6, -6, -10, 2, 8, -6, 3, 14, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.2-b";
N := (-10*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -3, -3, 0, 6, 7, 9, 3, 5, -4, -4, -9, 0, 10, 4, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.2-c";
N := (-10*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 0, 0, 2, -6, 6, -4, 0, 2, 6, 14, -6, 10, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.2-d";
N := (-10*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, 7, 0, -2, 7, -3, -9, 1, 4, 4, 9, 12, 14, -8, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.2-e";
N := (-10*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 3, -2, -1, -8, 9, 2, -6, 6, -10, -12, 10, -9, -6, 14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.2-f";
N := (-10*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 7, 3, -8, -2, -5, 9, 7, 1, -4, 4, 1, -4, 6, 8, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.4-a";
N := (2*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, -8, -2, 7, 7, -9, 9, -11, -1, 4, -12, -5, -1, -2, -4, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.4-b";
N := (2*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 4, -2, -3, -3, -1, 3, 11, -9, -4, -4, -9, -15, 2, -12, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.3-a";
N := (-10*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -6, 3, 0, 9, -1, -6, 6, 2, -10, 8, 3, -6, 2, 14, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.3-b";
N := (-10*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -3, -3, 6, 0, 7, 3, 9, -4, 5, -4, 0, -9, 4, 10, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.3-c";
N := (-10*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 2, 0, 0, 2, 6, -6, 0, -4, 2, 14, 6, 10, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.3-d";
N := (-10*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 7, -1, -2, 0, 7, -9, -3, 4, 1, 4, 12, 9, -8, 14, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.3-e";
N := (-10*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -2, 3, -8, -1, 9, -6, 2, -10, 6, -12, -9, 10, 14, -6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1356.3-f";
N := (-10*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 7, -2, -8, -5, 7, 9, -4, 1, 4, -4, 1, 8, 6, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1361.1-a";
N := (21*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -1, 4, -1, 3, 4, -5, -7, 4, 2, 8, -9, 11, -9, -2, 6, -11, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1361.2-a";
N := (21*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -1, 4, 3, -1, -5, 4, -7, 2, 4, -9, 8, 11, -2, -9, -11, 6, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1369.1-a";
N := (37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -4, 6, 6, 6, 6, -10, -6, -6, 8, 8, -13, -3, -3, 8, 8, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1369.1-b";
N := (37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 0, -2, 0, 0, 2, 2, -6, 6, 6, 2, 2, -13, 1, 1, -8, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-a";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, 8, -8, 2, 2, 10, -4, -4, 2, -6, 2, 14, 6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-b";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 3, 9, 0, -8, -3, 6, 2, 8, -10, 0, -12, 7, 10, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-c";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, 6, 0, 2, 6, -6, 2, -4, -4, 6, 6, 2, 14, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-d";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -2, 4, 0, 2, 2, 6, -8, 8, 10, 10, -2, 2, -10, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-e";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 6, 0, -2, 6, 6, 2, -4, -4, 6, -6, -2, -14, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-f";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 2, 4, 0, 2, 6, -2, 0, -12, -10, -2, 6, -2, 6, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-g";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 0, 6, -8, -6, 0, 2, 8, 8, 0, -6, -14, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-h";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 0, 0, 2, 6, -6, -4, 8, -10, 6, -6, 2, -10, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-i";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -4, -2, 0, 8, 6, -2, 6, -6, 2, 10, 6, 10, 0, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-j";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 6, 0, 4, -2, 2, -2, 8, 4, -2, -2, 10, -10, 10, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-k";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -3, -3, -6, -4, 9, -6, -4, -10, -4, -6, -6, 5, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-l";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 4, -2, 0, -8, 6, 2, 6, -6, 2, 10, -6, -10, 0, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-m";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -6, 0, -2, -6, -6, 2, -4, -4, -6, 6, -2, -14, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-n";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -6, -8, 4, 2, -2, -10, -2, -2, -2, -2, -10, 4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-o";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -6, 8, -4, 2, 2, -10, -2, -2, -2, 2, 10, -4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-p";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, -6, 0, 2, -6, 6, 2, -4, -4, -6, -6, 2, 14, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-q";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, -8, 0, 2, 2, -6, 4, -4, 10, -14, 10, 14, -10, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.1-r";
N := (9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 2, -8, -6, -4, -6, 4, 6, 0, -4, 4, -6, 10, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-a";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 0, 6, 6, -7, 6, 0, -1, -7, 5, -6, 12, -1, -10, -7, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-b";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 5, 3, 5, 8, -6, -5, -7, 4, -2, -7, -1, 8, -7, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-c";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 6, 3, 4, 9, -6, -1, 5, -4, 6, 3, -8, 1, -5, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-d";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -1, 5, 1, -4, 2, 7, 5, 8, -10, 7, -9, 0, -1, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-e";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 8, 6, 1, 4, -3, -10, 11, 1, 4, -10, 13, -8, -5, 13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-f";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 3, -3, -8, -6, -9, -1, -4, 2, -3, 9, -8, -5, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-g";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 2, 1, 8, 5, -2, 5, 11, -4, -2, 3, 12, -7, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-h";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 2, -1, -8, 5, 2, 5, 11, -4, -2, -3, -12, 7, 3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-i";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 3, 3, 3, 8, -6, 9, -1, -4, 2, -3, -9, 8, 5, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-j";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, 8, 6, -1, -4, -3, 10, 11, 1, 4, -10, -13, 8, 5, -13, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-k";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, 5, -1, 4, 2, -7, 5, 8, -10, 7, 9, 0, 1, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-l";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 6, -3, -4, 9, 6, -1, 5, -4, 6, -3, 8, -1, 5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-m";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 5, 3, -5, -8, -6, 5, -7, 4, -2, -7, 1, -8, 7, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.3-n";
N := (3*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 0, 6, -6, 7, 6, 0, -1, -7, 5, -6, -12, 1, 10, 7, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.4-a";
N := (-21*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 4, -1, -6, -4, 0, -1, 0, 9, -4, 5, 9, 7, 0, -6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.4-b";
N := (-21*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 9, -6, -4, 0, 3, 8, -1, 8, -3, 9, -1, 8, -10, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.4-c";
N := (-21*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, -6, -4, 7, -8, -4, -1, -11, 1, -10, -10, -1, -2, 9, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.4-d";
N := (-21*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -6, -6, -6, 1, 0, -6, 5, -1, 11, 0, -6, 7, 10, -11, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.4-e";
N := (-21*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 6, -6, 6, -1, 0, 6, 5, -1, 11, 0, 6, -7, -10, 11, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.4-f";
N := (-21*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, -6, 4, -7, -8, 4, -1, -11, 1, -10, 10, 1, 2, -9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.4-g";
N := (-21*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 9, 6, 4, 0, -3, 8, -1, 8, -3, -9, 1, -8, 10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.4-h";
N := (-21*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -4, -1, 6, 4, 0, 1, 0, 9, -4, 5, -9, -7, 0, 6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.8-a";
N := (-23*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, 6, -9, -4, -8, 1, -4, 2, 10, 4, 8, 14, -1, -2, 3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.8-b";
N := (-23*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -5, 8, -6, -4, 9, -4, 6, 6, 8, 8, 6, 7, 0, -3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.8-c";
N := (-23*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -5, -8, -6, 4, -9, -4, 6, 6, 8, -8, 6, -7, 0, 3, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.8-d";
N := (-23*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 6, 9, -4, 8, -1, -4, 2, 10, 4, -8, 14, 1, 2, -3, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-a";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, -8, 8, 2, 10, 2, -4, -4, 2, 2, -6, 6, 14, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-b";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 3, 0, 9, -8, 6, -3, 8, 2, -10, -12, 0, 10, 7, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-c";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, 0, 6, 2, -6, 6, -4, 2, -4, 6, 6, 14, 2, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-d";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -2, 0, 4, 2, 6, 2, 8, -8, 10, -2, 10, -10, 2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-e";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 0, 6, -2, 6, 6, -4, 2, -4, -6, 6, -14, -2, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-f";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 2, 0, 4, 2, -2, 6, -12, 0, -10, 6, -2, 6, -2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-g";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 6, 0, -8, 0, -6, 8, 2, 8, -6, 0, -8, -14, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-h";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 0, 0, 2, -6, 6, 8, -4, -10, -6, 6, -10, 2, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-i";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -4, 0, -2, 8, -2, 6, -6, 6, 2, 6, 10, 0, 10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-j";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 6, 4, 0, -2, -2, 2, 4, 8, -2, 10, -2, 10, -10, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-k";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -3, -6, -3, -4, -6, 9, -10, -4, -4, -6, -6, 8, 5, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-l";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 4, 0, -2, -8, 2, 6, -6, 6, 2, -6, 10, 0, -10, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-m";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, 0, -6, -2, -6, -6, -4, 2, -4, 6, -6, -14, -2, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-n";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -8, -6, 4, -2, 2, -2, -10, -2, -2, -2, 4, -10, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-o";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 8, -6, -4, 2, 2, -2, -10, -2, 2, -2, -4, 10, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-p";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 0, -6, 2, 6, -6, -4, 2, -4, -6, -6, 14, 2, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-q";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, 0, -8, 2, -6, 2, -4, 4, 10, 10, -14, -10, 14, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.2-r";
N := (9*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 2, -6, -8, -4, 4, -6, 0, 6, -4, -6, 4, -12, 10, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-a";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 0, 6, 6, -7, 0, 6, -7, -1, 5, 12, -6, -10, -1, 11, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-b";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 5, 5, 3, 8, -5, -6, 4, -7, -2, -1, -7, -7, 8, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-c";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 3, 6, 4, -6, 9, 5, -1, -4, 3, 6, 1, -8, -14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-d";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -1, 1, 5, -4, 7, 2, 8, 5, -10, -9, 7, -1, 0, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-e";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 8, 1, 6, 4, -10, -3, 1, 11, 4, 13, -10, -5, -8, -10, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-f";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, -3, 3, -8, -9, -6, -4, -1, 2, 9, -3, -5, -8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-g";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 1, 2, 8, -2, 5, 11, 5, -4, 3, -2, -7, 12, 2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-h";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, -1, 2, -8, 2, 5, 11, 5, -4, -3, -2, 7, -12, -2, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-i";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 3, 3, 3, 8, 9, -6, -4, -1, 2, -9, -3, 5, 8, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-j";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, 8, -1, 6, -4, 10, -3, 1, 11, 4, -13, -10, 5, 8, 10, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-k";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, -1, 5, 4, -7, 2, 8, 5, -10, 9, 7, 1, 0, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-l";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, -3, 6, -4, 6, 9, 5, -1, -4, -3, 6, -1, 8, 14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-m";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 5, -5, 3, -8, 5, -6, 4, -7, -2, 1, -7, 7, -8, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.6-n";
N := (3*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 0, -6, 6, 7, 0, 6, -7, -1, 5, -12, -6, 10, 1, -11, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.5-a";
N := (21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 4, -6, -1, -4, -1, 0, 9, 0, -4, 9, 5, 0, 7, 11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.5-b";
N := (21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -6, 9, -4, 3, 0, -1, 8, 8, 9, -3, 8, -1, -7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.5-c";
N := (21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, -4, -6, 7, -4, -8, -11, -1, 1, -10, -10, -2, -1, 11, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.5-d";
N := (21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -6, -6, -6, 1, -6, 0, -1, 5, 11, -6, 0, 10, 7, 1, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.5-e";
N := (21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 6, 6, -6, -1, 6, 0, -1, 5, 11, 6, 0, -10, -7, -1, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.5-f";
N := (21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, 4, -6, -7, 4, -8, -11, -1, 1, 10, -10, 2, 1, -11, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.5-g";
N := (21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 6, 9, 4, -3, 0, -1, 8, 8, -9, -3, -8, 1, 7, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.5-h";
N := (21*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -4, 6, -1, 4, 1, 0, 9, 0, -4, -9, 5, 0, -7, -11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.9-a";
N := (23*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, 6, -4, -9, -8, -4, 1, 10, 2, 4, 14, 8, -2, -1, -10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.9-b";
N := (23*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -5, -6, 8, -4, -4, 9, 6, 6, 8, 6, 8, 0, 7, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.9-c";
N := (23*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -5, -6, -8, 4, -4, -9, 6, 6, 8, 6, -8, 0, -7, 10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1377.9-d";
N := (23*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 6, -4, 9, 8, -4, -1, 10, 2, 4, 14, -8, 2, 1, 10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1381.1-a";
N := (-12*w + 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 1, 5, -8, 2, -1, 1, -5, 4, -9, -8, -3, -10, -2, 10, 5, -2, 3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1381.2-a";
N := (12*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 1, 5, 2, -8, 1, -1, -5, -9, 4, -3, -8, -10, 10, -2, -2, 5, -8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1388.1-a";
N := (24*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 1, -1, -2, 6, 5, 8, 6, -8, 6, -8, -2, 9, -9, 2, 6, 14, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1388.1-b";
N := (24*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -5, -2, 6, -3, 2, 0, 6, 4, 6, -4, 3, 1, 8, -4, 12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1388.2-a";
N := (-24*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 1, -2, -1, 5, 6, 8, -8, 6, -8, 6, -2, -9, 9, 6, 2, 3, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1388.2-b";
N := (-24*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -2, -5, -3, 6, 2, 6, 0, 6, 4, -4, 1, 3, -4, 8, 7, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1391.1-a";
N := (21*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 2, -2, 6, 1, -3, 2, 5, 7, 1, -2, -12, -4, 15, 2, -8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1391.1-b";
N := (21*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 4, -5, 6, -6, -7, -8, 0, -8, -11, -1, 0, 2, 1, 1, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1391.1-c";
N := (21*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -4, -7, -6, 2, 3, 8, 4, -8, 7, 13, 0, -2, 9, 1, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1391.2-a";
N := (21*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -2, 2, 1, 6, -3, 5, 2, 1, 7, -2, -4, -12, 2, 15, -5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1391.2-b";
N := (21*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -5, 4, -6, 6, -7, 0, -8, -11, -8, -1, 2, 0, 1, 1, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1391.2-c";
N := (21*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -7, -4, 2, -6, 3, 4, 8, 7, -8, 13, -2, 0, 1, 9, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.1-a";
N := (4*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 0, 0, -2, -2, 8, 0, 4, -2, 10, -2, 6, 14, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.1-b";
N := (4*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -2, -4, 4, -6, -6, -12, 8, -2, -2, -10, -2, -2, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.2-a";
N := (-8*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 1, -1, -6, -4, -4, 6, 5, 11, -6, 3, -12, -7, 14, 17, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.2-b";
N := (-8*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 2, 0, 0, 4, -2, 8, 6, 4, 10, 4, -2, 0, 2, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.2-c";
N := (-8*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 3, -3, -6, 0, -8, -6, 11, -1, 2, 3, 0, 1, 10, -11, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.2-d";
N := (-8*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 4, 4, -4, 6, -4, 10, -4, -6, -12, -2, 8, -6, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.4-a";
N := (4*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 2, -2, 0, -2, 8, 4, 0, -2, -2, 10, 14, 6, 14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.4-b";
N := (4*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -2, 4, -4, -6, -6, 8, -12, -2, -10, -2, -2, -2, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.3-a";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -1, 1, -4, -6, -4, 6, 11, 5, -6, -12, 3, 14, -7, 13, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.3-b";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 0, 2, 4, 0, -2, 8, 4, 6, 10, -2, 4, 2, 0, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.3-c";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 3, 0, -6, -8, -6, -1, 11, 2, 0, 3, 10, 1, -5, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1392.3-d";
N := (8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 6, -4, 4, 6, -4, -4, 10, -6, -2, -12, -6, 8, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1401.1-a";
N := (-7*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 6, 5, -2, -6, 4, -1, 5, 3, 11, -2, 8, -6, 3, -8, 5, 16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1401.1-b";
N := (-7*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -4, -2, 6, 0, 2, -4, 8, -4, -6, -6, -14, -6, -2, 6, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1401.1-c";
N := (-7*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 2, 7, 6, 2, 0, 9, -9, 7, -1, 2, 4, -2, -13, -8, -5, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1401.2-a";
N := (-5*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, 3, -6, 9, 7, -9, 5, -10, -8, 11, 4, 5, 6, 4, 13, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1401.2-b";
N := (-5*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, -3, 0, -3, -3, -1, 0, 0, 2, -1, 8, 0, 9, -13, -10, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1401.4-a";
N := (7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 6, -2, 5, 4, -6, -1, 3, 5, -2, 11, 8, 3, -6, 5, -8, -10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1401.4-b";
N := (7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -2, -4, 0, 6, 2, 8, -4, -6, -4, -6, -6, -14, 6, -2, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1401.4-c";
N := (7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 2, 6, 7, 0, 2, 9, 7, -9, 2, -1, 4, -13, -2, -5, -8, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1401.3-a";
N := (5*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 3, 0, 9, -6, 7, 5, -9, -8, -10, 11, 5, 4, 4, 6, -8, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1401.3-b";
N := (5*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, 0, -3, -3, -3, -1, 0, 0, -1, 2, 8, 9, 0, -10, -13, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1403.2-a";
N := (21*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, 2, 4, 2, -3, -2, -4, 2, -6, 7, -2, -1, 11, -4, -5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1403.2-b";
N := (21*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 3, -2, -2, 0, -4, 2, 4, -10, -8, 12, 12, -6, -4, 2, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1403.3-a";
N := (21*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 3, 2, 2, 4, -3, -2, 2, -4, 7, -6, -2, 11, -1, -4, 10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1403.3-b";
N := (21*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 3, -2, 0, -2, -4, 2, -10, 4, 12, -8, 12, -4, -6, 2, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.1-a";
N := (6*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -8, 0, 2, -2, -2, 0, -8, -6, -2, 6, -2, -10, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.1-b";
N := (6*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, 0, 0, 2, -6, -6, 8, 8, 2, -6, -6, 14, -10, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.1-c";
N := (6*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [8, 4, 0, 4, -6, 4, 0, -4, -8, 6, 8, 0, -6, 10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.1-d";
N := (6*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 0, 8, 2, 2, 2, -8, 0, -6, -6, 2, -10, -2, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.1-e";
N := (6*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 0, -6, -10, 6, 6, 8, -10, -4, 12, 6, 8, 8, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.1-f";
N := (6*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 0, 6, 6, -6, 4, 4, 2, -10, 10, 2, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.1-g";
N := (6*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -8, -4, 0, -6, 0, -4, -8, -4, 6, 0, -8, 10, -6, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.1-h";
N := (6*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -8, -2, -8, -8, 4, -8, -10, -8, -4, -10, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.1-i";
N := (6*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 0, 0, 2, 6, 6, 8, 8, 2, 6, 6, -10, 14, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.1-j";
N := (6*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, -4, -2, 8, 8, -8, 4, -10, 4, 8, -2, -10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-a";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -3, 3, 0, 1, 3, 6, -1, 8, 5, -12, -3, 10, -8, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-b";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 6, 0, -9, -1, 6, -3, 8, -1, 14, 9, 0, -1, -1, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-c";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 6, 2, -1, 3, -4, 2, -5, -11, -4, -6, -9, 4, 4, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-d";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 2, 2, -3, -7, 8, -6, 9, -1, 4, 6, -1, 12, 0, 7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-e";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 0, -2, -1, 3, -5, -4, -8, 4, -10, 9, 0, -10, 11, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-f";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 6, -3, 1, 6, -6, -1, -1, -4, 6, -3, -8, 10, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-g";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, 0, -3, -1, 3, -6, -10, -10, -4, -3, -6, -10, -1, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-h";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, 0, -3, 1, -3, -6, -10, -10, -4, 3, -6, 10, 1, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-i";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -6, -3, -1, -6, -6, -1, -1, -4, -6, -3, 8, -10, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-j";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 2, -1, -3, 5, -4, -8, 4, -10, -9, 0, 10, -11, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-k";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 2, -2, -3, 7, -8, -6, 9, -1, 4, -6, -1, -12, 0, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-l";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 6, -2, -1, -3, 4, 2, -5, -11, -4, 6, -9, -4, -4, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-m";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, 0, -9, 1, -6, -3, 8, -1, 14, -9, 0, 1, 1, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.3-n";
N := (-22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -3, -3, 0, -1, -3, 6, -1, 8, 5, 12, -3, -10, 8, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.2-a";
N := (6*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 0, -8, 2, -2, -2, -8, 0, -6, 6, -2, -10, -2, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.2-b";
N := (6*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, 0, 0, 2, -6, -6, 8, 8, 2, -6, -6, -10, 14, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.2-c";
N := (6*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 8, 4, 0, -6, 0, 4, -8, -4, 6, 0, 8, 10, -6, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.2-d";
N := (6*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 8, 0, 2, 2, 2, 0, -8, -6, 2, -6, -2, -10, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.2-e";
N := (6*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 0, -10, 6, 6, -10, 8, -4, 6, 12, 8, 8, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.2-f";
N := (6*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 0, 6, -6, 6, 4, 4, 2, 10, -10, 2, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.2-g";
N := (6*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-8, -4, 0, -4, -6, -4, 0, -4, -8, 6, -8, 0, -6, 10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.2-h";
N := (6*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -8, 4, -2, -8, -8, -8, 4, -10, -4, -8, -2, -10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.2-i";
N := (6*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 0, 0, 2, 6, 6, 8, 8, 2, 6, 6, 14, -10, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.2-j";
N := (6*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 8, -2, 8, 8, 4, -8, -10, 8, 4, -10, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-a";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 6, 0, 3, 1, 6, 3, 8, -1, 5, -3, -12, -8, 10, 1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-b";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 6, -9, 0, -1, -3, 6, -1, 8, 14, 0, 9, -1, -1, -1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-c";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 3, -1, 2, 3, 2, -4, -11, -5, -4, -9, -6, 4, 4, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-d";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 1, -3, 2, -7, -6, 8, -1, 9, 4, -1, 6, 0, 12, 0, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-e";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, -1, -2, 3, -4, -5, 4, -8, -10, 0, 9, 11, -10, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-f";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, -3, 6, 1, -6, 6, -1, -1, -4, -3, 6, 10, -8, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-g";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 3, -3, 0, -1, -6, 3, -10, -10, -4, -6, -3, -1, -10, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-h";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -3, -3, 0, 1, -6, -3, -10, -10, -4, -6, 3, 1, 10, 1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-i";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, -3, -6, -1, -6, -6, -1, -1, -4, -3, -6, -10, 8, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-j";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -1, 2, -3, -4, 5, 4, -8, -10, 0, -9, -11, 10, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-k";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -1, -3, -2, 7, -6, -8, -1, 9, 4, -1, -6, 0, -12, 0, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-l";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, -3, -1, -2, -3, 2, 4, -11, -5, -4, -9, 6, -4, -4, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-m";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -6, -9, 0, 1, -3, -6, -1, 8, 14, 0, -9, 1, 1, 1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1404.4-n";
N := (22*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, 0, -3, -1, 6, -3, 8, -1, 5, -3, 12, 8, -10, -1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.1-a";
N := (21*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 6, 6, -8, 0, -10, -6, 6, 8, 12, -6, 2, 14, -14, 2, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.1-b";
N := (21*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 6, 0, 2, 4, -2, -2, 2, 2, 0, -10, -10, -14, 4, 6, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.1-c";
N := (21*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 2, 6, 0, -8, 6, 6, -2, -12, 4, 10, -2, 14, -10, 2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.1-d";
N := (21*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 0, -6, -8, -2, 8, 6, 12, -12, -2, 0, -6, 2, -10, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.1-e";
N := (21*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 4, -2, 8, -4, -2, 0, -6, 10, 0, 2, 8, -2, 4, -6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.1-f";
N := (21*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -6, -4, 0, 6, 2, -2, 4, -12, -6, -6, -10, -10, -6, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.2-a";
N := (21*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 6, 6, 0, -8, -10, 6, -6, 12, 8, -6, 14, 2, 2, -14, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.2-b";
N := (21*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 0, 6, 4, 2, -2, 2, -2, 0, 2, -10, -14, -10, 6, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.2-c";
N := (21*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 6, 2, -8, 0, 6, -2, 6, 4, -12, 10, 14, -2, 2, -10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.2-d";
N := (21*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 4, -8, -6, -2, 6, 8, -12, 12, -2, -6, 0, -10, 2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.2-e";
N := (21*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, 4, -4, 8, -2, -6, 0, 0, 10, 2, -2, 8, -6, 4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1413.2-f";
N := (21*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -2, 0, -4, 6, -2, 2, -12, 4, -6, -10, -6, -6, -10, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1421.1-a";
N := (-21*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, 6, -2, 8, 0, -4, 2, 10, 4, -8, 14, 6, -4, 14, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1421.2-a";
N := (21*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 1, 6, 8, -2, -4, 0, 2, 10, -8, 4, 6, 14, 14, -4, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1429.1-a";
N := (-22*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -1, -6, -5, -1, -1, -2, 7, -5, 6, 4, 0, 6, 9, -12, 2, 2, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1429.2-a";
N := (22*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, -6, -1, -5, -2, -1, 7, 6, -5, 0, 4, 6, -12, 9, 2, 2, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.1-a";
N := (21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -6, 0, 6, 0, 2, -2, 4, 0, 2, -2, 2, 10, 10, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.1-b";
N := (21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 0, -6, 4, 6, -6, 4, 4, -2, 6, -6, -2, 2, 6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.1-c";
N := (21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -6, 0, 6, -3, 8, -6, 6, 8, -7, 11, -3, -4, 5, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.1-d";
N := (21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -2, 8, 0, -10, -2, 2, 4, 4, -14, -10, 2, -14, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.1-e";
N := (21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 2, -4, 8, 6, -2, 6, -4, 8, -6, -2, 2, 10, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.1-f";
N := (21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, -4, -6, 0, 2, 6, 0, -8, -2, 6, -6, 10, 2, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.1-g";
N := (21*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 6, 6, 8, 4, -6, -6, 10, -8, -8, 2, -10, -10, 2, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.2-a";
N := (-24*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -2, 0, -8, -10, -2, 2, 4, 4, -14, 10, -14, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.2-b";
N := (-24*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, 6, 0, -6, 2, -4, 2, 2, 0, -2, -2, 10, 10, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.2-c";
N := (-24*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, 0, 0, 0, -2, -6, 0, -4, -10, 2, -6, 10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.2-d";
N := (-24*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -6, -6, -4, -8, -6, -10, 6, -8, -8, 2, 10, 2, -10, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.2-e";
N := (-24*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, -6, -4, 6, 6, -4, 6, -2, 4, 6, 6, 2, -2, 16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.2-f";
N := (-24*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, -8, 4, 6, -6, 2, 8, -4, -6, 2, 10, 2, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.2-g";
N := (-24*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 4, -2, 0, 6, 2, 0, -6, -2, -8, 6, 6, 2, 10, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.5-a";
N := (-25*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -3, -2, -6, 5, 3, -4, -3, 8, 7, 0, 2, 13, 14, -8, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.5-b";
N := (-25*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -1, 6, -5, -3, -2, -3, -10, -8, -12, 2, 1, -8, -13, 1, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.5-c";
N := (-25*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 1, 6, 5, -3, 2, 3, -10, -8, -12, 2, 1, 8, 13, -1, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.5-d";
N := (-25*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 3, 2, -6, -5, 3, 4, 3, 8, 7, 0, 2, 13, -14, 8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.6-a";
N := (-2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 0, 3, -6, 6, 1, -6, -6, -4, 8, -1, -12, -2, 7, 1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.6-b";
N := (-2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 0, 8, 3, 4, -6, -7, 0, -2, -2, 6, 11, 2, 2, 7, 17, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.6-c";
N := (-2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, 8, -3, 4, 6, 7, 0, 2, -2, 6, 11, -2, -2, -7, -17, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.6-d";
N := (-2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 0, -3, -6, -6, -1, -6, 6, -4, 8, -1, 12, 2, -7, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.4-a";
N := (21*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, -6, 0, 6, 2, 4, -2, 2, 0, -2, 2, 10, 10, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.4-b";
N := (21*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 6, 4, -6, 6, 4, -6, -2, 4, 6, -6, 2, -2, 16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.4-c";
N := (21*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 0, -6, -3, 6, 8, 6, -6, -7, 8, 11, -3, 5, -4, -1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.4-d";
N := (21*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, 0, 8, -10, 2, -2, 4, 4, -14, -10, -14, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.4-e";
N := (21*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 2, 8, -4, 6, 6, -2, 8, -4, -6, -2, 10, 2, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.4-f";
N := (21*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -4, 2, 0, -6, 2, 0, 6, -2, -8, 6, -6, 2, 10, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.4-g";
N := (21*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 6, 6, 4, 8, -6, 10, -6, -8, -8, 2, -10, 2, -10, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.3-a";
N := (-24*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, -8, 0, -10, 2, -2, 4, 4, -14, 10, 2, -14, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.3-b";
N := (-24*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 6, 0, -6, 0, 2, 2, -4, 0, 2, -2, -2, 10, 10, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.3-c";
N := (-24*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, -6, 0, 0, -2, 0, -6, -10, -4, 2, -6, 10, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.3-d";
N := (-24*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -6, -6, -8, -4, -6, 6, -10, -8, -8, 2, 10, -10, 2, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.3-e";
N := (-24*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, 0, 6, -4, 6, 6, -4, 4, -2, 6, 6, -2, 2, 6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.3-f";
N := (-24*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -2, 4, -8, 6, 2, -6, -4, 8, -6, 2, 2, 10, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.3-g";
N := (-24*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, 4, 6, 0, 2, -6, 0, -8, -2, 6, 6, 10, 2, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.8-a";
N := (-25*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -3, -6, -2, 3, 5, -4, 8, -3, 0, 7, 2, 13, -8, 14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.8-b";
N := (-25*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 6, -1, -3, -5, -2, -10, -3, -12, -8, 2, 1, -13, -8, 16, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.8-c";
N := (-25*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 6, 1, -3, 5, 2, -10, 3, -12, -8, 2, 1, 13, 8, -16, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.8-d";
N := (-25*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 3, -6, 2, 3, -5, 4, 8, 3, 0, 7, 2, 13, 8, -14, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.7-a";
N := (2*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 3, 0, 6, -6, 1, -6, -6, 8, -4, -1, -12, 7, -2, 4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.7-b";
N := (2*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 0, 3, 8, -6, 4, -7, -2, 0, 6, -2, 11, 2, 7, 2, -10, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.7-c";
N := (2*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, -3, 8, 6, 4, 7, 2, 0, 6, -2, 11, -2, -7, -2, 10, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1431.7-d";
N := (2*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -3, 0, -6, -6, -1, 6, -6, 8, -4, -1, 12, -7, 2, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1439.1-a";
N := (10*w - 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 4, 4, 3, -6, -3, -1, -6, 6, -8, -2, 4, 11, 6, 4, 8, 11, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1439.2-a";
N := (10*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 2, 4, 3, 4, -3, -6, -1, 6, -6, -2, -8, 4, 6, 11, 8, 4, -1, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1444.1-a";
N := (38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -1, -1, 4, 4, 1, 2, 2, 11, 11, 13, 0, 0, 6, 6, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1444.1-b";
N := (38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 5, 3, 3, 3, 3, -10, 9, 9, 8, 8, -13, -3, -3, -10, -10, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1444.1-c";
N := (38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 3, 3, -1, -1, 6, -5, -5, 4, 4, -5, -1, -1, 2, 2, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1447.1-a";
N := (-23*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 1, 5, -5, -3, 9, -8, 8, 7, -10, -10, -5, 0, -6, 0, 1, 9, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1447.1-b";
N := (-23*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 2, -2, -8, -4, -4, 8, 3, 4, -4, 4, -10, -2, 0, -8, -14, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1447.1-c";
N := (-23*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 1, -3, 3, 5, 1, 4, -4, -9, 10, 2, -5, -4, -6, 0, 1, -15, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1447.1-d";
N := (-23*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, -2, 6, 0, -4, 4, 4, -7, 0, -8, -4, -2, 2, 12, 0, 10, -6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1447.2-a";
N := (23*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 1, -5, 5, 9, -3, -8, 7, 8, -10, -10, -5, -6, 0, 1, 0, 4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1447.2-b";
N := (23*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 2, -8, -2, -4, -4, 8, 4, 3, 4, -4, -10, 0, -2, -14, -8, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1447.2-c";
N := (23*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 1, 3, -3, 1, 5, 4, -9, -4, 2, 10, -5, -6, -4, 1, 0, -4, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1447.2-d";
N := (23*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 1, -2, 0, 6, 4, -4, 4, 0, -7, -4, -8, -2, 12, 2, 10, 0, -16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1452.1-a";
N := (-22*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 0, -3, 9, -3, -3, 1, -1, 7, 5, -2, -10, 13, -3, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1452.1-b";
N := (-22*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 0, -3, -7, 5, 1, -3, -5, 11, -3, -2, 6, 1, -7, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1452.1-c";
N := (-22*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -4, 3, 1, 3, -5, 9, 7, -13, -11, 0, -8, -7, 5, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1452.2-a";
N := (-22*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 4, 9, -3, -3, 1, -3, 7, -1, 5, -10, -2, -3, 13, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1452.2-b";
N := (-22*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -4, -7, -3, 5, -3, 1, 11, -5, -3, 6, -2, -7, 1, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1452.2-c";
N := (-22*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -6, 1, 3, 3, 9, -5, -13, 7, -11, -8, 0, 5, -7, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1453.1-a";
N := (-3*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, -4, -1, -3, 6, 6, -2, -5, -4, 3, 10, -5, 2, 1, -5, 14, -7, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1453.2-a";
N := (3*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -3, -4, -3, -1, 6, 6, -2, -4, -5, 10, 3, -5, 1, 2, 14, -5, -1, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1468.1-a";
N := (-12*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 5, -6, -6, 0, 6, 8, 6, -9, -1, -10, 5, 6, -3, 8, 8, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1468.2-a";
N := (12*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 5, -6, -6, 6, 0, 8, -9, 6, -10, -1, 5, -3, 6, 8, 8, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1472.1-a";
N := (-24*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 6, -1, -3, 4, 7, 0, 6, -1, -1, -3, 2, 4, -2, 10, 14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1472.1-b";
N := (-24*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, -4, 6, 4, -2, 0, 0, -10, -4, 12, 14, 10, 10, -2, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1472.1-c";
N := (-24*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, 3, -7, -4, -9, 8, -2, -1, 11, 9, 10, 4, -10, -6, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1472.1-d";
N := (-24*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -6, 2, 8, 6, 4, 4, -10, -4, 6, 8, -2, -8, -6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1472.1-e";
N := (-24*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 2, 2, 8, 2, -6, -6, -8, 12, 10, -6, 6, -14, 6, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1472.2-a";
N := (24*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 6, -3, -1, 4, 7, 6, 0, -1, -1, -3, 4, 2, 10, -2, -2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1472.2-b";
N := (24*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 6, 6, -4, 4, -2, 0, 0, -4, -10, 12, 10, 14, -2, 10, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1472.2-c";
N := (24*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 6, -7, 3, -4, -9, -2, 8, 11, -1, 9, 4, 10, -6, -10, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1472.2-d";
N := (24*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 2, -6, 8, 6, 4, 4, -4, -10, 6, -2, 8, -6, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1472.2-e";
N := (24*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 2, 2, 8, 2, -6, -6, 12, -8, 10, 6, -6, 6, -14, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1473.1-a";
N := (-22*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -7, 8, 9, -1, -4, 0, 0, -1, 4, 10, -6, -1, 2, 7, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1473.4-a";
N := (22*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, 8, -7, -1, 9, -4, 0, 0, 4, -1, 10, -1, -6, 7, 2, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.1-a";
N := (w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, 3, 3, -6, -3, -2, 4, 4, 5, -6, -7, 1, 5, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.1-b";
N := (w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 6, 4, 4, -2, 6, -12, 4, -10, 14, -10, 2, -6, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.1-c";
N := (w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, -1, 3, 2, -7, 6, 4, -4, 9, 2, 1, 5, 1, -6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.1-d";
N := (w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 7, 0, -3, -3, 6, 1, -8, 13, -4, 0, 11, 7, -7, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.1-e";
N := (w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -3, -3, 6, 1, 6, -4, -4, 11, -6, 9, 13, 1, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.1-f";
N := (w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 4, 3, -5, -2, -3, 4, -1, -12, -4, 11, -5, 5, -6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.1-g";
N := (w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, -6, 0, 0, 4, -6, -10, -10, -4, -6, 0, -2, -8, 16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.1-h";
N := (w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, -5, 5, 6, 5, -10, 12, 12, 11, 14, -9, 7, -3, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.1-i";
N := (w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 0, -3, 9, -2, 3, 8, 5, -4, 0, -3, 1, 1, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.2-a";
N := (-23*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, -3, -4, 3, -2, 9, 2, -12, -6, 12, -2, -8, -1, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.2-b";
N := (-23*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -4, -7, -4, -5, 2, -3, -10, 0, -6, -12, -6, 4, -5, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.3-a";
N := (25*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 6, 0, 0, -6, -2, -4, -8, 2, 10, -2, -6, -2, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.3-b";
N := (25*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -2, -4, 2, -2, -4, 8, 6, -2, -12, -12, 2, 14, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.3-c";
N := (25*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, -2, 4, 0, 4, -2, -4, 12, -2, 0, -2, -2, -8, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.3-d";
N := (25*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, 2, 0, 8, 6, -10, -4, -4, 10, 10, -2, -2, 10, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.4-a";
N := (5*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 2, -6, 0, -8, -10, 12, 0, 10, -2, -12, 10, 2, 14, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.8-a";
N := (w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, 3, -6, 3, -3, -2, 4, 4, 5, -7, -6, 5, 1, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.8-b";
N := (w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 6, 4, 4, -2, 6, 4, -12, -10, -10, 14, -6, 2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.8-c";
N := (w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, -1, 2, 3, -7, 6, -4, 4, 9, 1, 2, 1, 5, 16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.8-d";
N := (w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 7, 0, -3, -3, 6, 1, 13, -8, -4, 11, 0, -7, 7, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.8-e";
N := (w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -3, 6, -3, 1, 6, -4, -4, 11, 9, -6, 1, 13, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.8-f";
N := (w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 4, -5, 3, -2, -3, -1, 4, -12, 11, -4, 5, -5, 14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.8-g";
N := (w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, -6, 0, 0, 4, -6, -10, -10, -4, 0, -6, -8, -2, 10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.8-h";
N := (w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, -5, 6, 5, 5, -10, 12, 12, 11, -9, 14, -3, 7, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.8-i";
N := (w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 0, 9, -3, -2, 3, 5, 8, -4, -3, 0, 1, 1, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.7-a";
N := (-23*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, -3, 3, -4, -2, 9, -12, 2, -6, -2, 12, -1, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.7-b";
N := (-23*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -4, -7, -5, -4, 2, -3, 0, -10, -6, -6, -12, -5, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.6-a";
N := (-25*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 6, 0, 0, -6, -2, -8, -4, 2, -2, 10, -2, -6, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.6-b";
N := (-25*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -2, 2, -4, -2, -4, 6, 8, -2, -12, -12, 14, 2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.6-c";
N := (-25*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, -2, 0, 4, 4, -2, 12, -4, -2, -2, 0, -8, -2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.6-d";
N := (-25*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, 2, 8, 0, 6, -10, -4, -4, 10, -2, 10, 10, -2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1479.5-a";
N := (5*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 2, 0, -6, -8, -10, 0, 12, 10, -12, -2, 2, 10, 16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1481.1-a";
N := (7*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 5, 2, -4, 4, -7, -3, 5, 6, 10, -4, -10, -6, -11, -12, 1, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1481.1-b";
N := (7*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 4, -1, -2, 4, -2, 3, 8, -6, -8, 8, 5, -12, 11, 0, 2, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1481.2-a";
N := (7*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 5, -4, 2, -7, 4, -3, 6, 5, -4, 10, -10, -11, -6, 1, -12, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1481.2-b";
N := (7*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 4, -2, -1, -2, 4, 3, -6, 8, 8, -8, 5, 11, -12, 2, 0, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1492.1-a";
N := (-22*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -4, 6, -6, 2, 6, -9, -3, -5, 1, 2, -2, 3, -7, 6, -1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1492.1-b";
N := (-22*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -1, 3, 4, 0, 3, 2, -10, 7, 9, 1, -4, -4, 2, -6, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1492.1-c";
N := (-22*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, -2, -5, -9, 4, -4, -3, 7, 10, -4, 1, 10, 10, -14, -5, -10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1492.2-a";
N := (22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 6, -4, 2, -6, 6, -3, -9, 1, -5, 2, 3, -2, 6, -7, -8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1492.2-b";
N := (22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, 3, -1, 0, 4, 3, -10, 2, 9, 7, 1, -4, -4, -6, 2, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1492.2-c";
N := (22*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, -5, -2, 4, -9, -4, 7, -3, -4, 10, 1, 10, 10, -5, -14, 5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1499.1-a";
N := (11*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, 2, 4, 3, 5, -5, 2, 6, -6, -11, -12, -9, 10, 2, -8, 1, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1499.2-a";
N := (11*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 2, 3, 4, -5, 5, 2, -6, 6, -12, -11, -9, 2, 10, 1, -8, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1508.1-a";
N := (2*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 7, 0, -4, -4, 6, 0, -1, 2, 1, -9, -6, -7, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1508.1-b";
N := (2*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -7, 5, -4, -8, 3, -6, 7, 7, -5, -4, -4, -12, 0, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1508.1-c";
N := (2*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 0, -3, 3, -4, -6, 2, 5, -4, 9, 9, 14, 5, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1508.1-d";
N := (2*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 6, -3, 0, 0, 8, 6, 8, -1, 14, -9, 9, -10, -1, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1508.1-e";
N := (2*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, -7, 4, 4, 6, 0, 4, -11, 10, -11, -1, 12, -3, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1508.2-a";
N := (2*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 7, 2, -4, 0, -4, 6, -1, 0, 2, -9, 1, -7, -6, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1508.2-b";
N := (2*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 5, -7, -8, -4, 3, -6, 7, 7, -5, -4, -4, 0, -12, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1508.2-c";
N := (2*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -6, 3, -3, -4, -6, 5, 2, -4, 9, 9, 5, 14, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1508.2-d";
N := (2*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -3, 6, 0, 0, 8, 6, -1, 8, 14, 9, -9, -1, -10, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1508.2-e";
N := (2*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -7, -2, 4, 4, 6, 0, -11, 4, 10, -1, -11, -3, 12, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1509.1-a";
N := (22*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 6, -4, 4, -2, 6, 2, 8, -6, -4, -10, 6, -6, -10, -2, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1509.1-b";
N := (22*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, -2, 2, 0, -4, -1, -4, -4, 3, 0, -10, 0, -14, -4, -10, -15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1509.1-c";
N := (22*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -2, 0, 4, 2, 6, -6, -4, -2, 4, -2, -10, -6, 6, -2, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1509.1-d";
N := (22*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -6, 0, -6, 6, 1, 0, 0, 11, 8, -4, 6, 0, -14, -8, 1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1509.1-e";
N := (22*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, -6, -2, 8, -4, -5, 0, 8, 1, 4, 2, 4, -6, 8, 6, 1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1509.4-a";
N := (22*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, -4, 6, -2, 4, 6, 8, 2, -4, -6, -10, -6, 6, -2, -10, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1509.4-b";
N := (22*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 2, -2, -4, 0, -1, -4, -4, 0, 3, -10, -14, 0, -10, -4, 0, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1509.4-c";
N := (22*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, -2, 2, 4, 6, -4, -6, 4, -2, -2, -6, -10, -2, 6, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1509.4-d";
N := (22*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, 0, -6, 6, -6, 1, 0, 0, 8, 11, -4, 0, 6, -8, -14, 4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1509.4-e";
N := (22*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, -2, -6, -4, 8, -5, 8, 0, 4, 1, 2, -6, 4, 6, 8, -4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1511.1-a";
N := (-24*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, 4, -6, 6, 8, 2, 2, -6, 4, -2, 4, 6, 14, 6, -2, -14, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1511.1-b";
N := (-24*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 1, -1, 0, 6, -5, -1, -2, 0, 10, -8, -11, -12, 4, -3, -7, 2, 14, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1511.2-a";
N := (24*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, 4, 6, -6, 2, 8, 2, 4, -6, 4, -2, 6, 6, 14, -14, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1511.2-b";
N := (24*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -1, 6, 0, -1, -5, -2, 10, 0, -11, -8, -12, -3, 4, 2, -7, -16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-a";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 7, 6, -2, -3, -5, -9, 10, 2, -6, -13, -9, -3, 5, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-b";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, 6, 6, 2, 6, 6, 1, 1, -11, 12, 12, 1, 1, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-c";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, 5, 2, -6, 3, -9, -5, -2, -10, 6, -9, -13, 5, -3, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-d";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 0, -8, 6, -2, 6, 4, -4, 6, -10, 6, 6, -10, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-e";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 7, 7, 6, 6, 9, -1, -1, -6, -6, 10, -9, -9, 1, 1, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-f";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -2, 0, 0, 6, -10, -10, 12, 12, -2, 6, 6, -2, -2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-g";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -7, -7, -6, -6, -9, -1, -1, 6, 6, -10, -9, -9, 1, 1, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-h";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 6, 0, 0, -10, 6, 6, 4, 4, -2, 6, 6, -2, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-i";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 7, -5, -2, 6, -3, -9, -5, 2, 10, -6, -9, -13, 5, -3, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-j";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -8, 0, 6, 6, -2, -4, 4, 6, 6, -10, -10, 6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-k";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, -6, -6, -2, 6, 6, -1, -1, 11, 12, 12, 1, 1, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.1-l";
N := (39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -7, -6, 2, 3, -5, -9, -10, -2, 6, -13, -9, -3, 5, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-a";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -6, 6, 0, 2, 6, 6, 4, 10, 4, -6, 12, -8, 4, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-b";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -3, 9, 3, 2, 0, -6, -10, 8, -4, -3, -6, 8, -10, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-c";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 6, 6, -6, 0, 6, 6, 0, 0, -6, -6, 6, 6, 10, -10, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-d";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 3, -9, -3, -2, 0, -6, 10, -8, 4, -3, -6, 8, -10, -4, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-e";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 3, -3, 6, -6, 7, 3, -3, -8, -8, -14, -3, 3, -1, -1, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-f";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 0, 7, -1, 1, -2, -8, -6, -6, 8, -4, 5, 2, -8, 6, 4, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-g";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 6, 6, 0, -2, 6, -6, 4, 10, 4, -6, -12, 8, -4, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-h";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 3, -6, 6, -7, 3, -3, 8, 8, 14, -3, 3, -1, -1, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-i";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, -2, -4, -8, -2, -2, 6, -12, 8, 2, -10, 2, -14, -6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-j";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 0, -7, 1, -1, 2, -8, -6, 6, -8, 4, 5, 2, -8, 6, 4, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.2-k";
N := (13*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -6, -6, 6, 0, -6, 6, 0, 0, 6, 6, 6, 6, 10, -10, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-a";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -6, 0, 0, 6, 2, 6, 6, 10, 4, 4, 12, -6, 4, -8, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-b";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, 0, 3, 9, 2, -6, 0, 8, -10, -4, -6, -3, -10, 8, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-c";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 6, 6, 0, -6, 6, 0, 6, -6, 0, -6, 6, 6, -10, 10, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-d";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 0, -3, -9, -2, -6, 0, -8, 10, 4, -6, -3, -10, 8, -13, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-e";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, 3, -6, 6, 7, -3, 3, -8, -8, -14, 3, -3, -1, -1, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-f";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 7, 0, 1, -1, -2, -6, -8, 8, -6, -4, 2, 5, 6, -8, -17, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-g";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 6, 0, 0, 6, -2, -6, 6, 10, 4, 4, -12, -6, -4, 8, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-h";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 3, -3, 6, -6, -7, -3, 3, 8, 8, 14, 3, -3, -1, -1, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-i";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -6, -8, -4, -2, 6, -2, 8, -12, 2, 2, -10, -6, -14, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-j";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -7, 0, -1, 1, 2, -6, -8, -8, 6, 4, 2, 5, 6, -8, -17, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1521.3-k";
N := (-13*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -6, -6, 0, 6, -6, 0, 6, 6, 0, 6, 6, 6, -10, 10, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.1-a";
N := (-10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 7, 3, 6, 6, 6, -2, 3, 9, 8, -4, -4, 12, -12, -5, 1, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.1-b";
N := (-10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 0, -6, -8, 4, -6, -2, 0, -8, 4, 2, -2, -10, 2, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.1-c";
N := (-10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -6, 3, -3, 2, -3, 0, -1, 5, 5, -6, -6, 2, -4, 11, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.1-d";
N := (-10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -8, 6, 0, 8, 2, 0, -6, -4, 0, 8, 10, -6, 10, 2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.1-e";
N := (-10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 3, -6, -3, 1, -8, -3, -2, -3, -5, -11, 2, 4, -4, -4, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.1-f";
N := (-10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 0, 6, 0, -2, 6, 0, 8, -4, -4, 6, 6, -14, 10, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.1-g";
N := (-10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 7, -6, 2, 2, 6, 1, -9, 8, 12, -4, 0, 4, 1, -5, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.2-a";
N := (22*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 6, 3, -2, -8, 3, -10, 3, 5, -11, -5, -3, 9, -6, -1, -11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.2-b";
N := (22*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -8, 5, -4, -4, -7, 6, 9, 5, 11, 1, -9, -3, -2, 5, 9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.2-c";
N := (22*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 3, -4, -4, 3, -6, -7, 1, -7, -9, 3, -13, 6, -15, -1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.2-d";
N := (22*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 6, 3, 3, -3, -2, 0, 3, 5, -1, 5, 12, -6, 4, 4, 4, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.2-e";
N := (22*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, -3, -1, -1, 6, 0, -1, -11, -7, 3, 0, -10, -12, 12, 8, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.2-f";
N := (22*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -3, -3, -9, -8, -2, 1, -9, 11, -1, -12, -10, -4, 0, 6, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.2-g";
N := (22*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, -3, -6, 0, 5, -6, -9, -7, -1, 5, 9, 3, 2, 11, 11, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.4-a";
N := (10*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 7, 6, 3, 6, 6, -2, 9, 3, -4, 8, -4, -12, 12, 1, -5, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.4-b";
N := (10*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -6, -8, -6, 4, -2, -6, -8, 0, 4, -2, 2, 2, -10, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.4-c";
N := (10*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, -3, -3, 3, 2, 0, -3, 5, -1, 5, -6, -6, -4, 2, 8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.4-d";
N := (10*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -8, 2, 0, 6, 8, 0, 2, -4, -6, 0, 10, 8, 10, -6, 16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.4-e";
N := (10*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, 3, 1, -3, -8, -2, -3, -5, -3, -11, 4, 2, -4, -4, -6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.4-f";
N := (10*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 0, 0, 6, -2, 0, 6, -4, 8, -4, 6, 6, 10, -14, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.4-g";
N := (10*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -6, 7, 2, 2, 6, -9, 1, 12, 8, -4, 4, 0, -5, 1, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.3-a";
N := (22*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 3, 6, -8, -2, 3, 3, -10, -11, 5, -5, 9, -3, -1, -6, -8, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.3-b";
N := (22*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, -8, -4, -4, -7, 9, 6, 11, 5, 1, -3, -9, 5, -2, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.3-c";
N := (22*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, -4, -4, -4, 3, -7, -6, -7, 1, -9, -13, 3, -15, 6, -8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.3-d";
N := (22*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 3, 6, -3, 3, -2, 3, 0, -1, 5, 5, -6, 12, 4, 4, 7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.3-e";
N := (22*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 2, -1, -1, 6, -1, 0, -7, -11, 3, -10, 0, 12, -12, 13, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.3-f";
N := (22*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, -2, -9, -3, -8, 1, -2, 11, -9, -1, -10, -12, 0, -4, -1, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1524.3-g";
N := (22*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -3, -6, 0, -6, 5, -9, -6, -1, -7, 5, 3, 9, 11, 2, -4, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1525.1-a";
N := (-25*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 3, -4, 4, 2, -6, 6, 2, -10, 0, -8, 10, 2, 8, 2, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1525.2-a";
N := (-25*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, -4, 2, 4, 6, -6, -10, 2, -8, 0, 10, 8, 2, 2, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1537.1-a";
N := (-22*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -5, 3, -6, 0, -6, 4, 6, -10, -1, 5, 0, -8, 4, -17, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1537.1-b";
N := (-22*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 2, -3, 4, -3, 8, 2, 3, -8, -12, 5, -4, -8, 0, 13, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1537.2-a";
N := (23*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -3, -1, -8, 2, 6, -9, -8, -6, -4, 13, -5, 7, -8, -5, 0, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1537.4-a";
N := (22*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -5, -6, 3, -6, 0, 4, 6, -1, -10, 5, 0, 4, -8, 1, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1537.4-b";
N := (22*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 2, 4, -3, 8, -3, 2, 3, -12, -8, 5, -4, 0, -8, 13, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1537.3-a";
N := (23*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, -1, 2, -8, -9, 6, -8, -6, 13, -4, -5, 7, -5, -8, 1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-a";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -2, -4, -6, -6, -4, -8, -4, -6, -2, 8, -10, -8, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-b";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 0, -6, -4, -2, -4, -6, -12, -6, -12, -4, -2, 14, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-c";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -7, 8, -6, 3, -1, -2, 6, 4, 10, 1, 2, -6, 1, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-d";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -6, 0, 8, 6, -2, 2, 4, -6, -2, 10, 2, -2, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-e";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, -6, 8, -2, 6, 6, -4, 0, 6, -2, -6, -2, -6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-f";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -4, -6, 4, -2, 6, 2, 4, -8, -6, 6, 2, 10, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-g";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, 0, -2, 0, 6, -4, 14, 0, 0, -2, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-h";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 4, -2, -6, 8, -4, 4, 10, 6, 12, 14, -4, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-i";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 0, -6, -1, 7, -10, 6, 12, -6, -3, 2, 10, -7, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-j";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, -4, -2, 1, -3, -6, -2, -8, 6, -1, -2, -6, -11, 16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-k";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -3, 0, 6, 3, -5, 6, -6, 8, 2, -9, 6, 10, -5, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.1-l";
N := (-24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 8, -4, -2, 6, -2, 4, -2, 10, -14, -14, 10, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.3-a";
N := (-22*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 4, 5, 0, -7, -3, -2, 6, 0, -10, 2, 0, 11, 2, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.3-b";
N := (-22*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, -6, 0, 0, 10, 0, 0, 8, -4, 6, -6, 10, 10, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.3-c";
N := (-22*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, 1, 6, 3, 1, 2, -8, 4, -4, 6, -12, -15, -8, -11, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.3-d";
N := (-22*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -3, -6, -3, -7, -6, 0, -4, -4, 6, -12, -7, 8, -1, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.3-e";
N := (-22*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 2, 0, -4, 6, -6, -10, -4, -2, 2, -6, 10, -2, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.3-f";
N := (-22*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -6, 0, -6, 2, 6, -6, -4, -4, -6, 12, 2, 8, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.3-g";
N := (-22*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -4, 5, 0, -7, 3, 2, 6, 0, -10, -2, 0, -11, -2, 5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-a";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 7, 0, -8, -3, -7, 4, 4, -6, 4, -9, -14, -12, -1, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-b";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 1, -2, -6, 1, -3, -8, -6, -12, 8, -1, -12, 4, -5, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-c";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -5, -6, 0, 7, -5, -1, 6, -11, -5, 0, 2, -5, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-d";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -3, 6, 6, -1, -3, -3, 8, -13, 3, 12, 2, 11, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-e";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -3, -6, 6, 1, 9, -9, 8, 5, 9, 0, -2, 7, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-f";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 3, 8, -4, 9, -3, 8, -4, 2, -12, -11, -2, -8, -7, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-g";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 2, 5, -8, 2, -7, -1, 9, -6, -11, 11, 6, 8, -11, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-h";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 3, -6, -6, -1, 9, 9, 8, 5, 9, 0, 2, -7, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-i";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 3, 6, -6, 1, -3, 3, 8, -13, 3, -12, -2, -11, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-j";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 1, 2, -6, -1, 3, -8, 6, -12, 8, -1, 12, -4, 5, 16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-k";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -3, 4, 6, -1, -5, -5, -6, -5, 9, -14, -12, -7, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-l";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 1, -2, 8, 9, -9, 5, 10, 9, -13, -4, -6, 5, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-m";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -6, 5, 8, -6, -1, 3, -5, -6, -13, 1, -2, 8, -15, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.4-n";
N := (-4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, 3, 0, -6, -1, 3, 3, -10, 5, -9, -6, 8, -1, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-a";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 6, -6, -4, -6, -8, -4, -4, -6, 8, -2, -8, -10, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-b";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 0, -4, -6, -2, -6, -4, -12, -6, -4, -12, 14, -2, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-c";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 8, -7, 3, -6, -1, 6, -2, 4, 10, 2, 1, 1, -6, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-d";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 2, 8, 0, 6, 2, -2, 4, -6, 10, -2, -2, 2, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-e";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, 8, -6, -2, 6, 6, -4, 0, -2, 6, -2, -6, 16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-f";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 6, 4, -6, -2, 2, 6, 4, -8, 6, -6, 10, 2, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-g";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 0, -6, -2, 6, 0, -4, 14, 0, 0, 10, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-h";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -2, 4, -6, -4, 8, 4, 10, 12, 6, -4, 14, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-i";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -3, -1, -6, 7, 6, -10, 12, -6, 2, -3, -7, 10, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-j";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -7, 1, -2, -3, -2, -6, -8, 6, -2, -1, -11, -6, 6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-k";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 0, -3, 3, 6, -5, -6, 6, 8, 2, 6, -9, -5, 10, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.2-l";
N := (24*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -4, 8, -2, -2, 6, 4, -2, -14, 10, 10, -14, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.6-a";
N := (-22*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 5, 4, -7, 0, -3, 6, -2, 0, -10, 0, 2, 2, 11, 1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.6-b";
N := (-22*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -6, 0, 0, 0, 10, 0, 0, 8, -4, -6, 6, 10, 10, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.6-c";
N := (-22*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 1, 0, 3, 6, 1, -8, 2, 4, -4, -12, 6, -8, -15, 7, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.6-d";
N := (-22*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -3, 0, -3, -6, -7, 0, -6, -4, -4, -12, 6, 8, -7, 17, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.6-e";
N := (-22*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 2, -4, 0, 6, -10, -6, -4, -2, -6, 2, -2, 10, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.6-f";
N := (-22*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 0, -6, 0, 2, -6, 6, -4, -4, 12, -6, 8, 2, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.6-g";
N := (-22*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 5, -4, -7, 0, 3, 6, 2, 0, -10, 0, -2, -2, -11, -1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-a";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 7, -3, -8, -7, 4, 4, -6, 4, -14, -9, -1, -12, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-b";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -2, 1, 1, -6, -3, -6, -8, -12, 8, -12, -1, -5, 4, -10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-c";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -5, 0, 0, -6, 7, -1, -5, 6, -11, 0, -5, -5, 2, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-d";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -3, 0, 6, 6, -1, -3, -3, 8, -13, 12, 3, 11, 2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-e";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, 0, 6, -6, 1, -9, 9, 8, 5, 0, 9, 7, -2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-f";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 8, 3, 9, -4, -3, -4, 8, 2, -12, -2, -11, -7, -8, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-g";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 5, 2, 2, -8, -7, 9, -1, -6, -11, 6, 11, -11, 8, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-h";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 0, -6, -6, -1, 9, 9, 8, 5, 0, 9, -7, 2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-i";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, 0, -6, 6, 1, 3, -3, 8, -13, -12, 3, -11, -2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-j";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 2, 1, -1, -6, 3, 6, -8, -12, 8, 12, -1, 5, -4, 10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-k";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -3, -2, 6, 4, -1, -5, -5, -6, -5, -14, 9, -7, -12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-l";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, -4, 8, -2, 9, 5, -9, 10, 9, -4, -13, 5, -6, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-m";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 5, -6, -6, 8, -1, -5, 3, -6, -13, -2, 1, -15, 8, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1548.5-n";
N := (4*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 3, -6, -6, 0, -1, 3, 3, -10, 5, -6, -9, -1, 8, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1556.1-a";
N := (-8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 7, 7, 4, -2, 1, 4, 6, 1, 5, -5, 0, 2, 2, -10, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1556.1-b";
N := (-8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -7, -2, 4, 4, 6, 5, 0, -1, -1, 10, -11, -6, 2, -8, 5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1556.1-c";
N := (-8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 4, -4, -6, 3, 0, 9, -4, -3, -1, -2, -9, -2, -2, -6, 14, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1556.1-d";
N := (-8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 1, -5, 2, -4, 0, -2, 3, -4, -1, 13, -6, 9, -2, 2, 0, -13, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1556.2-a";
N := (8*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 0, 7, 7, -2, 4, 1, 6, 4, 5, 1, -5, 2, 0, -10, 2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1556.2-b";
N := (8*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -2, -7, 4, 4, 6, 0, 5, -1, -1, 10, -6, -11, -8, 2, -10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1556.2-c";
N := (8*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 4, -6, -4, 0, 3, 9, -3, -4, -2, -1, -9, -2, -2, 14, -6, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1556.2-d";
N := (8*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, 2, -5, 0, -4, -2, -4, 3, 13, -1, -6, -2, 9, 0, 2, 14, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.1-a";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 2, 8, -8, -2, 6, -2, 8, 0, 2, -6, -10, 14, 10, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.1-b";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, 0, 2, -8, 10, 0, -10, 0, 2, -4, 14, -6, 10, 10, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.1-c";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -2, 4, -8, -6, -6, 6, -4, 8, -2, 6, 6, 6, -2, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.1-d";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 8, -4, 2, 0, 6, 8, 6, -4, -6, 0, -6, -6, -6, -2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.3-a";
N := (w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -1, -2, 5, 0, 1, -1, 3, -4, -7, -1, -10, 8, 0, -14, -13, 4, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.3-b";
N := (w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, -2, -2, -8, 6, -6, -2, 0, -10, 0, 12, 6, 6, 6, -14, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.3-c";
N := (w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, -2, 7, 4, -3, -3, -5, 0, -1, 9, -6, -12, 12, 6, 1, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.3-d";
N := (w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -2, 4, 4, -3, -4, 1, -6, -5, -4, -10, 11, -4, 0, 8, 13, 5, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.3-e";
N := (w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 6, -3, 0, 3, -1, 3, 0, 11, 5, -10, 0, 12, -10, 11, 8, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.3-f";
N := (w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 2, 4, -4, -3, 4, -1, -6, 5, -4, -10, 11, -4, 0, -8, -13, -5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.2-a";
N := (12*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -6, -8, 8, -2, -2, 6, 0, 8, 2, -10, -6, 10, 14, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.2-b";
N := (12*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, 0, -8, 2, 10, -10, 0, 2, 0, -4, -6, 14, 10, 10, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.2-c";
N := (12*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 6, -8, 4, -6, 6, -6, 8, -4, -2, 6, 6, -2, 6, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.2-d";
N := (12*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -4, 8, 0, 2, 6, 6, 8, -6, -4, 0, -6, -6, -2, -6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.6-a";
N := (w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -1, 5, -2, 1, 0, -1, -4, 3, -1, -7, -10, 0, 8, -13, -14, 11, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.6-b";
N := (w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, -2, -2, 6, -8, -6, 0, -2, 0, -10, 12, 6, 6, -14, 6, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.6-c";
N := (w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 7, -2, -3, 4, -3, 0, -5, 9, -1, -6, 12, -12, 1, 6, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.6-d";
N := (w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -2, 4, 4, -4, -3, 1, -5, -6, -10, -4, 11, 0, -4, 13, 8, -11, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.6-e";
N := (w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, -3, 6, 3, 0, -1, 0, 3, 5, 11, -10, 12, 0, 11, -10, -7, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1557.6-f";
N := (w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 2, -4, 4, 4, -3, -1, 5, -6, -10, -4, 11, 0, -4, -13, -8, 11, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1563.2-a";
N := (7*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, 2, 3, -8, -7, 1, -3, -2, 5, -8, 0, 0, 2, -2, 7, -16, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1563.2-b";
N := (7*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, 4, -1, -2, 9, -7, 1, -2, -11, -2, -12, 12, 12, 10, 7, -4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1563.2-c";
N := (7*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 3, -1, -3, 5, -2, -10, -9, -1, -8, 4, -3, -10, -11, -10, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1563.2-d";
N := (7*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 1, 2, -5, 2, 1, -7, -7, 2, 5, 6, -10, -4, 8, 10, 11, -12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1563.2-e";
N := (7*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 6, -2, 6, 4, 2, -10, 6, 8, 4, 4, -12, -2, 8, 10, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1563.3-a";
N := (7*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, 3, 2, -7, -8, 1, -2, -3, -8, 5, 0, 2, 0, 7, -2, -3, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1563.3-b";
N := (7*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, -1, 4, 9, -2, -7, -2, 1, -2, -11, -12, 12, 12, 7, 10, 1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1563.3-c";
N := (7*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, -1, 3, 5, -3, -2, -9, -10, -8, -1, 4, -10, -3, -10, -11, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1563.3-d";
N := (7*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 1, -5, 2, 1, 2, -7, 2, -7, 6, 5, -10, 8, -4, 11, 10, 1, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1563.3-e";
N := (7*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -2, 6, 4, 6, 2, 6, -10, 4, 8, 4, -2, -12, 10, 8, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.1-a";
N := (-22*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, 0, -2, -8, -4, 8, 6, 6, -6, 0, 10, 0, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.2-a";
N := (-6*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 1, 4, -5, 3, -7, -8, -6, -4, 2, 9, -4, 10, -8, 9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.2-b";
N := (-6*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 2, -8, -2, 8, 0, 2, 4, -10, -4, 6, 4, 10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.2-c";
N := (-6*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -5, 0, -3, -9, -1, -10, 6, -8, 8, -13, 4, -6, 6, 7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.2-d";
N := (-6*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, 0, 9, 1, 9, -6, -10, -4, -4, -3, 0, 10, 10, -5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.2-e";
N := (-6*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -2, -4, 6, 2, 8, -6, 6, -2, -8, 0, 10, -8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.2-f";
N := (-6*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, -2, 4, 6, 0, 6, 0, -6, -2, -6, -4, 0, 0, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.2-g";
N := (-6*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -4, -5, 7, 5, 6, -10, 4, 8, -1, 12, -14, -2, -1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.2-h";
N := (-6*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, -6, -9, -5, -9, 0, -4, -4, -4, 3, -6, -8, 10, 1, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.2-i";
N := (-6*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, -8, 1, 1, -7, 8, 2, -4, -6, -9, 8, -6, 0, 5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.4-a";
N := (-22*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 2, 0, -2, -4, -8, 6, 8, 6, 0, -6, 0, 10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.3-a";
N := (6*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 1, 4, -5, 3, -8, -7, -4, -6, 2, -4, 9, -8, 10, -2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.3-b";
N := (6*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, -8, -2, 0, 8, 4, 2, -10, 6, -4, 10, 4, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.3-c";
N := (6*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -5, 0, -3, -9, -10, -1, -8, 6, 8, 4, -13, 6, -6, -10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.3-d";
N := (6*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, 0, 9, 1, -6, 9, -4, -10, -4, 0, -3, 10, 10, 10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.3-e";
N := (6*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, -2, -4, 6, 8, 2, 6, -6, -2, 0, -8, -8, 10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.3-f";
N := (6*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, -2, 4, 6, 6, 0, -6, 0, -2, -4, -6, 0, 0, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.3-g";
N := (6*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -4, -5, 7, 6, 5, 4, -10, 8, 12, -1, -2, -14, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.3-h";
N := (6*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, -6, -9, -5, 0, -9, -4, -4, -4, -6, 3, 10, -8, -14, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1564.3-i";
N := (6*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 3, -8, 1, 1, 8, -7, -4, 2, -6, 8, -9, 0, -6, 6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1569.1-a";
N := (-22*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 3, -6, 0, -6, -1, 2, -1, -4, -4, -6, -4, -1, -8, 7, 6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1569.1-b";
N := (-22*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -6, -3, -6, 0, -1, 3, 6, 8, -4, -1, 0, 6, 8, -7, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1569.1-c";
N := (-22*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 4, 3, 0, -2, 4, -3, -8, 5, 4, -8, -10, -6, 3, -6, 1, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1569.1-d";
N := (-22*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -4, -3, -6, -4, -2, -9, -10, -7, 4, -8, 2, 12, -9, 0, -1, 10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1569.4-a";
N := (22*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, -6, 3, -6, 0, -1, -1, 2, -4, -4, -6, -1, -4, 7, -8, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1569.4-b";
N := (22*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -3, -6, 0, -6, -1, 6, 3, -4, 8, -1, 6, 0, -7, 8, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1569.4-c";
N := (22*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 4, 0, 3, 4, -2, -3, 5, -8, -8, 4, -10, 3, -6, 1, -6, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1569.4-d";
N := (22*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -4, -6, -3, -2, -4, -9, -7, -10, -8, 4, 2, -9, 12, -1, 0, -2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.1-a";
N := (-26*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -6, 2, 6, 8, 6, 8, 0, -8, 6, 10, 6, -6, -10, -6, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.1-b";
N := (-26*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 2, 6, 0, -2, -3, -8, -1, 2, -6, 6, 3, -15, -13, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.1-c";
N := (-26*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 3, -2, -6, 4, 6, 5, 0, -11, -6, 10, -6, 9, 7, -3, 0, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.1-d";
N := (-26*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -6, 0, -6, 2, 6, 6, 8, 2, 2, -6, 12, 2, -10, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.2-a";
N := (22*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, -4, 1, 0, -4, 0, 2, -5, 7, -9, 4, 11, 8, -8, 12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.2-b";
N := (22*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, 4, -9, 0, -8, 4, -6, -7, -7, 3, 0, -3, 8, 0, -12, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.2-c";
N := (22*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -2, -6, -3, 4, -2, -10, 4, 1, -9, 5, 6, 1, -6, 10, -16, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.4-a";
N := (-26*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, -6, 8, 6, 6, 0, 8, 6, -8, 10, -6, 6, -6, -10, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.4-b";
N := (-26*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 1, 0, 6, -2, -8, -3, 2, -1, -6, 3, 6, -13, -15, -3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.4-c";
N := (-26*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, 3, 4, -6, 6, 0, 5, -6, -11, 10, 9, -6, -3, 7, -15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.4-d";
N := (-26*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -6, -6, 0, 2, 6, 6, 2, 8, 2, 12, -6, -10, 2, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.3-a";
N := (22*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -4, -2, 0, 1, -4, 2, 0, 7, -5, -9, 11, 4, -8, 8, 1, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.3-b";
N := (22*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 2, 0, -9, -8, -6, 4, -7, -7, 3, -3, 0, 0, 8, -13, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1572.3-c";
N := (22*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -6, -2, 4, -3, -2, 4, -10, -9, 1, 5, 1, 6, 10, -6, -1, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1573.1-a";
N := (-22*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -4, -4, 7, 7, -9, -2, -2, -4, -4, -10, 2, 2, -2, -2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1583.1-a";
N := (-24*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 1, -2, 0, -4, 6, 8, -2, -4, -2, 8, -8, 4, 6, -6, -2, -14, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1583.1-b";
N := (-24*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 5, -6, 6, 0, 6, 2, 0, -3, -4, -4, -4, 3, 9, 2, 2, 8, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1583.1-c";
N := (-24*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, -7, 0, -8, -6, 4, 8, -10, 5, 2, 4, 4, -9, 9, -4, 2, -16, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1583.2-a";
N := (-24*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, -2, -4, 0, 8, 6, -2, -2, -4, -8, 8, 4, -6, 6, -14, -2, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1583.2-b";
N := (-24*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 5, 6, -6, 6, 0, 2, -3, 0, -4, -4, -4, 9, 3, 2, 2, 17, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1583.2-c";
N := (-24*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -7, -8, 0, 4, -6, 8, 5, -10, 4, 2, 4, 9, -9, 2, -4, -7, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.1-a";
N := (-23*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, 2, 6, -2, 6, -2, 4, -8, 2, -10, -2, 14, -10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.1-b";
N := (-23*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 6, 0, 1, -9, 3, -4, -10, 2, -12, 12, -2, -2, 10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.1-c";
N := (-23*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -1, 0, -8, -5, -9, -3, -4, -8, -6, 6, -2, 0, 6, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.1-d";
N := (-23*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -2, 4, -4, 2, -6, 8, 10, 10, -10, -10, -14, 14, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.1-e";
N := (-23*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, -6, -6, 1, 9, -9, -10, -4, -10, 0, -12, -8, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.1-f";
N := (-23*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, 5, 0, 4, 0, 7, -2, 4, -10, 2, -11, -13, -1, -2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-a";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 2, -6, 8, -2, 6, -2, -12, 8, 10, 6, -6, -2, 10, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-b";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 0, 2, 3, 5, -4, -6, 2, -12, 10, 5, -12, -9, 10, -10, -15, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-c";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, -7, 5, 8, -5, -10, 3, 8, -6, -6, -9, -6, 7, 1, 14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-d";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 0, 2, -3, 5, 4, 6, -2, -12, -10, -5, -12, 9, 10, 10, 15, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-e";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -1, -7, -5, 8, 5, 10, -3, 8, 6, 6, -9, 6, 7, -1, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-f";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -4, 2, 7, -1, 8, 10, -6, -4, -6, 9, 0, -9, -14, 2, -5, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-g";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, -3, -3, 0, -1, 6, 3, 8, 10, 10, 3, -6, -5, 5, -10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-h";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -4, 2, -7, -1, -8, -10, 6, -4, 6, -9, 0, 9, -14, -2, 5, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-i";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, -6, -6, 0, -8, -6, -6, -8, 6, -6, -6, 0, -6, -8, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-j";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -5, -3, 3, 0, 1, -6, -3, 8, -10, -10, 3, 6, -5, -5, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.4-k";
N := (-2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -6, -6, 6, 0, 8, 6, 6, -8, -6, 6, -6, 0, -6, 8, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.2-a";
N := (-23*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, 6, 2, -2, -2, 6, -8, 4, 2, -2, -10, -10, 14, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.2-b";
N := (-23*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 0, 6, 1, 3, -9, -10, -4, 2, 12, -12, -2, -2, -2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.2-c";
N := (-23*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -1, -8, 0, -5, -3, -9, -8, -4, -6, -2, 6, 6, 0, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.2-d";
N := (-23*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 4, -2, -4, -6, 2, 10, 8, 10, -10, -10, 14, -14, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.2-e";
N := (-23*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, -6, -6, 1, -9, 9, -4, -10, -10, -12, 0, -8, -8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.2-f";
N := (-23*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, 0, 5, 4, 7, 0, 4, -2, -10, -11, 2, -1, -13, 1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-a";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, -6, 2, 8, -2, -2, 6, 8, -12, 10, -6, 6, 10, -2, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-b";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 0, 3, 2, 5, -4, 2, -6, 10, -12, 5, -9, -12, -10, 10, 11, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-c";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, 5, -7, 8, -5, 3, -10, -6, 8, -6, -6, -9, 1, 7, 10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-d";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 0, -3, 2, 5, 4, -2, 6, -10, -12, -5, 9, -12, 10, 10, 11, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-e";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -1, -5, -7, 8, 5, -3, 10, 6, 8, 6, 6, -9, -1, 7, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-f";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -4, 7, 2, -1, 8, -6, 10, -6, -4, 9, -9, 0, 2, -14, 13, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-g";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, -3, -3, 0, -1, 3, 6, 10, 8, 10, -6, 3, 5, -5, -14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-h";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -4, -7, 2, -1, -8, 6, -10, 6, -4, -9, 9, 0, -2, -14, 13, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-i";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, -6, -6, 0, -8, -6, -6, 6, -8, -6, 0, -6, -8, -6, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-j";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -5, 3, -3, 0, 1, -3, -6, -10, 8, -10, 6, 3, -5, -5, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1587.5-k";
N := (2*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -6, 6, -6, 0, 8, 6, 6, -6, -8, 6, 0, -6, 8, -6, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-a";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 6, -2, 0, 4, -2, 6, 6, 2, -2, -4, -12, 2, -6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-b";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, 0, 4, 0, -2, -6, -2, 8, -2, -10, 4, -8, 10, -14, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-c";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -2, 6, 4, 0, 6, -2, 2, 6, -2, -12, -4, -6, 2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-d";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 2, 2, 4, 4, -2, -2, -8, -8, 2, 6, 6, -2, -2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-e";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 4, 0, -2, 0, -2, -6, -2, 8, -10, -8, 4, -14, 10, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-f";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, -4, 0, 6, 0, -2, 6, 4, 6, 6, 6, -6, 2, 14, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-g";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 0, -4, 0, 6, 6, -2, 6, 4, 6, -6, 6, 14, 2, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-h";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -4, 0, -4, -6, -10, 6, -2, -4, -10, -10, 10, -10, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-i";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, -4, -8, 8, 2, -6, -2, -8, 2, -2, 0, -4, -14, -6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-j";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -8, -4, 2, 8, -2, -6, 2, -8, -2, -4, 0, -6, -14, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1600.1-k";
N := (40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 0, -4, -6, -4, 6, -10, -4, -2, -10, 10, -10, 2, -10, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.1-a";
N := (3*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -2, 2, 3, -1, -1, 8, 4, 2, 7, -3, 4, -3, -6, -4, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.1-b";
N := (3*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -5, -4, -2, 4, -6, 6, -11, 1, -8, 11, -9, -2, 3, -1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.1-c";
N := (3*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, -2, 9, 9, -9, 4, 8, 6, -9, 1, 0, -9, -14, -4, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.1-d";
N := (3*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 2, 6, 3, -3, -5, 0, 0, -6, 7, 3, 4, 1, 10, -8, -10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.1-e";
N := (3*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -3, 6, -4, -4, -4, -2, -7, -3, -8, 1, 5, 2, 3, 15, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.3-a";
N := (-10*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, 4, -6, 0, 0, -6, 8, -10, 0, -12, 4, 6, 6, -14, 14, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.4-a";
N := (25*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 0, -1, 4, 2, 4, 6, -2, 5, 1, 8, -1, -13, -10, -13, 7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.4-b";
N := (25*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 6, 2, 4, -4, -2, -6, -2, -4, 4, -10, -10, -10, -10, 14, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.4-c";
N := (25*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 7, -3, 0, -6, 0, -2, 3, 0, -10, -7, 11, -9, -9, 1, 1, 1, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.2-a";
N := (3*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 2, -2, -1, 3, -1, 4, 8, 7, 2, -3, -3, 4, -4, -6, 6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.2-b";
N := (3*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -5, 4, -2, -4, 4, 6, -6, 1, -11, -8, -9, 11, 3, -2, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.2-c";
N := (3*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 6, 9, 9, -9, 8, 4, -9, 6, 1, -9, 0, -4, -14, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.2-d";
N := (3*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 6, 2, -3, 3, -5, 0, 0, 7, -6, 3, 1, 4, -8, 10, -6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.2-e";
N := (3*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -3, -4, -4, 6, -4, -2, -4, -3, -7, -8, 5, 1, 3, 2, -12, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.6-a";
N := (10*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, -6, 4, 0, 0, -6, -10, 8, -12, 0, 4, 6, 6, 14, -14, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.5-a";
N := (25*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -1, 0, 2, 4, 4, -2, 6, 1, 5, 8, -13, -1, -13, -10, -6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.5-b";
N := (25*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 2, 6, -4, 4, -2, -2, -6, 4, -4, -10, -10, -10, 14, -10, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1611.5-c";
N := (25*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 7, 0, -3, 0, -6, -2, 0, 3, -7, -10, 11, -9, -9, 1, 1, -11, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.1-a";
N := (-9*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -6, -6, -6, 8, -4, 2, -8, 6, 10, -6, -2, 0, -10, -8, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.1-b";
N := (-9*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, -6, -2, -4, -2, 4, -4, 4, 4, -2, -6, -4, 2, -10, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.1-c";
N := (-9*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 6, -6, 8, 0, 6, 2, -2, 0, -8, 2, -2, -10, -2, 10, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.1-d";
N := (-9*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 0, -6, 0, -4, -4, -4, -2, 6, -2, 6, -14, -6, 2, -8, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.1-e";
N := (-9*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -4, -6, -6, 4, -2, 0, -8, -12, -4, 6, 2, 8, 10, 6, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.1-f";
N := (-9*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 2, -2, 0, 4, -2, -4, 10, 6, 10, 6, -4, 10, 8, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.1-g";
N := (-9*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 2, -2, 4, 6, 0, -4, -12, -4, -10, -6, -4, -2, 14, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.1-h";
N := (-9*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, 2, -4, -8, -6, -6, -2, 4, 12, -6, 14, -10, -6, -10, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.3-a";
N := (-4*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 2, 4, 0, -4, -8, -6, 6, 8, -4, 6, 10, -2, 14, 4, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.3-b";
N := (-4*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, 2, -4, 0, 4, 8, -6, -6, 8, -4, 6, 10, 2, -14, -4, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.4-a";
N := (23*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 3, 2, -7, 6, 4, 2, 9, -6, -10, -4, -12, -2, 2, 1, 2, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.4-b";
N := (23*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -5, 2, -7, 8, 0, 8, 5, -4, -8, 0, 10, -6, -10, -7, -8, -14, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.4-c";
N := (23*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, -6, -3, -6, -6, -2, -3, -6, 8, -10, -4, -12, 0, 1, 10, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.4-d";
N := (23*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -3, -2, -7, -6, 4, -2, -9, -6, -10, -4, -12, 2, 2, -1, -2, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.2-a";
N := (9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -6, -6, 8, -6, -4, -8, 2, 10, 6, -6, 0, -2, -8, -10, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.2-b";
N := (9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -6, 0, -4, -2, -2, -4, 4, 4, 4, -2, -4, -6, -10, 2, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.2-c";
N := (9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -6, 6, 0, 8, 6, -2, 2, -8, 0, 2, -10, -2, 10, -2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.2-d";
N := (9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -6, 0, -4, 0, -4, -2, -4, -2, 6, 6, -6, -14, -8, 2, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.2-e";
N := (9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -6, -4, 4, -6, -2, -8, 0, -4, -12, 6, 8, 2, 6, 10, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.2-f";
N := (9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, -2, 0, -2, 4, -4, -2, 6, 10, 10, -4, 6, 8, 10, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.2-g";
N := (9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 4, 4, -2, 6, -4, 0, -4, -12, -10, -4, -6, 14, -2, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.2-h";
N := (9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 6, -8, -4, -6, -2, -6, 12, 4, -6, -10, 14, -10, -6, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.6-a";
N := (4*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 4, 2, -4, 0, -8, 6, -6, -4, 8, 6, -2, 10, 4, 14, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.6-b";
N := (4*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, -4, 2, 4, 0, 8, -6, -6, -4, 8, 6, 2, 10, -4, -14, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.5-a";
N := (23*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 3, -7, 2, 4, 6, 2, -6, 9, -4, -10, -12, 2, -2, 2, 1, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.5-b";
N := (23*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -5, -7, 2, 0, 8, 8, -4, 5, 0, -8, 10, -10, -6, -8, -7, -16, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.5-c";
N := (23*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, -3, -6, -6, -6, -2, -6, -3, -10, 8, -4, 0, -12, 10, 1, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1629.5-d";
N := (23*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -3, -7, -2, 4, -6, -2, -6, -9, -4, -10, -12, 2, 2, -2, -1, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1637.1-a";
N := (w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 5, 0, 3, 6, 9, -4, 9, -3, 2, -4, 14, 0, 6, 2, -1, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1637.2-a";
N := (w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 5, 3, 0, 9, 6, -4, -3, 9, -4, 2, 14, 6, 0, -1, 2, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1641.2-a";
N := (-5*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, -2, 1, -5, 9, 3, -9, -4, -12, -4, -8, 3, -4, 11, -8, -1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1641.2-b";
N := (-5*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -6, -2, -4, -2, -6, -6, -8, 10, 4, -8, 10, 2, 2, 6, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1641.2-c";
N := (-5*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 2, -2, 0, -4, -2, -2, 6, -4, -4, 2, 6, -2, 2, -10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1641.2-d";
N := (-5*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 2, -2, -3, 3, -3, 7, -1, -4, 4, -12, 8, 3, -4, -1, -8, 11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1641.3-a";
N := (5*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 1, -2, 9, -5, 3, -4, -9, -4, -12, -8, -4, 3, -8, 11, -2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1641.3-b";
N := (5*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -2, -6, -2, -4, -6, -8, -6, 4, 10, -8, 2, 10, 6, 2, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1641.3-c";
N := (5*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -2, 2, -4, 0, -2, 6, -2, -4, -4, 2, -2, 6, -10, 2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1641.3-d";
N := (5*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 2, -3, -2, -3, 3, 7, -4, -1, -12, 4, 8, -4, 3, -8, -1, -10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-a";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 5, -7, -6, 6, 8, 4, 2, 0, 1, -8, 13, 2, -14, -4, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-b";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, -6, 0, -8, 2, -2, -2, 0, -4, -10, 2, -6, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-c";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -2, -6, 0, 4, 6, 6, 2, 8, 4, -2, -6, 6, 10, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-d";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -4, -4, 0, 0, 2, -2, -10, -6, -8, -2, -8, -4, -2, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-e";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 4, -4, 0, 0, -2, 2, -10, -6, -8, -2, 8, -4, 2, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-f";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 2, 2, 0, -6, 2, 4, -4, 6, 4, -8, -2, -10, 10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-g";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -2, 8, 0, -6, 6, -2, -8, 4, 10, 10, -6, 14, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-h";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, 0, 0, 2, 6, 6, -10, 8, 2, 0, 12, -10, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-i";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 2, 6, 0, 0, -2, -6, -2, -4, 4, 6, 2, -10, -6, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-j";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, 0, 0, -2, -6, 6, -10, 8, 2, 0, 12, 10, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-k";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, 0, -8, 6, 2, -2, 4, -4, 2, 10, 6, 2, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-l";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, 3, 6, 6, 4, 0, -2, -4, 1, -12, 5, -10, 6, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-m";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -6, 6, 4, -2, 6, -4, 0, 4, 4, 10, -4, -4, -2, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-n";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -3, 3, -4, 4, -6, 10, 0, 4, -11, 10, 1, 14, 8, 10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.1-o";
N := (-24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 6, 6, -4, -2, -6, 4, 0, 4, 4, 10, 4, -4, 2, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.2-a";
N := (-6*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, -2, -6, 0, 0, -2, 6, 2, -4, 4, 6, -2, 10, -6, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.2-b";
N := (-6*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, 2, 4, 2, 2, -6, -6, 8, -12, -4, -2, 2, 10, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.2-c";
N := (-6*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -2, 0, 8, 6, -2, 2, 4, -4, 2, -10, -6, 2, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.2-d";
N := (-6*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 6, 0, 8, 2, 2, 2, 0, -4, -10, -2, 6, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.2-e";
N := (-6*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 4, -4, 0, 2, 6, 10, -8, -8, 4, 2, 2, -2, 10, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.2-f";
N := (-6*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 2, -8, 0, -6, -6, 2, -8, 4, 10, -10, 6, 14, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.2-g";
N := (-6*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 2, 6, 0, -4, 6, -6, -2, 8, 4, -2, 6, -6, 10, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.2-h";
N := (-6*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, -2, 4, -2, -2, -6, 6, 8, -12, -4, -2, -2, -10, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.5-a";
N := (-7*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 1, 6, 0, 7, -2, 6, 6, -10, -5, 1, -11, -7, 2, 4, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.5-b";
N := (-7*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, -6, 0, -7, -2, -6, -6, -10, -5, 1, -11, 7, 2, -4, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.6-a";
N := (-23*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 1, 5, 2, 0, 9, -4, -8, -4, 6, -2, -5, 10, -4, -8, 8, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.6-b";
N := (-23*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 5, -2, 8, 3, -3, -2, 5, -4, -3, -2, 10, -4, 11, -10, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.6-c";
N := (-23*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 6, 0, 3, 0, -8, 3, 9, -10, -1, -4, 6, -12, -8, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.6-d";
N := (-23*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, 2, -3, 0, 4, -7, -7, 0, 7, -2, -10, -4, 14, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.6-e";
N := (-23*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, 2, 3, 0, -4, 7, -7, 0, 7, -2, 10, -4, -14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.6-f";
N := (-23*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, -6, 0, -3, 0, 8, -3, 9, -10, -1, -4, -6, -12, 8, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.6-g";
N := (-23*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -5, 2, 8, -3, -3, 2, -5, -4, -3, -2, 10, 4, 11, 10, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.6-h";
N := (-23*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, -5, 2, 0, 9, 4, 8, -4, 6, -2, -5, -10, -4, 8, -8, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-a";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -7, 5, 6, -6, 8, 2, 4, 1, 0, -8, 2, 13, -14, 17, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-b";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, -6, -8, 0, 2, -2, -2, -4, 0, -10, -6, 2, 6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-c";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -6, -2, 4, 0, 6, 2, 6, 4, 8, -2, 6, -6, 10, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-d";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -4, -4, 0, 0, 2, -10, -2, -8, -6, -2, -4, -8, -2, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-e";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -4, 4, 0, 0, -2, -10, 2, -8, -6, -2, -4, 8, 2, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-f";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 2, 2, -6, 0, 2, -4, 4, 4, 6, -8, -10, -2, 10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-g";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 6, 0, 8, -6, -2, 6, 4, -8, 10, -6, 10, 14, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-h";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, 0, 0, 2, 6, 6, 8, -10, 2, 12, 0, -10, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-i";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 6, 2, 0, 0, -2, -2, -6, 4, -4, 6, -10, 2, -6, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-j";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, 0, 0, -2, 6, -6, 8, -10, 2, 12, 0, 10, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-k";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -2, -8, 0, 6, -2, 2, -4, 4, 2, 6, 10, 2, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-l";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 5, 6, 6, 4, -2, 0, 1, -4, -12, -10, 5, 6, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-m";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 6, -6, -2, 4, 6, 0, -4, 4, 4, 10, -4, -4, -2, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-n";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 3, -3, 4, -4, -6, 0, 10, -11, 4, 10, 14, 1, 8, -5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.4-o";
N := (24*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 6, 6, -2, -4, -6, 0, 4, 4, 4, 10, -4, 4, 2, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.3-a";
N := (6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, -6, -2, 0, 0, -2, 2, 6, 4, -4, 6, 10, -2, -6, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.3-b";
N := (6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, -6, 2, 4, 2, -6, -6, -12, 8, -4, 2, -2, 10, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.3-c";
N := (6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 2, 8, 0, 6, 2, -2, -4, 4, 2, -6, -10, 2, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.3-d";
N := (6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 6, 8, 0, 2, 2, 2, -4, 0, -10, 6, -2, 6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.3-e";
N := (6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 4, 0, -4, 2, 10, 6, -8, -8, 4, 2, 2, -2, 16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.3-f";
N := (6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, 0, -8, -6, 2, -6, 4, -8, 10, 6, -10, 14, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.3-g";
N := (6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 6, 2, -4, 0, 6, -2, -6, 4, 8, -2, -6, 6, 10, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.3-h";
N := (6*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -6, -2, 4, -2, 6, -6, -12, 8, -4, -2, -2, -10, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.8-a";
N := (-7*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 1, 0, 6, -2, 7, 6, -10, 6, 1, -5, -11, 2, -7, 4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.8-b";
N := (-7*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, 0, -6, -2, -7, -6, -10, -6, 1, -5, -11, 2, 7, -4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.7-a";
N := (-23*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 1, 2, 5, 9, 0, -4, -4, -8, -2, 6, -5, -4, 10, -8, 17, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.7-b";
N := (-23*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 5, 8, -2, -3, 3, -2, -4, 5, -2, -3, 10, 11, -4, -10, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.7-c";
N := (-23*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 0, 6, 0, 3, -8, 9, 3, -1, -10, -4, -12, 6, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.7-d";
N := (-23*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, -2, 0, -3, 4, -7, -7, 7, 0, -2, -4, -10, 14, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.7-e";
N := (-23*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, 2, 0, 3, -4, -7, 7, 7, 0, -2, -4, 10, -14, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.7-f";
N := (-23*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, 0, -6, 0, -3, 8, 9, -3, -1, -10, -4, -12, -6, 8, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.7-g";
N := (-23*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -5, 8, 2, -3, -3, 2, -4, -5, -2, -3, 10, 11, 4, 10, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1647.7-h";
N := (-23*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, 2, -5, 9, 0, 4, -4, 8, -2, 6, -5, -4, -10, 8, -17, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1648.1-a";
N := (-12*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -1, 2, 0, 1, -3, -2, 9, 3, -12, -5, 1, -6, 3, -10, 8, 11, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1648.2-a";
N := (12*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -1, 0, 2, -3, 1, -2, 3, 9, -5, -12, 1, 3, -6, 8, -10, -3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1651.1-a";
N := (-25*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 1, 0, -4, 4, 0, -8, 6, -10, 4, -4, -12, 10, -6, -2, 2, 10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1651.1-b";
N := (-25*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 5, 3, -1, -2, 7, 7, -4, 4, 10, -9, 6, -1, -1, -1, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1651.2-a";
N := (25*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, -4, 0, 0, 4, -8, -10, 6, -4, 4, -12, -6, 10, 2, -2, 2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1651.2-b";
N := (25*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 3, 5, -2, -1, 7, -4, 7, 10, 4, -9, -1, 6, -1, -1, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.1-a";
N := (2*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -7, -5, -4, -5, 1, 5, -6, -8, -12, -1, -12, -12, 11, -6, -1, -11, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-a";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -3, -6, -3, -3, 1, 6, 9, -10, 8, -4, 3, 0, 1, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-b";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 3, -2, 9, -1, 1, -10, 5, -6, 4, 0, 9, 4, -13, -8, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-c";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -8, 8, 0, 2, 2, 6, 10, -12, -6, -12, 12, 6, 0, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-d";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -8, -3, -7, -7, -2, -10, 0, -11, 6, -6, -5, -8, -1, 15, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-e";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 7, 4, -7, 3, 5, 2, -6, -8, -3, -6, 6, 3, -12, -9, -9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-f";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 0, 7, 6, 8, 5, 4, 2, -6, -11, -9, 6, -8, -5, 2, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-g";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -3, 4, 3, 3, 5, 2, 9, 2, 2, -6, -9, -2, 13, 6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-h";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, 0, 3, 3, 1, -6, 3, 8, -4, -4, -3, 6, 7, -8, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-i";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 3, -6, 4, -9, 10, 0, 4, -1, 5, -6, -6, -13, -8, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-j";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 7, 0, -9, 5, -3, 2, 1, 10, -6, -6, -11, 10, -1, 10, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-k";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 4, 0, -4, -2, 2, 8, 6, 4, -6, 6, 10, 2, -2, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.2-l";
N := (26*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -7, -2, 3, 2, -4, 3, 6, 8, 0, -9, 1, -10, -6, 1, 12, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.4-a";
N := (2*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -7, -4, -5, 1, -5, 5, -8, -6, -1, -12, -12, 11, -12, -1, -6, 10, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-a";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, -3, -3, -3, 1, 9, 6, 8, -10, -4, 0, 3, -8, 1, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-b";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, 3, -1, 9, 1, 5, -10, 4, -6, 0, 4, 9, -8, -13, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-c";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -8, 4, 0, 8, 2, 6, 2, -12, 10, -6, 12, -12, 0, 6, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-d";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -8, -3, -7, -3, -7, -10, -2, -11, 0, 6, -5, -6, -1, -8, -4, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-e";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 4, 7, 3, -7, 5, -6, 2, -3, -8, -6, 3, 6, -9, -12, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-f";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 7, 0, 8, 6, 5, 2, 4, -11, -6, -9, -8, 6, 2, -5, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-g";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 4, -3, 3, 3, 5, 9, 2, 2, 2, -6, -2, -9, 6, 13, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-h";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -3, 3, 3, 1, 3, -6, -4, 8, -4, 6, -3, -8, 7, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-i";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 3, -2, 4, -6, -9, 0, 10, -1, 4, 5, -6, -6, -8, -13, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-j";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 7, 5, -9, -3, 1, 2, -6, 10, -6, 10, -11, 10, -1, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-k";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 0, -4, 0, -2, 8, 2, 4, 6, -6, 10, 6, -2, 2, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1668.3-l";
N := (-26*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -7, 3, -2, -4, 2, 3, 8, 6, -9, 0, 1, -6, -10, 12, 1, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1676.1-a";
N := (-24*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 6, 3, 7, 4, 9, 0, -4, 11, -10, 8, -2, 1, 8, -10, -5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1676.2-a";
N := (24*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -2, 3, 6, 4, 7, 9, -4, 0, -10, 11, 8, 1, -2, -10, 8, -12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.1-a";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -6, 0, 0, 6, 6, -2, -4, -2, 6, -2, 14, 6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.1-b";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -3, 0, 3, -6, 4, -9, -9, -1, 5, 6, 0, -8, -5, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.1-c";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -2, 8, 8, -6, 6, -2, 8, 10, -6, 6, 14, 10, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.1-d";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 6, 4, 4, 8, 2, 2, 6, -6, 6, 12, 6, -10, 0, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.1-e";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -4, 4, 4, 6, -2, 6, 10, -6, 4, 14, -2, 0, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.1-f";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 3, 3, -6, -2, -6, -3, -1, -4, 3, 12, -8, 7, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.1-g";
N := (-11*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -5, -4, 3, 6, 4, -9, -1, 7, -5, -2, 8, -4, -13, -5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.2-a";
N := (-23*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 2, 8, 8, -2, -2, -2, -4, 10, -6, -2, 2, -2, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.2-b";
N := (-23*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -2, -7, 8, 3, 5, -6, -6, 6, -12, 14, 0, 9, 6, 7, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.4-a";
N := (-11*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, 2, 0, 0, 6, -2, 6, -4, -2, -2, 6, 6, 14, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.4-b";
N := (-11*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, -3, -6, 3, 4, -9, -9, -1, 5, 0, 6, -5, -8, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.4-c";
N := (-11*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -6, 8, 8, -6, -2, 6, 8, 10, 6, -6, 10, 14, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.4-d";
N := (-11*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, 6, 8, 4, 2, 6, 2, -6, 6, 6, 12, 0, -10, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.4-e";
N := (-11*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, 2, 4, 4, 6, 6, -2, 10, -6, 14, 4, 0, -2, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.4-f";
N := (-11*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, 6, -6, 3, -2, -3, -6, -1, -4, 12, 3, 7, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.4-g";
N := (-11*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -4, -5, 6, 3, 4, -1, -9, 7, -5, 8, -2, -13, -4, 3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.3-a";
N := (23*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 2, 8, 8, -2, -2, -2, -4, 10, -2, -6, -2, 2, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1677.3-b";
N := (23*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -7, -2, 3, 8, 5, -6, -6, 6, -12, 0, 14, 6, 9, 11, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1689.1-a";
N := (25*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -4, -2, -4, 2, 0, 6, 0, 0, -4, -12, 10, -6, -6, -2, -10, -2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1689.2-a";
N := (-23*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 1, 0, 8, 3, -2, -1, -10, 3, 6, -5, 10, -6, -6, -5, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1689.2-b";
N := (-23*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -4, -1, -1, 1, -4, -2, 6, 0, 10, 2, 12, -6, 2, 4, -6, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1689.4-a";
N := (25*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -4, -4, -2, 0, 2, 6, 0, 0, -12, -4, 10, -6, -6, -10, -2, -16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1689.3-a";
N := (-23*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 0, 1, 3, 8, -2, -10, -1, 6, 3, -5, -6, 10, -5, -6, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1689.3-b";
N := (-23*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -4, -1, -1, -4, 1, -2, 0, 6, 2, 10, 12, 2, -6, -6, 4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1693.1-a";
N := (-3*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -1, -7, -4, -9, -4, -2, 10, -2, -9, -8, -6, -9, -2, -10, 8, 16, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1693.1-b";
N := (-3*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 1, -1, -2, -3, -4, -4, -10, -6, -1, -4, -4, -9, -4, 8, -8, -8, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1693.2-a";
N := (3*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -1, -4, -7, -4, -9, -2, -2, 10, -8, -9, -6, -2, -9, 8, -10, -7, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1693.2-b";
N := (3*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 1, -2, -1, -4, -3, -4, -6, -10, -4, -1, -4, -4, -9, -8, 8, 13, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1699.1-a";
N := (-23*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, -2, 2, 4, -4, 3, -2, 5, -10, -1, 1, -5, 12, 11, -1, 10, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1699.2-a";
N := (23*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, -2, 4, 2, 3, -4, -2, -10, 5, 1, -1, -5, 11, 12, 10, -1, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1700.1-a";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 0, -6, -9, 0, 6, 8, 8, -4, 6, 12, 8, -1, -1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1700.1-b";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 4, 6, 1, -4, -10, -4, -4, -12, 6, -4, 0, 3, 11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1700.1-c";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -2, -8, 4, -10, -6, 6, -6, -10, -4, -12, 2, -2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1700.1-d";
N := (10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -6, -4, -4, 6, 10, 6, 6, -2, -4, -4, 10, -2, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1700.2-a";
N := (10*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 0, -9, -6, 6, 0, 8, 8, -4, 12, 6, -1, 8, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1700.2-b";
N := (10*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, 4, 1, 6, -10, -4, -4, -4, -12, -4, 6, 3, 0, -6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1700.2-c";
N := (10*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -2, 4, -8, -6, -10, -6, 6, -10, -12, -4, -2, 2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1700.2-d";
N := (10*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -6, -4, -4, 10, 6, 6, 6, -2, -4, -4, -2, 10, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.1-a";
N := (-23*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 4, 0, 0, -8, 4, 6, 0, -6, 0, -4, -6, 2, 6, 6, -6, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.1-b";
N := (-23*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -2, -5, 4, 8, 9, 6, 2, -1, -6, 1, 4, -3, -9, -3, -6, 7, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.1-c";
N := (-23*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 2, -3, 0, -4, 1, -6, 6, 3, 6, 5, -12, 13, -3, -9, 6, 1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.1-d";
N := (-23*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, -6, 2, -4, 8, -6, -2, -2, -4, -4, 2, -10, 6, -2, 14, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.1-e";
N := (-23*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, -6, -4, -4, -4, -2, -6, -6, -12, -12, -2, -6, 4, 0, -8, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.2-a";
N := (-13*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 0, 4, -6, 0, 2, 4, 2, 4, 0, -6, -6, -2, 14, 10, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.2-b";
N := (-13*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -4, 0, 6, 8, 2, 0, -6, -4, -8, 10, 10, 14, -2, -14, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.4-a";
N := (-23*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 4, 0, 0, 4, -8, 6, -6, 0, -4, 0, -6, 6, 2, -6, 6, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.4-b";
N := (-23*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -2, 4, -5, 9, 8, 6, -1, 2, 1, -6, 4, -9, -3, -6, -3, 10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.4-c";
N := (-23*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 2, 0, -3, 1, -4, -6, 3, 6, 5, 6, -12, -3, 13, 6, -9, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.4-d";
N := (-23*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 2, -6, 8, -4, -6, -2, -2, -4, -4, 2, 6, -10, 14, -2, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.4-e";
N := (-23*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, -4, -6, -4, -4, -2, -6, -6, -12, -12, -2, 4, -6, -8, 0, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.3-a";
N := (-13*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 4, 0, 0, -6, 2, 2, 4, 0, 4, -6, -2, -6, 10, 14, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1707.3-b";
N := (-13*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, -4, 8, 6, 2, -6, 0, -8, -4, 10, 14, 10, -14, -2, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.1-a";
N := (-26*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, 2, -5, 3, -6, -7, 3, -7, -4, -8, -6, -12, -13, 11, -1, -9, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.1-b";
N := (-26*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -2, 2, -8, -6, -2, -4, -2, 2, 0, 4, 14, -14, 2, 6, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.1-c";
N := (-26*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 0, -2, -7, -5, -6, 1, -7, -5, -4, 0, -2, -4, -5, -13, -9, -9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.1-d";
N := (-26*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, 6, 3, 3, 6, 1, 3, 9, -4, -4, 2, 0, 3, -5, 7, -17, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.2-a";
N := (-23*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 5, -1, 3, -1, -7, -4, -2, 0, 4, 4, -11, 6, 9, -4, 8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.2-b";
N := (-23*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -7, 1, -9, 3, -4, -6, 8, -4, -4, -13, -2, 5, -8, 0, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.4-a";
N := (-26*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, -5, 2, -6, 3, -7, -7, 3, -8, -4, -6, -13, -12, -1, 11, 8, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.4-b";
N := (-26*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 2, -2, -6, -8, -2, -2, -4, 0, 2, 4, -14, 14, 6, 2, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.4-c";
N := (-26*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 0, -7, -2, -6, -5, 1, -5, -7, 0, -4, -2, -5, -4, -9, -13, 0, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.4-d";
N := (-26*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, 3, 6, 6, 3, 1, 9, 3, -4, -4, 2, 3, 0, 7, -5, -8, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.3-a";
N := (23*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 5, 3, -1, -7, -1, -4, 0, -2, 4, 4, -11, 9, 6, 8, -4, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1713.3-b";
N := (23*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 1, -7, 3, -9, -4, 8, -6, -4, -4, -13, 5, -2, 0, -8, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.1-a";
N := (-27*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, 4, -1, 1, -3, 4, -5, 1, 7, -2, 9, 6, 8, -7, 17, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.1-b";
N := (-27*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -3, -2, 3, -2, 2, -4, -8, 0, -8, 5, 11, -2, -8, -1, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.1-c";
N := (-27*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 0, 9, 3, 1, -6, 9, 5, -1, -4, -9, 12, 4, 13, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.1-d";
N := (-27*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 0, 1, -3, 7, -4, -1, 1, -9, -2, -1, 2, 4, -5, 11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.1-e";
N := (-27*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -6, 8, 0, -2, 6, 2, -4, -12, 2, -10, 6, 14, 10, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.1-f";
N := (-27*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -4, -3, -2, 1, 6, -6, 0, 4, -4, -8, -13, -9, -6, 12, -1, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.1-g";
N := (-27*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 0, 3, 9, -7, -2, 3, -11, -1, -8, -3, 4, -8, -11, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.3-a";
N := (w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -4, 0, 7, -6, 7, -6, -3, 9, -12, -2, 2, -3, -2, 5, -10, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.3-b";
N := (w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 4, -2, 6, 2, -4, -6, -6, 0, 4, -4, -8, -2, 6, -6, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.3-c";
N := (w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, -2, -7, 6, 3, -4, -4, 0, -4, -2, 8, -9, 9, 6, -6, -9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.3-d";
N := (w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, 6, -6, -4, 0, 6, -6, -6, -4, 12, 6, -14, -10, 2, 2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.3-e";
N := (w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, 4, 0, -1, 2, 3, -6, 9, 1, -4, -2, -14, -3, 6, -15, 14, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.3-f";
N := (w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 2, -7, -6, 3, 4, 4, 0, -4, -2, 8, 9, 9, -6, 6, 9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.4-a";
N := (23*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -2, 1, 0, 0, -8, 9, -1, 1, -1, -10, -6, -12, 0, -3, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.2-a";
N := (-27*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -4, 1, -1, -3, -5, 4, 7, 1, -2, 6, 9, -7, 8, -16, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.2-b";
N := (-27*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, -4, 3, -2, -2, -4, 2, 0, -8, -8, 11, 5, -8, -2, 13, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.2-c";
N := (-27*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 0, 3, 9, 1, 9, -6, -1, 5, -4, 12, -9, 13, 4, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.2-d";
N := (-27*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -4, -3, 1, 7, -1, -4, -9, 1, -2, 2, -1, -5, 4, -8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.2-e";
N := (-27*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -6, 0, 8, -2, 2, 6, -12, -4, 2, 6, -10, 10, 14, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.2-f";
N := (-27*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -3, -4, 1, -2, 6, 0, -6, -4, 4, -8, -9, -13, 12, -6, -15, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.2-g";
N := (-27*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, -4, 9, 3, -7, 3, -2, -1, -11, -8, 4, -3, -11, -8, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.6-a";
N := (w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 0, -4, -6, 7, 7, -3, -6, -12, 9, -2, -3, 2, 5, -2, 15, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.6-b";
N := (w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 4, 6, -2, -4, 2, -6, 0, -6, -4, 4, -8, 6, -2, -6, -6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.6-c";
N := (w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, -7, -2, 3, 6, -4, 0, -4, -2, -4, 8, 9, -9, -6, 6, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.6-d";
N := (w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, -6, 6, 0, -4, 6, -6, -6, 12, -4, 6, -10, -14, 2, 2, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.6-e";
N := (w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, 0, 4, 2, -1, 3, 9, -6, -4, 1, -2, -3, -14, -15, 6, 3, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.6-f";
N := (w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, -7, 2, 3, -6, 4, 0, 4, -2, -4, 8, 9, 9, 6, -6, -3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1719.5-a";
N := (23*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 1, -2, 0, 0, -8, -1, 9, -1, 1, -10, -12, -6, -3, 0, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1725.2-a";
N := (-25*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, 4, 0, 6, 6, 2, -8, 10, -6, 2, 14, 10, -10, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1725.2-b";
N := (-25*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, 2, 2, 8, 4, 4, -12, -4, -6, 2, -14, -14, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1725.2-c";
N := (-25*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 0, 4, -6, 6, -6, 0, 6, 10, -6, 6, -6, -10, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1725.3-a";
N := (25*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, 0, 4, 6, 2, 6, 10, -8, -6, 14, 2, -10, 10, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1725.3-b";
N := (25*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 2, 0, 2, 4, 8, -12, 4, -4, 2, -6, -14, -14, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1725.3-c";
N := (25*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 4, 0, -6, -6, 6, 6, 0, 10, 6, -6, -10, -6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-a";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, -4, -4, -8, 2, 8, -4, 0, -10, -6, 0, -8, -8, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-b";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 8, 2, 6, -6, -6, -2, 0, 8, 4, -10, 12, 10, 2, 6, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-c";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, 0, -8, -2, 6, 2, 4, 4, 2, 6, -6, 10, -6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-d";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 0, -4, -4, -4, -2, 8, -8, -12, -6, 2, 0, 4, 4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-e";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -2, 0, 0, -10, -2, 2, -4, -4, 10, -10, 10, 2, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-f";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 6, 0, -6, 4, 6, -4, -8, -10, -6, -10, 10, 6, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-g";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -4, -8, -2, 10, -6, -4, 4, 10, -10, -6, -6, 2, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-h";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 8, -4, -4, -4, -2, 0, 8, 4, 10, 2, 0, -12, 4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-i";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 0, -8, 6, -2, 2, 12, -12, 2, -10, 2, 10, 10, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-j";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, -2, -6, 2, 6, 0, 0, 4, 6, 4, 2, 2, 6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-k";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 6, 8, -8, 6, 6, -6, -4, -4, 10, -10, 10, 2, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-l";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -4, -4, 2, -2, 2, 4, 12, -6, 2, 6, -2, -2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-m";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 0, 0, -2, 6, 2, -4, 4, 2, 14, 10, 2, -14, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-n";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 8, 0, -2, -2, -6, 4, 4, 2, 6, -6, -6, 10, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-o";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -2, 4, 0, -2, -6, -6, -12, 4, -6, -2, 10, -14, -6, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-p";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 0, 0, -2, -2, -6, 4, -4, 2, -10, -14, -14, 2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-q";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, 8, 0, 6, -2, 2, -12, 12, 2, -2, 10, 10, 10, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-r";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, -6, -4, 4, -6, 6, -6, -4, -4, 10, 2, -2, 14, 14, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-s";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -2, 0, 0, 6, 6, 2, 4, -4, 2, -2, -6, -6, 10, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-t";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, 4, 4, 2, -2, 2, 12, 4, -6, -6, -2, -2, -2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-u";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, -8, 0, 6, -10, 2, -4, -4, -6, -10, -6, 2, -14, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-v";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -2, 6, -2, 6, 0, 0, 4, 6, 4, -2, -2, -6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-w";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -2, 0, 0, 6, -2, -6, -4, 4, 2, 6, 2, 10, -6, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-x";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, 6, -4, 8, -2, 2, 2, -4, -12, 2, 6, -6, 10, -14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-y";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -8, -4, 4, 4, -2, 0, 8, 4, 10, 2, 0, 12, -4, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-z";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 0, 8, 6, -2, 10, -4, -4, -6, 6, 10, -14, 2, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-aa";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 8, -2, 6, 6, 6, -2, 0, 8, 4, -10, 12, -10, -2, -6, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-ab";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 0, -4, 4, 4, -2, -8, -8, -12, -6, 2, 0, -4, -4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-ac";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -8, 6, 2, 8, 2, -8, -10, 4, 0, 6, 2, 6, 10, -2, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-ad";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, -4, 4, 8, 2, -8, -4, 0, -10, -6, 0, 8, 8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.1-ae";
N := (-24*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -8, 8, 6, 6, -6, 4, 4, -14, -2, 2, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-a";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 7, 2, 6, 7, 7, -4, 5, 4, 7, -6, -12, -2, -9, 4, -14, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-b";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -2, -4, 3, -3, -6, 5, -6, -13, 4, 8, 12, 1, -14, -6, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-c";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -5, -2, 1, 5, -8, 6, 1, -2, -1, 4, -6, 14, -13, 3, 11, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-d";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 2, -4, 1, 5, -2, -1, -6, 11, 4, -8, 4, 9, 6, 14, -16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-e";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -2, 1, -1, 4, 3, 4, 7, 2, 4, -6, -1, -4, 6, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-f";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -6, 2, 7, 3, 8, -3, 0, -9, -2, 12, 10, -13, 8, -6, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-g";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 6, 2, -7, 3, -8, 3, 0, -9, -2, 12, -10, -13, -8, 6, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-h";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -2, -1, -1, -4, -3, 4, 7, 2, 4, 6, -1, 4, -6, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-i";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -2, -4, -1, 5, 2, 1, -6, 11, 4, -8, -4, 9, -6, -14, 16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-j";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 5, -2, -1, 5, 8, -6, 1, -2, -1, 4, 6, 14, 13, -3, -11, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-k";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 2, -4, -3, -3, 6, -5, -6, -13, 4, 8, -12, 1, 14, 6, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.3-l";
N := (-8*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, -2, 6, -7, 7, 4, -5, 4, 7, -6, -12, 2, -9, -4, 14, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-a";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -4, -4, -8, 8, 2, 0, -4, -10, 0, -6, -8, -8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-b";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 8, -6, 6, -6, 0, -2, 4, 8, -10, 10, 12, 6, 2, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-c";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, -8, 0, -2, 2, 6, 4, 4, 2, -6, 6, -6, 10, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-d";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -2, -4, -4, -4, 8, -2, -12, -8, -6, 0, 2, 4, 4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-e";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 2, 0, 0, -10, 2, -2, -4, -4, 10, 10, -10, 2, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-f";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 0, 6, -6, 6, 4, -8, -4, -10, -10, -6, 6, 10, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-g";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -8, -4, -2, -6, 10, 4, -4, 10, -6, -10, 2, -6, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-h";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 8, -2, -4, -4, -4, 0, -2, 4, 8, 10, 0, 2, 4, -12, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-i";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, -8, 0, 6, 2, -2, -12, 12, 2, 2, -10, 10, 10, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-j";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -6, -2, 2, 0, 6, 4, 0, 6, 2, 4, 6, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-k";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 6, -6, -8, 8, 6, -6, 6, -4, -4, 10, 10, -10, 2, 2, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-l";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -4, -4, 2, 2, -2, 12, 4, -6, 6, 2, -2, -2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-m";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 0, 0, -2, 2, 6, 4, -4, 2, 10, 14, -14, 2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-n";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 0, 8, -2, -6, -2, 4, 4, 2, -6, 6, 10, -6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-o";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 0, 4, -2, -6, -6, 4, -12, -6, 10, -2, -6, -14, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-p";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 0, 0, -2, -6, -2, -4, 4, 2, -14, -10, 2, -14, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-q";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 0, 8, 6, 2, -2, 12, -12, 2, 10, -2, 10, 10, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-r";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 6, 4, -4, -6, -6, 6, -4, -4, 10, -2, 2, 14, 14, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-s";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 2, 0, 0, 6, 2, 6, -4, 4, 2, -6, -2, 10, -6, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-t";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 4, 4, 2, 2, -2, 4, 12, -6, -2, -6, -2, -2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-u";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 0, -8, 6, 2, -10, -4, -4, -6, -6, -10, -14, 2, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-v";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 6, -2, -2, 0, 6, 4, 0, 6, -2, 4, -6, -2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-w";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 2, 0, 0, 6, -6, -2, 4, -4, 2, 2, 6, -6, 10, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-x";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, 6, 8, -4, -2, 2, 2, -12, -4, 2, -6, 6, -14, 10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-y";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -8, -2, 4, -4, 4, 0, -2, 4, 8, 10, 0, 2, -4, 12, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-z";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 8, 0, 6, 10, -2, -4, -4, -6, 10, 6, 2, -14, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-aa";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 8, 6, 6, 6, 0, -2, 4, 8, -10, -10, 12, -6, -2, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-ab";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -2, 4, -4, 4, -8, -2, -12, -8, -6, 0, 2, -4, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-ac";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -8, 8, 2, 2, -10, -8, 0, 4, 6, 6, 2, -2, 10, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-ad";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, 4, -4, 8, -8, 2, 0, -4, -10, 0, -6, 8, 8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.2-ae";
N := (-24*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 8, -8, 6, -6, 6, 4, 4, -14, 2, -2, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-a";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 7, 6, 2, 7, 7, -4, 4, 5, -6, 7, -12, -9, -2, -14, 4, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-b";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -4, -2, -3, 3, -6, -6, 5, 4, -13, 8, 1, 12, -6, -14, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-c";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, -5, 5, 1, -8, 1, 6, -1, -2, 4, 14, -6, 3, -13, -16, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-d";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -4, 2, 5, 1, -2, -6, -1, 4, 11, -8, 9, 4, 14, 6, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-e";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -2, -1, 1, 4, 4, 3, 2, 7, 4, -1, -6, 6, -4, 14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-f";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 2, -6, 3, 7, 8, 0, -3, -2, -9, 12, -13, 10, -6, 8, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-g";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 2, 6, 3, -7, -8, 0, 3, -2, -9, 12, -13, -10, 6, -8, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-h";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 2, -1, -1, -4, 4, -3, 2, 7, 4, -1, 6, -6, 4, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-i";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -4, -2, 5, -1, 2, -6, 1, 4, 11, -8, 9, -4, -14, -6, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-j";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, 5, 5, -1, 8, 1, -6, -1, -2, 4, 14, 6, -3, 13, 16, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-k";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, 2, -3, -3, 6, -6, -5, 4, -13, 8, 1, -12, 6, 14, 10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1728.4-l";
N := (8*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, 6, -2, 7, -7, 4, 4, -5, -6, 7, -12, -9, 2, 14, -4, -10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1732.1-a";
N := (-6*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 2, -6, 0, -8, -2, 6, 0, -6, -4, 2, 10, -2, -2, 0, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1732.2-a";
N := (6*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -6, 2, -8, 0, -2, 0, 6, -4, -6, 2, -2, 10, 0, -2, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1751.1-a";
N := (-24*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -2, 0, -2, 0, 6, 7, 8, -12, 10, -6, 4, 6, -12, 7, 6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1751.1-b";
N := (-24*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, -5, 4, 3, -1, 2, 5, -3, -7, -4, 1, 1, -4, -10, -2, -13, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1751.1-c";
N := (-24*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 3, -1, -4, 9, 1, -2, -7, -7, 7, -4, -11, 9, -12, -10, 2, 17, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1751.2-a";
N := (-2*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -5, 2, -3, -3, 4, -9, -1, -6, -3, -11, -4, 5, -12, 0, -1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1751.4-a";
N := (24*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -2, 0, 0, -2, 6, 8, 7, 10, -12, -6, 6, 4, 7, -12, -11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1751.4-b";
N := (24*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, -5, 4, -1, 3, 2, -3, 5, -4, -7, 1, -4, 1, -2, -10, 1, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1751.4-c";
N := (24*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, -1, -4, 1, 9, -2, -7, -7, -4, 7, -11, -12, 9, 2, -10, -1, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1751.3-a";
N := (2*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, -5, 2, -3, -3, 4, -1, -9, -3, -6, -11, 5, -4, 0, -12, 1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-a";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 7, 7, 1, 1, 9, -1, -1, -5, -5, -6, -6, -13, -13, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-b";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, 8, 8, -6, -2, -2, -4, -4, 6, 6, 6, 6, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-c";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 1, 1, 3, 3, 9, 9, 9, 7, 7, -10, -10, 11, 11, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-d";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, -6, -6, 6, 0, 0, 4, 4, 4, 4, 12, 12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-e";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -7, 6, -2, 2, -8, 3, 1, -12, 3, -2, 8, 2, -4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-f";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 3, 1, 3, 7, -1, -7, 11, -9, -6, 6, -1, 7, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-g";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -6, -2, 2, 10, -6, -8, 0, 6, -2, -10, -10, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-h";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 5, 3, 1, 7, -7, -1, -9, 11, 6, -6, 7, -1, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-i";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, -2, -2, 6, 2, 3, -8, -12, 1, -2, 3, 2, 8, 1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-j";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -5, -2, -6, -2, 0, -5, 1, 8, -3, -14, 0, 10, 0, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-k";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, -2, -6, 2, -6, 10, 0, -8, -2, 6, -10, -10, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-l";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 3, -6, -6, 6, -2, 3, 0, 8, 5, 6, 3, 10, -8, 1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-m";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, 2, -6, -2, -2, -5, 0, 8, 1, -14, -3, 10, 0, -17, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-n";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 3, 3, -1, -1, 1, 5, 5, -1, -1, 14, 14, -3, -3, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.1-o";
N := (42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -6, 3, 6, -6, -2, 0, 3, 5, 8, 3, 6, -8, 10, 4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.2-a";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -3, 0, 0, -6, 8, -9, 0, -10, -1, -12, -9, 8, -10, -1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.2-b";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, 2, 9, -9, -6, 0, 0, 4, 4, 14, -14, 13, 13, 15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.2-c";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, -1, 0, -8, -6, -4, -1, -8, -10, 3, -12, -3, 4, 2, -15, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.2-d";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, -2, 2, 2, 2, -5, 8, -8, -7, 6, -1, 10, -4, 9, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.2-e";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -7, -4, -4, -6, 4, -9, 0, 2, 3, 8, 3, -12, 10, 7, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.2-f";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -7, 2, 4, 6, 4, 0, 5, 9, 4, -11, 6, 13, -2, 5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.2-g";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 2, -4, 6, -8, 0, -3, 5, -12, -7, -6, 3, 10, 1, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.2-h";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 6, -6, 0, 0, 10, -6, 6, 8, 8, 6, -6, -8, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.2-i";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 7, 4, -6, 6, 6, -6, -3, -5, 4, -13, 8, 11, 2, -9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.2-j";
N := (14*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 7, -4, -6, -6, -6, -6, 3, -5, 4, -13, -8, -11, -2, 9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.3-a";
N := (-14*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 0, -3, -6, 0, 8, 0, -9, -1, -10, -9, -12, -10, 8, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.3-b";
N := (-14*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 2, -2, -9, 9, -6, 0, 0, 4, 4, -14, 14, 13, 13, 15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.3-c";
N := (-14*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 0, -1, -6, -8, -4, -8, -1, 3, -10, -3, -12, 2, 4, 10, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.3-d";
N := (-14*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -3, 2, 2, 2, 8, -5, -7, -8, -1, 6, -4, 10, 4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.3-e";
N := (-14*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -4, -7, -6, -4, 4, 0, -9, 3, 2, 3, 8, 10, -12, 2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.3-f";
N := (-14*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -7, 6, 4, 4, 5, 0, 4, 9, 6, -11, -2, 13, 10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.3-g";
N := (-14*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -1, 6, -4, -8, -3, 0, -12, 5, -6, -7, 10, 3, 14, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.3-h";
N := (-14*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -6, 6, 0, 0, 10, 6, -6, 8, 8, -6, 6, -8, -8, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.3-i";
N := (-14*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 7, 6, -6, 6, -3, -6, 4, -5, 8, -13, 2, 11, -6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1764.3-j";
N := (-14*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 7, -6, -6, -6, 3, -6, 4, -5, -8, -13, -2, -11, 6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1769.1-a";
N := (27*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -6, -2, 3, -4, 7, 1, -4, -9, 11, 4, -12, -5, 7, 6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1769.4-a";
N := (-27*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -6, 3, -2, 7, -4, 1, -4, 11, -9, 4, -5, -12, 7, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1772.1-a";
N := (-24*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -2, 2, 7, 7, -6, -2, 10, 1, 10, 11, 4, -1, -12, 0, 6, 5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1772.2-a";
N := (24*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -2, 7, 2, -6, 7, -2, 1, 10, 11, 10, 4, -12, -1, 6, 0, -3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.1-a";
N := (-24*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 4, -2, 4, -6, 6, 0, -6, 6, -2, -2, -6, 2, 8, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.1-b";
N := (-24*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 2, -8, 0, -2, -2, 2, -8, 8, 2, 6, 6, -2, 6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.3-a";
N := (-10*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, 2, 0, 0, -2, 10, 8, -4, -6, -4, 6, -10, -6, -10, 10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.3-b";
N := (-10*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, -6, -6, 6, -6, -2, 0, 6, 8, -10, -10, -6, 6, -8, -8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.4-a";
N := (25*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, -4, -5, -6, 5, -7, -1, 3, 5, 0, -6, 5, -9, 6, 2, 15, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.4-b";
N := (25*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, 0, 3, 0, 3, 1, -9, 3, -1, 8, 8, -3, -9, -8, -14, -11, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.2-a";
N := (24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, 4, -6, 4, 6, -6, 0, -2, 6, -2, 2, -6, 4, 8, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.2-b";
N := (24*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, 2, 0, -8, -2, 2, -2, 8, -8, 2, 6, 6, 6, -2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.6-a";
N := (10*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, 0, 2, -2, 0, 10, -4, 8, -4, -6, 6, -6, -10, 10, -10, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.6-b";
N := (10*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, -6, -6, -6, 6, -2, 6, 0, -10, 8, -10, 6, -6, -8, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.5-a";
N := (25*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, -5, -4, 5, -6, -7, 3, -1, 0, 5, -6, -9, 5, 2, 6, -8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1791.5-b";
N := (25*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, 3, 0, 3, 0, 1, 3, -9, 8, -1, 8, -9, -3, -14, -8, 10, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1797.1-a";
N := (-4*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, -4, 0, -8, -6, -2, -6, 8, 2, 12, -4, -2, -2, -10, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1797.2-a";
N := (26*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 4, -2, 6, -4, -6, 0, 6, 4, -2, 0, 6, 8, -10, 0, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1797.4-a";
N := (4*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, 0, -4, -6, -8, -2, 8, -6, 12, 2, -4, -2, -2, -2, -10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1797.3-a";
N := (-26*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -2, 4, -4, 6, -6, 6, 0, -2, 4, 0, 8, 6, 0, -10, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1803.1-a";
N := (w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -8, 3, -4, 0, 7, -6, 2, -10, -8, -8, 0, -9, -6, 10, -9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1803.1-b";
N := (w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -2, -7, 4, -6, 1, 0, 10, 4, 4, -10, -6, 9, 12, 12, -15, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1803.1-c";
N := (w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 3, -4, 1, -2, 0, -3, -8, 2, -6, 4, -10, -6, 1, 4, 10, -3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1803.1-d";
N := (w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -7, 4, -5, 4, -4, 7, -2, 2, 2, 8, 12, -4, 7, -10, 14, -9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1803.1-e";
N := (w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -5, -6, -3, 6, -6, 1, 6, -6, 8, 8, -4, 12, 9, 10, -8, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1803.4-a";
N := (w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, 3, -8, 0, -4, 7, 2, -6, -8, -10, -8, -9, 0, 10, -6, 10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1803.4-b";
N := (w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -7, -2, -6, 4, 1, 10, 0, 4, 4, -10, 9, -6, 12, 12, 10, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1803.4-c";
N := (w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 3, 1, -4, 0, -2, -3, 2, -8, 4, -6, -10, 1, -6, 10, 4, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1803.4-d";
N := (w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -7, -5, 4, -4, 4, 7, 2, -2, 8, 2, 12, 7, -4, 14, -10, 10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1803.4-e";
N := (w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -5, -3, -6, -6, 6, 1, -6, 6, 8, 8, -4, 9, 12, -8, 10, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1808.1-a";
N := (-24*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -3, 6, -4, 7, -8, 0, 5, -11, -8, -13, 3, -7, 10, -10, -1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1808.2-a";
N := (24*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 6, -3, 7, -4, -8, 5, 0, -8, -11, -13, -7, 3, -10, 10, 4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1811.1-a";
N := (-5*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 1, -4, 7, -7, -4, 8, 3, 6, 10, 2, -4, -8, 1, -1, -5, 10, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1811.2-a";
N := (5*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 1, -4, -7, 7, 8, -4, 3, 10, 6, -4, 2, -8, -1, 1, 10, -5, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1817.1-a";
N := (-8*w + 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, -4, 2, -2, 6, 6, 10, -4, 8, -6, -10, -2, 6, 6, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1817.1-b";
N := (-8*w + 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, 2, -2, -4, 0, 6, -8, 4, -4, 6, 12, 10, 6, -2, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1817.2-a";
N := (27*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -2, -4, 2, -6, 8, -4, -9, 6, 4, 4, 1, -4, 0, 7, 6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1817.2-b";
N := (27*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -4, 0, 0, 6, 2, 3, 0, -4, -4, 5, -6, 12, -13, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1817.4-a";
N := (8*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, -4, -2, 2, 6, 6, -4, 10, -6, 8, -10, 6, -2, 10, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1817.4-b";
N := (8*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, 2, -4, -2, 0, 6, 4, -8, 6, -4, 12, 6, 10, 10, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1817.3-a";
N := (-27*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -4, -6, 2, 8, -4, 6, -9, 4, 4, 1, 0, -4, 6, 7, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1817.3-b";
N := (-27*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -4, 0, 0, 6, 2, 0, 3, -4, -4, 5, 12, -6, -10, -13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1819.2-a";
N := (28*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 4, 7, -2, 3, 4, 10, 3, -6, 0, -8, 6, -2, 0, -11, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1819.3-a";
N := (-28*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 4, 7, 3, -2, 4, 3, 10, 0, -6, -8, -2, 6, -11, 0, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1821.1-a";
N := (-7*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 4, 0, -2, -4, 8, -4, -8, -2, -4, 4, 2, -6, 6, -2, 2, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1821.1-b";
N := (-7*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -7, 3, -4, -3, -8, -2, 6, -6, -6, -9, -8, -9, 1, 11, -5, -16, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1821.2-a";
N := (25*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, -7, -2, -7, 4, 2, 10, -6, -2, 5, -10, 1, 1, 5, -11, 4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1821.2-b";
N := (25*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 2, -2, -1, -8, 8, 4, 3, 7, 5, -10, -2, 1, -7, 7, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1821.2-c";
N := (25*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, 0, -2, -9, 4, -6, -8, 5, -9, 1, 6, 6, 3, 3, 9, -16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1821.4-a";
N := (7*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 4, -2, 0, 8, -4, -4, -2, -8, 4, -4, 2, 6, -6, 2, -2, -14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1821.4-b";
N := (7*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -7, -4, 3, -8, -3, -2, -6, 6, -9, -6, -8, 1, -9, -5, 11, -11, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1821.3-a";
N := (25*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, -2, -7, 4, -7, 2, -6, 10, 5, -2, -10, 1, 1, -11, 5, -11, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1821.3-b";
N := (25*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -2, 2, -8, -1, 8, 3, 4, 5, 7, -10, 1, -2, 7, -7, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1821.3-c";
N := (25*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, -2, 0, 4, -9, -6, 5, -8, 1, -9, 6, 3, 6, 9, 3, -6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-a";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 0, 6, 2, 6, 0, -4, -4, 2, 6, -6, -4, -10, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-b";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -8, 6, 4, 2, 8, 2, -4, 12, -10, -6, 6, -6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-c";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, 6, 8, 6, 0, -10, 8, -4, -6, 6, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-d";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, 2, -4, -2, 4, -6, -8, 8, 14, 6, -10, 10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-e";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 8, -4, -2, -2, 6, 12, -12, -6, 6, 2, 6, 2, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-f";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, -2, 4, -2, -4, -6, -8, 8, 14, -6, 10, -10, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-g";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 0, -4, -2, -6, -6, -8, -8, -6, 2, 10, -14, -2, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-h";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -8, -6, -4, 2, -8, 2, -4, 12, -10, 6, -6, 6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-i";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 0, -2, -6, -6, 4, 0, 8, 2, 10, -6, -4, 2, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-j";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, -6, -8, 6, 0, -10, 8, -4, -6, -6, -2, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-k";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, 2, 6, -6, -4, 4, 2, 2, -10, -2, -2, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-l";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, -4, 8, -6, -2, -10, -8, 0, -4, 6, -10, -2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-m";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, 0, -4, -6, 6, 2, 8, -4, -12, -6, 2, 2, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-n";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, -6, 2, -2, -10, -8, 4, -4, 10, 0, 2, 2, -10, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.1-o";
N := (-24*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -6, -2, 2, -10, 8, 4, -4, 10, 0, -2, -2, 10, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-a";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -8, -4, 8, -4, -2, -6, 2, -2, -10, -10, 6, 6, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-b";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -6, 0, 4, -6, 6, -10, -10, -10, -6, 6, -14, -8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-c";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -8, 2, -4, -10, 4, 6, 8, 4, -4, 2, 6, 12, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-d";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, 0, 2, 0, -6, -4, -4, 2, 6, -6, -10, -4, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-e";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -8, 4, -8, -4, 2, -6, 2, -2, -10, 10, -6, -6, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-f";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -6, 0, -4, -6, -6, -10, -10, -10, -6, -6, 14, 8, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-g";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 0, -2, 6, -10, 0, -8, -6, 2, -2, -6, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-h";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, -8, -2, -6, 2, -12, 12, -6, -2, -6, 2, 6, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-i";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 6, 8, 2, 6, -8, -10, 0, -6, 4, -2, -10, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-j";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, 2, 6, -6, 4, -4, 2, 10, -2, -2, -2, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-k";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, 0, -6, -4, 6, 8, 0, 2, 6, -10, 2, -4, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-l";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 4, 0, -2, 6, 6, -8, -8, -6, -10, -2, -2, -14, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.2-m";
N := (-12*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 0, 6, -4, -6, 6, 8, 2, -4, 6, 12, 2, 2, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.5-a";
N := (2*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, -3, -7, 2, -1, 4, -1, -4, -12, 6, -2, 3, -3, -8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.5-b";
N := (2*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 6, 3, -7, -3, 6, -4, 8, -1, 3, 6, 5, -10, 17, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.5-c";
N := (2*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 5, -8, 3, -2, 8, -8, 2, -5, -5, -8, -9, 8, -13, 5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.5-d";
N := (2*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 2, 3, -1, 8, -4, 1, 2, -1, 0, 3, -14, 6, -12, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.5-e";
N := (2*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -2, 3, 1, -8, -4, -1, 2, -1, 0, 3, 14, -6, 12, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.5-f";
N := (2*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -5, -8, -3, 2, 8, 8, 2, -5, -5, -8, 9, -8, 13, -5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.5-g";
N := (2*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, 6, -3, 7, -3, -6, -4, 8, -1, 3, -6, -5, 10, -17, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.5-h";
N := (2*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -5, -3, 7, -2, -1, -4, -1, -4, -12, 6, 2, -3, 3, 8, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.6-a";
N := (26*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, -4, 9, -9, 2, 9, -2, -9, -8, -6, 2, 5, -6, 10, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.6-b";
N := (26*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -2, 3, 1, -2, -1, 8, -1, -10, 12, -12, -1, 6, 0, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.6-c";
N := (26*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, -3, -5, -4, 7, -10, 5, -4, 6, 0, -13, 0, -12, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.6-d";
N := (26*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -6, 0, -1, 9, -9, -1, 2, 2, -3, 12, 8, 14, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.6-e";
N := (26*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, 0, 0, -2, -6, 0, 8, -7, -13, -12, -9, 7, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.6-f";
N := (26*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, 0, 0, 2, 6, 0, 8, -7, -13, 12, -9, -7, 8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.6-g";
N := (26*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 6, 0, 1, -9, -9, -1, 2, 2, 3, 12, -8, -14, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.6-h";
N := (26*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 4, 3, -5, 4, -7, -10, 5, -4, 6, 0, -13, 0, 12, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.6-i";
N := (26*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, -3, 1, 2, 1, 8, -1, -10, 12, 12, -1, -6, 0, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.6-j";
N := (26*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, -4, -9, -9, -2, -9, -2, -9, -8, -6, -2, 5, 6, -10, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-a";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 6, 0, 2, 0, 6, -4, -4, 2, -6, 6, -10, -4, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-b";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 6, -8, 4, 8, 2, -4, 2, 12, -6, -10, -6, 6, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-c";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 6, 0, 8, 0, 6, 8, -10, -4, 6, -6, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-d";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 2, 4, -4, 4, -2, -8, -6, 8, 6, 14, 10, -10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-e";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 8, -2, 6, -2, -12, 12, -6, 2, 6, 2, 6, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-f";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -2, 4, 4, -4, -2, -8, -6, 8, -6, 14, -10, 10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-g";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -4, 0, -2, -6, -6, -8, -8, -6, 10, 2, -2, -14, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-h";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -6, -8, -4, -8, 2, -4, 2, 12, 6, -10, 6, -6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-i";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 0, -6, 4, -6, 8, 0, 2, -6, 10, 2, -4, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-j";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -6, 0, -8, 0, 6, 8, -10, -4, -6, -6, -2, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-k";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, 2, -6, 6, 4, -4, 2, -10, 2, -2, -2, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-l";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, -6, 8, -2, -6, -8, -10, 0, 6, -4, -2, -10, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-m";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 0, -6, -4, 6, -6, 8, 2, -4, -6, -12, 2, 2, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-n";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, 2, -6, -2, -8, -10, -4, 4, 10, 2, 0, -10, 2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.4-o";
N := (24*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -2, -6, 2, 8, -10, -4, 4, 10, -2, 0, 10, -2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-a";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -8, 8, -2, -4, 2, -6, -2, -10, -10, 6, 6, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-b";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, -6, 4, 6, -6, -10, -10, -10, 6, -6, -8, -14, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-c";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -8, -4, 4, -10, 8, 6, 4, 2, -4, 12, 6, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-d";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 0, -6, 2, -6, 0, -4, -4, 2, -6, 6, -4, -10, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-e";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, -8, -8, 2, -4, 2, -6, -2, 10, -10, -6, -6, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-f";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, -6, -4, -6, -6, -10, -10, -10, -6, -6, 8, 14, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-g";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 0, -2, -10, 6, -8, 0, -6, -2, 2, -10, -6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-h";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -8, 4, -2, 2, -6, 12, -12, -6, -6, -2, 6, 2, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-i";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, 4, 8, 6, 2, -10, -8, 0, 4, -6, -10, -2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-j";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, 2, -6, 6, -4, 4, 2, -2, 10, -2, -2, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-k";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 0, 2, -6, 6, -4, 0, 8, 2, -10, 6, -4, 2, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-l";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 0, 4, -2, 6, 6, -8, -8, -6, -2, -10, -14, -2, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.3-m";
N := (12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 6, 0, -4, 6, -6, 2, 8, -4, 12, 6, 2, 2, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.8-a";
N := (2*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, -7, -3, 2, 4, -1, -4, -1, -12, -2, 6, -3, 3, 15, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.8-b";
N := (2*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 3, 6, -7, 6, -3, 8, -4, -1, 6, 3, -10, 5, 11, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.8-c";
N := (2*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 5, 3, -8, -2, -8, 8, -5, 2, -5, -9, -8, -13, 8, 1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.8-d";
N := (2*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 2, -1, 3, 8, 1, -4, -1, 2, 0, -14, 3, -12, 6, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.8-e";
N := (2*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -2, 1, 3, -8, -1, -4, -1, 2, 0, 14, 3, 12, -6, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.8-f";
N := (2*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -5, -3, -8, 2, 8, 8, -5, 2, -5, 9, -8, 13, -8, -1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.8-g";
N := (2*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, -3, 6, 7, -6, -3, 8, -4, -1, -6, 3, 10, -5, -11, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.8-h";
N := (2*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -5, 7, -3, -2, -4, -1, -4, -1, -12, 2, 6, 3, -3, -15, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.7-a";
N := (26*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, -4, -9, 9, 2, -2, 9, -8, -9, -6, 5, 2, 10, -6, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.7-b";
N := (26*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -2, 1, 3, -2, 8, -1, -10, -1, 12, -1, -12, 0, 6, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.7-c";
N := (26*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, -5, -3, -4, -10, 7, -4, 5, 6, -13, 0, -12, 0, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.7-d";
N := (26*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 0, -6, -1, -9, 9, 2, -1, 2, 12, -3, 14, 8, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.7-e";
N := (26*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, 0, 0, -2, 0, -6, -7, 8, -13, -9, -12, -8, 7, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.7-f";
N := (26*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, 0, 0, 2, 0, 6, -7, 8, -13, -9, 12, 8, -7, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.7-g";
N := (26*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 0, 6, 1, -9, -9, 2, -1, 2, 12, 3, -14, -8, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.7-h";
N := (26*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 4, -5, 3, 4, -10, -7, -4, 5, 6, -13, 0, 12, 0, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.7-i";
N := (26*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, 1, -3, 2, 8, 1, -10, -1, 12, -1, 12, 0, -6, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1836.7-j";
N := (26*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, -4, -9, -9, -2, -2, -9, -8, -9, -6, 5, -2, -10, 6, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1849.1-a";
N := (43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -5, -3, -3, -1, -1, 6, -6, -6, -14, -5, -5, 2, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1856.1-a";
N := (-24*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 6, 5, -1, -6, 8, 1, -6, 5, 5, -1, 0, 0, -4, 6, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1856.2-a";
N := (24*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 6, -1, 5, 8, -6, 1, -6, 5, 5, -1, 0, 0, 6, -4, -10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-a";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 6, -2, 8, -6, -6, -6, -12, -4, 10, 10, 10, -2, -2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-b";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, 0, 8, -6, 4, -4, 0, 4, -2, 4, 0, 10, 2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-c";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 6, 6, 8, 6, 6, -10, -4, -10, -6, -6, 8, -10, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-d";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 0, 8, 6, -4, -4, 0, 4, -2, -4, 0, -10, -2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-e";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, -2, 4, 2, 6, 2, 0, -4, -6, 6, -6, -10, 10, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-f";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 6, 6, -8, -6, 6, -10, -4, -10, 6, -6, -8, 10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-g";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 8, -6, -4, 6, -4, -4, 6, 4, -8, 2, 6, 2, -2, -16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-h";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 0, 2, 2, -6, -4, -4, 2, 10, -6, -10, -2, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-i";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 0, -8, 6, 4, 4, 0, 4, -2, 4, 0, -10, -2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-j";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 0, -8, -6, -4, 4, 0, 4, -2, -4, 0, 10, 2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.1-k";
N := (-27*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -6, -2, -8, 2, -2, 6, -8, -12, -10, -6, -6, -10, -2, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.3-a";
N := (3*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, -8, 2, -6, 4, -9, -5, -7, -4, 2, -12, -1, 5, -2, 12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.3-b";
N := (3*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 6, -3, 1, 9, -6, 8, -1, -10, 12, 0, -2, -2, 10, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.3-c";
N := (3*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 6, -2, -8, -9, -2, -2, -5, -9, -11, 6, 4, 10, -7, -13, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.3-d";
N := (3*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, -2, 7, 3, 7, 10, -8, 3, -2, -12, -8, 10, 2, -10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.3-e";
N := (3*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -6, -2, -4, -6, 5, 1, 1, -6, 4, 6, 13, 5, -8, -14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.3-f";
N := (3*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 6, -2, 4, 6, -5, 1, 1, -6, 4, -6, 13, -5, 8, 14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.3-g";
N := (3*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, -2, -7, -3, -7, 10, -8, 3, -2, 12, -8, -10, -2, 10, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.3-h";
N := (3*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -6, -2, 8, 9, 2, -2, -5, -9, -11, -6, 4, -10, 7, 13, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.3-i";
N := (3*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 6, 3, -1, -9, -6, 8, -1, -10, -12, 0, 2, 2, -10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.3-j";
N := (3*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 8, 2, 6, -4, 9, -5, -7, -4, 2, 12, -1, -5, 2, -12, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-a";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -4, -7, -4, -8, -6, -2, -6, -10, 9, -9, 6, 4, 5, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-b";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -4, -4, -1, 1, 6, -5, 6, 8, 9, 9, -3, 1, -10, 11, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-c";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 6, -4, 8, 1, -8, 6, 1, -3, 5, 6, 0, -2, -7, -17, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-d";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -3, -4, 4, -6, 3, -6, 6, -7, -8, 10, 2, 8, -7, 9, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-e";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -1, -4, 8, -10, -6, 10, 6, -13, 9, -6, -4, 7, -10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-f";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 0, 0, 3, -1, 6, -3, 2, -4, 11, 3, 9, -1, -10, -1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-g";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, 2, -4, 4, 9, -2, -12, -7, 6, -6, -12, -2, -7, 5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-h";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 1, 2, -4, -4, -9, -2, -12, -7, 6, 6, -12, 2, 7, -5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-i";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 0, 0, 3, 1, -6, -3, 2, -4, 11, -3, 9, 1, 10, 1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-j";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -1, -4, -8, 10, -6, 10, 6, -13, -9, -6, 4, -7, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-k";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 3, -4, 4, 6, -3, -6, 6, -7, -8, -10, 2, -8, 7, -9, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-l";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, -4, 8, -1, 8, 6, 1, -3, 5, -6, 0, 2, 7, 17, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-m";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 4, -4, -1, -1, -6, -5, 6, 8, 9, -9, -3, -1, 10, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.4-n";
N := (-24*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 4, -7, -4, 8, 6, -2, -6, -10, 9, 9, 6, -4, -5, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.7-a";
N := (-14*w + 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 3, 2, 1, -6, 4, -4, 7, -6, 4, -9, 2, -1, -8, -14, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.7-b";
N := (-14*w + 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, -3, 3, -3, 1, -9, 3, 5, 8, 11, -9, -3, 7, -2, 1, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.7-c";
N := (-14*w + 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -1, -3, -7, 1, -9, -5, -7, -11, -12, -5, 3, -1, 5, -2, -5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.7-d";
N := (-14*w + 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 3, -6, 9, -8, -6, 6, -1, 8, 8, -9, -6, 1, 10, -8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.7-e";
N := (-14*w + 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 3, 6, 9, 8, -6, -6, -1, 8, 8, -9, 6, -1, -10, 8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.7-f";
N := (-14*w + 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 1, -3, 7, 1, 9, -5, 7, -11, -12, -5, 3, 1, -5, 2, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.7-g";
N := (-14*w + 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, -3, -3, -3, -1, -9, -3, 5, 8, 11, -9, 3, -7, 2, -1, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.7-h";
N := (-14*w + 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 3, -2, 1, 6, 4, 4, 7, -6, 4, -9, -2, 1, 8, 14, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.8-a";
N := (11*w - 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, 2, -2, -7, -4, -2, -6, -7, 0, 6, 9, 0, -2, 14, -14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.8-b";
N := (11*w - 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, 6, -3, 0, 4, -9, 9, -4, 11, 14, -9, -12, -5, 4, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.8-c";
N := (11*w - 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 0, 2, 3, -4, -4, 9, -1, 12, 1, 2, -9, 12, -5, -4, 0, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.8-d";
N := (11*w - 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 0, -2, 3, 4, 4, -9, -1, 12, 1, 2, 9, 12, 5, 4, 0, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.8-e";
N := (11*w - 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -6, -3, 0, -4, 9, 9, -4, 11, 14, 9, -12, 5, -4, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.8-f";
N := (11*w - 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 1, -2, -2, 7, 4, 2, -6, -7, 0, 6, -9, 0, 2, -14, 14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-a";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, 6, 8, -6, -6, -6, -4, -12, 10, 10, 10, -2, -2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-b";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 4, 8, -6, -4, 4, 4, 0, -2, 0, 4, 2, 10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-c";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 6, 6, 8, 6, 6, -4, -10, -10, -6, -6, -10, 8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-d";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -4, 8, 6, -4, -4, 4, 0, -2, 0, -4, -2, -10, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-e";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 2, 4, 2, 2, 6, -4, 0, -6, -6, 6, 10, -10, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-f";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -6, 6, -8, 6, -6, -4, -10, -10, -6, 6, 10, -8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-g";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, 8, -4, 6, -4, -4, 4, 6, -8, 6, 2, -2, 2, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-h";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 0, 2, -6, 2, -4, -4, 2, -6, 10, -2, -10, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-i";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 4, -8, 6, 4, 4, 4, 0, -2, 0, 4, -2, -10, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-j";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -4, -8, -6, 4, -4, 4, 0, -2, 0, -4, 2, 10, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.2-k";
N := (27*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, -6, -8, 2, 6, -2, -12, -8, -10, -6, -6, -2, -10, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.6-a";
N := (3*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 2, -8, -6, 4, -5, -9, -4, -7, 2, -1, -12, -2, 5, -5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.6-b";
N := (3*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 0, -3, 1, -6, 9, -1, 8, -10, 0, 12, -2, -2, -11, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.6-c";
N := (3*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 6, -8, -9, -2, -2, -9, -5, -11, 4, 6, -7, 10, 5, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.6-d";
N := (3*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, 0, 7, 3, 10, 7, 3, -8, -2, -8, -12, 2, 10, 11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.6-e";
N := (3*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -2, -6, -4, -6, 1, 5, -6, 1, 4, 13, 6, -8, 5, -5, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.6-f";
N := (3*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, -2, 6, 4, 6, 1, -5, -6, 1, 4, 13, -6, 8, -5, 5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.6-g";
N := (3*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 0, -7, -3, 10, -7, 3, -8, -2, -8, 12, -2, -10, -11, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.6-h";
N := (3*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -6, 8, 9, -2, 2, -9, -5, -11, 4, -6, 7, -10, -5, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.6-i";
N := (3*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 0, 3, -1, -6, -9, -1, 8, -10, 0, -12, 2, 2, 11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.6-j";
N := (3*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 2, 8, 6, -4, -5, 9, -4, -7, 2, -1, 12, 2, -5, 5, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-a";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -7, -4, -4, -8, -2, -6, -10, -6, 9, 6, -9, 5, 4, -16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-b";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -4, -4, -1, 1, -5, 6, 8, 6, 9, -3, 9, -10, 1, 11, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-c";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -4, 6, 8, 1, 6, -8, -3, 1, 5, 0, 6, -7, -2, -15, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-d";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -4, -3, 4, -6, -6, 3, -7, 6, -8, 2, 10, -7, 8, 14, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-e";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, 0, -4, 8, -6, -10, 6, 10, -13, -6, 9, 7, -4, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-f";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 0, 0, 3, -1, -3, 6, -4, 2, 11, 9, 3, -10, -1, 5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-g";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -1, -4, 4, -2, 9, -7, -12, 6, -12, -6, -7, -2, 2, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-h";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 1, -4, -4, -2, -9, -7, -12, 6, -12, 6, 7, 2, -2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-i";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 0, 0, 3, 1, -3, -6, -4, 2, 11, 9, -3, 10, 1, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-j";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 0, -4, -8, -6, 10, 6, 10, -13, -6, -9, -7, 4, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-k";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -4, 3, 4, 6, -6, -3, -7, 6, -8, 2, -10, 7, -8, -14, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-l";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -4, -6, 8, -1, 6, 8, -3, 1, 5, 0, -6, 7, 2, 15, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-m";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -4, 4, -1, -1, -5, -6, 8, 6, 9, -3, -9, 10, -1, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.5-n";
N := (-24*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -7, 4, -4, 8, -2, 6, -10, -6, 9, 6, 9, -5, -4, 16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.10-a";
N := (14*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 2, 3, 1, -6, -4, 4, -6, 7, 4, 2, -9, -8, -1, -11, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.10-b";
N := (14*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 3, -3, -3, 1, 3, -9, 8, 5, 11, -3, -9, -2, 7, 16, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.10-c";
N := (14*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -1, -7, -3, 1, -9, -7, -5, -12, -11, -5, -1, 3, -2, 5, 4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.10-d";
N := (14*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -6, 3, 9, -8, 6, -6, 8, -1, 8, -6, -9, 10, 1, -5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.10-e";
N := (14*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 6, 3, 9, 8, -6, -6, 8, -1, 8, 6, -9, -10, -1, 5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.10-f";
N := (14*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 1, 7, -3, 1, 9, 7, -5, -12, -11, -5, 1, 3, 2, -5, -4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.10-g";
N := (14*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, -3, -3, -3, -1, -3, -9, 8, 5, 11, 3, -9, 2, -7, -16, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.10-h";
N := (14*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -2, 3, 1, 6, 4, 4, -6, 7, 4, -2, -9, 8, 1, 11, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.9-a";
N := (11*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, -2, 2, -7, -4, -6, -2, 0, -7, 6, 0, 9, 14, -2, -5, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.9-b";
N := (11*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -3, 6, 0, 4, 9, -9, 11, -4, 14, -12, -9, 4, -5, 1, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.9-c";
N := (11*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 0, 3, 2, -4, -4, -1, 9, 1, 12, 2, 12, -9, -4, -5, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.9-d";
N := (11*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 0, 3, -2, 4, 4, -1, -9, 1, 12, 2, 12, 9, 4, 5, -5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.9-e";
N := (11*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -3, -6, 0, -4, 9, 9, 11, -4, 14, -12, 9, -4, 5, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1863.9-f";
N := (11*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 1, -2, -2, 7, 4, -6, 2, 0, -7, 6, 0, -9, -14, 2, 5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1868.1-a";
N := (-24*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -1, -6, 2, -8, -8, 2, 10, 4, 11, 6, 6, 6, 6, 4, -13, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1868.1-b";
N := (-24*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -7, 1, 0, 4, -1, -4, 0, 11, 1, 11, 0, 0, -14, 2, -14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1868.1-c";
N := (-24*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 2, -5, 3, 4, -4, -9, 6, 4, 11, 11, 5, -10, 6, 2, 2, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1868.2-a";
N := (24*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -1, 2, -6, -8, -8, 2, 4, 10, 6, 11, 6, 6, 6, -13, 4, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1868.2-b";
N := (24*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 1, -7, 4, 0, -1, 0, -4, 1, 11, 11, 0, 0, 2, -14, -10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1868.2-c";
N := (24*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 2, 3, -5, -4, 4, -9, 4, 6, 11, 11, 5, 6, -10, 2, 2, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1871.1-a";
N := (-24*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 2, 3, -2, 0, 0, 1, 9, 4, -3, -4, 2, -8, 12, -6, -5, -2, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1871.1-b";
N := (-24*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -1, 6, -2, -3, 6, 4, 3, 1, 0, -4, 8, 1, 0, -6, 1, -5, -6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1871.1-c";
N := (-24*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -2, 3, -4, 0, -8, 9, -3, 6, -3, 4, -2, -10, -8, 10, -5, 2, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1871.2-a";
N := (24*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 3, 0, -2, 1, 0, 9, -3, 4, 2, -4, -8, -6, 12, -2, -5, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1871.2-b";
N := (24*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -1, 6, -3, -2, 4, 6, 3, 0, 1, 8, -4, 1, -6, 0, -5, 1, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1871.2-c";
N := (24*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -2, 3, 0, -4, 9, -8, -3, -3, 6, -2, 4, -10, 10, -8, 2, -5, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.1-a";
N := (-24*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, -6, 6, 4, 6, 6, -10, -4, -4, 6, -6, 10, 10, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.1-b";
N := (-24*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, -6, 4, 6, 6, -4, -10, -4, -6, 6, 10, 10, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.1-c";
N := (-24*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, 6, -6, -6, 4, 4, -10, -10, -10, -14, -14, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.1-d";
N := (-24*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, 4, -2, -10, 12, -2, -12, 10, 6, 2, -14, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.1-e";
N := (-24*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -2, 4, -10, -2, -2, 12, -12, 6, 10, -14, 2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.1-f";
N := (-24*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, -2, 8, -10, -2, -8, -2, 8, -14, -2, 2, 10, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.1-g";
N := (-24*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, -2, 2, 8, -2, -10, -2, -8, 8, -2, -14, 10, 2, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.1-h";
N := (-24*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 0, 0, -10, -6, -6, -4, -4, -10, 6, 6, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.2-a";
N := (-28*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -2, 6, -8, -2, 6, -6, 8, 4, -6, 2, 6, 6, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.2-b";
N := (-28*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, -8, 8, 6, -2, 2, 4, 4, -10, -6, 6, 2, 2, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.3-a";
N := (-28*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 6, -2, -8, 6, -2, 8, -6, 4, 2, -6, 6, 6, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1872.3-b";
N := (-28*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 8, -8, 6, 2, -2, 4, 4, -10, 6, -6, 2, 2, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1873.1-a";
N := (26*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, 6, 0, 6, -4, -4, -2, -4, -6, 8, -4, -10, 10, -6, 2, -2, 16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1873.2-a";
N := (26*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -3, 6, 6, 0, -4, -4, -2, -6, -4, -4, 8, -10, -6, 10, -2, 2, -12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1875.1-a";
N := (-25*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 4, -4, -4, 0, -2, -2, 8, -4, -2, -8, 0, -14, 2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1875.1-b";
N := (-25*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, 4, 4, 8, 2, -10, 2, 10, -8, -2, -6, 6, -2, 10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1875.1-c";
N := (-25*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 2, -6, -8, 4, -2, 6, 8, 12, -6, 10, 10, -2, -2, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1875.1-d";
N := (-25*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 0, 0, 0, 6, 6, -6, -2, -8, -10, -6, 6, -2, 10, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1875.1-e";
N := (-25*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, -4, 4, 4, 0, -2, -2, -8, 4, -2, 8, 0, -14, 2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1875.2-a";
N := (-25*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, -4, 4, 0, -4, -2, -2, -4, 8, -2, 0, -8, 2, -14, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1875.2-b";
N := (-25*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, 4, 4, 2, 8, 2, -10, -8, 10, -2, 6, -6, 10, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1875.2-c";
N := (-25*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -6, 2, 4, -8, 6, -2, 12, 8, -6, 10, 10, -2, -2, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1875.2-d";
N := (-25*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 0, 0, 6, 0, -6, 6, -8, -2, -10, 6, -6, 10, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1875.2-e";
N := (-25*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, 4, -4, 0, 4, -2, -2, 4, -8, -2, 0, 8, 2, -14, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.1-a";
N := (-10*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 6, 0, -2, -4, 9, 3, 6, 1, 0, -10, -11, -9, -4, 5, 15, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.1-b";
N := (-10*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 6, 0, 2, -2, -1, 1, 2, 7, -2, 12, -11, 5, 6, -7, 11, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.1-c";
N := (-10*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 8, 1, 1, 0, -9, 0, -8, 1, -9, 10, 3, -14, -2, -1, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.1-d";
N := (-10*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, 0, -2, 6, -5, -1, -2, -5, -2, 12, 11, -1, -14, -9, -7, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.1-e";
N := (-10*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 0, -8, -4, 6, -6, -6, 4, -6, 8, 4, 0, 2, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.1-f";
N := (-10*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 6, 0, -6, 0, 1, 9, -6, -7, 8, -10, 3, 9, 4, -5, 13, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.1-g";
N := (-10*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, -5, -3, 6, 1, -6, -6, 9, 9, -2, 9, -10, -8, 1, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.1-h";
N := (-10*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -6, -8, -6, -4, 3, -5, 2, 9, -8, -6, 5, -3, 0, 5, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.1-i";
N := (-10*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -5, -9, 8, 9, -8, -4, -3, 1, 6, -13, 6, -6, -1, 2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.2-a";
N := (-4*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, 0, 8, 6, -2, -10, 6, -4, 8, -8, -6, -6, 0, -6, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.2-b";
N := (-4*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 4, -4, 2, -6, 2, 6, -4, 0, -12, 6, 10, 0, -10, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.4-a";
N := (10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 0, 6, -4, -2, 9, 6, 3, 0, 1, -10, -9, -11, 5, -4, 8, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.4-b";
N := (10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 6, -2, 2, -1, 2, 1, -2, 7, 12, 5, -11, -7, 6, -2, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.4-c";
N := (10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 1, 8, 0, 1, -9, -8, 0, -9, 1, 10, -14, 3, -1, -2, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.4-d";
N := (10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -2, 6, -2, -5, -2, -1, -2, -5, 12, -1, 11, -9, -14, 14, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.4-e";
N := (10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, -6, -4, -8, 6, -6, -6, -6, 4, 8, 0, 4, -4, 2, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.4-f";
N := (10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, 6, 0, -6, 1, -6, 9, 8, -7, -10, 9, 3, -5, 4, 4, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.4-g";
N := (10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -5, 4, 6, -3, 1, -6, -6, 9, 9, -2, -10, 9, 1, -8, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.4-h";
N := (10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -8, -6, -4, -6, 3, 2, -5, -8, 9, -6, -3, 5, 5, 0, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.4-i";
N := (10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, 0, 8, -9, 9, -4, -8, 1, -3, 6, 6, -13, -1, -6, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.3-a";
N := (4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, 6, 6, 8, -2, 6, -10, 8, -4, -8, -6, -6, -6, 0, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1884.3-b";
N := (4*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 2, 2, -4, -6, 6, 2, 0, -4, -12, 10, 6, -10, 0, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1889.1-a";
N := (w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 4, -4, 0, 4, 8, -10, -6, 6, 4, 6, 4, 6, 6, -2, -6, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1889.1-b";
N := (w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, -2, -8, -3, 7, 9, -6, -3, -8, 0, -6, -6, 0, 7, 0, -16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1889.1-c";
N := (w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, -2, -6, -2, 5, 3, -3, -6, -3, -8, -6, 0, -6, 6, -13, -8, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1889.2-a";
N := (w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 4, 0, -4, 8, 4, -10, 6, -6, 6, 4, 4, 6, 6, -6, -2, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1889.2-b";
N := (w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 2, -8, -2, 7, -3, 9, -3, -6, 0, -8, -6, 0, -6, 0, 7, 14, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1889.2-c";
N := (w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, -2, -2, -6, 3, 5, -3, -3, -6, -6, -8, 0, 6, -6, -8, -13, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.1-a";
N := (-9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 6, -4, 4, -6, -6, -6, 4, 4, 6, 6, 6, -6, 6, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.1-b";
N := (-9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, -6, 6, -1, 7, 4, 2, 10, -6, -10, -12, 5, -8, 5, -8, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.1-c";
N := (-9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, -2, -5, -1, -4, -6, -6, 2, -2, -12, -11, 0, -7, -8, 11, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.1-d";
N := (-9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 0, 0, -6, 2, -4, 4, 0, -12, 4, 6, -14, -2, 10, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.1-e";
N := (-9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -2, 4, 2, -4, 0, -6, -4, -8, -6, -2, 6, 14, -8, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.1-f";
N := (-9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -6, 2, -4, 0, -6, 6, 6, 12, -4, 2, -10, -2, 10, -2, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.1-g";
N := (-9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 0, 4, -4, -6, 6, 0, 0, 0, -4, -4, -10, 2, 2, -10, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.1-h";
N := (-9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, -2, -4, 0, -2, 6, 2, 4, 12, -2, 6, 6, 2, 10, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.3-a";
N := (-25*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 2, 6, 9, -9, 8, 6, 2, 2, -10, -8, 13, -8, -1, -8, -1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.2-a";
N := (9*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 6, 4, -4, -6, -6, -6, 4, 4, 6, 6, 6, 6, -6, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.2-b";
N := (9*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, 6, -6, 7, -1, 4, 10, 2, -10, -6, -12, -8, 5, -8, 5, 1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.2-c";
N := (9*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, 2, -1, -5, -4, -6, -6, -2, 2, -12, 0, -11, -8, -7, 1, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.2-d";
N := (9*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -4, -6, 0, 2, 4, -4, -12, 0, 4, -14, 6, 10, -2, -14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.2-e";
N := (9*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -4, 2, 4, -4, -6, 0, -8, -4, -6, 6, -2, -8, 14, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.2-f";
N := (9*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, -6, 0, -4, -6, 6, 6, -4, 12, 2, -2, -10, -2, 10, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.2-g";
N := (9*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 4, 0, -6, -4, 6, 0, 0, -4, 0, -4, 2, -10, -10, 2, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.2-h";
N := (9*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, 2, 0, -4, -2, 2, 6, 12, 4, -2, 6, 6, 10, 2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1899.6-a";
N := (25*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 6, 2, -9, 9, 8, 2, 6, -10, 2, -8, -8, 13, -8, -1, 1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-a";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 4, -6, -6, 8, -2, -2, -6, -2, 2, -2, -12, 2, -2, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-b";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -6, 4, -6, 6, 8, -2, 10, 4, -2, -2, -10, 6, 16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-c";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, -4, -4, 6, -6, 2, -4, 0, 10, 6, 6, 10, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-d";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -7, -4, 1, -3, -7, 4, -5, -10, 0, 2, 7, -14, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-e";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, 4, -2, -6, 8, 2, 10, 4, -2, -6, -10, 2, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-f";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, 2, 6, 2, 8, -2, 12, -2, -2, 12, 6, -14, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-g";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 6, 0, -2, 6, -6, 2, -10, 14, 0, 10, -2, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-h";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, -2, 6, 0, 6, -8, -2, -10, -8, 10, -2, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-i";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -1, 4, -7, 3, 3, 4, -7, 2, -12, -2, -13, -2, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-j";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, -6, -6, 2, 0, -6, 8, -10, -10, 0, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-k";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 0, -8, 6, 10, -2, -12, 8, 2, 6, 2, 2, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-l";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 1, 8, -3, -1, -1, 4, -9, -6, 4, -2, -7, 10, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.1-m";
N := (6*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 2, -4, 4, -6, 2, -2, 4, 8, -6, 2, -2, -2, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.3-a";
N := (-8*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 3, 6, 3, 5, 9, -6, 11, 2, -4, -12, -7, 8, -16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.3-b";
N := (-8*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 4, -6, 3, 2, -4, 6, 6, -5, 8, -9, 9, 1, -8, -11, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.3-c";
N := (-8*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 0, 0, -4, -2, -6, 6, 4, -10, -6, -6, -10, 2, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.3-d";
N := (-8*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -3, -2, -9, 3, -5, -6, -11, 6, -8, -4, 13, -12, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.3-e";
N := (-8*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -7, -4, 1, 9, 1, 0, -5, -6, 4, -14, -1, 10, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.3-f";
N := (-8*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 1, 3, 6, 8, 5, -6, -6, 1, -13, -9, -12, -2, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.3-g";
N := (-8*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 0, 0, -4, 2, 6, 6, 4, -10, -6, -6, 10, -2, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.3-h";
N := (-8*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 2, 8, -8, -6, -2, -6, 4, -12, -14, -2, -10, -2, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.4-a";
N := (26*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -4, 6, -3, -2, -4, -6, -6, -5, 8, -9, -9, 1, -8, -11, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.4-b";
N := (26*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, -3, -6, -8, 5, 6, 6, 1, -13, -9, 12, -2, -2, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.4-c";
N := (26*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 4, 2, -5, 6, 8, -2, 2, -3, 0, -5, 11, 5, -8, -5, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.4-d";
N := (26*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -8, -1, -4, 4, 0, 0, -1, 4, -5, -9, -7, -2, 5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.4-e";
N := (26*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, 0, 3, 4, -4, -8, 0, -5, -4, -5, 3, -11, -10, -11, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-a";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 4, 8, -6, -2, -6, -2, 2, -2, -2, -12, -2, 2, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-b";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 0, -6, 4, 6, -2, 8, 4, 10, -2, -2, 6, -10, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-c";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 6, -4, -4, 6, 2, -6, 0, -4, 10, 6, 10, 6, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-d";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -7, 0, 1, -4, -3, 4, -7, -10, -5, 0, 2, -14, 7, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-e";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, -2, 4, -6, 2, 8, 4, 10, -2, -6, 2, -10, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-f";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, 6, 2, 2, -2, 8, -2, 12, -2, 12, -14, 6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-g";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, 0, 6, -2, -6, 6, -10, 2, 14, 0, -2, 10, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-h";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -2, -6, 6, 6, 0, -2, -8, -10, -8, -2, 10, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-i";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, 4, -7, 4, 3, 4, 3, 2, -7, -12, -2, -2, -13, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-j";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, -6, -6, 2, -6, 0, -10, 8, -10, 0, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-k";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -2, -8, 0, 6, -2, 10, 8, -12, 2, 6, 2, 2, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-l";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 1, -4, -3, 8, -1, 4, -1, -6, -9, 4, -2, 10, -7, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.2-m";
N := (6*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -6, 4, -4, -6, -2, 2, 8, 4, -6, 2, -2, -2, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.6-a";
N := (8*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 3, 6, 3, 6, 5, -6, 9, 2, 11, -4, -12, 8, -7, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.6-b";
N := (8*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -6, 4, 2, 3, -4, 6, 6, 8, -5, -9, 9, -8, 1, -2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.6-c";
N := (8*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, 2, -4, 0, -2, 6, -6, -10, 4, -6, -6, 2, -10, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.6-d";
N := (8*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -3, 2, -9, -2, 3, -6, -5, 6, -11, -8, -4, -12, 13, 10, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.6-e";
N := (8*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -7, 0, 1, -4, 9, 0, 1, -6, -5, 4, -14, 10, -1, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.6-f";
N := (8*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 3, 1, 8, 6, 5, -6, -6, -13, 1, -9, -12, -2, -2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.6-g";
N := (8*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, -2, -4, 0, 2, 6, 6, -10, 4, -6, -6, -2, 10, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.6-h";
N := (8*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, -6, -8, 8, -6, -6, -2, -12, 4, -14, -2, -2, -10, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.5-a";
N := (26*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 6, -4, -2, -3, -4, -6, -6, 8, -5, -9, -9, -8, 1, -2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.5-b";
N := (26*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, -1, -8, -6, 5, 6, 6, -13, 1, -9, 12, -2, -2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.5-c";
N := (26*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 2, 4, 6, -5, 8, 2, -2, 0, -3, -5, 11, -8, 5, 2, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.5-d";
N := (26*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -8, -2, -4, -1, 4, 0, 0, 4, -1, -5, -9, -2, -7, 10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1908.5-e";
N := (26*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -2, 4, 3, -4, 0, -8, -4, -5, -5, 3, -10, -11, 10, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1911.1-a";
N := (7*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -3, 0, -4, 4, 4, -2, 3, 5, 4, -9, -14, -3, -10, -15, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1911.1-b";
N := (7*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, 5, -6, -4, 7, -8, 1, -3, -10, -7, -4, 3, 3, 14, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1911.1-c";
N := (7*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, -7, 1, 1, 7, 3, 5, 1, 3, -5, 0, 8, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1911.1-d";
N := (7*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 3, -8, -8, 4, 4, 10, -3, 9, 4, -1, -2, -7, 6, -1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1911.2-a";
N := (7*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -3, 4, -4, 4, 3, -2, 4, 5, -14, -9, -10, -3, -2, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1911.2-b";
N := (7*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 5, -6, -4, -6, 7, 1, -8, -10, -3, -4, -7, 3, 3, -3, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1911.2-c";
N := (7*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 0, 1, -7, 1, 3, 7, 1, 5, -5, 3, 8, 0, -5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1911.2-d";
N := (7*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -8, 3, 4, -8, 4, -3, 10, 4, 9, -2, -1, 6, -7, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1921.1-a";
N := (-15*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 0, 7, 8, -1, -6, -8, -9, 10, -2, -8, -12, 0, 2, -1, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1921.1-b";
N := (-15*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 0, 1, 2, -4, 6, -5, 3, 1, 10, 4, 6, 6, -13, -10, 15, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1921.4-a";
N := (15*w - 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 0, 7, -1, 8, -6, -9, -8, -2, 10, -8, 0, -12, -1, 2, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1921.4-b";
N := (15*w - 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, 0, 1, -4, 2, 6, 3, -5, 10, 1, 4, 6, 6, -10, -13, 1, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1923.1-a";
N := (28*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 2, 2, 4, 6, -6, 2, 6, -4, -2, 2, -2, 14, -12, 2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1923.1-b";
N := (28*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, 2, 2, 0, 4, -6, 6, -2, -4, 0, 2, -10, 6, 10, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1923.4-a";
N := (-28*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 2, 2, 6, 4, -6, 6, 2, -2, -4, 2, 14, -2, 2, -12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1923.4-b";
N := (-28*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, 2, 2, 4, 0, -6, -2, 6, 0, -4, 2, 6, -10, 6, 10, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1936.1-a";
N := (44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 6, 6, -3, -3, -1, 0, 0, -10, -10, -10, -6, -6, -4, -4, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1936.1-b";
N := (44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -2, -2, -4, -4, 10, -6, -6, 12, 12, -2, 6, 6, -10, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1941.1-a";
N := (25*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -8, -3, -4, 6, -1, -6, 2, -9, -4, -5, -12, 13, 4, 11, 0, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1941.1-b";
N := (25*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, 0, -6, -4, -2, 8, 4, 6, -4, 10, -6, 14, 0, 2, -8, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1941.2-a";
N := (-26*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -6, 0, 4, 4, -4, -6, 4, 12, 12, -2, -14, 12, 8, 2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1941.2-b";
N := (-26*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -4, 2, -3, 0, 1, -4, 5, 1, 12, 1, 4, 14, 8, 10, -2, 0, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1941.2-c";
N := (-26*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, -2, 4, 0, 4, 4, 6, 8, 4, -8, 6, -6, -4, -8, -6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1941.4-a";
N := (25*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -3, -8, 6, -4, -1, 2, -6, -4, -9, -5, 13, -12, 11, 4, -1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1941.4-b";
N := (25*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, -6, 0, -2, -4, 8, 6, 4, 10, -4, -6, 0, 14, -8, 2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1941.3-a";
N := (-26*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 0, -6, 4, 4, -4, 4, -6, 12, 12, -2, 12, -14, 2, 8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1941.3-b";
N := (-26*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -4, -3, 2, 1, 0, -4, 1, 5, 1, 12, 4, 8, 14, -2, 10, -5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1941.3-c";
N := (-26*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, 4, -2, 4, 0, 4, 8, 6, -8, 4, 6, -4, -6, -6, -8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.1-a";
N := (-11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -6, -6, 4, 0, -2, 10, -2, 12, 4, -14, 6, 6, -6, 14, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.1-b";
N := (-11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, -4, -2, -7, -4, -9, 1, -5, -13, -12, -9, 0, 2, 2, 0, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.1-c";
N := (-11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 6, -4, -2, 1, 4, 1, 3, -9, 1, -12, -5, -12, 10, -2, 8, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.1-d";
N := (-11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -4, -6, -6, -9, -2, 7, -5, -3, -5, 0, -11, -6, -6, -14, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.2-a";
N := (25*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 3, 7, -5, 6, 3, 0, 8, 0, -13, -9, 12, 9, 8, -1, 11, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.2-b";
N := (25*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, -5, 3, 5, 6, -9, 0, 0, -4, 1, -13, 8, 1, -12, 11, 13, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.4-a";
N := (11*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -6, -6, 0, 4, -2, -2, 10, 4, 12, -14, 6, 6, 14, -6, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.4-b";
N := (11*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, -2, -4, -4, -7, -9, -5, 1, -12, -13, -9, 2, 0, 0, 2, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.4-c";
N := (11*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 6, -2, -4, 4, 1, 1, -9, 3, -12, 1, -5, 10, -12, 8, -2, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.4-d";
N := (11*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -4, -6, -6, -2, -9, 7, -3, -5, 0, -5, -11, -6, -6, 6, -14, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.3-a";
N := (25*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 7, 3, 6, -5, 3, 8, 0, -13, 0, -9, 9, 12, -1, 8, 3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1959.3-b";
N := (25*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, 3, -5, 6, 5, -9, 0, 0, 1, -4, -13, 1, 8, 11, -12, 1, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1964.1-a";
N := (-14*w + 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 4, 5, -1, -1, -6, 7, 7, 6, 0, -4, -10, 2, -6, -5, -7, 15, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1964.2-a";
N := (14*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, -1, 5, -6, -1, 7, 6, 7, -4, 0, -10, -6, 2, -7, -5, 16, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1972.1-a";
N := (-26*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 1, -4, 4, 3, 2, -6, -3, -2, -2, -8, -4, -3, 6, -11, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1972.2-a";
N := (-28*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, -2, 4, -1, -4, 10, 4, 4, 10, -1, -1, -13, -3, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1972.4-a";
N := (26*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -4, 3, 4, 2, -6, -2, -3, -2, -4, -8, 6, -3, 1, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1972.3-a";
N := (-28*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, -2, -1, 4, -4, 10, 4, 4, 10, -1, -1, -3, -13, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1973.1-a";
N := (-4*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 1, 5, 3, 3, 8, -8, -2, 4, 10, 2, 1, -5, 1, 0, -5, 6, 10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1973.2-a";
N := (4*w - 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, 5, 3, 3, -8, 8, -2, 10, 4, 1, 2, -5, 0, 1, 6, -5, 2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1975.1-a";
N := (-25*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -1, 6, -6, 4, 4, 2, 6, -2, 4, 0, 2, -8, -6, 2, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1975.1-b";
N := (-25*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -1, -6, -2, 4, 0, 6, 6, 10, 8, -4, -2, 4, -14, -14, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1975.2-a";
N := (25*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -1, 6, 4, -6, 2, 4, -2, 6, 0, 4, 2, -6, -8, 10, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1975.2-b";
N := (25*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -1, -6, 4, -2, 6, 0, 10, 6, -4, 8, -2, -14, 4, -6, -14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-a";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, -8, 0, 6, -2, 10, 4, -4, 14, 2, 6, 14, 2, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-b";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 0, 4, -6, -6, 6, 0, 8, 10, 2, -10, -2, -6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-c";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 6, -4, 2, 6, 4, -4, 10, -2, -10, 8, 8, 2, 14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-d";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -4, -4, 6, 2, -6, -4, -4, 2, -10, -2, 2, 10, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-e";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 0, 2, -2, -6, -4, -8, 2, -2, -14, -14, -10, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-f";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 0, 2, 2, 2, -4, -4, -6, 14, -14, 10, -2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-g";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -8, 0, -6, -2, -2, -4, -4, -14, -10, 6, -2, -2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-h";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -4, -6, -10, 0, -4, -10, -10, 14, 4, -4, -14, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-i";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -4, -6, 2, -2, -12, 4, -2, -6, 6, -6, 6, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-j";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -8, -6, -6, -8, 4, 2, 10, -6, -8, 4, -6, -10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-k";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 0, 0, -2, -6, 6, -4, -4, -10, -6, -6, -14, 10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-l";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 8, 2, 0, -6, -6, 8, -12, 2, 10, -6, 0, 12, 10, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.1-m";
N := (27*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, -8, 2, -2, -2, 4, 4, 2, -10, -2, -2, -10, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-a";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, 1, -3, -6, 6, 4, 5, 1, -9, -4, -1, 2, 0, 7, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-b";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, -2, -8, -8, -8, -2, 0, -10, -4, -2, 4, 4, -2, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-c";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 6, 0, 2, 2, -8, 4, -2, -2, 10, -12, 0, -10, 6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-d";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -3, 3, 4, 6, 0, 5, -7, -13, 6, 9, 10, 10, 1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-e";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 6, 6, 9, 7, 0, 3, -10, 2, -13, -6, -12, 10, 7, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-f";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 0, 0, -4, -4, 10, 4, -8, -2, -2, -6, 6, 8, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-g";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -2, -3, 9, -4, -10, 4, -11, 1, -5, 10, 3, 6, -10, 3, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-h";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 4, 0, -6, 6, -2, -4, -8, 6, -10, 2, 2, -6, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-i";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -2, 6, 3, -7, -4, 7, -2, 10, 1, -2, 12, 6, -1, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-j";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 0, 0, 4, -4, -10, 4, -8, -2, -2, 6, -6, -8, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-k";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -2, -3, -9, 4, -10, -4, -11, 1, -5, 10, -3, -6, 10, -3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-l";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 3, 3, 2, -6, 0, -1, 11, 5, 0, 3, 2, 8, 11, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-m";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 1, -3, -6, -2, 2, -7, -7, -5, 2, 3, 14, -4, -1, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-n";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, -6, 3, 2, 8, 1, -8, -8, -2, 10, 12, 6, -1, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-o";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, -3, -3, -4, 6, 0, 5, -7, -13, 6, -9, -10, -10, -1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.3-p";
N := (25*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 4, 3, -3, 2, 2, -2, -5, -5, 1, -2, 9, -6, 8, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.4-a";
N := (-5*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 7, 1, -6, 2, -1, 0, -4, -4, 10, 0, 2, 11, -6, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.4-b";
N := (-5*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, -9, -6, 7, -3, 0, 2, -10, -13, 12, 6, 7, 10, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.4-c";
N := (-5*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -3, -6, -7, -7, 4, 10, -2, 1, -12, 2, -1, 6, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.4-d";
N := (-5*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, 3, 4, 4, 3, 2, -2, 8, -10, -8, 8, 1, 14, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.4-e";
N := (-5*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, -3, 6, 2, -1, -8, -8, -8, -2, -12, -10, -1, 6, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-a";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, 0, -8, 6, 10, -2, -4, 4, 14, 6, 2, 2, 14, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-b";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 4, 0, -6, 6, -6, 8, 0, 10, -10, 2, -6, -2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-c";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, -4, 6, 2, 4, 6, 10, -4, -2, 8, -10, 2, 8, -2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-d";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -4, -4, 6, -6, 2, -4, -4, 2, -2, -10, 10, 2, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-e";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -4, 2, -6, -2, -8, -4, 2, -14, -2, -10, -14, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-f";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 0, 2, 2, 2, -4, -4, -6, -14, 14, -2, 10, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-g";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -8, -6, -2, -2, -4, -4, -14, 6, -10, -2, -2, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-h";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 2, -6, 0, -10, -10, -4, -10, 4, 14, -14, -4, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-i";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -4, -6, -2, 2, 4, -12, -2, 6, -6, 6, -6, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-j";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -8, 2, -6, -8, -6, 2, 4, 10, -8, -6, -6, 4, -2, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-k";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 0, 0, -2, 6, -6, -4, -4, -10, -6, -6, 10, -14, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-l";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 8, 0, 2, -6, 8, -6, 2, -12, 10, 0, -6, 10, 12, 14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.2-m";
N := (27*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -8, 0, 2, -2, -2, 4, 4, 2, -2, -10, -10, -2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-a";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, -3, 1, -6, 4, 6, 1, 5, -9, -1, -4, 0, 2, 2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-b";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, -8, -2, -8, -2, -8, -10, 0, -4, 4, -2, -2, 4, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-c";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 0, 6, 2, -8, 2, -2, 4, -2, -12, 10, -10, 0, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-d";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, 3, -3, 4, 0, 6, -7, 5, -13, 9, 6, 10, 10, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-e";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 6, 9, 6, 7, 3, 0, 2, -10, -13, -12, -6, 7, 10, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-f";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 0, 0, -4, 10, -4, -8, 4, -2, -6, -2, 8, 6, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-g";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -2, 9, -3, -4, 4, -10, 1, -11, -5, 3, 10, -10, 6, 10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-h";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 0, 4, -6, -2, 6, -8, -4, 6, 2, -10, -6, 2, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-i";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -2, 3, 6, -7, 7, -4, 10, -2, 1, 12, -2, -1, 6, 10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-j";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 0, 0, 4, -10, -4, -8, 4, -2, 6, -2, -8, -6, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-k";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -2, -9, -3, 4, -4, -10, 1, -11, -5, -3, 10, 10, -6, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-l";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 3, 3, 2, 0, -6, 11, -1, 5, 3, 0, 8, 2, -10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-m";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -3, 1, -6, 2, -2, -7, -7, -5, 3, 2, -4, 14, 12, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-n";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, 3, -6, 2, 1, 8, -8, -8, -2, 12, 10, -1, 6, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-o";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, -3, -3, -4, 0, 6, -7, 5, -13, -9, 6, -10, -10, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.6-p";
N := (25*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 4, -3, 3, 2, -2, 2, -5, -5, 1, 9, -2, 8, -6, 4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.5-a";
N := (-5*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 7, -6, 1, 2, 0, -1, -4, -4, 10, 2, 0, -6, 11, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.5-b";
N := (-5*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -6, -6, -9, 7, 0, -3, -10, 2, -13, 6, 12, 10, 7, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.5-c";
N := (-5*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -6, -3, -7, 4, -7, -2, 10, 1, 2, -12, 6, -1, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.5-d";
N := (-5*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, 4, 3, 4, 2, 3, 8, -2, -10, 8, -8, 14, 1, 14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 1989.5-e";
N := (-5*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, 6, -3, 2, -8, -1, -8, -8, -2, -10, -12, 6, -1, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

