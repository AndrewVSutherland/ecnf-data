print "Field 2.2.401.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 100);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w)*OK);
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(5)*OK+(w)*OK);
Append(~Plist,(5)*OK+(w + 4)*OK);
Append(~Plist,(7)*OK+(w + 1)*OK);
Append(~Plist,(7)*OK+(w + 5)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(11)*OK+(w + 3)*OK);
Append(~Plist,(11)*OK+(w + 7)*OK);
Append(~Plist,(29)*OK+(w + 6)*OK);
Append(~Plist,(29)*OK+(w + 22)*OK);
Append(~Plist,(41)*OK+(w + 13)*OK);
Append(~Plist,(41)*OK+(w + 27)*OK);
Append(~Plist,(43)*OK+(w + 16)*OK);
Append(~Plist,(43)*OK+(w + 26)*OK);
Append(~Plist,(47)*OK+(w + 2)*OK);
Append(~Plist,(47)*OK+(w + 44)*OK);
Append(~Plist,(73)*OK+(w + 33)*OK);
Append(~Plist,(73)*OK+(w + 39)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(89)*OK+(w + 28)*OK);
Append(~Plist,(89)*OK+(w + 60)*OK);
Append(~Plist,(103)*OK+(w + 17)*OK);
Append(~Plist,(103)*OK+(w + 85)*OK);
Append(~Plist,(109)*OK+(w + 34)*OK);
Append(~Plist,(109)*OK+(w + 74)*OK);
Append(~Plist,(113)*OK+(w + 23)*OK);
Append(~Plist,(113)*OK+(w + 89)*OK);
Append(~Plist,(149)*OK+(w + 55)*OK);
Append(~Plist,(149)*OK+(w + 93)*OK);
Append(~Plist,(151)*OK+(w + 58)*OK);
Append(~Plist,(151)*OK+(w + 92)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(173)*OK+(w + 62)*OK);
Append(~Plist,(173)*OK+(w + 110)*OK);
Append(~Plist,(179)*OK+(w + 71)*OK);
Append(~Plist,(179)*OK+(w + 107)*OK);
Append(~Plist,(181)*OK+(w + 21)*OK);
Append(~Plist,(181)*OK+(w + 159)*OK);
Append(~Plist,(197)*OK+(w + 45)*OK);
Append(~Plist,(197)*OK+(w + 151)*OK);
Append(~Plist,(223)*OK+(w + 31)*OK);
Append(~Plist,(223)*OK+(w + 191)*OK);
Append(~Plist,(229)*OK+(w + 57)*OK);
Append(~Plist,(229)*OK+(w + 171)*OK);
Append(~Plist,(239)*OK+(w + 32)*OK);
Append(~Plist,(239)*OK+(w + 206)*OK);
Append(~Plist,(241)*OK+(w + 73)*OK);
Append(~Plist,(241)*OK+(w + 167)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(263)*OK+(w + 61)*OK);
Append(~Plist,(263)*OK+(w + 201)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(307)*OK+(w + 131)*OK);
Append(~Plist,(307)*OK+(w + 175)*OK);
Append(~Plist,(311)*OK+(w + 79)*OK);
Append(~Plist,(311)*OK+(w + 231)*OK);
Append(~Plist,(313)*OK+(w + 125)*OK);
Append(~Plist,(313)*OK+(w + 187)*OK);
Append(~Plist,(331)*OK+(w + 115)*OK);
Append(~Plist,(331)*OK+(w + 215)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(373)*OK+(w + 128)*OK);
Append(~Plist,(373)*OK+(w + 244)*OK);
Append(~Plist,(-4*w - 33)*OK);
Append(~Plist,(4*w - 37)*OK);
Append(~Plist,(-2*w + 29)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(409)*OK+(w + 169)*OK);
Append(~Plist,(409)*OK+(w + 239)*OK);
Append(~Plist,(419)*OK+(w + 65)*OK);
Append(~Plist,(419)*OK+(w + 353)*OK);
Append(~Plist,(-4*w - 43)*OK);
Append(~Plist,(4*w - 47)*OK);
Append(~Plist,(433)*OK+(w + 78)*OK);
Append(~Plist,(433)*OK+(w + 354)*OK);
Append(~Plist,(457)*OK+(w + 198)*OK);
Append(~Plist,(457)*OK+(w + 258)*OK);
Append(~Plist,(479)*OK+(w + 82)*OK);
Append(~Plist,(479)*OK+(w + 396)*OK);
Append(~Plist,(-6*w + 67)*OK);
Append(~Plist,(-6*w - 61)*OK);
Append(~Plist,(491)*OK+(w + 140)*OK);
Append(~Plist,(491)*OK+(w + 350)*OK);
Append(~Plist,(-2*w + 31)*OK);
Append(~Plist,(2*w + 29)*OK);
Append(~Plist,(503)*OK+(w + 224)*OK);
Append(~Plist,(503)*OK+(w + 278)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(541)*OK+(w + 104)*OK);
Append(~Plist,(541)*OK+(w + 436)*OK);
Append(~Plist,(547)*OK+(w + 245)*OK);
Append(~Plist,(547)*OK+(w + 301)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[4, 4, -4, -4, 2, 3, 3, 8, 8, -5, -5, -9, -9, 6, 6, 1, 1, 7, 7, 1, 1, 2, 2, -16, -16, -7, -7, 22]);
