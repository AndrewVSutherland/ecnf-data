print "Field 2.2.357.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 89);
OK := Integers(K);
Plist := [];
Append(~Plist,(3)*OK+(w + 1)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(7)*OK+(w + 3)*OK);
Append(~Plist,(11)*OK+(w + 3)*OK);
Append(~Plist,(11)*OK+(w + 7)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(23)*OK+(w + 4)*OK);
Append(~Plist,(23)*OK+(w + 18)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(29)*OK+(w + 1)*OK);
Append(~Plist,(29)*OK+(w + 27)*OK);
Append(~Plist,(31)*OK+(w + 13)*OK);
Append(~Plist,(31)*OK+(w + 17)*OK);
Append(~Plist,(w + 11)*OK);
Append(~Plist,(w - 12)*OK);
Append(~Plist,(w + 6)*OK);
Append(~Plist,(w - 7)*OK);
Append(~Plist,(w + 5)*OK);
Append(~Plist,(w - 6)*OK);
Append(~Plist,(61)*OK+(w + 16)*OK);
Append(~Plist,(61)*OK+(w + 44)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 13)*OK);
Append(~Plist,(71)*OK+(w + 29)*OK);
Append(~Plist,(71)*OK+(w + 41)*OK);
Append(~Plist,(73)*OK+(w + 24)*OK);
Append(~Plist,(73)*OK+(w + 48)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(w)*OK);
Append(~Plist,(w - 1)*OK);
Append(~Plist,(97)*OK+(w + 19)*OK);
Append(~Plist,(97)*OK+(w + 77)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(107)*OK+(w + 50)*OK);
Append(~Plist,(107)*OK+(w + 56)*OK);
Append(~Plist,(113)*OK+(w + 36)*OK);
Append(~Plist,(113)*OK+(w + 76)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(139)*OK+(w + 22)*OK);
Append(~Plist,(139)*OK+(w + 116)*OK);
Append(~Plist,(w + 15)*OK);
Append(~Plist,(w - 16)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(181)*OK+(w + 75)*OK);
Append(~Plist,(181)*OK+(w + 105)*OK);
Append(~Plist,(197)*OK+(w + 47)*OK);
Append(~Plist,(197)*OK+(w + 149)*OK);
Append(~Plist,(199)*OK+(w + 38)*OK);
Append(~Plist,(199)*OK+(w + 160)*OK);
Append(~Plist,(233)*OK+(w + 51)*OK);
Append(~Plist,(233)*OK+(w + 181)*OK);
Append(~Plist,(241)*OK+(w + 28)*OK);
Append(~Plist,(241)*OK+(w + 212)*OK);
Append(~Plist,(-3*w - 22)*OK);
Append(~Plist,(3*w - 25)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(283)*OK+(w + 45)*OK);
Append(~Plist,(283)*OK+(w + 237)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(313)*OK+(w + 138)*OK);
Append(~Plist,(313)*OK+(w + 174)*OK);
Append(~Plist,(317)*OK+(w + 127)*OK);
Append(~Plist,(317)*OK+(w + 189)*OK);
Append(~Plist,(w + 20)*OK);
Append(~Plist,(w - 21)*OK);
Append(~Plist,(347)*OK+(w + 62)*OK);
Append(~Plist,(347)*OK+(w + 284)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(367)*OK+(w + 34)*OK);
Append(~Plist,(367)*OK+(w + 332)*OK);
Append(~Plist,(w + 21)*OK);
Append(~Plist,(w - 22)*OK);
Append(~Plist,(-3*w - 19)*OK);
Append(~Plist,(3*w - 22)*OK);
Append(~Plist,(397)*OK+(w + 170)*OK);
Append(~Plist,(397)*OK+(w + 226)*OK);
Append(~Plist,(401)*OK+(w + 96)*OK);
Append(~Plist,(401)*OK+(w + 304)*OK);
Append(~Plist,(-4*w + 45)*OK);
Append(~Plist,(4*w + 41)*OK);
Append(~Plist,(431)*OK+(w + 69)*OK);
Append(~Plist,(431)*OK+(w + 361)*OK);
Append(~Plist,(439)*OK+(w + 37)*OK);
Append(~Plist,(439)*OK+(w + 401)*OK);
Append(~Plist,(449)*OK+(w + 114)*OK);
Append(~Plist,(449)*OK+(w + 334)*OK);
Append(~Plist,(-3*w + 37)*OK);
Append(~Plist,(3*w + 34)*OK);
Append(~Plist,(-3*w + 20)*OK);
Append(~Plist,(3*w + 17)*OK);
Append(~Plist,(w + 23)*OK);
Append(~Plist,(w - 24)*OK);
Append(~Plist,(-4*w - 29)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("9.1-a",(3)*OK,[3, 0, 4, -4, 0, -8, 8, -10, 2, -2, 0, 0, -12, -12, 0, 0, 0, 0, 0, 0, -4, -4, 16, -16, 0, 0, 0, 0, 0]);
ECSearch("9.1-b",(3)*OK,[3, 0, -4, 4, 0, 8, -8, -10, -2, 2, 0, 0, -12, -12, 0, 0, 0, 0, 0, 0, -4, -4, -16, 16, 0, 0, 0, 0, 0]);
