print "Field 2.2.141.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 35);
OK := Integers(K);
Plist := [];
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(-w - 5)*OK);
Append(~Plist,(-w + 6)*OK);
Append(~Plist,(-w + 7)*OK);
Append(~Plist,(w + 6)*OK);
Append(~Plist,(3*w - 19)*OK);
Append(~Plist,(3*w + 16)*OK);
Append(~Plist,(w + 3)*OK);
Append(~Plist,(w - 4)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(w - 9)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(-8*w + 51)*OK);
Append(~Plist,(4*w + 23)*OK);
Append(~Plist,(4*w - 27)*OK);
Append(~Plist,(-7*w + 46)*OK);
Append(~Plist,(-7*w - 39)*OK);
Append(~Plist,(w + 11)*OK);
Append(~Plist,(w - 12)*OK);
Append(~Plist,(-3*w + 22)*OK);
Append(~Plist,(-3*w - 19)*OK);
Append(~Plist,(-3*w - 13)*OK);
Append(~Plist,(3*w - 16)*OK);
Append(~Plist,(-6*w - 31)*OK);
Append(~Plist,(6*w - 37)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(-11*w + 72)*OK);
Append(~Plist,(-11*w - 61)*OK);
Append(~Plist,(-7*w - 36)*OK);
Append(~Plist,(7*w - 43)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(-5*w + 29)*OK);
Append(~Plist,(5*w + 24)*OK);
Append(~Plist,(-3*w + 11)*OK);
Append(~Plist,(3*w + 8)*OK);
Append(~Plist,(-11*w - 58)*OK);
Append(~Plist,(-11*w + 69)*OK);
Append(~Plist,(-5*w + 36)*OK);
Append(~Plist,(-5*w - 31)*OK);
Append(~Plist,(-13*w + 82)*OK);
Append(~Plist,(13*w + 69)*OK);
Append(~Plist,(w + 17)*OK);
Append(~Plist,(w - 18)*OK);
Append(~Plist,(-4*w - 27)*OK);
Append(~Plist,(4*w - 31)*OK);
Append(~Plist,(-5*w + 27)*OK);
Append(~Plist,(-5*w - 22)*OK);
Append(~Plist,(-3*w - 23)*OK);
Append(~Plist,(3*w - 26)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(19*w - 121)*OK);
Append(~Plist,(21*w - 134)*OK);
Append(~Plist,(w + 18)*OK);
Append(~Plist,(w - 19)*OK);
Append(~Plist,(-3*w - 1)*OK);
Append(~Plist,(3*w - 4)*OK);
Append(~Plist,(-3*w + 2)*OK);
Append(~Plist,(3*w - 1)*OK);
Append(~Plist,(-6*w + 43)*OK);
Append(~Plist,(-6*w - 37)*OK);
Append(~Plist,(9*w - 61)*OK);
Append(~Plist,(-9*w - 52)*OK);
Append(~Plist,(-11*w + 68)*OK);
Append(~Plist,(-11*w - 57)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-5*w + 38)*OK);
Append(~Plist,(-5*w - 33)*OK);
Append(~Plist,(-10*w - 51)*OK);
Append(~Plist,(10*w - 61)*OK);
Append(~Plist,(-4*w + 33)*OK);
Append(~Plist,(4*w + 29)*OK);
Append(~Plist,(-5*w + 24)*OK);
Append(~Plist,(5*w + 19)*OK);
Append(~Plist,(-3*w - 26)*OK);
Append(~Plist,(3*w - 29)*OK);
Append(~Plist,(-4*w - 9)*OK);
Append(~Plist,(4*w - 13)*OK);
Append(~Plist,(-15*w - 79)*OK);
Append(~Plist,(-15*w + 94)*OK);
Append(~Plist,(-21*w + 137)*OK);
Append(~Plist,(-21*w - 116)*OK);
Append(~Plist,(5*w + 18)*OK);
Append(~Plist,(5*w - 23)*OK);
Append(~Plist,(7*w + 32)*OK);
Append(~Plist,(7*w - 39)*OK);
Append(~Plist,(14*w + 79)*OK);
Append(~Plist,(-14*w + 93)*OK);
Append(~Plist,(-9*w + 53)*OK);
Append(~Plist,(9*w + 44)*OK);
Append(~Plist,(-14*w - 73)*OK);
Append(~Plist,(-14*w + 87)*OK);
Append(~Plist,(-13*w + 87)*OK);
Append(~Plist,(13*w + 74)*OK);
Append(~Plist,(20*w + 111)*OK);
Append(~Plist,(-20*w + 131)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("3.1-a",(2*w + 11)*OK,[-4, -3, 3, -1, -1, -3, 3, 3, -3, 9, -9, -7, -7, -6, 6, 0, -10, -10, -1, -1, -1, -1, 5, 5, 3, -3, 6, -6, -6]);
ECSearch("3.1-b",(2*w + 11)*OK,[-4, 3, -3, -1, -1, 3, -3, -3, 3, -9, 9, -7, -7, 6, -6, 0, -10, -10, -1, -1, -1, -1, 5, 5, -3, 3, -6, 6, 6]);
ECSearch("9.1-a",(3)*OK,[0, 1, 3, -5, 3, 1, -5, -5, -7, -3, 7, 1, -7, -10, -6, 12, -10, -2, 3, -5, -13, 11, 5, 13, 7, -3, 6, 10, 6]);
ECSearch("9.1-b",(3)*OK,[0, 3, 1, 3, -5, -5, 1, -7, -5, 7, -3, -7, 1, -6, -10, 12, -2, -10, -5, 3, 11, -13, 13, 5, -3, 7, 10, 6, -6]);
ECSearch("9.1-c",(3)*OK,[0, -3, -1, 3, -5, 5, -1, 7, 5, -7, 3, -7, 1, 6, 10, -12, -2, -10, -5, 3, 11, -13, 13, 5, 3, -7, -10, -6, 6]);
ECSearch("9.1-d",(3)*OK,[0, -1, -3, -5, 3, -1, 5, 5, 7, 3, -7, 1, -7, 10, 6, -12, -10, -2, 3, -5, -13, 11, 5, 13, -7, 3, -6, -10, -6]);
ECSearch("12.1-a",(4*w + 22)*OK,[-2, 2, 4, 4, 6, -6, -4, 4, -6, 6, 2, 2, 4, -4, 0, -14, -14, -8, -8, -18, -18, 8, 8, -6, 6, -16, 16, -12]);
ECSearch("12.1-b",(4*w + 22)*OK,[0, 0, 0, 0, 4, -4, 0, 0, 8, -8, -6, -6, -4, 4, 0, 2, 2, -16, -16, 14, 14, -8, -8, -12, 12, -12, 12, -12]);
ECSearch("12.1-c",(4*w + 22)*OK,[2, -2, 4, 4, -6, 6, 4, -4, 6, -6, 2, 2, -4, 4, 0, -14, -14, -8, -8, -18, -18, 8, 8, 6, -6, 16, -16, 12]);
ECSearch("12.1-d",(4*w + 22)*OK,[0, 0, 0, 0, -4, 4, 0, 0, -8, 8, -6, -6, 4, -4, 0, 2, 2, -16, -16, 14, 14, -8, -8, 12, -12, 12, -12, 12]);
ECSearch("20.1-a",(-2*w - 10)*OK,[-1, 1, -2, -2, -3, 2, -1, 4, 10, 0, -7, -2, 7, -3, 8, 2, 7, -10, 5, 3, -12, -16, 9, -12, 8, 14, 19, 18]);
ECSearch("20.1-b",(-2*w - 10)*OK,[-1, -1, -2, -2, 3, -2, 1, -4, -10, 0, -7, -2, -7, 3, -8, 2, 7, -10, 5, 3, -12, -16, 9, 12, -8, -14, -19, -18]);
ECSearch("20.2-a",(-2*w + 12)*OK,[-1, 1, -2, -2, 2, -3, 4, -1, 0, 10, -2, -7, -3, 7, 8, 7, 2, 5, -10, -12, 3, 9, -16, 8, -12, 19, 14, -2]);
ECSearch("20.2-b",(-2*w + 12)*OK,[-1, -1, -2, -2, -2, 3, -4, 1, 0, -10, -2, -7, 3, -7, -8, 7, 2, 5, -10, -12, 3, 9, -16, -8, 12, -19, -14, 2]);
ECSearch("21.1-a",(w + 7)*OK,[1, -2, 2, 0, 0, -4, 4, 0, 2, 2, -2, -2, 10, 6, -12, -10, 14, 8, -16, 2, -6, -8, -16, 4, 0, 14, -2, -2]);
ECSearch("21.1-b",(w + 7)*OK,[1, 2, -2, 0, 0, 4, -4, 0, -2, -2, -2, -2, -10, -6, 12, -10, 14, 8, -16, 2, -6, -8, -16, -4, 0, -14, 2, 2]);
ECSearch("21.2-a",(-w + 8)*OK,[1, 2, -2, 0, -4, 0, 0, 4, 2, 2, -2, -2, 6, 10, -12, 14, -10, -16, 8, -6, 2, -16, -8, 0, 4, -2, 14, -10]);
ECSearch("21.2-b",(-w + 8)*OK,[1, -2, 2, 0, 4, 0, 0, -4, -2, -2, -2, -2, -6, -10, 12, 14, -10, -16, 8, -6, 2, -16, -8, 0, -4, 2, -14, 10]);
ECSearch("25.2-a",(-3*w + 20)*OK,[1, 3, 3, -4, -2, -1, 0, -1, -8, -8, 0, -5, 10, -9, 9, 6, 2, -11, -14, -11, 3, 8, -8, 5, 2, 8, -6, -17, -2]);
ECSearch("25.2-b",(-3*w + 20)*OK,[3, 2, 0, -1, 4, 0, 0, 0, 0, 0, 0, 10, -10, 0, 0, 0, 13, 13, 4, 4, 5, -5, 7, -13, 0, 0, 0, 0, 0]);
ECSearch("25.2-c",(-3*w + 20)*OK,[1, 3, -3, -4, -2, 1, 0, 1, 8, 8, 0, -5, 10, 9, -9, -6, 2, -11, -14, -11, 3, 8, -8, 5, -2, -8, 6, 17, 2]);
ECSearch("25.3-a",(3*w + 17)*OK,[1, 3, 3, -2, -4, 0, -1, -8, -1, 0, -8, 10, -5, 9, -9, 6, -11, 2, -11, -14, 8, 3, 5, -8, 8, 2, -17, -6, 10]);
ECSearch("25.3-b",(3*w + 17)*OK,[3, 2, 0, 4, -1, 0, 0, 0, 0, 0, 0, -10, 10, 0, 0, 0, 13, 13, 4, 4, -5, 5, -13, 7, 0, 0, 0, 0, 0]);
ECSearch("25.3-c",(3*w + 17)*OK,[1, 3, -3, -2, -4, 0, 1, 8, 1, 0, 8, 10, -5, -9, 9, -6, -11, 2, -11, -14, 8, 3, 5, -8, -8, -2, 17, 6, -10]);
ECSearch("28.1-a",(-2*w + 14)*OK,[0, 0, 4, 0, -2, -6, -4, 4, 4, 8, 10, 2, 6, -2, 0, -6, 10, 0, 0, 10, 10, 16, 16, -6, -18, -6, -6, 22]);
ECSearch("28.1-b",(-2*w + 14)*OK,[0, -3, -2, 3, -2, -3, -4, 4, -8, 8, -5, -10, 6, -11, 0, 9, 4, 12, -3, 7, -8, -8, -8, -12, 12, 15, 15, -17]);
ECSearch("28.1-c",(-2*w + 14)*OK,[0, 3, 2, 3, 2, 3, 4, -4, 8, -8, -5, -10, -6, 11, 0, 9, 4, 12, -3, 7, -8, -8, -8, 12, -12, -15, -15, 17]);
ECSearch("28.1-d",(-2*w + 14)*OK,[0, 0, -4, 0, 2, 6, 4, -4, -4, -8, 10, 2, -6, 2, 0, -6, 10, 0, 0, 10, 10, 16, 16, 6, 18, 6, 6, -22]);
ECSearch("28.2-a",(2*w + 12)*OK,[0, 4, 0, 0, -6, -2, 4, -4, 8, 4, 2, 10, -2, 6, 0, 10, -6, 0, 0, 10, 10, 16, 16, -18, -6, -6, -6, 14]);
ECSearch("28.2-b",(2*w + 12)*OK,[0, -2, -3, 3, -3, -2, 4, -4, 8, -8, -10, -5, -11, 6, 0, 4, 9, -3, 12, -8, 7, -8, -8, 12, -12, 15, 15, 2]);
ECSearch("28.2-c",(2*w + 12)*OK,[0, 2, 3, 3, 3, 2, -4, 4, -8, 8, -10, -5, 11, -6, 0, 4, 9, -3, 12, -8, 7, -8, -8, -12, 12, -15, -15, -2]);
ECSearch("28.2-d",(2*w + 12)*OK,[0, -4, 0, 0, 6, 2, -4, 4, -8, -4, 2, 10, 2, -6, 0, 10, -6, 0, 0, 10, 10, 16, 16, 18, 6, 6, 6, -14]);
ECSearch("45.1-a",(-3*w - 15)*OK,[-3, 2, 0, 4, -4, -4, 4, -4, 2, 6, 2, -2, 6, -2, 0, -14, 2, 4, 0, 2, 2, 16, 8, -12, -4, 2, 6, 6]);
ECSearch("45.1-b",(-3*w - 15)*OK,[-3, -2, 0, 4, 4, 4, -4, 4, -2, -6, 2, -2, -6, 2, 0, -14, 2, 4, 0, 2, 2, 16, 8, 12, 4, -2, -6, -6]);
ECSearch("45.2-a",(-3*w + 18)*OK,[-3, 2, 4, 0, -4, -4, -4, 4, 6, 2, -2, 2, -2, 6, 0, 2, -14, 0, 4, 2, 2, 8, 16, -4, -12, 6, 2, -18]);
ECSearch("45.2-b",(-3*w + 18)*OK,[-3, -2, 4, 0, 4, 4, 4, -4, -6, -2, -2, 2, 2, -6, 0, 2, -14, 0, 4, 2, 2, 8, 16, 4, 12, -6, -2, 18]);
