print "Field 2.2.313.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 78);
OK := Integers(K);
Plist := [];
Append(~Plist,(-3*w + 28)*OK);
Append(~Plist,(-3*w - 25)*OK);
Append(~Plist,(26*w - 243)*OK);
Append(~Plist,(-26*w - 217)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2148*w + 17927)*OK);
Append(~Plist,(-2148*w + 20075)*OK);
Append(~Plist,(292*w - 2729)*OK);
Append(~Plist,(292*w + 2437)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(-20*w - 167)*OK);
Append(~Plist,(20*w - 187)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(240*w - 2243)*OK);
Append(~Plist,(-240*w - 2003)*OK);
Append(~Plist,(3368*w - 31477)*OK);
Append(~Plist,(-3368*w - 28109)*OK);
Append(~Plist,(84*w + 701)*OK);
Append(~Plist,(-84*w + 785)*OK);
Append(~Plist,(-38*w - 317)*OK);
Append(~Plist,(38*w - 355)*OK);
Append(~Plist,(136*w + 1135)*OK);
Append(~Plist,(136*w - 1271)*OK);
Append(~Plist,(1246*w + 10399)*OK);
Append(~Plist,(1246*w - 11645)*OK);
Append(~Plist,(6*w + 49)*OK);
Append(~Plist,(-6*w + 55)*OK);
Append(~Plist,(-558*w - 4657)*OK);
Append(~Plist,(558*w - 5215)*OK);
Append(~Plist,(2466*w - 23047)*OK);
Append(~Plist,(2466*w + 20581)*OK);
Append(~Plist,(-16*w + 149)*OK);
Append(~Plist,(16*w + 133)*OK);
Append(~Plist,(396*w - 3701)*OK);
Append(~Plist,(-396*w - 3305)*OK);
Append(~Plist,(4*w - 35)*OK);
Append(~Plist,(-4*w - 31)*OK);
Append(~Plist,(-1194*w + 11159)*OK);
Append(~Plist,(1194*w + 9965)*OK);
Append(~Plist,(-12*w + 113)*OK);
Append(~Plist,(-12*w - 101)*OK);
Append(~Plist,(6126*w - 57253)*OK);
Append(~Plist,(-6126*w - 51127)*OK);
Append(~Plist,(-66*w + 617)*OK);
Append(~Plist,(-66*w - 551)*OK);
Append(~Plist,(506*w - 4729)*OK);
Append(~Plist,(-506*w - 4223)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(4*w - 41)*OK);
Append(~Plist,(4*w + 37)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(2*w + 5)*OK);
Append(~Plist,(448*w - 4187)*OK);
Append(~Plist,(-448*w - 3739)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(54*w + 451)*OK);
Append(~Plist,(54*w - 505)*OK);
Append(~Plist,(-7982*w - 66617)*OK);
Append(~Plist,(7982*w - 74599)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(6*w - 53)*OK);
Append(~Plist,(-6*w - 47)*OK);
Append(~Plist,(-30*w + 281)*OK);
Append(~Plist,(-30*w - 251)*OK);
Append(~Plist,(-48*w + 449)*OK);
Append(~Plist,(-48*w - 401)*OK);
Append(~Plist,(36*w + 301)*OK);
Append(~Plist,(36*w - 337)*OK);
Append(~Plist,(-56*w - 467)*OK);
Append(~Plist,(56*w - 523)*OK);
Append(~Plist,(13180*w + 109999)*OK);
Append(~Plist,(-13180*w + 123179)*OK);
Append(~Plist,(118*w + 985)*OK);
Append(~Plist,(118*w - 1103)*OK);
Append(~Plist,(18*w - 167)*OK);
Append(~Plist,(18*w + 149)*OK);
Append(~Plist,(246*w + 2053)*OK);
Append(~Plist,(-246*w + 2299)*OK);
Append(~Plist,(350*w + 2921)*OK);
Append(~Plist,(-350*w + 3271)*OK);
Append(~Plist,(-2414*w - 20147)*OK);
Append(~Plist,(2414*w - 22561)*OK);
Append(~Plist,(-34*w + 317)*OK);
Append(~Plist,(34*w + 283)*OK);
Append(~Plist,(-6762*w - 56435)*OK);
Append(~Plist,(-6762*w + 63197)*OK);
Append(~Plist,(-5808*w + 54281)*OK);
Append(~Plist,(-5808*w - 48473)*OK);
Append(~Plist,(-3102*w - 25889)*OK);
Append(~Plist,(3102*w - 28991)*OK);
Append(~Plist,(102*w + 851)*OK);
Append(~Plist,(102*w - 953)*OK);
Append(~Plist,(2200*w + 18361)*OK);
Append(~Plist,(2200*w - 20561)*OK);
Append(~Plist,(-4*w - 25)*OK);
Append(~Plist,(4*w - 29)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(-228*w - 1903)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[-1, -1, -3, -3, -6, -6, 0, 0, 6, 0, 0, 5, 12, 12, 10, 10, 9, 9, -17, -17, -6, -6, 3, 3, -6, -6, 3, 3]);
ECSearch("6.1-a",(1379*w - 12888)*OK,[1, 3, 5, -6, 5, 2, -8, 1, 2, 6, 0, 1, -5, -4, -5, -11, -15, -6, 17, -2, 0, -10, 19, -16, 0, 6, -2, 12]);
ECSearch("6.1-b",(1379*w - 12888)*OK,[1, -2, 0, 4, 0, 2, 2, -4, 2, -4, 0, 6, 0, 6, 10, -16, 0, -6, 2, 18, 10, -20, 4, -6, 10, 16, 18, 12]);
ECSearch("6.2-a",(w + 8)*OK,[-2, 3, -2, -2, -4, -3, -4, -1, 1, -6, -1, 1, 8, -8, 10, 6, -12, 1, 5, -14, -8, 10, -1, 11, 8, -3, 12, -5]);
ECSearch("6.2-b",(w + 8)*OK,[-2, 2, -4, 5, 7, -4, -6, -4, -3, 4, -10, 8, -3, 1, -10, 8, -2, -12, 2, 12, -2, -4, -2, 3, 2, 8, 5, 20]);
ECSearch("6.2-c",(w + 8)*OK,[-2, 0, -2, 1, -1, 0, -4, 2, 1, 6, -4, 10, -7, 13, -2, 0, -12, -8, 14, -14, -2, -20, -4, -13, 14, 12, -15, -8]);
ECSearch("6.2-d",(w + 8)*OK,[-2, -1, 2, 2, 4, -1, 0, 5, -9, 10, 5, 5, 12, -8, -10, -10, 4, 9, -7, 18, 4, 14, 13, 3, -16, -1, 8, -7]);
ECSearch("6.2-e",(w + 8)*OK,[1, 0, 4, 4, -4, 0, -4, 8, 10, 0, 8, -8, -4, -8, 16, 12, 0, 4, 8, -8, -8, 4, 8, -4, -4, 0, 12, -8]);
ECSearch("6.2-f",(w + 8)*OK,[0, -1, 0, 0, -6, -3, 6, 3, -3, -6, 3, 5, -6, 0, 10, -8, 12, 9, 1, 10, 0, -6, 3, 3, -6, 9, 18, -9]);
ECSearch("6.4-a",(1379*w + 11509)*OK,[1, 3, -6, 5, 2, 5, 1, -8, 2, 0, 6, 1, -4, -5, -11, -5, -6, -15, -2, 17, -10, 0, -16, 19, 6, 0, 12, -2]);
ECSearch("6.4-b",(1379*w + 11509)*OK,[1, -2, 4, 0, 2, 0, -4, 2, 2, 0, -4, 6, 6, 0, -16, 10, -6, 0, 18, 2, -20, 10, -6, 4, 16, 10, 12, 18]);
ECSearch("6.3-a",(w - 9)*OK,[-2, 3, -2, -2, -3, -4, -1, -4, 1, -1, -6, 1, -8, 8, 6, 10, 1, -12, -14, 5, 10, -8, 11, -1, -3, 8, -5, 12]);
ECSearch("6.3-b",(w - 9)*OK,[-2, 2, 5, -4, -4, 7, -4, -6, -3, -10, 4, 8, 1, -3, 8, -10, -12, -2, 12, 2, -4, -2, 3, -2, 8, 2, 20, 5]);
ECSearch("6.3-c",(w - 9)*OK,[-2, 0, 1, -2, 0, -1, 2, -4, 1, -4, 6, 10, 13, -7, 0, -2, -8, -12, -14, 14, -20, -2, -13, -4, 12, 14, -8, -15]);
ECSearch("6.3-d",(w - 9)*OK,[-2, -1, 2, 2, -1, 4, 5, 0, -9, 5, 10, 5, -8, 12, -10, -10, 9, 4, 18, -7, 14, 4, 3, 13, -1, -16, -7, 8]);
ECSearch("6.3-e",(w - 9)*OK,[1, 0, 4, 4, 0, -4, 8, -4, 10, 8, 0, -8, -8, -4, 12, 16, 4, 0, -8, 8, 4, -8, -4, 8, 0, -4, -8, 12]);
ECSearch("6.3-f",(w - 9)*OK,[0, -1, 0, 0, -3, -6, 3, 6, -3, 3, -6, 5, 0, -6, -8, 10, 9, 12, 10, 1, -6, 0, 3, 3, 9, -6, -9, 18]);
ECSearch("8.1-a",(-6*w + 56)*OK,[1, -2, 0, 3, -2, 1, 7, -2, -2, -6, 6, 5, 0, -15, 11, 5, -6, -9, 2, -19, 16, -14, -6, -15, -6, -6, 0, -12]);
ECSearch("8.2-a",(-6*w - 50)*OK,[-2, 1, 3, 0, 1, -2, -2, 7, -2, 6, -6, 5, -15, 0, 5, 11, -9, -6, -19, 2, -14, 16, -15, -6, -6, -6, -12, 0]);
ECSearch("9.1-a",(3)*OK,[-2, 0, 2, -4, 5, 1, -4, 0, 3, -10, 4, 2, -8, -12, -1, -1, 12, 16, 15, -13, -1, -5, -12, 4, 2, -4, 2, -22]);
ECSearch("9.1-b",(3)*OK,[-1, -1, 4, 4, -6, -6, 4, 4, 10, -6, -6, 6, 0, 0, -8, -8, -12, -12, -10, -10, -8, -8, 12, 12, 6, 6, -18, -18]);
ECSearch("9.1-c",(3)*OK,[0, -2, -4, 2, 1, 5, 0, -4, 3, 4, -10, 2, -12, -8, -1, -1, 16, 12, -13, 15, -5, -1, 4, -12, -4, 2, -22, 2]);
ECSearch("12.1-a",(52*w - 486)*OK,[1, -3, 0, -5, 4, -2, -5, -2, -6, -6, -13, -9, 12, -1, -13, 9, 0, 11, 2, -2, -14, 3, 12, 6, -6, -12, 18]);
ECSearch("12.1-b",(52*w - 486)*OK,[2, 0, -4, -4, 2, 6, 4, 2, 0, 4, -2, 16, 2, -2, 0, 8, -2, 2, 2, 6, -12, -12, -2, 18, 12, 10, 0]);
ECSearch("12.1-c",(52*w - 486)*OK,[2, 0, 0, 6, 0, -6, 0, -6, -6, -6, -4, 0, 6, 10, -8, -12, -6, -8, -8, 6, 0, 12, -6, 0, 6, 0, 18]);
ECSearch("12.1-d",(52*w - 486)*OK,[1, 4, -6, -2, -2, 0, 5, 2, -6, -1, -8, -4, 6, -2, 3, -4, -4, -2, 8, 9, -6, -18, 12, 2, -8, -5, 0]);
ECSearch("12.1-e",(52*w - 486)*OK,[-2, 0, 0, -2, 4, -2, 4, -2, -6, 6, -4, 12, -6, 14, 8, 12, 6, 8, -16, -14, -8, -12, -18, -12, -6, -12, -18]);
ECSearch("12.1-f",(52*w - 486)*OK,[-1, 0, 6, 6, -6, 0, 3, -6, -6, 9, -4, 0, -6, 10, 1, 0, 12, 10, -8, 9, -6, -6, 12, -18, 12, 9, 12]);
ECSearch("12.3-a",(w - 10)*OK,[-1, 0, -4, -2, 4, -4, -8, -6, -2, 2, 0, 6, 12, -4, 8, -4, 6, 12, -10, 10, 4, -2, -6, 12, 6, -16, -10, -8]);
ECSearch("12.2-a",(-52*w - 434)*OK,[1, 0, -3, 4, -5, -5, -2, -2, -6, -6, -13, 12, -9, -13, -1, 0, 9, 2, 11, -14, -2, 12, 3, -6, 6, 18, -12]);
ECSearch("12.2-b",(-52*w - 434)*OK,[2, -4, 0, 2, -4, 4, 6, 2, 4, 0, -2, 2, 16, 0, -2, -2, 8, 2, 2, -12, 6, -2, -12, 12, 18, 0, 10]);
ECSearch("12.2-c",(-52*w - 434)*OK,[2, 0, 0, 0, 6, 0, -6, -6, -6, -6, -4, 6, 0, -8, 10, -6, -12, -8, -8, 0, 6, -6, 12, 6, 0, 18, 0]);
ECSearch("12.2-d",(-52*w - 434)*OK,[1, -6, 4, -2, -2, 5, 0, 2, -1, -6, -8, 6, -4, 3, -2, -4, -4, 8, -2, -6, 9, 12, -18, -8, 2, 0, -5]);
ECSearch("12.2-e",(-52*w - 434)*OK,[-2, 0, 0, 4, -2, 4, -2, -2, 6, -6, -4, -6, 12, 8, 14, 6, 12, -16, 8, -8, -14, -18, -12, -6, -12, -18, -12]);
ECSearch("12.2-f",(-52*w - 434)*OK,[-1, 6, 0, -6, 6, 3, 0, -6, 9, -6, -4, -6, 0, 1, 10, 12, 0, -8, 10, -6, 9, 12, -6, 12, -18, 12, 9]);
ECSearch("12.6-a",(-w - 9)*OK,[-1, 0, -2, -4, -4, 4, -6, -8, -2, 0, 2, 6, -4, 12, -4, 8, 12, 6, 10, -10, -2, 4, 12, -6, -16, 6, -8, -10]);
