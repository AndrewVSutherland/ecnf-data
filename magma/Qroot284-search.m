print "Field 2.2.284.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 71);
OK := Integers(K);
Plist := [];
Append(~Plist,(7*w - 59)*OK);
Append(~Plist,(-2*w - 17)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(-w - 8)*OK);
Append(~Plist,(-w + 8)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(5*w + 42)*OK);
Append(~Plist,(-5*w + 42)*OK);
Append(~Plist,(12*w - 101)*OK);
Append(~Plist,(-12*w - 101)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(w - 10)*OK);
Append(~Plist,(19*w - 160)*OK);
Append(~Plist,(-19*w - 160)*OK);
Append(~Plist,(-3*w + 26)*OK);
Append(~Plist,(-3*w - 26)*OK);
Append(~Plist,(-4*w - 33)*OK);
Append(~Plist,(-4*w + 33)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(w)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 12)*OK);
Append(~Plist,(4*w + 35)*OK);
Append(~Plist,(4*w - 35)*OK);
Append(~Plist,(13*w + 110)*OK);
Append(~Plist,(-13*w + 110)*OK);
Append(~Plist,(-30*w + 253)*OK);
Append(~Plist,(30*w + 253)*OK);
Append(~Plist,(-11*w - 92)*OK);
Append(~Plist,(-11*w + 92)*OK);
Append(~Plist,(22*w + 185)*OK);
Append(~Plist,(22*w - 185)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(10*w - 83)*OK);
Append(~Plist,(10*w + 83)*OK);
Append(~Plist,(-14*w - 117)*OK);
Append(~Plist,(-14*w + 117)*OK);
Append(~Plist,(-51*w + 430)*OK);
Append(~Plist,(51*w + 430)*OK);
Append(~Plist,(-4*w + 37)*OK);
Append(~Plist,(-4*w - 37)*OK);
Append(~Plist,(-3*w + 20)*OK);
Append(~Plist,(3*w + 20)*OK);
Append(~Plist,(-58*w + 489)*OK);
Append(~Plist,(58*w + 489)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(-34*w - 287)*OK);
Append(~Plist,(-34*w + 287)*OK);
Append(~Plist,(-71*w + 598)*OK);
Append(~Plist,(-71*w - 598)*OK);
Append(~Plist,(24*w - 203)*OK);
Append(~Plist,(24*w + 203)*OK);
Append(~Plist,(-5*w - 38)*OK);
Append(~Plist,(-5*w + 38)*OK);
Append(~Plist,(-6*w + 47)*OK);
Append(~Plist,(6*w + 47)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(21*w + 178)*OK);
Append(~Plist,(-21*w + 178)*OK);
Append(~Plist,(-3*w - 16)*OK);
Append(~Plist,(3*w - 16)*OK);
Append(~Plist,(15*w - 128)*OK);
Append(~Plist,(-15*w - 128)*OK);
Append(~Plist,(28*w - 235)*OK);
Append(~Plist,(28*w + 235)*OK);
Append(~Plist,(-3*w + 14)*OK);
Append(~Plist,(3*w + 14)*OK);
Append(~Plist,(46*w + 387)*OK);
Append(~Plist,(-46*w + 387)*OK);
Append(~Plist,(-5*w - 36)*OK);
Append(~Plist,(5*w - 36)*OK);
Append(~Plist,(16*w - 133)*OK);
Append(~Plist,(16*w + 133)*OK);
Append(~Plist,(-11*w + 90)*OK);
Append(~Plist,(-11*w - 90)*OK);
Append(~Plist,(-86*w + 725)*OK);
Append(~Plist,(86*w + 725)*OK);
Append(~Plist,(-55*w - 464)*OK);
Append(~Plist,(-55*w + 464)*OK);
Append(~Plist,(-53*w + 446)*OK);
Append(~Plist,(-53*w - 446)*OK);
Append(~Plist,(-2*w + 29)*OK);
Append(~Plist,(2*w + 29)*OK);
Append(~Plist,(-7*w - 54)*OK);
Append(~Plist,(-7*w + 54)*OK);
Append(~Plist,(25*w + 212)*OK);
Append(~Plist,(-25*w + 212)*OK);
Append(~Plist,(-93*w + 784)*OK);
Append(~Plist,(93*w + 784)*OK);
Append(~Plist,(16*w + 137)*OK);
Append(~Plist,(16*w - 137)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("2.1-a",(7*w - 59)*OK,[2, 2, 5, -5, -5, 0, 0, -5, 5, 4, 4, 5, -5, 8, 8, 5, -5, 10, -10, 10, -10, 0, -1, -1, 15, 15, 2, 2, 0]);
ECSearch("2.1-b",(7*w - 59)*OK,[0, 0, 3, -3, -5, -6, 6, -3, 3, -6, -6, -9, 9, -2, -2, -9, 9, -6, 6, -12, 12, 0, 7, 7, 3, 3, -6, -6, -20]);
ECSearch("2.1-c",(7*w - 59)*OK,[0, 0, -3, 3, -5, 6, -6, 3, -3, -6, -6, 9, -9, -2, -2, 9, -9, 6, -6, 12, -12, 0, 7, 7, 3, 3, -6, -6, -20]);
ECSearch("2.1-d",(7*w - 59)*OK,[2, 2, -5, 5, -5, 0, 0, 5, -5, 4, 4, -5, 5, 8, 8, -5, 5, -10, 10, -10, 10, 0, -1, -1, 15, 15, 2, 2, 0]);
ECSearch("4.1-a",(2)*OK,[-4, 2, -1, 1, 1, 6, 0, -5, -7, -8, -2, 5, -5, 8, 2, -13, 1, 4, 8, -2, 8, -12, -1, -13, 3, -9, -10, 14, -6]);
ECSearch("4.1-b",(2)*OK,[-4, 2, 1, -1, 1, -6, 0, 5, 7, -8, -2, -5, 5, 8, 2, 13, -1, -4, -8, 2, -8, 12, -1, -13, 3, -9, -10, 14, -6]);
ECSearch("4.1-c",(2)*OK,[2, -4, -1, 1, 1, 0, -6, 7, 5, -2, -8, 5, -5, 2, 8, -1, 13, -8, -4, -8, 2, 12, -13, -1, -9, 3, 14, -10, 6]);
ECSearch("4.1-d",(2)*OK,[2, -4, 1, -1, 1, 0, 6, -7, -5, -2, -8, -5, 5, 2, 8, 1, -13, 8, 4, 8, -2, -12, -13, -1, -9, 3, 14, -10, 6]);
ECSearch("10.1-a",(-w + 9)*OK,[0, -1, -1, 1, -6, 0, 3, -9, -6, 6, -7, -1, -4, -4, 3, -9, -6, 12, -10, 2, -12, -7, 11, 3, 15, 18, -12, -4]);
ECSearch("10.1-b",(-w + 9)*OK,[0, 1, 1, 1, 6, 0, -3, 9, -6, 6, 7, 1, -4, -4, -3, 9, 6, -12, 10, -2, 12, -7, 11, 3, 15, 18, -12, -4]);
ECSearch("10.1-c",(-w + 9)*OK,[-2, 4, -2, 2, 6, 2, 6, 0, -6, -2, 6, -2, 10, 6, 12, -10, 0, -4, -12, 2, -6, -6, 14, 10, -6, 14, -2, -14]);
ECSearch("10.1-d",(-w + 9)*OK,[-2, -4, 2, 2, -6, -2, -6, 0, -6, -2, -6, 2, 10, 6, -12, 10, 0, 4, 12, -2, 6, -6, 14, 10, -6, 14, -2, -14]);
ECSearch("10.2-a",(w + 9)*OK,[0, -1, -1, 1, 0, -6, -9, 3, 6, -6, -1, -7, -4, -4, -9, 3, 12, -6, 2, -10, -12, 11, -7, 15, 3, -12, 18, 2]);
ECSearch("10.2-b",(w + 9)*OK,[0, 1, 1, 1, 0, 6, 9, -3, 6, -6, 1, 7, -4, -4, 9, -3, -12, 6, -2, 10, 12, 11, -7, 15, 3, -12, 18, 2]);
ECSearch("10.2-c",(w + 9)*OK,[-2, -2, 4, 2, 2, 6, 0, 6, -2, -6, -2, 6, 6, 10, -10, 12, -4, 0, 2, -12, -6, 14, -6, -6, 10, -2, 14, 2]);
ECSearch("10.2-d",(w + 9)*OK,[-2, 2, -4, 2, -2, -6, 0, -6, -2, -6, 2, -6, 6, 10, 10, -12, 4, 0, -2, 12, 6, 14, -6, -6, 10, -2, 14, 2]);
ECSearch("14.1-a",(3*w - 25)*OK,[3, 0, -1, 4, 0, -6, 6, -6, -3, 0, 2, -10, 8, -7, 3, -3, 0, 3, 2, -1, 3, 2, -1, 15, 9, -3, 6, -4]);
ECSearch("14.1-b",(3*w - 25)*OK,[3, 0, 1, 4, 0, 6, -6, 6, -3, 0, -2, 10, 8, -7, -3, 3, 0, -3, -2, 1, -3, 2, -1, 15, 9, -3, 6, -4]);
ECSearch("14.2-a",(-3*w - 25)*OK,[0, 3, -1, 4, -6, 0, -6, 6, 0, -3, -10, 2, -7, 8, -3, 3, 3, 0, -1, 2, 3, -1, 2, 9, 15, 6, -3, -10]);
ECSearch("14.2-b",(-3*w - 25)*OK,[0, 3, 1, 4, 6, 0, 6, -6, 0, -3, 10, -2, -7, 8, 3, -3, -3, 0, 1, -2, -3, -1, 2, 9, 15, 6, -3, -10]);
ECSearch("16.1-a",(4)*OK,[-2, 4, 3, -3, 1, -4, 2, -5, 1, -2, 4, -7, -1, -10, 8, 3, 9, 8, -4, 16, -2, -12, 11, -1, 15, 3, 10, 10, 14]);
ECSearch("16.1-b",(4)*OK,[-2, 1, 3, 0, -2, 2, -4, -2, -8, 4, 7, -4, -10, -1, 8, -3, 9, 5, 8, -5, -14, 3, 17, 2, -3, 9, -2, -11, -10]);
ECSearch("16.1-c",(4)*OK,[4, -2, 3, -3, 1, -2, 4, -1, 5, 4, -2, 1, 7, 8, -10, -9, -3, 4, -8, 2, -16, 12, -1, 11, 3, 15, 10, 10, 2]);
ECSearch("16.1-d",(4)*OK,[1, -2, 0, -3, -2, 4, -2, 8, 2, 7, 4, 10, 4, 8, -1, -9, 3, -8, -5, 14, 5, -3, 2, 17, 9, -3, -11, -2, 20]);
ECSearch("16.1-e",(4)*OK,[1, -2, 0, 3, -2, -4, 2, -8, -2, 7, 4, -10, -4, 8, -1, 9, -3, 8, 5, -14, -5, 3, 2, 17, 9, -3, -11, -2, 20]);
ECSearch("16.1-f",(4)*OK,[-2, 1, -3, 0, -2, -2, 4, 2, 8, 4, 7, 4, 10, -1, 8, 3, -9, -5, -8, 5, 14, -3, 17, 2, -3, 9, -2, -11, -10]);
ECSearch("16.1-g",(4)*OK,[-2, 4, -3, 3, 1, 4, -2, 5, -1, -2, 4, 7, 1, -10, 8, -3, -9, -8, 4, -16, 2, 12, 11, -1, 15, 3, 10, 10, 14]);
ECSearch("16.1-h",(4)*OK,[4, -2, -3, 3, 1, 2, -4, 1, -5, 4, -2, -1, -7, 8, -10, 9, 3, -4, 8, -2, 16, -12, -1, 11, 3, 15, 10, 10, 2]);
