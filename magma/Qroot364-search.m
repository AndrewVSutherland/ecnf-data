print "Field 2.2.364.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 91);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(2*w - 19)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(5)*OK+(w + 1)*OK);
Append(~Plist,(5)*OK+(w + 4)*OK);
Append(~Plist,(7)*OK+(w)*OK);
Append(~Plist,(11)*OK+(w + 5)*OK);
Append(~Plist,(11)*OK+(w + 6)*OK);
Append(~Plist,(13)*OK+(w)*OK);
Append(~Plist,(-5*w + 48)*OK);
Append(~Plist,(5*w + 48)*OK);
Append(~Plist,(41)*OK+(w + 3)*OK);
Append(~Plist,(41)*OK+(w + 38)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 12)*OK);
Append(~Plist,(67)*OK+(w + 15)*OK);
Append(~Plist,(67)*OK+(w + 52)*OK);
Append(~Plist,(71)*OK+(w + 34)*OK);
Append(~Plist,(71)*OK+(w + 37)*OK);
Append(~Plist,(73)*OK+(w + 23)*OK);
Append(~Plist,(73)*OK+(w + 50)*OK);
Append(~Plist,(89)*OK+(w + 25)*OK);
Append(~Plist,(89)*OK+(w + 64)*OK);
Append(~Plist,(97)*OK+(w + 24)*OK);
Append(~Plist,(97)*OK+(w + 73)*OK);
Append(~Plist,(7*w - 66)*OK);
Append(~Plist,(-7*w - 66)*OK);
Append(~Plist,(16*w - 153)*OK);
Append(~Plist,(16*w + 153)*OK);
Append(~Plist,(21*w + 200)*OK);
Append(~Plist,(-21*w + 200)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(151)*OK+(w + 53)*OK);
Append(~Plist,(151)*OK+(w + 98)*OK);
Append(~Plist,(163)*OK+(w + 55)*OK);
Append(~Plist,(163)*OK+(w + 108)*OK);
Append(~Plist,(8*w + 75)*OK);
Append(~Plist,(8*w - 75)*OK);
Append(~Plist,(229)*OK+(w + 70)*OK);
Append(~Plist,(229)*OK+(w + 159)*OK);
Append(~Plist,(w + 18)*OK);
Append(~Plist,(w - 18)*OK);
Append(~Plist,(239)*OK+(w + 42)*OK);
Append(~Plist,(239)*OK+(w + 197)*OK);
Append(~Plist,(241)*OK+(w + 36)*OK);
Append(~Plist,(241)*OK+(w + 205)*OK);
Append(~Plist,(6*w + 55)*OK);
Append(~Plist,(-6*w + 55)*OK);
Append(~Plist,(42*w - 401)*OK);
Append(~Plist,(42*w + 401)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(293)*OK+(w + 43)*OK);
Append(~Plist,(293)*OK+(w + 250)*OK);
Append(~Plist,(15*w - 142)*OK);
Append(~Plist,(-15*w - 142)*OK);
Append(~Plist,(331)*OK+(w + 129)*OK);
Append(~Plist,(331)*OK+(w + 202)*OK);
Append(~Plist,(-3*w + 34)*OK);
Append(~Plist,(3*w + 34)*OK);
Append(~Plist,(349)*OK+(w + 120)*OK);
Append(~Plist,(349)*OK+(w + 229)*OK);
Append(~Plist,(353)*OK+(w + 47)*OK);
Append(~Plist,(353)*OK+(w + 306)*OK);
Append(~Plist,(359)*OK+(w + 74)*OK);
Append(~Plist,(359)*OK+(w + 285)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-4*w - 33)*OK);
Append(~Plist,(4*w - 33)*OK);
Append(~Plist,(-9*w + 88)*OK);
Append(~Plist,(9*w + 88)*OK);
Append(~Plist,(379)*OK+(w + 76)*OK);
Append(~Plist,(379)*OK+(w + 303)*OK);
Append(~Plist,(-14*w - 135)*OK);
Append(~Plist,(-14*w + 135)*OK);
Append(~Plist,(397)*OK+(w + 134)*OK);
Append(~Plist,(397)*OK+(w + 263)*OK);
Append(~Plist,(409)*OK+(w + 136)*OK);
Append(~Plist,(409)*OK+(w + 273)*OK);
Append(~Plist,(-3*w + 20)*OK);
Append(~Plist,(3*w + 20)*OK);
Append(~Plist,(431)*OK+(w + 130)*OK);
Append(~Plist,(431)*OK+(w + 301)*OK);
Append(~Plist,(40*w - 381)*OK);
Append(~Plist,(40*w + 381)*OK);
Append(~Plist,(461)*OK+(w + 78)*OK);
Append(~Plist,(461)*OK+(w + 383)*OK);
Append(~Plist,(463)*OK+(w + 72)*OK);
Append(~Plist,(463)*OK+(w + 391)*OK);
Append(~Plist,(6*w - 53)*OK);
Append(~Plist,(-6*w - 53)*OK);
Append(~Plist,(487)*OK+(w + 86)*OK);
Append(~Plist,(487)*OK+(w + 401)*OK);
Append(~Plist,(499)*OK+(w + 33)*OK);
Append(~Plist,(499)*OK+(w + 466)*OK);
Append(~Plist,(33*w + 314)*OK);
Append(~Plist,(-33*w + 314)*OK);
Append(~Plist,(509)*OK+(w + 189)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("2.1-a",(2)*OK+(w + 1)*OK,[-1, 3, 3, -1, 1, 2, 2, 2, -10, 6, 6, -2, 12, -4, 0, 16, 11, -5, 12, -4, -18, 6, -14, 10, -6, 2, -6, -6, 15]);
ECSearch("2.1-b",(2)*OK+(w + 1)*OK,[-3, 1, 1, -3, 1, 2, 2, -2, 6, -10, 2, -6, -4, 12, 16, 0, -5, 11, 4, -12, -6, 18, -10, 14, -2, 6, -6, -6, 5]);
ECSearch("2.1-c",(2)*OK+(w + 1)*OK,[-3, 1, -1, 3, -1, -2, -2, 2, 6, -10, -2, 6, -4, 12, -16, 0, 5, -11, -4, 12, 6, -18, 10, -14, -2, 6, -6, -6, 5]);
ECSearch("2.1-d",(2)*OK+(w + 1)*OK,[1, -3, 3, -1, -1, -2, -2, 2, -10, 6, 6, -2, 12, -4, 0, -16, -11, 5, 12, -4, -18, 6, -14, 10, 6, -2, -6, -6, -15]);
ECSearch("2.1-e",(2)*OK+(w + 1)*OK,[-1, 3, -3, 1, -1, -2, -2, -2, -10, 6, -6, 2, 12, -4, 0, -16, -11, 5, -12, 4, 18, -6, 14, -10, -6, 2, -6, -6, 15]);
ECSearch("2.1-f",(2)*OK+(w + 1)*OK,[3, -1, 1, -3, -1, -2, -2, -2, 6, -10, 2, -6, -4, 12, -16, 0, 5, -11, 4, -12, -6, 18, -10, 14, 2, -6, -6, -6, -5]);
ECSearch("2.1-g",(2)*OK+(w + 1)*OK,[3, -1, -1, 3, 1, 2, 2, 2, 6, -10, -2, 6, -4, 12, 16, 0, -5, 11, -4, 12, 6, -18, 10, -14, 2, -6, -6, -6, -5]);
ECSearch("2.1-h",(2)*OK+(w + 1)*OK,[1, -3, -3, 1, 1, 2, 2, -2, -10, 6, -6, 2, 12, -4, 0, 16, 11, -5, -12, 4, 18, -6, 14, -10, 6, -2, -6, -6, -15]);
ECSearch("4.1-a",(2)*OK,[-2, 0, 3, -1, 2, 4, -2, 2, -1, 3, -6, -2, -9, -1, 0, -4, -8, -10, 3, -1, 3, -9, -5, -17, -6, 10, 3, -9, 18]);
ECSearch("4.1-b",(2)*OK,[0, 2, 1, -3, 2, -2, 4, -2, 3, -1, 2, 6, -1, -9, -4, 0, -10, -8, 1, -3, 9, -3, 17, 5, -10, 6, -9, 3, 10]);
ECSearch("4.1-c",(2)*OK,[2, 0, 3, -1, -2, -4, 2, 2, -1, 3, -6, -2, -9, -1, 0, 4, 8, 10, 3, -1, 3, -9, -5, -17, 6, -10, 3, -9, -18]);
ECSearch("4.1-d",(2)*OK,[0, 2, -1, 3, -2, 2, -4, 2, 3, -1, -2, -6, -1, -9, 4, 0, 10, 8, -1, 3, -9, 3, -17, -5, -10, 6, -9, 3, 10]);
ECSearch("4.1-e",(2)*OK,[0, -2, 1, -3, -2, 2, -4, -2, 3, -1, 2, 6, -1, -9, 4, 0, 10, 8, 1, -3, 9, -3, 17, 5, 10, -6, -9, 3, -10]);
ECSearch("4.1-f",(2)*OK,[-2, 0, -3, 1, -2, -4, 2, -2, -1, 3, 6, 2, -9, -1, 0, 4, 8, 10, -3, 1, -3, 9, 5, 17, -6, 10, 3, -9, 18]);
ECSearch("4.1-g",(2)*OK,[0, -2, -1, 3, 2, -2, 4, 2, 3, -1, -2, -6, -1, -9, -4, 0, -10, -8, -1, 3, -9, 3, -17, -5, 10, -6, -9, 3, -10]);
ECSearch("4.1-h",(2)*OK,[2, 0, -3, 1, 2, 4, -2, -2, -1, 3, 6, 2, -9, -1, 0, -4, -8, -10, -3, 1, -3, 9, 5, 17, 6, -10, 3, -9, -18]);
ECSearch("5.1-a",(5)*OK+(w + 1)*OK,[-1, 1, -3, -4, -2, -3, -5, -6, -8, -2, -9, -5, -8, 0, -3, 5, 6, -6, 7, -11, 10, -18, -11, -5, 8, 4, 15, 5, -20]);
ECSearch("5.1-b",(5)*OK+(w + 1)*OK,[-1, -1, 3, 4, -2, -3, -5, 6, -8, -2, 9, 5, -8, 0, -3, 5, 6, -6, -7, 11, -10, 18, 11, 5, -8, -4, 15, 5, 20]);
ECSearch("5.1-c",(5)*OK+(w + 1)*OK,[1, 1, -3, 4, 2, 3, 5, 6, -8, -2, 9, 5, -8, 0, 3, -5, -6, 6, -7, 11, -10, 18, 11, 5, 8, 4, 15, 5, -20]);
ECSearch("5.1-d",(5)*OK+(w + 1)*OK,[1, -1, 3, -4, 2, 3, 5, -6, -8, -2, -9, -5, -8, 0, 3, -5, -6, 6, 7, -11, 10, -18, -11, -5, -8, -4, 15, 5, 20]);
ECSearch("5.2-a",(5)*OK+(w + 4)*OK,[-1, -3, 1, -4, -2, -5, -3, -6, -2, -8, -5, -9, 0, -8, 5, -3, -6, 6, -11, 7, -18, 10, -5, -11, 4, 8, 5, 15, -12]);
ECSearch("5.2-b",(5)*OK+(w + 4)*OK,[-1, 3, -1, 4, -2, -5, -3, 6, -2, -8, 5, 9, 0, -8, 5, -3, -6, 6, 11, -7, 18, -10, 5, 11, -4, -8, 5, 15, 12]);
ECSearch("5.2-c",(5)*OK+(w + 4)*OK,[1, -3, 1, 4, 2, 5, 3, 6, -2, -8, 5, 9, 0, -8, -5, 3, 6, -6, 11, -7, 18, -10, 5, 11, 4, 8, 5, 15, -12]);
ECSearch("5.2-d",(5)*OK+(w + 4)*OK,[1, 3, -1, -4, 2, 5, 3, -6, -2, -8, -5, -9, 0, -8, -5, 3, 6, -6, -11, 7, -18, 10, -5, -11, -4, -8, 5, 15, 12]);
