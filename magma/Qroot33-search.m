print "Field 2.2.33.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 8);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w - 2)*OK);
Append(~Plist,(-w + 3)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(-4*w - 9)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(2*w + 3)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(2*w + 1)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(-2*w - 7)*OK);
Append(~Plist,(4*w + 11)*OK);
Append(~Plist,(4*w - 15)*OK);
Append(~Plist,(-6*w - 13)*OK);
Append(~Plist,(6*w - 19)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(-4*w - 5)*OK);
Append(~Plist,(4*w - 9)*OK);

effort := 400;
print "Isogeny class 1.1-a";
N := (1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 0, 0, 0, -1, 0, 0, 5, 5, -7, -7, 0, 0, 14, -13, -13, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 4.1-a";
N := (2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 0, 0, 8, 6, 6, -4, -4, 2, 2, -6, -6, -4, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 4.1-b";
N := (2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, 0, 8, -6, -6, -4, -4, 2, 2, 6, 6, -4, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 11.1-a";
N := (-4*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, 2, 2, -9, 0, 0, 7, 7, 3, 3, 8, 8, -10, -7, -7, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 11.1-b";
N := (-4*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, -2, -2, -9, 0, 0, 7, 7, 3, 3, -8, -8, -10, -7, -7, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 12.1-a";
N := (-4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, -10, -6, 6, -4, -4, 2, 2, -6, 6, 14, -4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 12.1-b";
N := (-4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, -10, 6, -6, -4, -4, 2, 2, 6, -6, 14, -4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.2-a";
N := (-2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 4, -4, -2, -10, 4, -4, -6, 10, 10, -6, -8, 12, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.2-b";
N := (-2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, -4, -4, 2, 10, 4, -4, -6, 10, -10, 6, -8, 12, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.4-a";
N := (-3*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 0, 0, -5, 0, 0, -7, -11, -11, 1, 0, 0, -2, 11, -5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.3-a";
N := (2*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 4, -4, -10, -2, -4, 4, 10, -6, -6, 10, -8, 4, 12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.3-b";
N := (2*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, -4, -4, 10, 2, -4, 4, 10, -6, 6, -10, -8, 4, 12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.5-a";
N := (3*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 0, 0, -5, 0, 0, -11, -7, 1, -11, 0, 0, -2, -5, 11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 18.1-a";
N := (-3*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, 6, -2, -2, -6, -8, 0, -6, 2, 10, -10, -10, -12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 18.1-b";
N := (-3*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, -6, -2, 2, 6, -8, 0, -6, 2, -10, 10, -10, -12, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 18.2-a";
N := (-3*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 2, -2, -6, -2, 0, -8, 2, -6, -10, 10, -10, 4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 18.2-b";
N := (-3*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, -2, -2, 6, 2, 0, -8, 2, -6, 10, -10, -10, 4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 24.3-a";
N := (-5*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 6, 2, 2, 2, -8, 8, -2, 6, 6, 6, -6, -12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 24.3-b";
N := (-5*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, -6, 2, -2, -2, -8, 8, -2, 6, -6, -6, -6, -12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 24.4-a";
N := (-5*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, -2, 2, 2, 2, 8, -8, 6, -2, 6, 6, -6, -4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 24.4-b";
N := (-5*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, 2, 2, -2, -2, 8, -8, 6, -2, -6, -6, -6, -4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.1-a";
N := (-4*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -4, 8, -1, -4, 4, 7, -1, -3, -11, 8, 12, -2, -3, 13, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.1-b";
N := (-4*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 4, -8, -1, 4, -4, 7, -1, -3, -11, -8, -12, -2, -3, 13, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.3-a";
N := (-2*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 6, -2, 6, 6, -8, 8, -2, -2, -6, -6, -2, 4, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.3-b";
N := (-2*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -6, -2, -6, -6, -8, 8, -2, -2, 6, 6, -2, 4, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.5-a";
N := (-3*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 6, -2, 4, 7, 6, -6, -7, 1, -11, 1, -4, 6, -6, -5, -1, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.5-b";
N := (-3*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -2, 6, 4, 3, 6, 2, 9, 5, -3, -3, 12, -10, -6, 3, -9, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.5-c";
N := (-3*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 6, -2, -6, 6, 2, 0, -4, 6, 6, -6, 2, -6, 12, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.5-d";
N := (-3*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -6, 2, -6, -6, -2, 0, -4, 6, 6, 6, -2, -6, 12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.5-e";
N := (-3*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, -6, -4, 3, -6, -2, 9, 5, -3, -3, -12, 10, -6, 3, -9, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.5-f";
N := (-3*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -6, 2, -4, 7, -6, 6, -7, 1, -11, 1, 4, -6, -6, -5, -1, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.2-a";
N := (-4*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 8, -4, -1, 4, -4, -1, 7, -11, -3, 12, 8, -2, 13, -3, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.2-b";
N := (-4*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -8, 4, -1, -4, 4, -1, 7, -11, -3, -12, -8, -2, 13, -3, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.4-a";
N := (-2*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 6, -2, 6, 6, 8, -8, -2, -2, -6, -6, -2, -4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.4-b";
N := (-2*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -6, -2, -6, -6, 8, -8, -2, -2, 6, 6, -2, -4, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.6-a";
N := (-3*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 6, 4, -2, 7, -6, 6, 1, -7, 1, -11, 6, -4, -6, -1, -5, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.6-b";
N := (-3*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -2, 4, 6, 3, 2, 6, 5, 9, -3, -3, -10, 12, -6, -9, 3, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.6-c";
N := (-3*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -2, 6, -6, 2, 6, -4, 0, 6, 6, 2, -6, -6, 12, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.6-d";
N := (-3*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 2, -6, -6, -2, -6, -4, 0, 6, 6, -2, 6, -6, 12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.6-e";
N := (-3*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, -4, -6, 3, -2, -6, 5, 9, -3, -3, 10, -12, -6, -9, 3, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 32.6-f";
N := (-3*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -6, -4, 2, 7, 6, -6, 1, -7, 1, -11, -6, 4, -6, -1, -5, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.1-a";
N := (-2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -2, -6, -6, -6, -8, -8, 6, 6, -2, -2, 2, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.1-b";
N := (-2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, 2, -6, 6, 6, -8, -8, 6, 6, 2, 2, 2, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.1-a";
N := (6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, -6, 2, 0, 0, 2, 2, -10, -10, -6, -6, 14, 8, 8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.1-b";
N := (6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 2, 6, -6, 8, 8, 2, 2, -6, 6, 2, -4, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.1-c";
N := (6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 2, -6, 6, 8, 8, 2, 2, 6, -6, 2, -4, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.1-d";
N := (6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 6, 6, 2, 0, 0, 2, 2, -10, -10, 6, 6, 14, 8, 8, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.2-a";
N := (-3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 5, 0, 0, 11, -7, -1, 11, 0, 0, 2, 5, 11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.3-a";
N := (3*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 5, 0, 0, -7, 11, 11, -1, 0, 0, 2, 11, 5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.2-a";
N := (2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 2, -10, -2, -8, 8, 6, -2, 2, -6, 10, 12, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.2-b";
N := (2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 6, -2, -6, 4, 4, 2, -6, -2, 10, -2, -12, 12, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.2-c";
N := (2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 6, 2, 6, 4, 4, 2, -6, 2, -10, -2, -12, 12, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.2-d";
N := (2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 2, 10, 2, -8, 8, 6, -2, -2, 6, 10, 12, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.4-a";
N := (w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, -2, 10, 10, -6, 8, 0, 6, -10, 6, -2, 2, 4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.4-b";
N := (w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -6, 2, 2, 6, -2, 0, 8, -2, 6, 10, 10, 10, 4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.4-c";
N := (w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, -2, 2, -6, 2, 0, 8, -2, 6, -10, -10, 10, 4, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.4-d";
N := (w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, 2, 10, -10, 6, 8, 0, 6, -10, -6, 2, 2, 4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.3-a";
N := (-2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 2, -2, -10, 8, -8, -2, 6, -6, 2, 10, 4, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.3-b";
N := (-2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 6, -6, -2, 4, 4, -6, 2, 10, -2, -2, 12, -12, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.3-c";
N := (-2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 6, 6, 2, 4, 4, -6, 2, -10, 2, -2, 12, -12, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.3-d";
N := (-2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 2, 2, 10, 8, -8, -2, 6, 6, -2, 10, 4, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.5-a";
N := (-w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 6, 10, -6, 10, 0, 8, -10, 6, -2, 6, 2, 4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.5-b";
N := (-w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, -6, 2, -2, 6, 8, 0, 6, -2, 10, 10, 10, 12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.5-c";
N := (-w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 6, 2, 2, -6, 8, 0, 6, -2, -10, -10, 10, 12, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.5-d";
N := (-w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, -6, 10, 6, -10, 0, 8, -10, 6, 2, -6, 2, 4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 49.1-a";
N := (7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, 2, -6, 2, -1, 6, 8, -5, -9, 1, -3, 2, 0, 11, -9, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 49.1-b";
N := (7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, -2, -2, 6, -1, -8, -6, -9, -5, -3, 1, 0, -2, -9, 11, 14, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 49.1-c";
N := (7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, 2, 2, -6, -1, 8, 6, -9, -5, -3, 1, 0, 2, -9, 11, -14, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 49.1-d";
N := (7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, -2, 6, -2, -1, -6, -8, -5, -9, 1, -3, -2, 0, 11, -9, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.1-a";
N := (-5*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -2, 2, 0, 0, 4, 4, 6, -2, 0, 8, -2, -10, 6, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.1-b";
N := (-5*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, 2, -2, 0, 0, 4, 4, 6, -2, 0, -8, -2, -10, 6, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.2-a";
N := (-5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, 2, -2, 0, 0, 4, 4, -2, 6, 8, 0, -2, 6, -10, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 50.2-b";
N := (-5*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -2, 2, 0, 0, 4, 4, -2, 6, -8, 0, -2, 6, -10, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.1-a";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 3, 4, 1, 9, -7, -6, -2, -10, 0, 4, 5, 11, 7, -12, 5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.1-b";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, -6, -1, -9, -3, -4, -4, 2, 2, -6, 9, 5, -13, 14, -15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.1-c";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, 6, -1, 9, 3, -4, -4, 2, 2, 6, -9, 5, -13, 14, 15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.1-d";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -3, -4, 1, -9, 7, -6, -2, -10, 0, -4, -5, 11, 7, -12, -5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.2-a";
N := (-3*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 4, 3, 1, -7, 9, -2, -6, 0, -10, 5, 4, 11, -12, 7, 9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.2-b";
N := (-3*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, -3, -1, -3, -9, -4, -4, 2, 2, 9, -6, 5, 14, -13, -15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.2-c";
N := (-3*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, 3, -1, 3, 9, -4, -4, 2, 2, -9, 6, 5, 14, -13, 15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 54.2-d";
N := (-3*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -4, -3, 1, 7, -9, -2, -6, 0, -10, -5, -4, 11, -12, 7, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.1-a";
N := (-7*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, -3, 2, -4, -5, -5, -8, -2, 8, 3, -7, 5, -7, -2, -9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.1-b";
N := (-7*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -3, 6, 8, 3, 9, -4, 2, 2, 9, 3, -13, 5, -4, -15, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.1-c";
N := (-7*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 3, -6, 8, -3, -9, -4, 2, 2, -9, -3, -13, 5, -4, 15, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.1-d";
N := (-7*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 3, -2, -4, 5, 5, -8, -2, 8, -3, 7, 5, -7, -2, 9, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.2-a";
N := (-3*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 2, 6, -6, 6, 2, 0, 2, 6, -2, 6, -2, 4, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.2-b";
N := (-3*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -2, -6, -6, -6, -2, 0, 2, 6, 2, -6, -2, 4, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.4-a";
N := (7*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 2, -3, -4, -5, -5, -8, 8, -2, -7, 3, 5, -2, -7, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.4-b";
N := (7*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 6, -3, 8, 9, 3, -4, 2, 2, 3, 9, -13, -4, 5, -12, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.4-c";
N := (7*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -6, 3, 8, -9, -3, -4, 2, 2, -3, -9, -13, -4, 5, 12, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.4-d";
N := (7*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, -2, 3, -4, 5, 5, -8, 8, -2, 7, -3, 5, -2, -7, 4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.3-a";
N := (3*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 6, 2, -6, 2, 6, 0, 6, 2, 6, -2, -2, -12, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 62.3-b";
N := (3*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -6, -2, -6, -2, -6, 0, 6, 2, -6, 2, -2, -12, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.1-a";
N := (8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 4, -9, 8, -8, -9, -9, 5, 5, -12, 12, -2, -11, -11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.1-b";
N := (8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -4, -9, -8, 8, -9, -9, 5, 5, 12, -12, -2, -11, -11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.2-a";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, 0, -5, 0, 0, 7, 11, -11, 1, 0, 0, -2, -11, 5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.2-b";
N := (-4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 10, 0, 0, 4, -4, 10, 10, 0, 0, -2, 16, -16, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.4-a";
N := (-6*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, 4, 8, -2, -6, 0, 4, 2, 2, -10, -2, 4, -4, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.4-b";
N := (-6*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -4, 8, 2, 6, 0, 4, 2, 2, 10, 2, 4, -4, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.6-a";
N := (w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, -6, -4, -3, 6, -2, 9, -5, -3, 3, 12, -10, 6, 3, -9, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.6-b";
N := (w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -6, 2, -4, -7, 6, 6, -7, -1, -11, -1, -4, 6, 6, -5, -1, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.6-c";
N := (w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 0, 0, 0, 5, 0, 0, -11, 7, 1, 11, 0, 0, 2, -5, 11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.6-d";
N := (w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 6, -2, 6, -6, 2, 0, 4, 6, -6, 6, -2, 6, 12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.6-e";
N := (w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, 0, 1, 0, 0, 5, -5, -7, 7, 0, 0, -14, -13, -13, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.6-f";
N := (w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -2, 6, 4, -3, -6, 2, 9, -5, -3, 3, -12, 10, 6, 3, -9, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.6-g";
N := (w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, -6, 2, 6, 6, -2, 0, 4, 6, -6, -6, 2, 6, 12, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.6-h";
N := (w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 6, -2, 4, -7, -6, -6, -7, -1, -11, -1, 4, -6, 6, -5, -1, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.3-a";
N := (4*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, 0, -5, 0, 0, 11, 7, 1, -11, 0, 0, -2, 5, -11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.3-b";
N := (4*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 10, 0, 0, -4, 4, 10, 10, 0, 0, -2, -16, 16, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.5-a";
N := (6*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -4, 8, -6, -2, 4, 0, 2, 2, -2, -10, 4, -12, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.5-b";
N := (6*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 4, 8, 6, 2, 4, 0, 2, 2, 2, 10, 4, -12, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.7-a";
N := (-w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, -4, -6, -3, -2, 6, -5, 9, 3, -3, -10, 12, 6, -9, 3, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.7-b";
N := (-w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -6, -4, 2, -7, 6, 6, -1, -7, -1, -11, 6, -4, 6, -1, -5, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.7-c";
N := (-w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 0, 0, 0, 5, 0, 0, 7, -11, 11, 1, 0, 0, 2, 11, -5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.7-d";
N := (-w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -2, 6, 6, 2, -6, 4, 0, -6, 6, -2, 6, 6, 12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.7-e";
N := (-w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, 0, 1, 0, 0, -5, 5, 7, -7, 0, 0, -14, -13, -13, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.7-f";
N := (-w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -2, 4, 6, -3, 2, -6, -5, 9, 3, -3, 10, -12, 6, -9, 3, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.7-g";
N := (-w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 2, -6, 6, -2, 6, 4, 0, -6, 6, 2, -6, 6, 12, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.7-h";
N := (-w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 6, 4, -2, -7, -6, -6, -1, -7, -1, -11, -6, 4, 6, -1, -5, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 66.1-a";
N := (5*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -1, 3, 0, 5, 5, 11, 2, 9, -3, -4, -4, -4, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 66.1-b";
N := (5*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, -1, -3, 0, 5, 5, 11, 2, -9, 3, -4, -4, -4, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 66.2-a";
N := (5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, -1, 0, 3, 5, 5, 2, 11, -3, 9, -4, -4, -4, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 66.2-b";
N := (5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -1, 0, -3, 5, 5, 2, 11, 3, -9, -4, -4, -4, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.1-a";
N := (-4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, -1, 3, 3, -4, 5, 2, -7, -3, 6, -4, -13, -4, -6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.1-b";
N := (-4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -7, 9, -1, 0, 5, -10, 9, 1, 10, -12, -5, 8, -6, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.1-c";
N := (-4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -7, -9, 1, 0, 5, -10, 9, -1, -10, -12, -5, 8, 6, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.1-d";
N := (-4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -1, -3, -3, -4, 5, 2, -7, 3, -6, -4, -13, -4, 6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.2-a";
N := (4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, -1, 3, 3, 5, -4, -7, 2, 6, -3, -4, -4, -13, 3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.2-b";
N := (4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -7, -1, 9, 5, 0, 9, -10, 10, 1, -12, 8, -5, -1, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.2-c";
N := (4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -7, 1, -9, 5, 0, 9, -10, -10, -1, -12, 8, -5, 1, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 68.2-d";
N := (4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -1, -3, -3, 5, -4, -7, 2, -6, 3, -4, -4, -13, -3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.1-a";
N := (-6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -4, 0, 6, -4, -4, -4, 8, 12, 6, -4, 8, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.1-b";
N := (-6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -4, 0, -6, -4, -4, -4, 8, -12, -6, -4, 8, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.3-a";
N := (-3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, 6, -10, 6, 10, 0, 8, 10, -6, 2, 6, -2, -4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.3-b";
N := (-3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, -6, -10, -6, -10, 0, 8, 10, -6, -2, -6, -2, -4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.2-a";
N := (-6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, -4, 6, 0, -4, -4, 8, -4, 6, 12, -4, -4, 8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.2-b";
N := (-6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, -4, -6, 0, -4, -4, 8, -4, -6, -12, -4, -4, 8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.4-a";
N := (-3*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, 2, -10, 10, 6, 8, 0, -6, 10, 6, 2, -2, 4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 72.4-b";
N := (-3*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, -2, -10, -10, -6, 8, 0, -6, 10, -6, -2, -2, 4, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-a";
N := (-10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 6, -6, 6, -6, -8, -8, 6, 6, -6, 6, 10, -12, -12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-b";
N := (-10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, 2, 2, -2, -2, 0, 0, -10, -10, 10, 10, -14, 12, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-c";
N := (-10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, -2, -2, 2, 2, 0, 0, -10, -10, -10, -10, -14, 12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-d";
N := (-10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -6, 6, -6, 6, -8, -8, 6, 6, 6, -6, 10, -12, -12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.1-a";
N := (9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 0, -10, 0, 0, -4, -4, 11, 11, 0, 0, -13, 5, 5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 82.1-a";
N := (w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -2, -6, 2, 6, 2, 4, 8, 2, -2, -2, 2, 12, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 82.1-b";
N := (w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 2, 6, 2, -6, -2, 4, 8, 2, -2, 2, 2, 12, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 82.4-a";
N := (w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -6, -2, 2, 2, 6, 8, 4, -2, 2, -2, 2, 4, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 82.4-b";
N := (w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 6, 2, 2, -2, -6, 8, 4, -2, 2, 2, 2, 4, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.1-a";
N := (-8*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, -3, 7, -4, 0, 2, 7, -12, -2, -2, -7, 5, -2, 8, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.1-b";
N := (-8*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, -5, 5, 4, -10, 0, -5, 8, -2, 10, -5, -11, 12, 2, 10, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.1-c";
N := (-8*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 2, 2, -6, 2, 4, 0, -2, 2, 2, 10, -10, 16, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.1-d";
N := (-8*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -2, -2, -6, -2, 4, 0, -2, 2, -2, -10, -10, 16, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.1-e";
N := (-8*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -5, 5, -5, 4, 10, 0, -5, 8, -2, -10, 5, -11, 12, 2, -10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.1-f";
N := (-8*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -3, 3, -7, -4, 0, 2, 7, -12, -2, 2, 7, 5, -2, 8, 4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.2-a";
N := (8*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 7, -3, -4, 0, 7, 2, -2, -12, -7, -2, 5, 8, -2, -9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.2-b";
N := (8*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, 5, -5, 4, -10, -5, 0, -2, 8, -5, 10, -11, 2, 12, 5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.2-c";
N := (8*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 2, 2, -6, 2, 0, 4, 2, -2, 10, 2, -10, -12, 16, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.2-d";
N := (8*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -2, -2, -6, -2, 0, 4, 2, -2, -10, -2, -10, -12, 16, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.2-e";
N := (8*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -5, -5, 5, 4, 10, -5, 0, -2, 8, 5, -10, -11, 2, 12, -5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 87.2-f";
N := (8*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -3, -7, 3, -4, 0, 7, 2, -2, -12, 7, 2, 5, 8, -2, 9, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 88.1-a";
N := (2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 0, -10, 0, 6, 2, -10, -10, 2, -12, 6, 2, 2, 2, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 88.1-b";
N := (2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, -10, 0, -6, 2, -10, -10, 2, 12, -6, 2, 2, 2, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 88.2-a";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, -10, 6, 0, -10, 2, 2, -10, 6, -12, 2, 2, 2, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 88.2-b";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -10, -6, 0, -10, 2, 2, -10, -6, 12, 2, 2, 2, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.1-a";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -2, -2, -6, -6, -6, 4, 10, -10, 6, 6, -2, 4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.1-b";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, -6, 2, -6, 6, -2, -8, -2, -10, 2, -6, -6, -12, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.1-c";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, -7, -4, 3, 6, 0, -5, -8, -7, 9, -3, -2, -14, -13, 3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.1-d";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 7, 4, 3, -6, 0, -5, -8, -7, -9, 3, -2, -14, -13, -3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.1-e";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 6, -2, -6, -6, 2, -8, -2, -10, -2, 6, -6, -12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.1-f";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 2, 2, -6, 6, 6, 4, 10, -10, -6, -6, -2, 4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.2-a";
N := (-4*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, -2, -2, -6, -6, -6, 4, -10, 10, 6, 6, -2, -4, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.2-b";
N := (-4*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, 2, -6, -6, -2, 6, -8, -10, -2, -6, 2, -6, 4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.2-c";
N := (-4*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, -4, -7, 3, 0, 6, -5, -7, -8, -3, 9, -2, -13, -14, -3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.2-d";
N := (-4*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, 4, 7, 3, 0, -6, -5, -7, -8, 3, -9, -2, -13, -14, 3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.2-e";
N := (-4*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -2, 6, -6, 2, -6, -8, -10, -2, 6, -2, -6, 4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 93.2-f";
N := (-4*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 2, 2, -6, 6, 6, 4, -10, 10, -6, -6, -2, -4, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.1-a";
N := (-4*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 4, -6, 6, 4, 4, -8, -6, 2, -2, -8, -2, -12, 12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.1-b";
N := (-4*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -8, 2, 2, -8, -4, -8, 10, -6, -6, 4, -2, 4, -12, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.1-c";
N := (-4*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 8, 2, -2, 8, -4, -8, 10, -6, 6, -4, -2, 4, -12, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.1-d";
N := (-4*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -4, -6, -6, -4, 4, -8, -6, 2, 2, 8, -2, -12, 12, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.3-a";
N := (-10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 6, -6, -6, 2, 8, 0, -10, 6, 6, 6, 2, -12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.3-b";
N := (-10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 2, 6, -2, -8, 0, -10, -10, -6, 10, -6, 4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.3-c";
N := (-10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 6, 2, 2, -6, -8, 0, 6, -2, -10, -10, 10, -12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.3-d";
N := (-10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -6, 2, -2, 6, -8, 0, 6, -2, 10, 10, 10, -12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.3-e";
N := (-10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 2, -6, 2, -8, 0, -10, -10, 6, -10, -6, 4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.3-f";
N := (-10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, -6, 6, -2, 8, 0, -10, 6, -6, -6, 2, -12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.5-a";
N := (-5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, -2, 6, 6, -4, -8, -2, 10, 10, 6, 6, -8, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.5-b";
N := (-5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, -2, -6, -6, -4, -8, -2, 10, -10, -6, 6, -8, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.2-a";
N := (-4*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 4, 2, -6, 4, 6, -8, 4, 2, -6, -8, -2, -2, 12, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.2-b";
N := (-4*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -2, 2, -8, 2, -8, -4, -6, 10, 4, -6, -2, -12, 4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.2-c";
N := (-4*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 2, 2, 8, -2, -8, -4, -6, 10, -4, 6, -2, -12, 4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.2-d";
N := (-4*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -4, -2, -6, -4, -6, -8, 4, 2, -6, 8, 2, -2, 12, -12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.4-a";
N := (-10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 6, -6, 2, -6, 0, 8, 6, -10, 6, 6, 2, -12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.4-b";
N := (-10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, 2, -2, 6, 0, -8, -10, -10, 10, -6, -6, 4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.4-c";
N := (-10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -2, 2, -6, 2, 0, -8, -2, 6, -10, -10, 10, -4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.4-d";
N := (-10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 2, 2, 6, -2, 0, -8, -2, 6, 10, 10, 10, -4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.4-e";
N := (-10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, 2, 2, -6, 0, -8, -10, -10, -10, 6, -6, 4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.4-f";
N := (-10*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, -6, -2, 6, 0, 8, 6, -10, -6, -6, 2, -12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.6-a";
N := (-5*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, -2, 6, 6, -8, -4, 10, -2, 6, 10, 6, -4, -8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 96.6-b";
N := (-5*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, -2, -6, -6, -8, -4, 10, -2, -6, -10, 6, -4, -8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-a";
N := (-7*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 0, 4, 2, 6, -2, -2, -6, 10, -6, -8, 12, -16, 0, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.1-b";
N := (-7*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 0, -4, 2, -6, 2, -2, -6, 10, -6, 8, -12, -16, 0, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.2-a";
N := (-7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 4, 0, 2, -2, 6, -6, -2, -6, 10, 12, -8, 0, -16, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 98.2-b";
N := (-7*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -4, 0, 2, 2, -6, -6, -2, -6, 10, -12, 8, 0, -16, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.1-a";
N := (-12*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -2, 6, 6, 6, 4, 4, -6, -6, 10, 10, -10, 8, 8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.1-b";
N := (-12*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, 2, 6, -6, -6, 4, 4, -6, -6, -10, -10, -10, 8, 8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-a";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 6, 0, 0, -4, -4, 2, 2, 12, -12, 14, 14, 14, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-b";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 3, 9, -9, 5, 5, 11, 11, 6, -6, 5, -4, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-c";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -1, 1, 5, -5, 1, 1, -3, -3, 2, -2, -11, 4, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-d";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 1, -1, -5, 5, 1, 1, -3, -3, -2, 2, -11, 4, 4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-e";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, -3, -9, 9, 5, 5, 11, 11, -6, 6, 5, -4, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-f";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, -6, 0, 0, -4, -4, 2, 2, -12, 12, 14, 14, 14, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.1-a";
N := (w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 2, -6, 2, 0, 0, 6, -2, 6, -2, 2, 4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.1-b";
N := (w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, 8, 0, 1, 3, 3, 0, 4, 3, 5, -1, -2, -2, 5, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.1-c";
N := (w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 1, 8, 0, -1, 3, 3, 0, 4, -3, -5, -1, -2, -2, -5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.1-d";
N := (w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 2, 6, -2, 0, 0, 6, -2, -6, 2, 2, 4, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.2-a";
N := (-7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, -6, -6, 6, 8, -4, 10, 10, -10, 2, 6, 12, -8, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.2-b";
N := (-7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -6, -6, 0, -10, 2, -8, -2, 4, 10, 6, -6, 4, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.2-c";
N := (-7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -6, 6, 0, -10, 2, -8, -2, -4, -10, 6, -6, 4, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.2-d";
N := (-7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, -6, 6, -6, 8, -4, 10, 10, 10, -2, 6, 12, -8, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.4-a";
N := (w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 2, 2, -6, 0, 0, -2, 6, -2, 6, 2, 4, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.4-b";
N := (w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, 8, 1, 0, 3, 3, 4, 0, 5, 3, -1, -2, -2, -14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.4-c";
N := (w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 1, 8, -1, 0, 3, 3, 4, 0, -5, -3, -1, -2, -2, 14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.4-d";
N := (w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 2, -2, 6, 0, 0, -2, 6, 2, -6, 2, 4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.3-a";
N := (7*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, -6, 6, -6, -4, 8, 10, 10, 2, -10, 6, -8, 12, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.3-b";
N := (7*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -6, 0, -6, 2, -10, -2, -8, 10, 4, 6, 4, -6, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.3-c";
N := (7*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -6, 0, 6, 2, -10, -2, -8, -10, -4, 6, 4, -6, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 102.3-d";
N := (7*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, -6, -6, 6, -4, 8, 10, 10, -2, 10, 6, -8, 12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-a";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, -4, -6, 3, -1, 8, 5, 5, 9, 0, -4, 2, -7, 0, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-b";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -3, -4, -3, 6, 8, -1, 5, 5, 0, -9, -4, -7, 2, -9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-c";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, 8, 6, 3, 5, -4, 11, -7, -3, 12, -4, 14, 5, 0, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-d";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 3, 8, -3, -6, -4, 5, -7, 11, -12, 3, -4, 5, 14, -9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-e";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -3, 8, 3, 6, -4, 5, -7, 11, 12, -3, -4, 5, 14, 9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-f";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, 8, -6, -3, 5, -4, 11, -7, 3, -12, -4, 14, 5, 0, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-g";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 3, -4, 3, -6, 8, -1, 5, 5, 0, 9, -4, -7, 2, 9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-h";
N := (-12*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, -4, 6, -3, -1, 8, 5, 5, -9, 0, -4, 2, -7, 0, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-a";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 7, 0, -8, -10, -6, 1, -6, -6, -4, 5, 10, -4, 3, -2, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-b";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -7, 0, -8, 10, 6, 1, -6, -6, -4, -5, -10, -4, 3, -2, -6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-a";
N := (-3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 7, -8, -6, -10, -6, 1, -4, -6, 10, 5, -4, -2, 3, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-b";
N := (-3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -7, -8, 6, 10, -6, 1, -4, -6, -10, -5, -4, -2, 3, 16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 111.1-a";
N := (-2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -3, 5, -3, 8, 0, -10, -4, -2, -9, -4, -6, -5, -4, -8, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 111.1-b";
N := (-2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 3, -5, -3, -8, 0, -10, -4, -2, 9, 4, -6, -5, -4, 8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 111.2-a";
N := (2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, 5, -3, -3, 0, 8, -4, -10, -2, -4, -9, -6, -4, -5, -11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 111.2-b";
N := (2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -5, 3, -3, 0, -8, -4, -10, -2, 4, 9, -6, -4, -5, 11, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-a";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 0, -4, 0, 8, -10, 2, 8, -6, 6, -10, 8, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-b";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -3, 6, -4, 6, 2, 11, -4, -10, 12, -3, -13, 11, -10, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-c";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, 2, -4, -10, 2, 7, 8, -2, 8, 3, 5, 3, -2, 1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-d";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, -2, 2, 2, 0, 0, -2, -2, -2, -6, 6, -12, 4, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-e";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -4, -4, 2, -4, -8, 2, -2, 2, -6, -4, -12, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-f";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, -2, -4, 10, 2, 7, 8, -2, -8, -3, 5, 3, -2, -1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-g";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 2, 2, -2, 0, 0, -2, -2, 2, 6, 6, -12, 4, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-h";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 4, -4, -2, -4, -8, 2, -2, -2, 6, -4, -12, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-i";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 3, -6, -4, -6, 2, 11, -4, -10, -12, 3, -13, 11, -10, 9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.1-j";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 0, -4, 0, 8, -10, 2, 8, 6, -6, -10, 8, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.3-a";
N := (-9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, 4, -6, 7, 4, -3, 5, 7, -3, 2, 10, -2, 13, 7, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.3-b";
N := (-9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -4, 6, 7, -4, -3, 5, 7, -3, -2, -10, -2, 13, 7, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-a";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, -4, 0, -10, 8, 8, 2, 6, -6, -10, -4, 8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-b";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 6, -3, -4, 6, 11, 2, -10, -4, -3, 12, -13, -10, 11, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-c";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -3, -4, -10, 7, 2, -2, 8, 3, 8, 5, -2, 3, -4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-d";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, -2, 2, 2, 0, 0, -2, -2, -6, -2, 6, 4, -12, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-e";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 0, -4, 2, -8, -4, -2, 2, -6, 2, -4, 4, -12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-f";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 3, -4, 10, 7, 2, -2, 8, -3, -8, 5, -2, 3, 4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-g";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 2, 2, -2, 0, 0, -2, -2, 6, 2, 6, 4, -12, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-h";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, 0, -4, -2, -8, -4, -2, 2, 6, -2, -4, 4, -12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-i";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -6, 3, -4, -6, 11, 2, -10, -4, 3, -12, -13, -10, 11, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.2-j";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 6, -4, 0, -10, 8, 8, 2, -6, 6, -10, -4, 8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.6-a";
N := (9*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, -6, 4, 7, 4, 5, -3, -3, 7, 10, 2, -2, 7, 13, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 116.6-b";
N := (9*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 6, -4, 7, -4, 5, -3, -3, 7, -10, -2, -2, 7, 13, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-a";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, -5, -5, -9, 9, 9, -2, -2, -3, -3, -5, -5, -10, 2, 2, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-b";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -1, 0, 0, -1, 0, 0, -5, -5, 7, 7, 0, 0, -14, 13, 13, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-c";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, 5, -5, -9, 9, -9, 2, 2, 3, 3, -5, 5, 10, -2, -2, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-d";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -6, -6, 2, 2, 2, -2, -2, 8, 8, -6, -6, 12, 2, 2, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-e";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 1, 2, -2, -9, 0, 0, -7, -7, -3, -3, -8, 8, 10, 7, 7, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-f";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, 6, -6, 2, 2, -2, 2, 2, -8, -8, -6, 6, -12, -2, -2, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-g";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 1, -2, 2, -9, 0, 0, -7, -7, -3, -3, 8, -8, 10, 7, 7, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-h";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 6, 6, 2, -2, -2, -2, -2, 8, 8, 6, 6, 12, 2, 2, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-i";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -6, 6, 2, -2, 2, 2, 2, -8, -8, 6, -6, -12, -2, -2, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-j";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, 5, 5, -9, -9, -9, -2, -2, -3, -3, 5, 5, -10, 2, 2, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-k";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -5, 5, -9, -9, 9, 2, 2, 3, 3, 5, -5, 10, -2, -2, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 124.1-a";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 0, -2, -2, -8, -8, -6, -12, 10, 6, 4, -12, 4, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 124.1-b";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 0, -2, 2, 8, -8, -6, -12, -10, -6, 4, -12, 4, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 124.4-a";
N := (-11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, -1, 0, 3, -6, -4, -3, -4, -3, -5, 3, -2, -2, -3, -9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 124.4-b";
N := (-11*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, 1, 0, 3, 6, 4, -3, -4, -3, 5, -3, -2, -2, -3, 9, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 124.2-a";
N := (-4*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -2, -2, -8, -2, -8, -12, -6, 6, 10, 4, 4, -12, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 124.2-b";
N := (-4*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 2, -2, 8, 2, -8, -12, -6, -6, -10, 4, 4, -12, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 124.5-a";
N := (-11*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 0, -1, 3, -4, -6, -3, -3, -4, 3, -5, -2, -3, -2, 9, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 124.5-b";
N := (-11*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, 0, 1, 3, 4, 6, -3, -3, -4, -3, 5, -2, -3, -2, -9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-a";
N := (-8*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 2, 6, 2, 2, 0, 0, -2, -2, 6, 6, -10, -4, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.1-b";
N := (-8*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 6, -2, -2, 0, 0, -2, -2, -6, -6, -10, -4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.3-a";
N := (-4*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -4, -1, 6, 10, -5, 3, -7, 5, 4, -10, 10, -3, -7, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.3-b";
N := (-4*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 4, -1, -6, -10, -5, 3, -7, 5, -4, 10, 10, -3, -7, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-a";
N := (-6*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, 4, -2, 10, 4, 4, -6, -10, 10, -6, 8, 12, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-b";
N := (-6*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 6, 2, -6, 6, -8, -8, -2, 2, 6, 6, 2, 4, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-c";
N := (-6*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 0, 0, -8, -6, 6, -4, 4, 2, -2, 6, 6, 4, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-d";
N := (-6*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, 4, -8, -6, 2, 4, 0, 2, -2, -2, -10, -4, -12, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-e";
N := (-6*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -4, -8, 6, -2, 4, 0, 2, -2, 2, 10, -4, -12, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-f";
N := (-6*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -6, 2, 6, -6, -8, -8, -2, 2, -6, -6, 2, 4, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-g";
N := (-6*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 0, 0, -8, 6, -6, -4, 4, 2, -2, -6, -6, 4, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.5-h";
N := (-6*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, 4, 2, -10, 4, 4, -6, -10, -10, 6, 8, 12, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.7-a";
N := (-11*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 0, 4, -2, 8, 6, 6, 0, 2, -10, 10, 6, 2, 0, 16, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.7-b";
N := (-11*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, -4, -2, -8, -6, 6, 0, 2, -10, -10, -6, 2, 0, 16, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.7-c";
N := (-11*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, -4, 2, -8, 6, -6, 0, -2, -10, 10, 6, -2, 0, 16, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.7-d";
N := (-11*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 0, 4, 2, 8, -6, -6, 0, -2, -10, -10, -6, -2, 0, 16, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.2-a";
N := (-8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 2, 6, 2, 2, 0, 0, -2, -2, 6, 6, -10, 4, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.2-b";
N := (-8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 6, -2, -2, 0, 0, -2, -2, -6, -6, -10, 4, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.4-a";
N := (-4*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, -2, -1, 10, 6, 3, -5, 5, -7, -10, 4, 10, -7, -3, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.4-b";
N := (-4*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, 2, -1, -10, -6, 3, -5, 5, -7, 10, -4, 10, -7, -3, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-a";
N := (-6*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, 4, 10, -2, 4, 4, -10, -6, -6, 10, 8, 4, 12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-b";
N := (-6*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 6, 2, 6, -6, -8, -8, 2, -2, 6, 6, 2, -4, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-c";
N := (-6*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 0, 0, -8, 6, -6, 4, -4, -2, 2, 6, 6, 4, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-d";
N := (-6*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, -4, -8, 2, -6, 0, 4, -2, 2, -10, -2, -4, -4, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-e";
N := (-6*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 4, -8, -2, 6, 0, 4, -2, 2, 10, 2, -4, -4, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-f";
N := (-6*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -6, 2, -6, 6, -8, -8, 2, -2, -6, -6, 2, -4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-g";
N := (-6*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 0, 0, -8, -6, 6, 4, -4, -2, 2, -6, -6, 4, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.6-h";
N := (-6*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, 4, -10, 2, 4, 4, -10, -6, 6, -10, 8, 4, 12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.8-a";
N := (-11*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 4, 0, -2, 6, 8, 0, 6, -10, 2, 6, 10, 2, 16, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.8-b";
N := (-11*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -4, 0, -2, -6, -8, 0, 6, -10, 2, -6, -10, 2, 16, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.8-c";
N := (-11*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -4, 0, 2, 6, -8, 0, -6, -10, -2, 6, 10, -2, 16, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 128.8-d";
N := (-11*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 4, 0, 2, -6, 8, 0, -6, -10, -2, -6, -10, -2, 16, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 131.1-a";
N := (-4*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, 2, -4, 0, 7, 0, 10, -5, -7, 3, 1, 2, 2, 10, 11, 5, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 131.1-b";
N := (-4*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -2, 4, 0, 7, 0, -10, -5, -7, 3, 1, -2, -2, 10, 11, 5, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 131.2-a";
N := (4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, 2, 0, -4, 7, 10, 0, -7, -5, 1, 3, 2, 2, 10, 5, 11, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 131.2-b";
N := (4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -2, 0, 4, 7, -10, 0, -7, -5, 1, 3, -2, -2, 10, 5, 11, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-a";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, -10, 6, 6, 8, 8, -10, -10, 6, 6, -10, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-b";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, 10, 10, -8, -8, -2, -2, 2, 2, -10, -12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-c";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 6, 2, 8, -8, -6, -2, 2, 10, -6, 12, -8, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-d";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, 6, 6, 0, 0, 6, 6, -6, -6, 2, 4, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-e";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -6, -2, 8, -8, -6, -2, -2, -10, -6, 12, -8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-f";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 2, 6, -8, 8, -2, -6, 10, 2, -6, -8, 12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-g";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -6, -6, 0, 0, 6, 6, 6, 6, 2, 4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-h";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -2, -6, -8, 8, -2, -6, -10, -2, -6, -8, 12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-i";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, -10, -6, -6, 8, 8, -10, -10, -6, -6, -10, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-j";
N := (-4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, -10, -10, -8, -8, -2, -2, -2, -2, -10, -12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.1-a";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, -7, -6, 0, 5, -4, -1, -1, 0, -3, -10, 2, -13, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.1-b";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, 8, -6, -4, 0, 8, 8, 6, -8, 10, -6, 4, -4, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.1-c";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, -7, 6, 0, 5, -4, -1, -1, 0, 3, -10, 2, -13, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.1-d";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, 8, 6, 4, 0, 8, 8, 6, 8, -10, -6, 4, -4, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.5-a";
N := (-5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 6, 6, -7, 10, 0, -1, -9, 7, -7, 10, 6, -6, -3, -1, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.5-b";
N := (-5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, -6, -7, -10, 0, -1, -9, 7, -7, -10, -6, -6, -3, -1, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.6-a";
N := (-3*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -6, -3, 2, 8, -3, 5, 7, -3, -2, 2, -6, -5, -3, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.6-b";
N := (-3*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 6, -3, -2, -8, -3, 5, 7, -3, 2, -2, -6, -5, -3, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.4-a";
N := (2*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, -7, 0, -6, -4, 5, -1, -1, -3, 0, -10, -13, 2, 9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.4-b";
N := (2*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, 8, -4, -6, 8, 0, 6, 8, 10, -8, -6, -4, 4, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.4-c";
N := (2*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, -7, 0, 6, -4, 5, -1, -1, 3, 0, -10, -13, 2, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.4-d";
N := (2*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, 8, 4, 6, 8, 0, 6, 8, -10, 8, -6, -4, 4, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.8-a";
N := (-5*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 6, 6, -7, 0, 10, -9, -1, -7, 7, 6, 10, -6, -1, -3, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.8-b";
N := (-5*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, -6, -7, 0, -10, -9, -1, -7, 7, -6, -10, -6, -1, -3, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.7-a";
N := (3*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -6, -3, 8, 2, 5, -3, -3, 7, 2, -2, -6, -3, -5, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 136.7-b";
N := (3*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 6, -3, -8, -2, 5, -3, -3, 7, -2, 2, -6, -3, -5, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-a";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, 6, 8, -6, -6, 8, 8, -4, -4, -6, -6, -4, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-b";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -10, 0, 0, -4, -4, -10, -10, 0, 0, 2, -16, -16, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-c";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, -6, 8, 6, 6, 8, 8, -4, -4, 6, 6, -4, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-a";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 6, 6, -2, -6, 0, 8, -6, 10, -6, 6, -2, 12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-b";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, -2, 2, 6, 0, -8, 10, 10, -10, -6, 6, -4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-c";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, -8, 8, 10, 2, 6, -2, -2, 6, -2, 0, -8, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-d";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 2, 8, -8, 10, 2, 6, -2, 2, -6, -2, 0, -8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-e";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, -2, -2, -6, 0, -8, 10, 10, 10, 6, 6, -4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-f";
N := (-6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -6, 6, 2, 6, 0, 8, -6, 10, 6, -6, -2, 12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.4-a";
N := (-9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 1, 0, 0, 5, -5, 7, 7, 0, 0, -14, -13, 13, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.4-b";
N := (-9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, -6, -2, 2, -2, -8, -8, 2, -6, 6, -6, 6, -12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.4-c";
N := (-9*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 6, -2, -2, 2, -8, -8, 2, -6, -6, 6, 6, -12, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-a";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -6, 6, -6, -2, 8, 0, 10, -6, 6, -6, -2, -12, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-b";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, -2, 6, 2, -8, 0, 10, 10, -6, -10, 6, 4, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-c";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, 8, -8, 2, 10, -2, 6, 6, -2, -2, -8, 0, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-d";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 2, -8, 8, 2, 10, -2, 6, -6, 2, -2, -8, 0, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-e";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, -2, -6, -2, -8, 0, 10, 10, 6, 10, 6, 4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-f";
N := (6*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 6, 6, 6, 2, 8, 0, 10, -6, -6, 6, -2, -12, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.5-a";
N := (9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 1, 0, 0, -5, 5, 7, 7, 0, 0, -14, 13, -13, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.5-b";
N := (9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -2, -2, -2, 2, -8, -8, -6, 2, -6, 6, 6, 4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.5-c";
N := (9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 2, -2, 2, -2, -8, -8, -6, 2, 6, -6, 6, 4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-a";
N := (-14*w + 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, -6, -6, -6, -2, -2, 0, 0, 6, 6, 2, 2, 4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-b";
N := (-14*w + 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 6, 6, -6, 2, 2, 0, 0, 6, 6, -2, -2, 4, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.1-a";
N := (8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, -4, -6, -6, 4, -8, -10, -6, -6, -2, -4, 8, -8, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.1-b";
N := (8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 5, 8, -5, -6, -9, -10, -2, -4, -3, 0, -10, 5, -13, -11, -7, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.1-c";
N := (8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -8, 4, 6, -6, -4, 8, 2, 2, 10, 4, -4, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.1-d";
N := (8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 0, 5, -2, 1, 6, 6, -4, -3, 4, -6, 1, 1, -9, -7, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.1-e";
N := (8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 0, -5, -2, -1, -6, 6, -4, -3, -4, 6, 1, 1, -9, 7, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.1-f";
N := (8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 8, 4, -6, 6, -4, 8, 2, -2, -10, 4, -4, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.1-g";
N := (8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 4, -6, 6, -4, -8, -10, -6, 6, 2, -4, 8, -8, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.1-h";
N := (8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, -8, 5, -6, 9, 10, -2, -4, -3, 0, 10, 5, -13, -11, 7, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.3-a";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, -2, -3, 8, 5, -8, 4, 0, 1, 10, 2, 3, -9, -3, -15, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.3-b";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -3, 2, 3, 8, -5, 8, 4, 0, 1, -10, -2, 3, -9, -3, 15, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.2-a";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, -2, -6, 4, -6, -10, -8, -6, -2, -6, -4, -8, 8, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.2-b";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 5, -5, 8, -6, -10, -9, -4, -2, -3, -10, 0, 5, -11, -13, 11, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.2-c";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -8, 4, 4, -6, 6, 8, -4, 2, 10, 2, 4, 12, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.2-d";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 5, 0, -2, 6, 1, -4, 6, -3, -6, 4, 1, -9, 1, 3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.2-e";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -5, 0, -2, -6, -1, -4, 6, -3, 6, -4, 1, -9, 1, -3, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.2-f";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 8, -4, 4, 6, -6, 8, -4, 2, -10, -2, 4, 12, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.2-g";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 2, -6, -4, 6, -10, -8, -6, 2, 6, -4, -8, 8, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.2-h";
N := (8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, 5, -8, -6, 10, 9, -4, -2, -3, 10, 0, 5, -11, -13, -11, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.6-a";
N := (w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, -3, -2, 8, -8, 5, 0, 4, 1, 2, 10, 3, -3, -9, 11, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 148.6-b";
N := (w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -3, 3, 2, 8, 8, -5, 0, 4, 1, -2, -10, 3, -3, -9, -11, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-a";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -4, -5, 9, 0, -5, -2, 7, -3, -10, -6, -8, -6, 11, 17, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-b";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, -3, -9, -6, 5, -4, -7, -7, 6, 0, -4, 14, -13, -3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-c";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, -2, -10, 4, -8, 10, 2, -6, 10, -2, -4, -8, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-d";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, 2, 10, 4, -8, 10, 2, 6, -10, -2, -4, -8, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-e";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, 3, 9, 6, 5, -4, -7, -7, -6, 0, -4, 14, -13, 3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.1-f";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 4, 5, -9, 0, -5, -2, 7, -3, 10, 6, -8, -6, 11, -17, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-a";
N := (-5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -5, -4, 0, 9, -2, -5, -3, 7, -6, -10, -8, 11, -6, 0, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-b";
N := (-5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -3, -6, -6, -9, -4, 5, -7, -7, 0, 6, -4, -13, 14, -12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-c";
N := (-5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, -10, -2, -8, 4, 2, 10, 10, -6, -2, -8, -4, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-d";
N := (-5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, 10, 2, -8, 4, 2, 10, -10, 6, -2, -8, -4, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-e";
N := (-5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, 6, 6, 9, -4, 5, -7, -7, 0, -6, -4, -13, 14, 12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 150.2-f";
N := (-5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 5, 4, 0, -9, -2, -5, -3, 7, 6, 10, -8, 11, -6, 0, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.1-a";
N := (-6*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 2, 6, 2, -2, 0, 8, -6, -6, 6, -6, -2, 12, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.1-b";
N := (-6*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -2, 6, -2, 2, 0, 8, -6, -6, -6, 6, -2, 12, -4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.2-a";
N := (6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 2, 6, -2, 2, 8, 0, -6, -6, -6, 6, -2, -4, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 153.2-b";
N := (6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, -2, 6, 2, -2, 8, 0, -6, -6, 6, -6, -2, -4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-a";
N := (-9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, -6, -1, -6, 0, 5, 5, 2, -7, 0, 6, 5, 5, -4, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-b";
N := (-9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, 6, 8, 6, -9, 5, -4, -7, 2, 0, 12, -4, -13, 5, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-c";
N := (-9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, -6, -2, -8, -3, -5, 0, 3, 8, -8, 2, -4, 9, -11, 6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-d";
N := (-9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 6, -2, 8, 3, -5, 0, 3, 8, 8, -2, -4, 9, -11, -6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-e";
N := (-9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -3, -6, 8, -6, 9, 5, -4, -7, 2, 0, -12, -4, -13, 5, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.1-f";
N := (-9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 6, -1, 6, 0, 5, 5, 2, -7, 0, -6, 5, 5, -4, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.2-a";
N := (-9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 6, -1, 0, -6, 5, 5, -7, 2, 6, 0, 5, -4, 5, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.2-b";
N := (-9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, 3, 8, -9, 6, -4, 5, 2, -7, 12, 0, -4, 5, -13, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.2-c";
N := (-9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -6, -1, -2, -3, -8, 0, -5, 8, 3, 2, -8, -4, -11, 9, -14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.2-d";
N := (-9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 6, 1, -2, 3, 8, 0, -5, 8, 3, -2, 8, -4, -11, 9, 14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.2-e";
N := (-9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, -3, 8, 9, -6, -4, 5, 2, -7, -12, 0, -4, 5, -13, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 162.2-f";
N := (-9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, -6, -1, 0, 6, 5, 5, -7, 2, -6, 0, 5, -4, 5, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.1-a";
N := (-12*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, -4, -6, 6, 8, 2, -10, 8, -6, -4, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.1-b";
N := (-12*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 5, -3, 4, -2, -5, 2, 4, 4, -4, 3, 7, -6, 5, 5, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.1-c";
N := (-12*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, 3, -4, -2, 5, -2, 4, 4, -4, 3, -7, -6, 5, 5, 7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.1-d";
N := (-12*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -2, 4, 4, 2, 10, -8, 8, -6, 10, 12, -4, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.1-e";
N := (-12*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 0, 2, 9, 6, -4, -4, -4, -1, -3, 2, 5, 5, 3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.1-f";
N := (-12*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 6, -4, 6, -6, 8, 2, -10, 8, 6, -4, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.1-g";
N := (-12*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 2, 4, -4, -2, 10, -8, 8, -6, -10, 12, -4, -4, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.1-h";
N := (-12*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -3, 0, 2, -9, -6, -4, -4, -4, -1, 3, 2, 5, 5, -3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.4-a";
N := (-7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 6, -6, -1, -6, 6, -1, -7, 11, -1, 12, 2, 5, 5, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.4-b";
N := (-7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -6, 6, -1, 6, -6, -1, -7, 11, -1, -12, 2, 5, 5, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.2-a";
N := (12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 0, -4, 6, -6, 2, 8, 8, -10, -6, -4, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.2-b";
N := (12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 5, 4, -3, -2, 2, -5, 4, 4, 3, -4, 7, -6, 5, 5, 0, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.2-c";
N := (12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, -4, 3, -2, -2, 5, 4, 4, 3, -4, -7, -6, 5, 5, 0, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.2-d";
N := (12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 4, 2, 4, -8, 10, -6, 8, 10, 12, -4, -4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.2-e";
N := (12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 3, 2, 6, 9, -4, -4, -1, -4, -3, 2, 5, 5, 12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.2-f";
N := (12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 0, -4, -6, 6, 2, 8, 8, -10, 6, -4, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.2-g";
N := (12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, 4, -2, -4, -8, 10, -6, 8, -10, 12, -4, -4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.2-h";
N := (12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -3, 2, -6, -9, -4, -4, -1, -4, 3, 2, 5, 5, -12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.5-a";
N := (-7*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -6, 6, -1, 6, -6, -7, -1, -1, 11, 12, 2, 5, 5, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.5-b";
N := (-7*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 6, -6, -1, -6, 6, -7, -1, -1, 11, -12, 2, 5, 5, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 166.2-a";
N := (-3*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 6, 2, -4, 6, -4, -4, 2, 2, 4, 6, 10, 10, 4, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 166.2-b";
N := (-3*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -6, -2, -4, -6, 4, -4, 2, 2, 4, -6, -10, 10, 4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 166.3-a";
N := (3*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 2, 6, -4, -4, 6, 2, -4, 4, 2, 10, 6, 10, 8, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 166.3-b";
N := (3*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -2, -6, -4, 4, -6, 2, -4, 4, 2, -10, -6, 10, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.1-a";
N := (w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 1, -8, 1, -9, -2, 2, 4, 11, 2, 1, -6, -1, 11, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.1-b";
N := (w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 2, 8, -6, 4, 4, -4, 6, -4, -4, 10, 2, -10, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.1-c";
N := (w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -6, -2, 8, 6, 4, 4, -4, 6, 4, 4, 10, 2, -10, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.1-d";
N := (w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -1, -8, -1, -9, -2, 2, 4, -11, -2, 1, -6, -1, -11, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.2-a";
N := (-5*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 6, -7, -9, -10, -10, -4, -10, 3, -9, -4, 2, 8, 9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.2-b";
N := (-5*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, -2, -5, 5, 10, -6, -8, 2, -5, 7, -8, -10, -12, 17, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.2-c";
N := (-5*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, 6, -2, -2, 0, -4, -2, 6, 2, 10, 10, -8, 16, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.2-d";
N := (-5*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -6, -2, 2, 0, -4, -2, 6, -2, -10, 10, -8, 16, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.2-e";
N := (-5*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, 2, -5, -5, 10, -6, -8, 2, 5, -7, -8, -10, -12, -17, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.2-f";
N := (-5*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -6, -7, 9, -10, -10, -4, -10, -3, 9, -4, 2, 8, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.4-a";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, 2, -8, 1, -2, -9, 4, 2, 2, 11, 1, -1, -6, -14, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.4-b";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 6, 8, -6, 4, 4, 6, -4, -4, -4, 10, -10, 2, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.4-c";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -6, 8, 6, 4, 4, 6, -4, 4, 4, 10, -10, 2, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.4-d";
N := (w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, -2, -8, -1, -2, -9, 4, 2, -2, -11, 1, -1, -6, 14, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.3-a";
N := (5*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 6, -7, -9, -10, -10, -10, -4, -9, 3, -4, 8, 2, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.3-b";
N := (5*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 2, -5, 5, -6, 10, 2, -8, 7, -5, -8, -12, -10, 4, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.3-c";
N := (5*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 6, -2, -2, -2, -4, 0, 6, -2, 10, 2, 10, 16, -8, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.3-d";
N := (5*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, 2, -2, 2, -4, 0, 6, -2, -10, -2, 10, 16, -8, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.3-e";
N := (5*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, -2, -5, -5, -6, 10, 2, -8, -7, 5, -8, -12, -10, -4, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 174.3-f";
N := (5*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -6, -7, 9, -10, -10, -10, -4, 9, -3, -4, 8, 2, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.1-a";
N := (-16*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 6, -1, 0, 0, 5, 5, -1, -1, 0, 0, -10, -1, -1, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.1-b";
N := (-16*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -6, -1, 0, 0, 5, 5, -1, -1, 0, 0, -10, -1, -1, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.2-a";
N := (-6*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 6, 6, 2, 0, -6, -4, 4, -10, 10, -4, -8, -8, 4, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.2-b";
N := (-6*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -2, -2, -4, -2, 4, 0, 6, 6, 0, 4, -16, -12, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.2-c";
N := (-6*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, 10, 6, -4, 4, -10, -2, 6, 2, 2, 8, 8, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.2-d";
N := (-6*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, -2, 2, 4, -2, 4, 0, 6, -6, 0, 4, -16, -12, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.2-e";
N := (-6*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, -10, -6, -4, 4, -10, -2, -6, -2, 2, 8, 8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.2-f";
N := (-6*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -6, 6, -2, 0, -6, -4, 4, -10, -10, 4, -8, -8, 4, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.4-a";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 2, 3, -8, 8, -1, 3, -5, 7, 0, 8, 6, 13, -3, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.4-b";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -2, -6, -6, 6, 4, -4, 6, 6, -10, 10, 10, 8, -8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.4-c";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, 0, 3, -4, 4, -3, 1, 1, -3, 4, -8, -2, 7, 7, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.4-d";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -2, 3, 8, -8, -1, 3, -5, 7, 0, -8, 6, 13, -3, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.4-e";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 0, 3, 4, -4, -3, 1, 1, -3, -4, 8, -2, 7, 7, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.4-f";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 2, -6, 6, -6, 4, -4, 6, 6, 10, -10, 10, 8, -8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.4-g";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -8, 6, -4, -2, 2, -6, -2, -2, 0, -2, 6, -14, -6, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.4-h";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 8, 6, 4, 2, 2, -6, -2, -2, 0, 2, 6, -14, -6, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.3-a";
N := (6*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 6, 6, 0, 2, -4, -6, -10, 4, -4, 10, -8, 4, -8, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.3-b";
N := (6*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, -2, -4, -2, 4, -2, 6, 0, 0, 6, 4, -12, -16, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.3-c";
N := (6*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 6, 10, 4, -4, -2, -10, 2, 6, 2, 8, 8, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.3-d";
N := (6*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, -2, -2, 4, 2, 4, -2, 6, 0, 0, -6, 4, -12, -16, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.3-e";
N := (6*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, -6, -10, 4, -4, -2, -10, -2, -6, 2, 8, 8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.3-f";
N := (6*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -6, 6, 0, -2, -4, -6, -10, 4, 4, -10, -8, 4, -8, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.5-a";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 2, 3, 8, -8, 3, -1, 7, -5, 8, 0, 6, -3, 13, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.5-b";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, -6, 6, -6, -4, 4, 6, 6, 10, -10, 10, -8, 8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.5-c";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -4, 3, 4, -4, 1, -3, -3, 1, -8, 4, -2, 7, 7, -16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.5-d";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -2, 3, -8, 8, 3, -1, 7, -5, -8, 0, 6, -3, 13, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.5-e";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 4, 3, -4, 4, 1, -3, -3, 1, 8, -4, -2, 7, 7, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.5-f";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, -6, -6, 6, -4, 4, 6, 6, -10, 10, 10, -8, 8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.5-g";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -8, -2, 6, -2, -4, -6, 2, -2, -2, -2, 0, 6, -6, -14, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 176.5-h";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 8, 2, 6, 2, 4, -6, 2, -2, -2, 2, 0, 6, -6, -14, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.2-a";
N := (-5*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -2, -1, 3, -8, 6, 1, -3, 2, 11, -3, 12, -5, -4, 5, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.2-b";
N := (-5*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, -2, 2, 2, 2, 4, -2, 2, 6, -2, -10, -4, 4, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.2-c";
N := (-5*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, -3, -1, 0, -6, 5, -7, 2, -3, -9, -4, -13, -4, 15, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.2-d";
N := (-5*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 4, -5, 3, -8, -6, -5, 1, -8, -9, -5, -10, -5, 10, -17, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.2-e";
N := (-5*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -4, 5, 3, 8, 6, -5, 1, -8, 9, 5, -10, -5, 10, 17, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.2-f";
N := (-5*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, 3, -1, 0, 6, 5, -7, 2, 3, 9, -4, -13, -4, -15, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.2-g";
N := (-5*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, 2, 2, -2, -2, 4, -2, 2, -6, 2, -10, -4, 4, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.2-h";
N := (-5*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 2, 1, 3, 8, -6, 1, -3, 2, -11, 3, 12, -5, -4, -5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.3-a";
N := (-5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -1, -2, 3, 6, -8, 1, 2, -3, -3, 11, 12, -4, -5, 7, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.3-b";
N := (-5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 6, 2, 2, 2, 4, 2, -2, -2, 6, -10, 4, -4, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.3-c";
N := (-5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -3, -6, -1, -6, 0, 5, 2, -7, -9, -3, -4, -4, -13, -3, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.3-d";
N := (-5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -5, 4, 3, -6, -8, -5, -8, 1, -5, -9, -10, 10, -5, 9, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.3-e";
N := (-5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 5, -4, 3, 6, 8, -5, -8, 1, 5, 9, -10, 10, -5, -9, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.3-f";
N := (-5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, 6, -1, 6, 0, 5, 2, -7, 9, 3, -4, -4, -13, 3, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.3-g";
N := (-5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, -6, 2, -2, -2, 4, 2, -2, 2, -6, -10, 4, -4, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 186.3-h";
N := (-5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 1, 2, 3, -6, 8, 1, 2, -3, 3, -11, 12, -4, -5, -7, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 187.1-a";
N := (-6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, -6, -1, 0, 8, 3, 3, -9, 7, 0, 0, -10, -3, 5, -10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 187.1-b";
N := (-6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -6, 2, -6, 10, 0, 0, 6, 10, 6, -6, 2, 0, -4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 187.1-c";
N := (-6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 6, 2, 6, -10, 0, 0, 6, 10, -6, 6, 2, 0, -4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 187.1-d";
N := (-6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 3, 6, -1, 0, -8, 3, 3, -9, 7, 0, 0, -10, -3, 5, 10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 187.2-a";
N := (-6*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, -6, -1, 8, 0, 3, 3, 7, -9, 0, 0, -10, 5, -3, -2, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 187.2-b";
N := (-6*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -6, 2, 10, -6, 0, 0, 10, 6, -6, 6, 2, -4, 0, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 187.2-c";
N := (-6*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 6, 2, -10, 6, 0, 0, 10, 6, 6, -6, 2, -4, 0, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 187.2-d";
N := (-6*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 3, 6, -1, -8, 0, 3, 3, 7, -9, 0, 0, -10, 5, -3, 2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-a";
N := (-16*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, -10, 10, 0, 0, -10, -10, -6, 6, 10, 4, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-b";
N := (-16*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, -6, -2, 2, 8, 8, -2, -2, 10, -10, 10, 4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-c";
N := (-16*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, -6, -6, -6, 8, 8, 6, 6, 6, 6, -14, -4, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-d";
N := (-16*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 6, 2, -2, -4, -4, 10, 10, 2, -2, -2, 4, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-e";
N := (-16*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 6, -2, 2, -4, -4, 10, 10, -2, 2, -2, 4, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-f";
N := (-16*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -6, 6, 6, 8, 8, 6, 6, -6, -6, -14, -4, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-g";
N := (-16*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, -6, 2, -2, 8, 8, -2, -2, -10, 10, 10, 4, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-h";
N := (-16*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 10, -10, 0, 0, -10, -10, 6, -6, 10, 4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-a";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, 8, 6, 0, -4, -6, 2, 12, 6, -10, 12, -12, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-b";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, 2, -4, -6, 0, 4, 2, 2, 8, -6, 6, 4, 4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-c";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, 2, 4, 6, 0, 4, 2, 2, -8, 6, 6, 4, 4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-d";
N := (4*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 6, -6, -8, -6, 0, -4, -6, 2, -12, -6, -10, 12, -12, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.4-a";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 2, 2, 6, -6, -4, 8, 6, -6, -6, -6, -6, 4, 0, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.4-b";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -2, -2, 6, 2, -4, -8, -2, -10, -2, -2, -10, 4, -12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.4-c";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, 2, 2, -6, 0, 4, 2, 2, -2, 2, 10, -4, 12, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.4-d";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 6, -2, -2, 0, 4, 2, 6, 6, -6, -2, -4, 8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.4-e";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 6, 2, 2, 0, 4, 2, 6, -6, 6, -2, -4, 8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.4-f";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, 2, -2, 6, 0, 4, 2, 2, 2, -2, 10, -4, 12, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.4-g";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, -2, -6, -2, -4, -8, -2, -10, 2, 2, -10, 4, -12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.4-h";
N := (2*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -2, 2, -6, 6, -4, 8, 6, -6, 6, 6, -6, 4, 0, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.6-a";
N := (11*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, 2, -10, -10, -6, -8, 0, -6, -10, 6, -2, -2, 4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.6-b";
N := (11*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, -2, -10, 10, 6, -8, 0, -6, -10, -6, 2, -2, 4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.6-c";
N := (11*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -2, 2, -6, 6, 8, -4, -10, -2, 6, 10, -6, -4, -8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.6-d";
N := (11*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 2, 2, 6, -6, 8, -4, -10, -2, -6, -10, -6, -4, -8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.6-e";
N := (11*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, 2, -2, 6, 2, 0, 8, 2, 6, -10, -10, -10, 4, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.6-f";
N := (11*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 6, -2, -2, -6, -2, 0, 8, 2, 6, 10, 10, -10, 4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.6-g";
N := (11*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -6, -2, -2, 2, 8, 8, 2, 6, 6, 6, 6, -12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.6-h";
N := (11*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, 6, -2, 2, -2, 8, 8, 2, 6, -6, -6, 6, -12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.3-a";
N := (-4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, -6, 6, 8, -4, 0, 2, -6, 6, 12, -10, -12, 12, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.3-b";
N := (-4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 2, -6, -4, 4, 0, 2, 2, -6, 8, 6, 4, 4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.3-c";
N := (-4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 2, 6, 4, 4, 0, 2, 2, 6, -8, 6, 4, 4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.3-d";
N := (-4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 0, -6, -6, -8, -4, 0, 2, -6, -6, -12, -10, -12, 12, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.5-a";
N := (-2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 6, 2, -6, 6, 8, -4, -6, 6, -6, -6, -6, 0, 4, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.5-b";
N := (-2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, -2, 2, 6, -8, -4, -10, -2, -2, -2, -10, -12, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.5-c";
N := (-2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, 2, -6, 2, 4, 0, 2, 2, 2, -2, 10, 12, -4, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.5-d";
N := (-2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 6, -2, -2, 4, 0, 6, 2, -6, 6, -2, 8, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.5-e";
N := (-2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 6, 2, 2, 4, 0, 6, 2, 6, -6, -2, 8, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.5-f";
N := (-2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, 2, 6, -2, 4, 0, 2, 2, -2, 2, 10, 12, -4, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.5-g";
N := (-2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, -2, -2, -6, -8, -4, -10, -2, 2, 2, -10, -12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.5-h";
N := (-2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -6, 2, 6, -6, 8, -4, -6, 6, 6, 6, -6, 0, 4, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.7-a";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, -6, -10, -6, -10, 0, -8, -10, -6, -2, 6, -2, 4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.7-b";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, 6, -10, 6, 10, 0, -8, -10, -6, 2, -6, -2, 4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.7-c";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -2, 2, 6, -6, -4, 8, -2, -10, 10, 6, -6, -8, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.7-d";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 2, 2, -6, 6, -4, 8, -2, -10, -10, -6, -6, -8, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.7-e";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -6, -2, 2, 6, 8, 0, 6, 2, -10, -10, -10, 12, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.7-f";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, 6, -2, -2, -6, 8, 0, 6, 2, 10, 10, -10, 12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.7-g";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, 2, -2, 2, -2, 8, 8, 6, 2, 6, 6, 6, -4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.7-h";
N := (-11*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 6, -2, -2, -2, 2, 8, 8, 6, 2, -6, -6, 6, -4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 194.2-a";
N := (-7*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, 1, 8, 3, -2, 6, -2, -7, -7, 7, -11, -6, 10, 7, 12, 2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 194.2-b";
N := (-7*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -1, -8, 3, 2, -6, -2, -7, -7, 7, 11, 6, 10, 7, 12, -2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 194.3-a";
N := (-7*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, 8, 1, 3, 6, -2, -7, -2, 7, -7, -6, -11, 10, 12, 7, 9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 194.3-b";
N := (-7*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -8, -1, 3, -6, 2, -7, -2, 7, -7, 6, 11, 10, 12, 7, -9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-a";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, -10, 6, 6, -4, -4, 2, 2, -6, -6, -4, -4, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-b";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, -10, -6, -6, -4, -4, 2, 2, 6, 6, -4, -4, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.1-a";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -7, -5, -4, 5, -9, 3, -6, -3, 5, -9, -8, 8, -4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.1-b";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -5, -3, 4, 1, -7, -9, -10, -7, 9, -5, 6, -14, 12, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.1-c";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 8, -2, -6, -2, -2, -4, 0, -4, 2, 0, 10, -12, -14, -12, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.1-d";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -8, 2, -6, 2, 2, -4, 0, -4, 2, 0, -10, -12, -14, -12, 6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.1-e";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 7, -5, 4, -5, -9, 3, -6, -3, -5, 9, -8, 8, -4, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.1-f";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 5, -3, -4, -1, -7, -9, -10, -7, -9, 5, 6, -14, 12, -12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.1-g";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 6, -2, 10, 8, 0, 2, 2, -6, -2, 6, 4, 12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.1-h";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 6, 2, -10, 8, 0, 2, 2, 6, 2, 6, 4, 12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.2-a";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -7, 1, -5, 5, -4, 3, -9, -3, -6, -9, 5, -8, -4, 8, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.2-b";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, -1, -3, 1, 4, -9, -7, -7, -10, -5, 9, 6, 12, -14, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.2-c";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 8, -6, -2, -2, 0, -4, 2, -4, 10, 0, -12, -12, -14, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.2-d";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -8, -6, 2, 2, 0, -4, 2, -4, -10, 0, -12, -12, -14, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.2-e";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 7, -1, -5, -5, 4, 3, -9, -3, -6, 9, -5, -8, -4, 8, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.2-f";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 1, -3, -1, -4, -9, -7, -7, -10, 5, -9, 6, 12, -14, 16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.2-g";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 6, 10, -2, 0, 8, 2, 2, -2, -6, 6, 12, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 198.2-h";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 6, -10, 2, 0, 8, 2, 2, 2, 6, 6, 12, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 199.1-a";
N := (-10*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, -4, 0, 3, 2, -1, -2, -4, 6, 1, 4, 11, -2, 4, 14, 8, 11, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 199.1-b";
N := (-10*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 4, 0, -3, 2, 1, 2, -4, 6, 1, 4, -11, 2, 4, 14, 8, -11, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 199.2-a";
N := (10*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, -4, 3, 0, 2, -2, -1, 6, -4, 4, 1, -2, 11, 4, 8, 14, -9, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 199.2-b";
N := (10*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 3, 4, -3, 0, 2, 2, 1, 6, -4, 4, 1, 2, -11, 4, 8, 14, 9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.1-a";
N := (-10*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -2, 2, -5, 8, -2, 7, -3, -6, 10, 2, -2, 10, 4, -1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.1-b";
N := (-10*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 6, 6, 3, 0, 2, -1, -7, 2, -6, 6, 2, -10, 8, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.1-c";
N := (-10*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 2, -2, 5, -8, -2, 7, -3, -6, -10, -2, -2, 10, 4, 1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.1-d";
N := (-10*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -6, -6, -3, 0, 2, -1, -7, 2, 6, -6, 2, -10, 8, -3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.2-a";
N := (-10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 2, -2, 8, -5, 7, -2, -6, -3, 2, 10, -2, 4, 10, -5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.2-b";
N := (-10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 6, 6, 0, 3, -1, 2, 2, -7, 6, -6, 2, 8, -10, -9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.2-c";
N := (-10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -2, 2, -8, 5, 7, -2, -6, -3, -2, -10, -2, 4, 10, 5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 200.2-d";
N := (-10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -6, -6, 0, -3, -1, 2, 2, -7, -6, 6, 2, 8, -10, 9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.1-a";
N := (8*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, -4, 0, -8, 0, 0, 0, -6, -2, 6, 6, -9, -1, -3, -1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.1-b";
N := (8*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -3, 4, 0, -8, 0, 0, 0, -6, -2, 6, -6, 9, -1, -3, 1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.2-a";
N := (8*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 0, -4, -8, 0, 0, -6, 0, 6, -2, -9, 6, -1, -3, -2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.2-b";
N := (8*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, 0, 4, -8, 0, 0, -6, 0, 6, -2, 9, -6, -1, -3, 2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.1-a";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, -3, -7, -6, 6, 9, -5, -8, -2, -6, -10, 2, -1, -3, 4, -5, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.1-b";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, -6, -6, 6, -6, 2, 4, 4, 2, -4, 2, 10, 2, -4, 12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.1-c";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 3, 3, 6, 0, -5, 7, -8, 8, 8, -8, 2, 5, -7, -12, -1, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.1-d";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 6, 6, 6, 6, -2, 4, 4, 2, -4, -2, -10, 2, -4, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.1-e";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -4, 3, 7, -6, -6, -9, -5, -8, -2, -6, 10, -2, -1, -3, 4, 5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.1-f";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, -3, -3, 6, 0, 5, 7, -8, 8, 8, 8, -2, 5, -7, -12, 1, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.2-a";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, 2, -3, -4, 0, 10, -8, 7, -2, 3, -2, -2, 10, 8, 8, 16, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.2-b";
N := (9*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -2, 3, -4, 0, -10, -8, 7, -2, 3, 2, 2, 10, 8, 8, -16, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.4-a";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, -7, -3, -6, 9, 6, -8, -5, -6, -2, 2, -10, -1, 4, -3, -11, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.4-b";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, -6, -6, 6, 2, -6, 4, 4, -4, 2, 10, 2, 2, 12, -4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.4-c";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 3, 3, 6, -5, 0, -8, 7, 8, 8, 2, -8, 5, -12, -7, 9, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.4-d";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 6, 6, 6, -2, 6, 4, 4, -4, 2, -10, -2, 2, 12, -4, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.4-e";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -4, 7, 3, -6, -9, -6, -8, -5, -6, -2, -2, 10, -1, 4, -3, 11, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.4-f";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, -3, -3, 6, 5, 0, -8, 7, 8, 8, -2, 8, 5, -12, -7, -9, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.3-a";
N := (-9*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, -3, 2, -4, 10, 0, 7, -8, 3, -2, -2, -2, 10, 8, 8, 11, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 202.3-b";
N := (-9*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 3, -2, -4, -10, 0, 7, -8, 3, -2, 2, 2, 10, 8, 8, -11, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-a";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, -6, 6, -2, -8, 8, 6, -2, 10, 2, -14, 4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-b";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, 6, -6, -4, -4, -10, 2, 6, -6, 2, -4, 8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-c";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -2, -6, -6, 0, 0, -6, -10, -10, 6, -2, -12, 0, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-d";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, 2, 6, -4, 0, -6, 2, -2, 10, 6, 8, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-e";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, 0, -6, -2, -2, 10, 4, 2, 0, -6, -12, -2, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-f";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 6, -2, 2, -8, 0, 10, -2, 6, 6, -6, 8, -4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-g";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -6, -8, 2, 10, 6, -2, -8, -6, -12, 6, -4, 2, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-h";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 8, -2, 10, 6, -2, -8, 6, 12, 6, -4, 2, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-i";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, 0, 6, -2, -2, 10, 4, -2, 0, -6, -12, -2, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-j";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -2, 6, 6, 0, 0, -6, -10, 10, -6, -2, -12, 0, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-k";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -2, -6, -4, 0, -6, 2, 2, -10, 6, 8, 4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-l";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 6, 2, -2, -8, 0, 10, -2, -6, -6, -6, 8, -4, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-m";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, -6, 6, -4, -4, -10, 2, -6, 6, 2, -4, 8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.1-n";
N := (-8*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -6, -6, 2, -8, 8, 6, -2, -10, -2, -14, 4, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-a";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, -6, -2, 6, 8, -8, -2, 6, 2, 10, -14, 12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-b";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, -6, 6, -4, -4, 2, -10, -6, 6, 2, 8, -4, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-c";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -2, -6, -6, 0, 0, -10, -6, 6, -10, -2, 0, -12, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-d";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, 6, 2, 0, -4, 2, -6, 10, -2, 6, 4, 8, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-e";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, -6, 0, -2, -2, 4, 10, 0, 2, -6, -2, -12, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-f";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 6, 2, -2, 0, -8, -2, 10, 6, 6, -6, -4, 8, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-g";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -6, 2, -8, 6, 10, -8, -2, -12, -6, 6, 2, -4, -14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-h";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -2, 8, 6, 10, -8, -2, 12, 6, 6, 2, -4, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-i";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, 6, 0, -2, -2, 4, 10, 0, -2, -6, -2, -12, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-j";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -2, 6, 6, 0, 0, -10, -6, -6, 10, -2, 0, -12, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-k";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -6, -2, 0, -4, 2, -6, -10, 2, 6, 4, 8, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-l";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 6, -2, 2, 0, -8, -2, 10, -6, -6, -6, -4, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-m";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, 6, -6, -4, -4, 2, -10, 6, -6, 2, 8, -4, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 204.2-n";
N := (8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -6, 2, -6, 8, -8, -2, 6, -2, -10, -14, 12, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-a";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 3, 2, 0, 6, -10, -1, 2, 8, 0, 3, -4, 2, -13, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-b";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 3, 8, -6, 6, 2, -7, -4, 2, -6, 9, -4, -10, 11, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-c";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 3, -7, 9, -3, 8, 8, 2, -10, 9, -6, -13, 2, 5, 15, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-d";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 3, -1, 3, -3, 2, 2, -4, 2, 3, 0, 5, 8, -7, 9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-e";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -3, -1, -3, 3, 2, 2, -4, 2, -3, 0, 5, 8, -7, -9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-f";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -3, -7, -9, 3, 8, 8, 2, -10, -9, 6, -13, 2, 5, -15, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-g";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -3, 8, 6, -6, 2, -7, -4, 2, 6, -9, -4, -10, 11, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.1-h";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, -3, 2, 0, -6, -10, -1, 2, 8, 0, -3, -4, 2, -13, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.3-a";
N := (-15*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 0, -1, 8, -2, 6, 2, 3, -12, -2, 6, -7, 4, -2, -7, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.3-b";
N := (-15*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, 1, 8, 2, -6, 2, 3, -12, -2, -6, 7, 4, -2, -7, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.3-c";
N := (-15*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 7, 0, -7, 5, 5, -2, 2, -2, 12, 0, 9, 3, -9, 8, 9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.3-d";
N := (-15*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -7, 0, -7, -5, -5, -2, 2, -2, 12, 0, -9, 3, -9, 8, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.2-a";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 6, 2, 6, 0, -1, -10, 8, 2, 3, 0, -4, -13, 2, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.2-b";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 0, 8, 6, -6, -7, 2, 2, -4, 9, -6, -4, 11, -10, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.2-c";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 6, -7, -3, 9, 8, 8, -10, 2, -6, 9, -13, 5, 2, -9, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.2-d";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 0, -1, -3, 3, 2, 2, 2, -4, 0, 3, 5, -7, 8, -3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.2-e";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 0, -1, 3, -3, 2, 2, 2, -4, 0, -3, 5, -7, 8, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.2-f";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -6, -7, 3, -9, 8, 8, -10, 2, 6, -9, -13, 5, 2, 9, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.2-g";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 0, 8, -6, 6, -7, 2, 2, -4, -9, 6, -4, 11, -10, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.2-h";
N := (-6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -6, 2, -6, 0, -1, -10, 8, 2, -3, 0, -4, -13, 2, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.4-a";
N := (-15*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -1, 0, 8, 6, -2, 3, 2, -2, -12, -7, 6, 4, -7, -2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.4-b";
N := (-15*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 1, 0, 8, -6, 2, 3, 2, -2, -12, 7, -6, 4, -7, -2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.4-c";
N := (-15*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 7, -7, 5, 5, 2, -2, 12, -2, 9, 0, 3, 8, -9, 5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 216.4-d";
N := (-15*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -7, -7, -5, -5, 2, -2, 12, -2, -9, 0, 3, 8, -9, -5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 222.1-a";
N := (17*w - 55)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, 2, 6, 2, 6, -4, -4, -2, 6, 2, 6, 4, 8, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 222.1-b";
N := (17*w - 55)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, -2, 6, -2, -6, -4, -4, -2, -6, -2, 6, 4, 8, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 222.2-a";
N := (-7*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -2, 10, 2, 2, 8, 0, -10, 6, -10, 2, 12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 222.2-b";
N := (-7*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, 2, 10, -2, -2, 8, 0, -10, -6, 10, 2, 12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 222.4-a";
N := (17*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, -6, 6, 6, 2, -4, -4, -2, 2, 6, 6, 8, 4, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 222.4-b";
N := (17*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, 6, 6, -6, -2, -4, -4, -2, -2, -6, 6, 8, 4, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 222.3-a";
N := (-7*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -2, 10, 2, 2, 0, 8, -10, -10, 6, 2, -4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 222.3-b";
N := (-7*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, 2, 10, -2, -2, 0, 8, -10, 10, -6, 2, -4, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-a";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 1, 2, -5, 3, 6, -7, 4, -1, 3, -10, 0, -4, -2, -7, 15, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-b";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 5, -2, -6, -3, 4, -7, 3, -1, 0, 10, -4, -7, -2, -4, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-c";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, -5, 2, 6, 3, 4, -7, 3, -1, 0, -10, -4, -7, -2, 4, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-d";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -2, 5, -3, -6, -7, 4, -1, 3, 10, 0, -4, -2, -7, -15, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.2-a";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, 2, -6, 8, 8, -10, 2, 0, 6, 8, 8, -4, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.2-b";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 0, 3, 2, 0, 5, -4, 8, -10, 3, -6, 11, -4, 11, -6, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.2-c";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -7, 2, 8, 7, -6, -9, -8, -2, -6, 5, -9, -11, -6, -6, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.2-d";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -3, 0, -4, 3, -10, -1, 2, -4, 12, 9, 11, -7, -4, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.2-e";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 0, -3, 2, 0, 5, -4, 8, -10, -3, 6, 11, -4, 11, 6, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.2-f";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 7, -2, 8, -7, -6, -9, -8, -2, 6, -5, -9, -11, -6, 6, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.2-g";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 3, 0, -4, -3, -10, -1, 2, -4, -12, -9, 11, -7, -4, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.2-h";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, 2, 6, 8, 8, -10, 2, 0, -6, 8, 8, -4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.6-a";
N := (-3*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, -6, -8, -9, 8, 3, 3, -7, -1, 6, 10, -2, -11, -13, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.6-b";
N := (-3*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 6, 8, -9, -8, 3, 3, -7, -1, -6, -10, -2, -11, -13, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.3-a";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, 2, -6, 8, 8, 2, -10, 6, 0, 8, -4, 8, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.3-b";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 3, 0, 2, 0, -4, 5, -10, 8, -6, 3, 11, 11, -4, -15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.3-c";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -7, 8, 7, -9, -6, -2, -8, 5, -6, -9, -6, -11, -17, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.3-d";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -3, -4, 3, -1, -10, -4, 2, 9, 12, 11, -4, -7, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.3-e";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -3, 0, 2, 0, -4, 5, -10, 8, 6, -3, 11, 11, -4, 15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.3-f";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 7, 8, -7, -9, -6, -2, -8, -5, 6, -9, -6, -11, 17, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.3-g";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 3, -4, -3, -1, -10, -4, 2, -9, -12, 11, -4, -7, 9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.3-h";
N := (-6*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, 2, 6, 8, 8, 2, -10, -6, 0, 8, -4, 8, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.7-a";
N := (3*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, -8, -6, -9, 8, 3, 3, -1, -7, 10, 6, -2, -13, -11, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 232.7-b";
N := (3*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 8, 6, -9, -8, 3, 3, -1, -7, -10, -6, -2, -13, -11, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.1-a";
N := (-7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 2, -6, -2, -2, -8, 0, -10, -2, 2, -14, -12, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.1-b";
N := (-7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 6, -2, -10, 10, 0, 8, -6, 2, 2, -2, 12, 4, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.1-c";
N := (-7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -6, -2, 10, -10, 0, 8, -6, 2, -2, -2, 12, 4, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.1-d";
N := (-7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, -2, -6, 2, 2, -8, 0, -10, -2, -2, -14, -12, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.2-a";
N := (-13*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 3, 0, -4, -6, 6, -4, -10, -7, -4, 3, 2, -4, -4, 0, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.2-b";
N := (-13*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -6, 6, 2, -2, 8, 8, 10, 10, -2, -2, 4, -12, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.2-c";
N := (-13*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, 6, 6, -2, 2, 8, 8, 10, 10, 2, -2, 4, -12, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.2-d";
N := (-13*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -3, 0, -4, 6, -6, -4, -10, -7, -4, -3, 2, -4, -4, 0, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.4-a";
N := (-7*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 2, -6, -2, -2, 0, -8, -2, -10, 2, -14, -4, -12, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.4-b";
N := (-7*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 6, 2, -2, 10, -10, 8, 0, 2, -6, 2, -2, 4, 12, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.4-c";
N := (-7*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -2, -2, -10, 10, 8, 0, 2, -6, -2, -2, 4, 12, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.4-d";
N := (-7*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, -2, -6, 2, 2, 0, -8, -2, -10, -2, -14, -4, -12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.3-a";
N := (13*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, 3, -4, 6, -6, -10, -4, -4, -7, 3, 2, -4, -4, 9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.3-b";
N := (13*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, 2, 6, -2, 2, 8, 8, 10, 10, -2, -2, -12, 4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.3-c";
N := (13*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 6, -2, 6, 2, -2, 8, 8, 10, 10, 2, -2, -12, 4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 246.3-d";
N := (13*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, -3, -4, -6, 6, -10, -4, -4, -7, -3, 2, -4, -4, -9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.1-a";
N := (-14*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, 2, -6, -6, -4, 2, 8, 12, 0, -4, -4, 8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.1-b";
N := (-14*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, 2, 6, 6, -4, 2, 8, -12, 0, -4, -4, 8, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.2-a";
N := (-6*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 6, 3, -4, -3, 9, -4, -10, 2, 3, 9, 5, -4, 11, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.2-b";
N := (-6*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -3, -4, 3, -9, -4, -10, 2, -3, -9, 5, -4, 11, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.5-a";
N := (7*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 0, 2, -6, 4, -8, 10, 8, -2, 10, 12, 4, -12, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.5-b";
N := (7*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 2, 0, 2, 6, -4, -8, 10, 8, 2, -10, 12, 4, -12, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.4-a";
N := (14*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, 2, -6, -6, -4, 8, 2, 0, 12, -4, 8, -4, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.4-b";
N := (14*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, 2, 6, 6, -4, 8, 2, 0, -12, -4, 8, -4, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.3-a";
N := (6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 6, -4, 9, -3, -4, 2, -10, 9, 3, 5, 11, -4, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.3-b";
N := (6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, -6, -4, -9, 3, -4, 2, -10, -9, -3, 5, 11, -4, 9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.8-a";
N := (7*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 0, -2, 2, 4, -6, -8, 8, 10, 10, -2, 12, -12, 4, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 248.8-b";
N := (7*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 0, 2, 2, -4, 6, -8, 8, 10, -10, 2, 12, -12, 4, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-a";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 4, -4, -10, -2, 4, -4, 10, -6, -6, 10, -8, -4, -12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-b";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, 8, -1, -4, 4, -7, 1, -3, -11, 8, 12, -2, 3, -13, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-c";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 4, -4, -2, -10, -4, 4, -6, 10, 10, -6, -8, -12, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-d";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -8, 4, -1, -4, 4, 1, -7, -11, -3, -12, -8, -2, -13, 3, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-e";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 0, 0, 8, -6, -6, 4, 4, 2, 2, 6, 6, -4, 4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-f";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -4, -9, -8, 8, 9, 9, 5, 5, 12, -12, -2, 11, 11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-g";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, -1, 0, 0, -5, -5, -7, -7, 0, 0, 14, 13, 13, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-h";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -4, -4, 2, 10, -4, 4, -6, 10, -10, 6, -8, -12, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-i";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 4, -9, 8, -8, 9, 9, 5, 5, -12, 12, -2, 11, 11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-j";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 0, 0, 8, 6, 6, 4, 4, 2, 2, -6, -6, -4, 4, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-k";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 8, -4, -1, 4, -4, 1, -7, -11, -3, 12, 8, -2, -13, 3, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-l";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -4, -4, 10, 2, 4, -4, 10, -6, 6, -10, -8, -4, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-m";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, -8, -1, 4, -4, -7, 1, -3, -11, -8, -12, -2, 3, -13, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-a";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, 0, -1, 6, -6, -1, 7, 9, 5, -8, -6, 2, 1, -3, 14, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-b";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 8, 0, 4, -6, 6, 4, -8, -6, 10, -2, 6, -8, -4, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-c";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 0, 3, -2, -6, -1, -5, 1, -7, -8, 2, 2, -7, 5, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-d";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, 6, 2, 6, -6, 8, 4, 6, -10, 2, -6, 2, 4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-e";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -2, 0, -1, -6, 6, -1, 7, 9, 5, 8, 6, 2, 1, -3, -14, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-f";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, -6, 2, -6, 6, 8, 4, 6, -10, -2, 6, 2, 4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-g";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 0, 3, 2, 6, -1, -5, 1, -7, 8, -2, 2, -7, 5, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.2-h";
N := (-8*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -8, 0, 4, 6, -6, 4, -8, -6, 10, 2, -6, -8, -4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.4-a";
N := (-12*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, -10, 0, 0, 4, 4, -10, 10, 0, 0, 2, -16, 16, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.4-b";
N := (-12*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, 2, 1, -10, 6, -3, -5, -5, -7, -10, 4, -10, -7, -3, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.4-c";
N := (-12*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -2, 1, 10, -6, -3, -5, -5, -7, 10, -4, -10, -7, -3, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.4-d";
N := (-12*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, 0, 5, 0, 0, -11, 7, -1, -11, 0, 0, 2, 5, -11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.4-e";
N := (-12*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -8, 4, 1, -4, -4, 1, 7, 11, -3, 12, 8, 2, 13, -3, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.4-f";
N := (-12*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 8, -4, 1, 4, 4, 1, 7, 11, -3, -12, -8, 2, 13, -3, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-a";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -4, 2, -2, 4, 0, 6, 6, 6, 6, 2, 6, 8, -8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-b";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -4, -2, 2, 4, 0, -6, 6, -6, -6, -2, -6, 8, -8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-c";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 4, 2, 2, -4, 0, 6, 6, 6, -6, -2, 6, 8, -8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.6-d";
N := (2*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 4, -2, -2, -4, 0, -6, 6, -6, 6, 2, -6, 8, -8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-a";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, 2, -1, -6, 6, 7, -1, 5, 9, -6, -8, 2, -3, 1, -18, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-b";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 8, 4, 6, -6, -8, 4, 10, -6, 6, -2, -8, 12, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-c";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 2, 3, -6, -2, -5, -1, -7, 1, 2, -8, 2, 5, -7, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-d";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 6, -2, 2, -6, 6, 4, 8, -10, 6, -6, 2, 2, -12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-e";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 0, -2, -1, 6, -6, 7, -1, 5, 9, 6, 8, 2, -3, 1, 18, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-f";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -6, 2, 2, 6, -6, 4, 8, -10, 6, 6, -2, 2, -12, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-g";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -2, 3, 6, 2, -5, -1, -7, 1, -2, 8, 2, 5, -7, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.3-h";
N := (8*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -8, 4, -6, 6, -8, 4, 10, -6, -6, 2, -8, 12, -4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.5-a";
N := (12*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, -10, 0, 0, 4, 4, 10, -10, 0, 0, 2, 16, -16, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.5-b";
N := (12*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 4, 1, 6, -10, -5, -3, -7, -5, 4, -10, -10, -3, -7, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.5-c";
N := (12*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -4, 1, -6, 10, -5, -3, -7, -5, -4, 10, -10, -3, -7, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.5-d";
N := (12*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, 0, 5, 0, 0, 7, -11, -11, -1, 0, 0, 2, -11, 5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.5-e";
N := (12*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, -8, 1, -4, -4, 7, 1, -3, 11, 8, 12, 2, -3, 13, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.5-f";
N := (12*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, 8, 1, 4, 4, 7, 1, -3, 11, -8, -12, 2, -3, 13, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-a";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, 0, 2, 4, -2, 6, 0, 6, 6, 2, 6, 6, -8, 8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-b";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 0, -2, 4, 2, -6, 0, -6, 6, -2, -6, -6, -8, 8, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-c";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 0, 2, -4, 2, 6, 0, 6, 6, -2, -6, 6, -8, 8, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.7-d";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, 0, -2, -4, -2, -6, 0, -6, 6, 2, 6, -6, -8, 8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.1-a";
N := (9*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 6, 3, 2, 3, -3, 2, -10, 2, 8, 0, 0, -4, -4, -10, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.1-b";
N := (9*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 6, -5, 2, 5, 5, 10, -2, -2, -4, 12, -8, 0, -4, 10, -8, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.1-c";
N := (9*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 3, -4, 6, 0, -6, -5, -1, -8, -2, -5, 7, -4, -12, 11, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.1-d";
N := (9*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -2, 7, 2, -3, 9, 10, -2, 6, 4, -12, -8, -8, 12, 2, -16, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.1-e";
N := (9*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -3, 4, 6, 0, 6, -5, -1, -8, -2, 5, -7, -4, -12, 11, -8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.1-f";
N := (9*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -6, 5, 2, -5, -5, 10, -2, -2, -4, -12, 8, 0, -4, 10, 8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.1-g";
N := (9*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, 2, -7, 2, 3, -9, 10, -2, 6, 4, 12, 8, -8, 12, 2, 16, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.1-h";
N := (9*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -6, -3, 2, -3, 3, 2, -10, 2, 8, 0, 0, -4, -4, -10, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.2-a";
N := (11*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, 0, -1, -2, 1, 3, -1, 4, -11, 9, -1, 11, -2, 2, -7, -14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.2-b";
N := (11*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, 0, 1, -2, -1, -3, -1, 4, -11, 9, 1, -11, -2, 2, -7, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.4-a";
N := (9*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 3, 6, 2, -3, 3, -10, 2, 8, 2, 0, 0, -4, -10, -4, 9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.4-b";
N := (9*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -5, 6, 2, 5, 5, -2, 10, -4, -2, -8, 12, 0, 10, -4, -9, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.4-c";
N := (9*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -4, 3, 6, -6, 0, -1, -5, -2, -8, 7, -5, -4, 11, -12, -3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.4-d";
N := (9*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 7, -2, 2, 9, -3, -2, 10, 4, 6, -8, -12, -8, 2, 12, -1, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.4-e";
N := (9*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 4, -3, 6, 6, 0, -1, -5, -2, -8, -7, 5, -4, 11, -12, 3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.4-f";
N := (9*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 5, -6, 2, -5, -5, -2, 10, -4, -2, 8, -12, 0, 10, -4, 9, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.4-g";
N := (9*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -7, 2, 2, -9, 3, -2, 10, 4, 6, 8, 12, -8, 2, 12, 1, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.4-h";
N := (9*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -3, -6, 2, 3, -3, -10, 2, 8, 2, 0, 0, -4, -10, -4, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.3-a";
N := (-11*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -1, 0, -2, 3, 1, 4, -1, 9, -11, 11, -1, -2, -7, 2, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 262.3-b";
N := (-11*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, 1, 0, -2, -3, -1, 4, -1, 9, -11, -11, 1, -2, -7, 2, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.1-a";
N := (10*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 6, 8, 0, 6, 8, -4, 2, -4, -6, -6, -10, 14, 8, 18, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.1-b";
N := (10*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, 2, -6, -8, -10, -8, 6, -2, -10, 0, -2, -6, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.1-c";
N := (10*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, -2, 6, -8, -10, -8, 6, 2, 10, 0, -2, -6, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.1-d";
N := (10*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 8, 0, -6, 8, -4, 2, -4, 6, 6, -10, 14, 8, -18, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.3-a";
N := (w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 6, -2, 2, 6, 8, 8, 2, -10, 6, -10, 2, 12, 8, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.3-b";
N := (w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 10, -2, 6, -8, 0, -2, 6, -6, -6, 2, 12, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.3-c";
N := (w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 10, 2, -6, -8, 0, -2, 6, 6, 6, 2, 12, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.3-d";
N := (w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -6, -2, -2, -6, 8, 8, 2, -10, -6, 10, 2, 12, 8, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.2-a";
N := (10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 8, 6, 0, -4, 8, -4, 2, -6, -6, -10, 8, 14, 12, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.2-b";
N := (10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, -6, 2, -10, -8, 6, -8, -10, -2, 0, -6, -2, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.2-c";
N := (10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, 6, -2, -10, -8, 6, -8, 10, 2, 0, -6, -2, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.2-d";
N := (10*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 6, 8, -6, 0, -4, 8, -4, 2, 6, 6, -10, 8, 14, -12, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.4-a";
N := (w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 6, -2, 6, 2, 8, 8, -10, 2, -10, 6, 2, 8, 12, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.4-b";
N := (w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 10, 6, -2, 0, -8, 6, -2, -6, -6, 2, -4, 12, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.4-c";
N := (w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 10, -6, 2, 0, -8, 6, -2, 6, 6, 2, -4, 12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 264.4-d";
N := (w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -6, -2, -6, -2, 8, 8, -10, 2, 10, -6, 2, 8, 12, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-a";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 8, 2, -2, -10, 0, -10, -10, -8, -10, -6, 8, -12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-b";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 6, -8, -2, 6, -8, -2, -6, -4, 6, 10, 2, 4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-c";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 4, 2, 10, -6, -8, -6, -10, 4, -6, -2, -12, 12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-d";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 1, 2, -4, -1, 9, 1, 3, 2, -8, -9, -4, -9, -12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-e";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -1, -2, -4, 1, -9, 1, 3, 2, -8, 9, 4, -9, -12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-f";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -4, 2, -10, 6, -8, -6, -10, 4, 6, 2, -12, 12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-g";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -6, -8, 2, -6, -8, -2, -6, -4, -6, -10, 2, 4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.1-h";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -8, 2, 2, 10, 0, -10, -10, -8, 10, 6, 8, -12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-a";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 8, 0, 2, -10, -2, -10, 0, -8, -10, -6, -10, 8, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-b";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 6, -2, -8, 6, -2, -2, -8, -4, -6, 10, 6, 2, 4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-c";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -4, 2, -6, 10, -6, -8, 4, -10, -2, -6, -12, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-d";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 2, 1, -4, 9, -1, 3, 1, -8, 2, -4, -9, -9, -12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-e";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -2, -1, -4, -9, 1, 3, 1, -8, 2, 4, 9, -9, -12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-f";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 4, 2, 6, -10, -6, -8, 4, -10, 2, 6, -12, 12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-g";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, 2, -8, -6, 2, -2, -8, -4, -6, -10, -6, 2, 4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 268.2-h";
N := (4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -8, 0, 2, 10, 2, -10, 0, -8, -10, 6, 10, 8, -12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-a";
N := (18*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -4, 3, 9, 5, -3, -4, -3, -6, 6, 3, 4, -8, 7, 1, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-b";
N := (18*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 3, 3, -4, 2, -4, -3, 3, 1, -1, 4, 6, -3, -2, 5, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-c";
N := (18*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, 3, 0, -2, 0, -7, 3, 9, -9, -12, 10, 1, -14, -7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-d";
N := (18*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -3, -5, 1, 5, 0, -3, -2, -2, -7, 12, -12, 7, -5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-e";
N := (18*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, 3, 0, 2, 0, -7, 3, 9, 9, 12, 10, 1, -14, 7, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-f";
N := (18*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -3, 5, -1, 5, 0, -3, -2, 2, 7, 12, -12, 7, 5, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-g";
N := (18*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 4, 3, -9, -5, -3, -4, -3, -6, -6, -3, 4, -8, 7, -1, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.4-h";
N := (18*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, -3, 3, 4, -2, -4, -3, 3, 1, 1, -4, 6, -3, -2, -5, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-a";
N := (18*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -4, 3, 5, 9, -4, -3, -6, -3, 3, 6, 4, 7, -8, 18, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-b";
N := (18*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 3, 3, 2, -4, -3, -4, 1, 3, 4, -1, 6, -2, -3, 16, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-c";
N := (18*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, 3, -2, 0, -7, 0, 9, 3, -12, -9, 10, -14, 1, 0, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-d";
N := (18*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -3, 1, -5, 0, 5, -2, -3, -7, -2, 12, 7, -12, 14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-e";
N := (18*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, 3, 2, 0, -7, 0, 9, 3, 12, 9, 10, -14, 1, 0, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-f";
N := (18*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -3, -1, 5, 0, 5, -2, -3, 7, 2, 12, 7, -12, -14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-g";
N := (18*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 4, 3, -5, -9, -4, -3, -6, -3, -3, -6, 4, 7, -8, -18, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 272.5-h";
N := (18*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, -3, 3, -2, 4, -3, -4, 1, 3, -4, 1, 6, -2, -3, -16, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 275.1-a";
N := (-20*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 6, 6, 6, 6, -8, -8, -2, -2, 2, 2, -14, -16, -16, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 275.1-b";
N := (-20*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -6, -6, -6, -6, -8, -8, -2, -2, -2, -2, -14, -16, -16, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-a";
N := (-12*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 6, 6, 8, -6, 0, -4, 6, -2, 12, -6, 10, -12, -12, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-b";
N := (-12*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 4, -4, -2, -4, 4, -4, 0, 4, -2, 0, 4, 12, -8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-c";
N := (-12*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 2, -2, -4, 6, 0, 4, -2, -2, 8, 6, -6, -4, 4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-d";
N := (-12*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, -2, 4, -6, 0, 4, -2, -2, -8, -6, -6, -4, 4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-e";
N := (-12*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -4, -4, 2, 4, 4, -4, 0, 4, 2, 0, 4, 12, -8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.1-f";
N := (-12*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 6, -8, 6, 0, -4, 6, -2, -12, 6, 10, -12, -12, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-a";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 6, -2, 0, 0, -2, 2, 10, 10, -6, 6, -14, -8, 8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-b";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, 4, 2, -10, -4, -4, 6, -10, -10, -6, 8, -12, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-c";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 4, 0, 6, 4, -4, 4, -8, -12, 6, 4, -8, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-d";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, -2, 10, -2, 8, 8, -6, 2, -2, -6, -10, -12, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-e";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, 10, 6, 6, 4, -4, -2, -2, 6, 6, -14, 4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-f";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -2, -8, -8, -10, 2, -6, 2, -2, -6, 2, 0, -8, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-g";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 0, -8, -6, 6, 4, -4, -2, -2, 6, -6, 4, 4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-h";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, 2, -6, -4, 4, -2, 6, 2, 10, 2, 12, 12, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-i";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, -2, 6, -4, 4, -2, 6, -2, -10, 2, 12, 12, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-j";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 0, -8, 6, -6, 4, -4, -2, -2, -6, 6, 4, 4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-k";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, 8, 8, -10, 2, -6, 2, 2, 6, 2, 0, -8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-l";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 10, -6, -6, 4, -4, -2, -2, -6, -6, -14, 4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-m";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, -2, -10, 2, 8, 8, -6, 2, 2, 6, -10, -12, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-n";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, 4, 0, -6, 4, -4, 4, -8, 12, -6, 4, -8, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-o";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, 4, -2, 10, -4, -4, 6, -10, 10, 6, 8, -12, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.3-p";
N := (-6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, -6, -2, 0, 0, -2, 2, 10, 10, 6, -6, -14, -8, 8, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-a";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, -2, 6, -6, 2, 0, -4, -6, -6, 6, 2, 6, -12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-b";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, 2, 6, 6, -2, 0, -4, -6, -6, -6, -2, 6, -12, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-c";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -2, 4, 0, 6, 8, 4, -8, 4, 8, 6, -12, -8, -4, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-d";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 2, 4, 0, -6, 8, 4, -8, 4, -8, -6, -12, -8, -4, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-e";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -2, 2, 6, -6, 4, -8, 2, -10, 10, -6, -6, 8, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-f";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 2, 2, -6, 6, 4, -8, 2, -10, -10, 6, -6, 8, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-g";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, -4, -3, 6, -2, -9, 5, 3, 3, 12, 10, 6, -3, -9, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-h";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, -2, -4, 0, 6, -8, 4, 8, -4, -8, 6, 12, 8, -4, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-i";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 4, -3, -6, 2, -9, 5, 3, 3, -12, -10, 6, -3, -9, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-j";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 2, -4, 0, -6, -8, 4, 8, -4, 8, -6, 12, 8, -4, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-k";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, -4, -7, 6, 6, 7, 1, 11, -1, -4, -6, 6, 5, -1, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.5-l";
N := (-9*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 4, -7, -6, -6, 7, 1, 11, -1, 4, 6, 6, 5, -1, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.2-a";
N := (-12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 0, 6, -6, 8, -4, 0, -2, 6, -6, 12, 10, -12, -12, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.2-b";
N := (-12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -2, -4, -4, -2, -4, 4, 4, 0, 0, -2, 4, -8, 12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.2-c";
N := (-12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -2, 6, -4, 4, 0, -2, -2, 6, 8, -6, 4, -4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.2-d";
N := (-12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, -2, -6, 4, 4, 0, -2, -2, -6, -8, -6, 4, -4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.2-e";
N := (-12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 2, -4, 4, 2, -4, 4, 4, 0, 0, 2, 4, -8, 12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.2-f";
N := (-12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 0, 6, 6, -8, -4, 0, -2, 6, 6, -12, 10, -12, -12, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-a";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 6, -6, -2, 0, 0, 2, -2, 10, 10, 6, -6, -14, 8, -8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-b";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 4, -10, 2, -4, -4, -10, 6, -6, -10, 8, 4, -12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-c";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, 4, 6, 0, -4, 4, -8, 4, 6, -12, 4, -4, -8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-d";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, -2, -2, 10, 8, 8, 2, -6, -6, -2, -10, 4, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-e";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, 10, 6, 6, -4, 4, -2, -2, 6, 6, -14, -4, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-f";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -2, -8, -8, 2, -10, 2, -6, -6, -2, 2, -8, 0, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-g";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 0, -8, 6, -6, -4, 4, -2, -2, -6, 6, 4, -4, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-h";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, -6, 2, 4, -4, 6, -2, 10, 2, 2, 12, 12, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-i";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, 6, -2, 4, -4, 6, -2, -10, -2, 2, 12, 12, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-j";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 0, -8, -6, 6, -4, 4, -2, -2, 6, -6, 4, -4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-k";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -2, 8, 8, 2, -10, 2, -6, 6, 2, 2, -8, 0, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-l";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 10, -6, -6, -4, 4, -2, -2, -6, -6, -14, -4, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-m";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, -2, 2, -10, 8, 8, 2, -6, 6, 2, -10, 4, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-n";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, 4, -6, 0, -4, 4, -8, 4, -6, 12, 4, -4, -8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-o";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, 4, 10, -2, -4, -4, -10, 6, 6, 10, 8, 4, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.4-p";
N := (-6*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 6, -2, 0, 0, 2, -2, 10, 10, -6, 6, -14, 8, -8, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-a";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, -6, 6, 2, -6, -4, 0, -6, -6, 2, 6, 6, 12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-b";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, 6, 6, -2, 6, -4, 0, -6, -6, -2, -6, 6, 12, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-c";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 4, 4, 6, 0, 4, 8, 4, -8, 6, 8, -12, -4, -8, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-d";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -4, 4, -6, 0, 4, 8, 4, -8, -6, -8, -12, -4, -8, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-e";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, 2, -6, 6, -8, 4, -10, 2, -6, 10, -6, -4, 8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-f";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, 2, 6, -6, -8, 4, -10, 2, 6, -10, -6, -4, 8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-g";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 6, -3, -2, 6, 5, -9, 3, 3, 10, 12, 6, -9, -3, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-h";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -4, -4, 6, 0, 4, -8, -4, 8, 6, -8, 12, -4, 8, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-i";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -6, -3, 2, -6, 5, -9, 3, 3, -10, -12, 6, -9, -3, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-j";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 4, -4, -6, 0, 4, -8, -4, 8, -6, 8, 12, -4, 8, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-k";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -4, -2, -7, 6, 6, 1, 7, -1, 11, -6, -4, 6, -1, 5, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 288.6-l";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 4, 2, -7, -6, -6, 1, 7, -1, 11, 6, 4, 6, -1, 5, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-a";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 0, -10, -9, 9, -4, -4, 2, 2, -9, 9, 5, 5, 5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-b";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 0, -6, 6, 6, 4, 4, -2, -2, -6, -6, 2, 4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-c";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 0, -6, -6, -6, 4, 4, -2, -2, 6, 6, 2, 4, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-d";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 0, -10, 9, -9, -4, -4, 2, 2, 9, -9, 5, 5, 5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 291.1-a";
N := (-2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 6, -6, 4, -8, 10, -2, -2, -8, -2, -4, 10, 10, 0, -8, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 291.1-b";
N := (-2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, 2, 2, 2, 6, -2, 8, 0, 6, -2, 2, -6, 10, 4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 291.1-c";
N := (-2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -2, -2, 2, -6, 2, 8, 0, 6, -2, -2, 6, 10, 4, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 291.1-d";
N := (-2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, 6, -4, -8, -10, 2, -2, -8, -2, -4, -10, -10, 0, -8, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 291.2-a";
N := (2*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 6, 4, -6, -8, -2, 10, -8, -2, -4, -2, 10, 10, 0, -4, -8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 291.2-b";
N := (2*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, 2, 2, 2, -2, 6, 0, 8, -2, 6, -6, 2, 10, 4, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 291.2-c";
N := (2*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -2, -2, 2, 2, -6, 0, 8, -2, 6, 6, -2, 10, 4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 291.2-d";
N := (2*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, -4, 6, -8, 2, -10, -8, -2, -4, -2, -10, -10, 0, -4, -8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-a";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 0, 5, -1, 3, 7, 5, 0, 11, -4, 9, -4, -8, 2, 16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-b";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, -6, 2, -2, -6, 0, -8, 6, -2, 6, 10, 12, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-c";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, 3, -1, 9, -3, 5, -4, 11, 2, 3, 0, -4, -4, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-d";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 5, 0, 2, -10, -9, 6, 7, -12, 10, -9, 2, -9, 8, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-e";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -5, 0, 2, 10, 9, 6, 7, -12, 10, 9, -2, -9, 8, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-f";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, -3, -1, -9, 3, 5, -4, 11, 2, -3, 0, -4, -4, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-g";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, 6, 2, 2, 6, 0, -8, 6, -2, -6, -10, 12, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.1-h";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 0, -5, -1, -3, -7, 5, 0, 11, -4, -9, 4, -8, 2, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.2-a";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 5, 0, -1, 7, 3, 0, 5, -4, 11, -4, 9, 2, -8, -6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.2-b";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, -2, 2, -6, -2, -8, 0, -2, 6, 10, 6, -4, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.2-c";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, 6, -1, -3, 9, -4, 5, 2, 11, 0, 3, -4, -4, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.2-d";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 5, 2, -9, -10, 7, 6, 10, -12, 2, -9, 8, -9, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.2-e";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -5, 2, 9, 10, 7, 6, 10, -12, -2, 9, 8, -9, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.2-f";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -3, -6, -1, 3, -9, -4, 5, 2, 11, 0, -3, -4, -4, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.2-g";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, 2, 2, 6, 2, -8, 0, -2, 6, -10, -6, -4, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 294.2-h";
N := (-7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, -5, 0, -1, -7, -3, 0, 5, -4, 11, 4, -9, 2, -8, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.1-a";
N := (-10*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 6, 3, 8, 3, 0, -4, 8, -7, 6, 6, -1, -7, -13, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.1-b";
N := (-10*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, -4, -2, 0, 6, 8, 2, -10, 10, 2, -2, 2, 6, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.1-c";
N := (-10*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -6, -3, 8, -3, 0, -4, 8, -7, -6, -6, -1, -7, -13, 3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.1-d";
N := (-10*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, 4, -2, 0, -6, 8, 2, -10, -10, -2, -2, 2, 6, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.2-a";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 0, 2, 0, 6, 2, -4, 2, 0, 0, 2, 14, 2, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.2-b";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 6, 4, -6, -2, -4, 0, 6, -12, -8, 10, -6, -14, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.2-c";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, 4, 6, 2, -4, 0, 6, 12, 8, 10, -6, -14, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.2-d";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 0, 2, 0, -6, 2, -4, 2, 0, 0, 2, 14, 2, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.5-a";
N := (-11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 5, -4, 2, 6, 1, -2, -4, -9, 5, 6, 5, 5, 12, 2, 11, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.5-b";
N := (-11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, -7, 0, -2, 6, -7, -4, 10, 9, 10, 12, -11, -7, 7, 13, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.5-c";
N := (-11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 7, 0, -2, -6, 7, -4, 10, 9, -10, -12, -11, -7, 7, -13, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.5-d";
N := (-11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, 4, -2, 6, -1, 2, -4, -9, 5, -6, -5, 5, 12, 2, -11, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.6-a";
N := (-15*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -6, -2, 2, 2, 6, -4, 0, -10, 6, 6, 2, -8, 0, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.6-b";
N := (-15*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 6, 2, 2, -2, -6, -4, 0, -10, -6, -6, 2, -8, 0, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.4-a";
N := (10*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 6, 8, 0, 3, 8, -4, -7, 6, 6, -1, -13, -7, -9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.4-b";
N := (10*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, 2, -2, 6, 0, 2, 8, -10, 2, 10, -2, 6, 2, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.4-c";
N := (10*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -3, -6, 8, 0, -3, 8, -4, -7, -6, -6, -1, -13, -7, 9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.4-d";
N := (10*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, -2, -2, -6, 0, 2, 8, -10, -2, -10, -2, 6, 2, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.3-a";
N := (6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 6, 2, 6, 0, -4, 2, 2, 0, 0, 2, 2, 14, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.3-b";
N := (6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, 2, 4, -2, -6, 0, -4, 6, -8, -12, 10, -14, -6, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.3-c";
N := (6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, -2, 4, 2, 6, 0, -4, 6, 8, 12, 10, -14, -6, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.3-d";
N := (6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, 2, -6, 0, -4, 2, 2, 0, 0, 2, 2, 14, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.8-a";
N := (11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 5, 2, -4, 6, -2, 1, -9, -4, 5, 5, 6, 5, 2, 12, -12, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.8-b";
N := (11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 0, -7, -2, -7, 6, 10, -4, 9, 12, 10, -11, 7, -7, 15, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.8-c";
N := (11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 0, 7, -2, 7, -6, 10, -4, 9, -12, -10, -11, 7, -7, -15, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.8-d";
N := (11*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, -2, 4, 6, 2, -1, -9, -4, 5, -5, -6, 5, 2, 12, 12, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.7-a";
N := (-15*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -2, -6, 2, 6, 2, 0, -4, -10, 6, 6, 2, 0, -8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 296.7-b";
N := (-15*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 2, 6, 2, -6, -2, 0, -4, -10, -6, -6, 2, 0, -8, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-a";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 8, 6, 9, -3, -5, 4, -3, 3, 2, -1, 5, -4, 2, -6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-b";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -8, 4, 6, 3, -9, 4, -5, 3, -3, 1, -2, 5, 2, -4, -9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-c";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 8, -4, 6, -3, 9, 4, -5, 3, -3, -1, 2, 5, 2, -4, 9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-d";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -8, 6, -9, 3, -5, 4, -3, 3, -2, 1, 5, -4, 2, 6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.1-a";
N := (w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 5, 6, 0, -3, 3, 1, -5, 10, -3, -10, 6, 7, -6, -1, 2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.1-b";
N := (w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, -6, 0, -3, -3, -1, -5, 10, -3, -10, -6, -7, -6, -1, 2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.4-a";
N := (w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 5, 0, 6, -3, 1, 3, 10, -5, -10, -3, 7, 6, -6, 2, -1, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 298.4-b";
N := (w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, 0, -6, -3, -1, -3, 10, -5, -10, -3, -7, -6, -6, 2, -1, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-a";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 2, -2, 8, 8, -10, -10, -2, 2, 10, 4, 4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-b";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 4, -2, 8, -2, 8, 6, 6, 4, -6, -10, -2, 8, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-c";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 6, -8, 2, 8, -2, 6, 6, 6, -4, -10, 8, -2, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-d";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, 6, 0, -10, 8, 2, 2, 0, 6, 2, 14, -4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-e";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 0, -6, 8, -10, 2, 2, -6, 0, 2, -4, 14, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-f";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 6, -6, 0, 0, 6, 6, -6, 6, 10, -4, -4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-g";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 6, 6, 8, 8, 2, 2, 6, 6, 2, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-h";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, -6, -6, 8, 8, 2, 2, -6, -6, 2, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-i";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, 6, 0, 0, 6, 6, 6, -6, 10, -4, -4, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-j";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, 0, 6, 8, -10, 2, 2, 6, 0, 2, -4, 14, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-k";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, -6, 0, -10, 8, 2, 2, 0, -6, 2, 14, -4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-l";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -6, 8, -2, 8, -2, 6, 6, -6, 4, -10, 8, -2, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-m";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -4, 2, -8, -2, 8, 6, 6, -4, 6, -10, -2, 8, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-n";
N := (-20*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, -2, 2, 8, 8, -10, -10, 2, -2, 10, 4, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-a";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, 2, -6, 0, -8, -8, -6, -2, -6, -4, -2, -4, 0, 6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-b";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, -2, 6, 0, -8, -8, -6, -2, 6, 4, -2, -4, 0, -6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.3-a";
N := (-5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 4, 0, -6, -8, -8, -2, -6, -4, -6, -2, 0, -4, 14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.3-b";
N := (-5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -4, 0, 6, -8, -8, -2, -6, 4, 6, -2, 0, -4, -14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 303.1-a";
N := (-8*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, -6, -6, -3, -5, -8, 10, -1, 5, 1, 11, 8, -4, 0, 14, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 303.1-b";
N := (-8*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 6, -6, 3, 5, -8, 10, -1, 5, -1, -11, 8, -4, 0, -14, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 303.2-a";
N := (-8*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -6, 0, -6, -5, -3, 10, -8, 5, -1, 11, 1, 8, 0, -4, -18, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 303.2-b";
N := (-8*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 6, 0, -6, 5, 3, 10, -8, 5, -1, -11, -1, 8, 0, -4, 18, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-a";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, 8, -9, 6, 2, -10, -7, -7, -12, -12, -1, 2, -16, -3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-b";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, -2, 2, -6, 4, -4, -10, -6, 2, 10, -2, 0, -4, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-c";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 4, 4, -7, 8, -4, 4, 1, 5, 0, 2, -5, 10, 4, -1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-d";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, -4, 3, -6, -10, 2, 5, 11, 0, 0, 5, 2, 8, -15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-e";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 4, -2, 2, -4, 2, 10, 4, 2, 0, -10, 10, -2, 4, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-f";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, 10, -2, -4, -8, 10, -10, -6, -2, 10, -8, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-g";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -4, 4, 7, -8, -4, 4, 1, 5, 0, -2, -5, 10, 4, 1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-h";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, 8, 9, -6, 2, -10, -7, -7, 12, 12, -1, 2, -16, 3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-i";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, -10, 2, -4, -8, 10, -10, 6, 2, 10, -8, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-j";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, -8, 7, 0, -8, -4, 5, 3, 4, 2, -11, -6, -4, 9, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-k";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, -8, -7, 0, -8, -4, 5, 3, -4, -2, -11, -6, -4, -9, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-l";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -4, -2, -2, 4, 2, 10, 4, 2, 0, 10, 10, -2, 4, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-m";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -2, -2, 6, 4, -4, -10, -6, -2, -10, -2, 0, -4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.1-n";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, -4, -3, 6, -10, 2, 5, 11, 0, 0, 5, 2, 8, 15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.2-a";
N := (-15*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -2, 6, 2, 8, 8, 10, 2, -6, -10, -2, 12, -12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.2-b";
N := (-15*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -4, 6, -3, -7, -1, 2, -4, -3, -3, 5, -10, 2, 3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.2-c";
N := (-15*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, -8, 4, -3, 7, -9, -12, -4, 7, 5, -1, 6, -2, 9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.2-d";
N := (-15*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 1, -8, -4, 3, 7, -9, -12, -4, -7, -5, -1, 6, -2, -9, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.2-e";
N := (-15*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, -4, -6, 3, -7, -1, 2, -4, 3, 3, 5, -10, 2, -3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.2-f";
N := (-15*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, -2, -6, -2, 8, 8, 10, 2, 6, 10, -2, 12, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-a";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, 8, 6, -9, -10, 2, -7, -7, -12, -12, -1, -16, 2, 12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-b";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, -2, -6, 2, -4, 4, -6, -10, 10, 2, -2, -4, 0, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-c";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 4, 4, 8, -7, 4, -4, 5, 1, 2, 0, -5, 4, 10, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-d";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, -4, -6, 3, 2, -10, 11, 5, 0, 0, 5, 8, 2, 0, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-e";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 4, -2, -4, 2, 10, 2, 2, 4, -10, 0, 10, 4, -2, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-f";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, -2, 10, -8, -4, -10, 10, -2, -6, 10, -8, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-g";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -4, 4, -8, 7, 4, -4, 5, 1, -2, 0, -5, 4, 10, -2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-h";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, 8, -6, 9, -10, 2, -7, -7, 12, 12, -1, -16, 2, -12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-i";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, 2, -10, -8, -4, -10, 10, 2, 6, 10, -8, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-j";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, -8, 0, 7, -4, -8, 3, 5, 2, 4, -11, -4, -6, -14, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-k";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, -8, 0, -7, -4, -8, 3, 5, -2, -4, -11, -4, -6, 14, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-l";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -4, -2, 4, -2, 10, 2, 2, 4, 10, 0, 10, 4, -2, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-m";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -2, 6, -2, -4, 4, -6, -10, -10, -2, -2, -4, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.4-n";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, -4, 6, -3, 2, -10, 11, 5, 0, 0, 5, 8, 2, 0, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.3-a";
N := (-15*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -2, 2, 6, 8, 8, 2, 10, -10, -6, -2, -12, 12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.3-b";
N := (-15*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -4, -3, 6, -1, -7, -4, 2, -3, -3, 5, 2, -10, 6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.3-c";
N := (-15*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, -8, -3, 4, -9, 7, -4, -12, 5, 7, -1, -2, 6, 10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.3-d";
N := (-15*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 1, -8, 3, -4, -9, 7, -4, -12, -5, -7, -1, -2, 6, -10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.3-e";
N := (-15*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, -4, 3, -6, -1, -7, -4, 2, 3, 3, 5, 2, -10, -6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 306.3-f";
N := (-15*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, -2, -2, -6, 8, 8, 2, 10, 10, 6, -2, -12, 12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 313.1-a";
N := (-8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -5, 0, 1, 4, 3, -2, -8, -8, 4, -9, -2, 2, 2, -5, 14, 5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 313.1-b";
N := (-8*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 5, 0, -1, 4, -3, 2, -8, -8, 4, -9, 2, -2, 2, -5, 14, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 313.2-a";
N := (-8*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -5, 1, 0, 4, -2, 3, -8, -8, -9, 4, 2, -2, 2, 14, -5, 4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 313.2-b";
N := (-8*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 5, -1, 0, 4, 2, -3, -8, -8, -9, 4, -2, 2, 2, 14, -5, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.2-a";
N := (17*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, 2, -2, -8, 8, 9, -5, -7, 1, -9, 7, -2, -12, -4, 5, 9, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.2-b";
N := (17*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, -2, 2, -8, -8, -9, -5, -7, 1, -9, -7, 2, -12, -4, 5, -9, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.3-a";
N := (17*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, -2, 2, -8, 9, 8, -7, -5, -9, 1, -2, 7, -12, 5, -4, 14, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 314.3-b";
N := (17*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, 2, -2, -8, -9, -8, -7, -5, -9, 1, 2, -7, -12, 5, -4, -14, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 319.1-a";
N := (-14*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 1, 7, -3, -9, -2, 4, -6, 3, 10, -2, 2, 14, -4, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 319.1-b";
N := (-14*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -1, -7, -3, 9, -2, 4, -6, 3, -10, 2, 2, 14, -4, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 319.2-a";
N := (14*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 7, 1, -3, -9, 4, -2, 3, -6, -2, 10, 2, -4, 14, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 319.2-b";
N := (14*w - 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -7, -1, -3, 9, 4, -2, 3, -6, 2, -10, 2, -4, 14, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.1-a";
N := (-14*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -3, 7, -3, 6, -4, -3, -6, 0, 7, -1, 12, 5, 11, -9, -9, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.1-b";
N := (-14*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 3, -7, 3, 6, 4, 3, -6, 0, 7, -1, -12, -5, 11, -9, -9, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.2-a";
N := (14*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -3, -3, 7, 6, -3, -4, 0, -6, -1, 7, 5, 12, 11, -9, -9, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.2-b";
N := (14*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, 3, -7, 6, 3, 4, 0, -6, -1, 7, -5, -12, 11, -9, -9, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-a";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -10, -3, 3, -4, -4, -7, -7, -3, 3, 5, -4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-b";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, -10, 3, -3, -4, -4, -7, -7, 3, -3, 5, -4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-c";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, -7, -6, 6, 8, 8, 2, 2, -3, 3, 2, 5, 5, 15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-d";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, -1, -6, -6, 5, 5, 2, 2, 6, 6, -13, 14, 14, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-e";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, -1, -6, 6, -4, -4, 2, 2, 3, -3, 14, 5, 5, 9, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-f";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -7, 6, -6, 8, 8, 2, 2, 3, -3, 2, 5, 5, -15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-g";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -1, 6, -6, -4, -4, 2, 2, -3, 3, 14, 5, 5, -9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-h";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, -1, 6, 6, 5, 5, 2, 2, -6, -6, -13, 14, 14, -3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-a";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -5, 3, -2, 5, -3, -2, 0, -3, 5, -1, -5, -1, -12, -2, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-b";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 5, -3, -2, -5, 3, -2, 0, -3, 5, 1, 5, -1, -12, -2, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-c";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 2, -6, -2, -2, 6, -8, 0, -3, -7, -8, 8, 5, -9, 1, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-d";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 5, 0, 0, -7, 11, -10, 11, 0, 0, 11, 5, -16, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-e";
N := (-9*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, 6, -2, 2, -6, -8, 0, -3, -7, 8, -8, 5, -9, 1, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-a";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, -5, -2, -3, 5, 0, -2, 5, -3, -5, -1, -1, -2, -12, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-b";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, 5, -2, 3, -5, 0, -2, 5, -3, 5, 1, -1, -2, -12, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-c";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -6, 2, -2, 6, -2, 0, -8, -7, -3, 8, -8, 5, 1, -9, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-d";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, 5, 0, 0, 11, -7, 11, -10, 0, 0, 11, -16, 5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-e";
N := (9*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 6, -2, -2, -6, 2, 0, -8, -7, -3, -8, 8, 5, 1, -9, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.1-a";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, 6, -4, -9, 6, -4, -4, -4, -1, -3, 2, -13, -13, 9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.1-b";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 3, -6, -4, 9, -6, -4, -4, -4, -1, 3, 2, -13, -13, -9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.1-c";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 6, 8, 3, -6, -4, -4, 8, 5, -3, -10, 5, 5, -9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.1-d";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -3, -6, 8, -3, 6, -4, -4, 8, 5, 3, -10, 5, 5, 9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.5-a";
N := (-19*w + 67)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, 6, 6, -1, -2, 10, -3, -5, -9, 3, 0, 10, -5, -13, 16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.5-b";
N := (-19*w + 67)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -6, -6, -1, 2, -10, -3, -5, -9, 3, 0, 10, -5, -13, -16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.4-a";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 6, -3, -4, 6, -9, -4, -4, -1, -4, -3, 2, -13, -13, -6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.4-b";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -6, 3, -4, -6, 9, -4, -4, -1, -4, 3, 2, -13, -13, 6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.4-c";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 6, 3, 8, -6, 3, -4, -4, 5, 8, -3, -10, 5, 5, -6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.4-d";
N := (2*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -6, -3, 8, 6, -3, -4, -4, 5, 8, 3, -10, 5, 5, 6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.8-a";
N := (-19*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 4, 6, 6, -1, 10, -2, -5, -3, 3, -9, 0, 10, -13, -5, -2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 328.8-b";
N := (-19*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -6, -6, -1, -10, 2, -5, -3, 3, -9, 0, 10, -13, -5, 2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.1-a";
N := (-8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, 2, -4, 0, 6, -2, 0, -4, 2, -2, 10, 10, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.1-b";
N := (-8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, -2, -4, 0, -6, -2, 0, -4, 2, 2, -10, 10, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.3-a";
N := (21*w - 68)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 0, 4, 2, -6, -2, 2, 2, -10, -2, 0, 8, 10, 4, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.3-b";
N := (21*w - 68)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 0, -4, 2, 6, 2, 2, 2, -10, -2, 0, -8, 10, 4, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.3-c";
N := (21*w - 68)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, -3, -5, 8, -6, 4, -4, 2, 2, 10, -3, -7, -5, 13, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.3-d";
N := (21*w - 68)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, 3, 5, 8, 6, -4, -4, 2, 2, 10, 3, 7, -5, 13, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.2-a";
N := (8*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 6, -4, 6, 0, 0, -2, 2, -4, 10, -2, 10, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.2-b";
N := (8*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, -4, -6, 0, 0, -2, 2, -4, -10, 2, 10, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.6-a";
N := (21*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 4, 0, 2, -2, -6, 2, 2, -2, -10, 8, 0, 10, 14, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.6-b";
N := (21*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -4, 0, 2, 2, 6, 2, 2, -2, -10, -8, 0, 10, 14, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.6-c";
N := (21*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, -5, -3, 8, 4, -6, 2, -4, 10, 2, -7, -3, -5, -4, 13, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.6-d";
N := (21*w + 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, 5, 3, 8, -4, 6, 2, -4, 10, 2, 7, 3, -5, -4, 13, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.1-a";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 0, -6, 2, -8, 0, -2, 6, 6, 6, 8, 2, 10, 8, 2, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.1-b";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 6, 6, -7, 6, 0, 8, -7, 8, -10, 6, -6, -4, -4, 14, 9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.1-c";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 4, -8, 3, 1, 1, -8, -4, 0, 2, -2, 6, 2, 6, -3, 8, -9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.1-d";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -4, 8, -3, 1, -1, 8, -4, 0, 2, -2, -6, -2, 6, -3, 8, 9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.1-e";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, -6, -6, -7, -6, 0, 8, -7, 8, -10, -6, 6, -4, -4, 14, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.1-f";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 0, 6, 2, 8, 0, -2, 6, 6, 6, -8, -2, 10, 8, 2, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.4-a";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, -6, 0, 2, 0, -8, 6, -2, 6, 6, 2, 8, 10, 2, 8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.4-b";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 6, 6, -7, 0, 6, -7, 8, -10, 8, -6, 6, -4, 14, -4, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.4-c";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 4, 3, -8, 1, -8, 1, 0, -4, -2, 2, 2, 6, 6, 8, -3, 6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.4-d";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -4, -3, 8, 1, 8, -1, 0, -4, -2, 2, -2, -6, 6, 8, -3, -6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.4-e";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, -6, -6, -7, 0, -6, -7, 8, -10, 8, 6, -6, -4, 14, -4, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 334.4-f";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 6, 0, 2, 0, 8, 6, -2, 6, 6, -2, -8, 10, 2, 8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 341.1-a";
N := (-10*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -1, 5, -3, 0, 0, 1, 12, -3, 5, 8, 11, 5, 8, -3, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 341.1-b";
N := (-10*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 1, -5, -3, 0, 0, 1, 12, -3, -5, -8, 11, 5, 8, 3, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 341.2-a";
N := (-10*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 5, -1, -3, 0, 0, 1, -3, 12, 8, 5, 11, 8, 5, 0, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 341.2-b";
N := (-10*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -5, 1, -3, 0, 0, 1, -3, 12, -8, -5, 11, 8, 5, 0, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.2-a";
N := (-3*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, -8, 3, -6, -2, 3, -3, 1, 3, -10, -10, 7, -2, -2, 12, 15, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.2-b";
N := (-3*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 2, -6, 6, 2, 6, 0, -8, 6, -10, 10, 2, 10, 4, 12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.2-c";
N := (-3*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -2, 6, 6, -2, -6, 0, -8, 6, -10, -10, -2, 10, 4, 12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.2-d";
N := (-3*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, 8, -3, -6, 2, -3, -3, 1, 3, -10, 10, -7, -2, -2, 12, -15, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.3-a";
N := (3*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 3, -8, -6, 3, -2, 1, -3, -10, 3, 7, -10, -2, 12, -2, -10, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.3-b";
N := (3*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -6, 2, 6, 6, 2, -8, 0, -10, 6, 2, 10, 10, 12, 4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.3-c";
N := (3*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 6, -2, 6, -6, -2, -8, 0, -10, 6, -2, -10, 10, 12, 4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 346.3-d";
N := (3*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -3, 8, -6, -3, 2, 1, -3, -10, 3, -7, 10, -2, 12, -2, 10, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-a";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, 2, 6, -4, 8, -10, 2, 6, 6, -10, -16, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-b";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 4, -2, -2, 6, -8, 8, -2, -4, 8, -2, 0, 8, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-c";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 6, 6, 6, -8, -4, 6, -10, 2, 2, 2, -4, 0, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-d";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, -2, 2, -10, 4, -4, 10, 0, 0, -6, 12, 12, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-e";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, -2, 8, 0, -2, 2, -8, 10, 10, -8, 12, -4, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-f";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, -2, 8, 8, -2, 2, -8, 6, 6, 0, -12, -12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-g";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 2, 6, -2, -8, -4, -2, 2, 6, 2, -2, -4, -4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-h";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 0, 2, 6, 2, -4, -4, 2, 0, 0, 2, 8, -16, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-i";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, -2, 10, 0, 4, -10, 10, 2, -10, -2, 12, -4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-j";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 6, -6, -4, -6, -4, -4, 8, -10, 0, 0, 2, 14, 2, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-k";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, -2, 2, 0, 4, -10, -2, -2, -2, 10, -12, 8, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-l";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, -2, -2, 0, 4, -10, -2, 2, 2, 10, -12, 8, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-m";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 6, -4, 6, -4, -4, 8, -10, 0, 0, 2, 14, 2, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-n";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, -2, -10, 0, 4, -10, 10, -2, 10, -2, 12, -4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-o";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 0, 2, -6, 2, -4, -4, 2, 0, 0, 2, 8, -16, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-p";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -2, 6, 2, -8, -4, -2, 2, -6, -2, -2, -4, -4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-q";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, -2, -8, 8, -2, 2, -8, -6, -6, 0, -12, -12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-r";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, -2, -8, 0, -2, 2, -8, -10, -10, -8, 12, -4, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-s";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -2, -2, -10, 4, -4, 10, 0, 0, -6, 12, 12, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-t";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -6, 6, -6, -8, -4, 6, -10, -2, -2, 2, -4, 0, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-u";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -4, -2, 2, 6, -8, 8, -2, 4, -8, -2, 0, 8, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.1-v";
N := (-16*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 2, -6, -4, 8, -10, 2, -6, -6, -10, -16, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.3-a";
N := (7*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, 3, 8, 6, -4, -1, 8, 2, -6, 9, -1, 8, -10, -18, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.3-b";
N := (7*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -3, -3, 8, -6, -4, -1, 8, 2, 6, -9, -1, 8, -10, 18, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.4-a";
N := (-11*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 6, 2, 0, 4, -2, -12, 2, -2, 10, 4, -4, 14, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.4-b";
N := (-11*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -6, 2, 0, 4, -2, -12, 2, 2, -10, 4, -4, 14, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-a";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, 2, 6, 8, -4, 2, -10, 6, 6, -10, -4, -16, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-b";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 8, -2, -2, -8, 6, -2, 8, 8, -4, -2, 8, 0, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-c";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 2, 6, 6, -4, -8, -10, 6, 2, 2, 2, 0, -4, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-d";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, -2, 2, 4, -10, 10, -4, 0, 0, -6, 12, 12, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-e";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -2, 8, -2, 0, -8, 2, 10, 10, -8, -4, 12, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-f";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, -2, 8, -2, 8, -8, 2, 6, 6, 0, -12, -12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-g";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 6, 6, -2, -4, -8, 2, -2, 2, 6, -2, -4, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-h";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 0, 2, 6, -4, 2, 2, -4, 0, 0, 2, -16, 8, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-i";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, -2, 10, 4, 0, 10, -10, -10, 2, -2, -4, 12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-j";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 6, -4, -6, -4, -4, -10, 8, 0, 0, 2, 2, 14, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-k";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, -2, 2, 4, 0, -2, -10, -2, -2, 10, 8, -12, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-l";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, -2, -2, 4, 0, -2, -10, 2, 2, 10, 8, -12, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-m";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, -6, -4, 6, -4, -4, -10, 8, 0, 0, 2, 2, 14, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-n";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, -2, -10, 4, 0, 10, -10, 10, -2, -2, -4, 12, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-o";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 0, 2, -6, -4, 2, 2, -4, 0, 0, 2, -16, 8, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-p";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -6, 6, 2, -4, -8, 2, -2, -2, -6, -2, -4, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-q";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, -2, -8, -2, 8, -8, 2, -6, -6, 0, -12, -12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-r";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -2, -8, -2, 0, -8, 2, -10, -10, -8, -4, 12, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-s";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -2, -2, 4, -10, 10, -4, 0, 0, -6, 12, 12, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-t";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, -2, 6, -6, -4, -8, -10, 6, -2, -2, 2, 0, -4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-u";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -8, -2, 2, -8, 6, -2, 8, -8, 4, -2, 8, 0, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.2-v";
N := (16*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 2, -6, 8, -4, 2, -10, -6, -6, -10, -4, -16, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.6-a";
N := (7*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, 3, 8, 6, -1, -4, 2, 8, 9, -6, -1, -10, 8, -15, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.6-b";
N := (7*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -3, -3, 8, -6, -1, -4, 2, 8, -9, 6, -1, -10, 8, 15, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.5-a";
N := (-11*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -2, 2, 0, -2, 4, 2, -12, 10, -2, 4, 14, -4, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 348.5-b";
N := (-11*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, 2, 2, 0, -2, 4, 2, -12, -10, 2, 4, 14, -4, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.1-a";
N := (4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -6, 6, -6, 8, 2, 6, 2, -2, 2, 4, 10, -2, -2, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.1-b";
N := (4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 6, 6, 2, 4, -10, 4, -10, 10, 6, -4, -10, 2, -6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.1-c";
N := (4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 6, -6, -2, 4, -10, 4, -10, -10, -6, -4, -10, 2, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.1-d";
N := (4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 6, 6, 6, -8, 2, 6, 2, -2, -2, -4, 10, -2, -2, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.3-a";
N := (-18*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -2, -6, 6, 4, 2, -8, -2, 6, -6, -8, -14, -10, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.3-b";
N := (-18*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, 2, 6, 4, -8, 10, -10, 6, 2, -2, 4, -4, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.3-c";
N := (-18*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 10, -6, 6, 4, -4, -2, -2, 6, -6, 10, -8, 8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.3-d";
N := (-18*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 6, 2, 4, -2, 0, -12, -2, 2, 8, -8, 4, 16, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.3-e";
N := (-18*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, 6, -2, -4, -2, 0, -12, -2, -2, -8, -8, 4, 16, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.3-f";
N := (-18*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 10, 6, -6, 4, -4, -2, -2, -6, 6, 10, -8, 8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.3-g";
N := (-18*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, -2, -6, 4, -8, 10, -10, -6, -2, -2, 4, -4, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.3-h";
N := (-18*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -2, 6, -6, 4, 2, -8, -2, -6, 6, -8, -14, -10, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.5-a";
N := (-7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 2, -2, 6, 0, 2, -2, -2, -2, -2, 0, 6, 10, 2, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.5-b";
N := (-7*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 4, -2, -2, -6, 0, 2, -2, -2, -2, 2, 0, 6, 10, 2, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.2-a";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 0, 6, 8, -6, 6, 2, -2, 2, 4, 2, 10, -2, -2, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.2-b";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 6, 2, 6, -10, 4, -10, 4, 6, 10, -4, 2, -10, 16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.2-c";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 6, -2, -6, -10, 4, -10, 4, -6, -10, -4, 2, -10, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.2-d";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 0, 6, -8, 6, 6, 2, -2, 2, -4, -2, 10, -2, -2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.4-a";
N := (-18*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, -2, 6, -6, 2, 4, -2, -8, -6, 6, -8, -10, -14, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.4-b";
N := (-18*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, 6, 2, -8, 4, -10, 10, 2, 6, -2, -4, 4, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.4-c";
N := (-18*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 10, 6, -6, -4, 4, -2, -2, -6, 6, 10, 8, -8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.4-d";
N := (-18*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 6, 4, 2, 0, -2, -2, -12, 8, 2, -8, 16, 4, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.4-e";
N := (-18*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 6, -4, -2, 0, -2, -2, -12, -8, -2, -8, 16, 4, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.4-f";
N := (-18*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 10, -6, 6, -4, 4, -2, -2, 6, -6, 10, 8, -8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.4-g";
N := (-18*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, -6, -2, -8, 4, -10, 10, -2, -6, -2, -4, 4, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.4-h";
N := (-18*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, -2, -6, 6, 2, 4, -2, -8, 6, -6, -8, -10, -14, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.6-a";
N := (7*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -4, -2, 0, 6, -2, 2, -2, -2, 0, -2, 6, 2, 10, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 352.6-b";
N := (7*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 4, -2, 0, -6, -2, 2, -2, -2, 0, 2, 6, 2, 10, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-a";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 3, 0, -6, 6, -1, -10, 10, -1, -1, 11, 11, 8, -8, 10, 13, 13, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-b";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -3, 3, 3, -1, -6, -6, -4, -4, 2, 2, 6, 6, -13, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-c";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 3, 0, 6, -6, -1, 10, -10, -1, -1, 11, 11, -8, 8, 10, 13, 13, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-d";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 3, -3, -3, -1, 6, 6, -4, -4, 2, 2, -6, -6, -13, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 362.2-a";
N := (-7*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -4, -2, 2, -6, 0, -4, 8, 10, -8, -6, 6, 4, -12, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 362.2-b";
N := (-7*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 4, 2, 2, 6, 0, -4, 8, 10, -8, 6, -6, 4, -12, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 362.3-a";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -2, -4, 2, 0, -6, 8, -4, -8, 10, 6, -6, 4, 4, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 362.3-b";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 2, 4, 2, 0, 6, 8, -4, -8, 10, -6, 6, 4, 4, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-a";
N := (-22*w + 77)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, -4, 6, -6, -6, -5, -5, 3, 3, 2, 2, -13, -1, -1, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-b";
N := (-22*w + 77)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -4, 6, -6, 6, 5, 5, -3, -3, 2, -2, 13, 1, 1, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-c";
N := (-22*w + 77)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, -2, -6, -6, 6, 8, 8, -6, -6, -2, 2, -2, 4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-d";
N := (-22*w + 77)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, 2, -6, 6, -6, 8, 8, -6, -6, 2, -2, -2, 4, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-e";
N := (-22*w + 77)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 4, 6, 6, -6, 5, 5, -3, -3, -2, 2, 13, 1, 1, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-f";
N := (-22*w + 77)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 4, 6, 6, 6, -5, -5, 3, 3, -2, -2, -13, -1, -1, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-a";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 8, 6, 4, 5, -1, 1, -10, 1, 4, -5, -13, 13, -7, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-b";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -2, -6, -6, 2, 0, -2, 6, -10, 6, 10, 4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-c";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, -6, 6, -2, -8, -10, -6, 6, 2, 6, -4, 4, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-d";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 3, -4, 0, 0, 2, 8, -7, -3, 12, 5, 8, 8, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-e";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 4, 4, -8, 10, 8, 1, 5, -4, 5, 4, -16, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-f";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 6, 8, -9, 3, 5, 2, 11, 0, 9, 5, 5, 5, 6, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-g";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 0, -8, -4, 2, 4, -4, -2, 10, 10, -10, -8, -4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-h";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 0, -8, 4, -2, 4, -4, -2, -10, -10, -10, -8, -4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-i";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -6, 8, 9, -3, 5, 2, 11, 0, -9, 5, 5, 5, -6, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-j";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 4, -4, 8, 10, 8, 1, -5, 4, 5, 4, -16, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-k";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -3, -4, 0, 0, 2, 8, -7, 3, -12, 5, 8, 8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-l";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, -6, -6, 2, -8, -10, -6, -6, -2, 6, -4, 4, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-m";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 2, -6, 6, -2, 0, -2, 6, 10, -6, 10, 4, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.1-n";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -8, -6, 4, -5, 1, 1, -10, 1, -4, 5, -13, 13, -7, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.3-a";
N := (w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 7, -6, -2, -5, 1, -8, 11, -2, 2, 8, -1, 7, -13, 15, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.3-b";
N := (w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, -6, -2, 6, 2, -8, 10, -10, -8, -8, -8, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.3-c";
N := (w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, -6, 2, -6, 2, -8, 10, 10, 8, -8, -8, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.3-d";
N := (w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -7, 6, -2, 5, -1, -8, 11, -2, -2, -8, -1, 7, -13, -15, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.4-a";
N := (-17*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -2, -6, 6, -2, -2, -8, -2, -2, 6, 8, -8, -8, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.4-b";
N := (-17*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 2, -6, -6, 2, -2, -8, -2, 2, -6, 8, -8, -8, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-a";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 8, 4, -1, 5, 1, 1, -10, -5, 4, -13, -7, 13, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-b";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 6, -6, 2, -6, 0, 6, -2, 6, -10, 10, 4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-c";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, -6, -2, 6, -8, -6, -10, 2, 6, 6, 4, -4, -16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-d";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 3, -4, 0, 0, 2, -7, 8, 12, -3, 5, 8, 8, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-e";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 1, 4, -8, 4, 10, 1, 8, -4, 5, 5, -16, 4, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-f";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 6, 0, 8, 3, -9, 5, 11, 2, 9, 0, 5, 5, 5, -18, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-g";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 2, -8, 2, -4, 4, -2, -4, 10, 10, -10, -4, -8, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-h";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -2, -8, -2, 4, 4, -2, -4, -10, -10, -10, -4, -8, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-i";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -6, 0, 8, -3, 9, 5, 11, 2, -9, 0, 5, 5, 5, 18, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-j";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, 4, 8, -4, 10, 1, 8, 4, -5, 5, -16, 4, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-k";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -3, -4, 0, 0, 2, -7, 8, -12, 3, 5, 8, 8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-l";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, -6, 2, -6, -8, -6, -10, -2, -6, 6, 4, -4, 16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-m";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -6, -6, -2, 6, 0, 6, -2, -6, 10, 10, 4, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.2-n";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -8, 4, 1, -5, 1, 1, -10, 5, -4, -13, -7, 13, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.6-a";
N := (w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 7, -2, 1, -5, -8, -2, 11, 8, 2, -1, -13, 7, -9, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.6-b";
N := (w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, -6, 6, -2, 2, 10, -8, -8, -10, -8, 12, -8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.6-c";
N := (w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, -6, -6, 2, 2, 10, -8, 8, 10, -8, 12, -8, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.6-d";
N := (w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, -7, -2, -1, 5, -8, -2, 11, -8, -2, -1, -13, 7, 9, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.5-a";
N := (17*w - 61)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -2, -6, -2, 6, -2, -2, -8, 6, -2, 8, -8, -8, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 372.5-b";
N := (17*w - 61)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 2, -6, 2, -6, -2, -2, -8, -6, 2, 8, -8, -8, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.1-a";
N := (-15*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -4, 0, 0, -8, -8, 8, 3, 3, 3, 10, 13, 8, -4, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.1-b";
N := (-15*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, -4, 6, 6, 2, 2, 2, 11, -9, 3, -4, -7, -4, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.1-c";
N := (-15*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, 6, -6, 8, -8, 2, 6, 2, 2, 6, 4, -12, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.1-d";
N := (-15*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, -6, 6, 8, -8, 2, 6, -2, -2, 6, 4, -12, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.1-e";
N := (-15*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -4, 0, 0, -8, -8, 8, 3, -3, -3, 10, 13, 8, 4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.1-f";
N := (-15*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -4, -6, -6, 2, 2, 2, 11, 9, -3, -4, -7, -4, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.2-a";
N := (7*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -6, -7, 5, 3, 3, -3, -4, 10, -10, 10, 0, 2, 3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.2-b";
N := (7*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -6, 7, -5, 3, 3, -3, -4, -10, 10, 10, 0, 2, -3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.4-a";
N := (15*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -4, 0, 0, -8, -8, 3, 8, 3, 3, 10, 8, 13, 11, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.4-b";
N := (15*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, -4, 6, 6, 2, 2, 11, 2, 3, -9, -4, -4, -7, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.4-c";
N := (15*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, -6, 6, -8, 8, 6, 2, 2, 2, 6, -12, 4, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.4-d";
N := (15*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, 6, -6, -8, 8, 6, 2, -2, -2, 6, -12, 4, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.4-e";
N := (15*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -4, 0, 0, -8, -8, 3, 8, -3, -3, 10, 8, 13, -11, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.4-f";
N := (15*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -4, -6, -6, 2, 2, 11, 2, -3, 9, -4, -4, -7, 9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.3-a";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -6, 5, -7, 3, 3, -4, -3, -10, 10, 10, 2, 0, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 374.3-b";
N := (7*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -6, -5, 7, 3, 3, -4, -3, 10, -10, 10, 2, 0, -5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-a";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, 2, 6, 2, 0, 8, -2, 6, 2, -2, 2, 4, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-b";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 6, 10, -6, 10, 0, -8, -10, 6, -2, 6, 2, -4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-c";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, 2, 4, 6, 0, -4, 2, 2, -8, 6, 6, -4, -4, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-d";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 6, -6, 2, -6, 0, -8, 6, -10, 6, 6, 2, 12, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-e";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, 2, -2, 6, 0, 8, -10, -10, 10, -6, -6, -4, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-f";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, -6, -8, -6, 0, 4, -6, 2, -12, -6, -10, -12, 12, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-g";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, 2, 2, 6, -8, 0, 6, -2, -2, 2, 2, 4, -4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-h";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -6, -2, -2, 0, -8, 6, -2, 2, 10, 2, 12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-i";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, -6, 2, 2, 8, 0, -2, 6, -10, -2, 2, -4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-j";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -6, -2, -2, 8, 0, -2, 6, 10, 2, 2, -4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-k";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, -6, 2, 2, 0, -8, 6, -2, -2, -10, 2, 12, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-l";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -2, 2, -2, -6, -8, 0, 6, -2, 2, -2, 2, 4, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-m";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -6, -6, 8, 6, 0, 4, -6, 2, 12, 6, -10, -12, 12, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-n";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, 2, 2, -6, 0, 8, -10, -10, -10, 6, -6, -4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-o";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, -6, -6, -2, 6, 0, -8, 6, -10, -6, -6, 2, 12, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-p";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, 2, -4, -6, 0, -4, 2, 2, 8, -6, 6, -4, -4, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-q";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -6, 10, 6, -10, 0, -8, -10, 6, 2, -6, 2, -4, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.1-r";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 2, -6, -2, 0, 8, -2, 6, -2, 2, 2, 4, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.3-a";
N := (-20*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -4, 2, 0, 0, 8, -4, -6, -6, 12, 0, 6, -8, 0, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.3-b";
N := (-20*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, -6, 4, -8, 0, 4, 2, -6, 0, 0, -2, 8, 8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.3-c";
N := (-20*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, -6, -4, 8, 0, 4, 2, -6, 0, 0, -2, 8, 8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.3-d";
N := (-20*w - 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, 2, 0, 0, 8, -4, -6, -6, -12, 0, 6, -8, 0, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-a";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 6, -2, 6, 6, 8, 4, -6, -6, 6, 6, 6, 0, 4, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-b";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -2, 2, 6, 0, 8, -10, 10, -10, 6, 6, 4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-c";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 10, 6, 6, -4, 4, 2, -2, 6, -6, -14, -4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-d";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, 2, -2, 6, -8, 4, -10, 2, 2, 2, 10, -12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-e";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, 2, -2, -6, -2, 0, 8, -2, -6, -10, -10, -10, -4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-f";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, -2, 6, 2, 4, 0, 2, -2, -2, 2, -10, 12, -4, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-g";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -2, 10, -2, -8, -8, 6, 2, -2, 6, -10, 12, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-h";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, -2, 6, 4, -4, 2, 6, -2, 10, 2, -12, 12, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-i";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 6, 6, -2, -6, 0, -8, 6, 10, -6, -6, -2, -12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-j";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, -2, 2, 4, 0, 6, -2, -6, 6, 2, 8, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-k";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, 2, -2, 4, 0, 6, -2, 6, -6, 2, 8, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-l";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, 6, 2, 6, 0, -8, 6, 10, 6, 6, -2, -12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-m";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 2, -6, 4, -4, 2, 6, 2, -10, 2, -12, 12, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-n";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, -2, -10, 2, -8, -8, 6, 2, 2, -6, -10, 12, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-o";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, -2, -6, -2, 4, 0, 2, -2, 2, -2, -10, 12, -4, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-p";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, -2, -2, 6, 2, 0, 8, -2, -6, 10, 10, -10, -4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-q";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 2, 2, -6, -8, 4, -10, 2, -2, -2, 10, -12, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-r";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 10, -6, -6, -4, 4, 2, -2, -6, 6, -14, -4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-s";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, -2, -2, -6, 0, 8, -10, 10, 10, -6, 6, 4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.5-t";
N := (-10*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -6, -2, -6, -6, 8, 4, -6, -6, -6, -6, 6, 0, 4, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-a";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, 2, 2, 6, 8, 0, 6, -2, -2, 2, 2, -4, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-b";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -2, 10, 10, -6, -8, 0, 6, -10, 6, -2, 2, -4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-c";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, 2, 6, 4, -4, 0, 2, 2, 6, -8, 6, -4, -4, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-d";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 6, 6, -6, -6, 2, -8, 0, -10, 6, 6, 6, 2, 12, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-e";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, 2, 6, -2, 8, 0, -10, -10, -6, 10, -6, -4, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-f";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 0, -6, -6, -8, 4, 0, 2, -6, -6, -12, -10, 12, -12, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-g";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, 2, 6, 2, 0, -8, -2, 6, 2, -2, 2, -4, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-h";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -6, -2, -2, -8, 0, -2, 6, 10, 2, 2, 4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-i";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, -6, 2, 2, 0, 8, 6, -2, -2, -10, 2, -12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-j";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -6, -2, -2, 0, 8, 6, -2, 2, 10, 2, -12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-k";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, -6, 2, 2, -8, 0, -2, 6, -10, -2, 2, 4, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-l";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 2, -6, -2, 0, -8, -2, 6, -2, 2, 2, -4, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-m";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 0, -6, 6, 8, 4, 0, 2, -6, 6, 12, -10, 12, -12, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-n";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, 2, -6, 2, 8, 0, -10, -10, 6, -10, -6, -4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-o";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -6, -6, -6, 6, -2, -8, 0, -10, 6, -6, -6, 2, 12, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-p";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 2, -6, -4, -4, 0, 2, 2, -6, 8, 6, -4, -4, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-q";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 2, 10, -10, 6, -8, 0, 6, -10, -6, 2, 2, -4, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.2-r";
N := (-8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -2, 2, -2, -6, 8, 0, 6, -2, 2, -2, 2, -4, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.4-a";
N := (-20*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, 0, 2, 0, 0, -4, 8, -6, -6, 0, 12, 6, 0, -8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.4-b";
N := (-20*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, -6, -8, 4, 4, 0, -6, 2, 0, 0, -2, 8, 8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.4-c";
N := (-20*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, -6, 8, -4, 4, 0, -6, 2, 0, 0, -2, 8, 8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.4-d";
N := (-20*w + 64)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, 2, 0, 0, -4, 8, -6, -6, 0, -12, 6, 0, -8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-a";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 2, -2, 6, 6, 4, 8, -6, -6, 6, 6, 6, 4, 0, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-b";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -2, 6, 2, 8, 0, 10, -10, 6, -10, 6, 4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-c";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 10, 6, 6, 4, -4, -2, 2, -6, 6, -14, -4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-d";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -2, 2, 6, -2, 4, -8, 2, -10, 2, 2, 10, 4, -12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-e";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -6, -2, -2, -6, 8, 0, -6, -2, -10, -10, -10, -12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-f";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, -2, 2, 6, 0, 4, -2, 2, 2, -2, -10, -4, 12, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-g";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -2, -2, 10, -8, -8, 2, 6, 6, -2, -10, 4, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-h";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 6, -2, -4, 4, 6, 2, 10, -2, 2, 12, -12, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-i";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 6, 6, -6, -2, -8, 0, 10, 6, -6, -6, -2, -12, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-j";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, -6, 2, -2, 0, 4, -2, 6, 6, -6, 2, -4, 8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-k";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, -6, -2, 2, 0, 4, -2, 6, -6, 6, 2, -4, 8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-l";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -6, 6, 6, 2, -8, 0, 10, 6, 6, 6, -2, -12, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-m";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, -6, 2, -4, 4, 6, 2, -10, 2, 2, 12, -12, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-n";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, -2, 2, -10, -8, -8, 2, 6, -6, 2, -10, 4, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-o";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, -2, -2, -6, 0, 4, -2, 2, -2, 2, -10, -4, 12, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-p";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 6, -2, 2, 6, 8, 0, -6, -2, 10, 10, -10, -12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-q";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, 2, -6, 2, 4, -8, 2, -10, -2, -2, 10, 4, -12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-r";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 10, -6, -6, 4, -4, -2, 2, 6, -6, -14, -4, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-s";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, -2, -6, -2, 8, 0, 10, -10, -6, 10, 6, 4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 384.6-t";
N := (-10*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, -2, -2, -6, -6, 4, 8, -6, -6, -6, -6, 6, 4, 0, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 388.1-a";
N := (-16*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 7, -3, -6, -10, -5, 10, -5, -5, -6, -3, -2, -8, -7, -9, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 388.1-b";
N := (-16*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -6, 3, -1, 0, 0, 5, -4, -7, 11, 6, -9, 14, 14, 5, -15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 388.1-c";
N := (-16*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -7, -3, 6, 10, -5, 10, -5, -5, 6, 3, -2, -8, -7, 9, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 388.1-d";
N := (-16*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 6, -3, -1, 0, 0, 5, -4, -7, 11, -6, 9, 14, 14, 5, 15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 388.2-a";
N := (16*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 7, 0, -3, -10, -6, 10, -5, -5, -5, -3, -6, -2, -7, -8, 14, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 388.2-b";
N := (16*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, 3, -6, -1, 0, 0, -4, 5, 11, -7, -9, 6, 14, 5, 14, 0, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 388.2-c";
N := (16*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -7, 0, -3, 10, 6, 10, -5, -5, -5, 3, 6, -2, -7, -8, -14, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 388.2-d";
N := (16*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -3, 6, -1, 0, 0, -4, 5, 11, -7, 9, -6, 14, 5, 14, 0, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-a";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, -10, 6, 6, -4, -4, 2, 2, -6, -6, -10, 8, 8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-b";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, 6, 6, -4, 8, -4, 2, 0, -6, -4, 2, -4, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-c";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 2, 6, 6, 8, -4, 2, -4, -6, 0, -4, -4, 2, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-d";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 6, 6, 2, -8, -8, 2, 10, 2, 6, -2, -12, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-e";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 6, 2, 6, -8, -8, 10, 2, 6, 2, -2, 12, -12, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-f";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 10, -2, 0, 0, -6, -6, 6, 10, -2, -4, -4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-g";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -2, 10, 0, 0, -6, -6, 10, 6, -2, -4, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-h";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 2, 2, 0, 0, 6, -6, 2, 6, 10, -4, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-i";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, -6, 6, -4, 8, 8, -10, 0, 6, -4, 2, -4, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-j";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, 2, 0, 0, -6, 6, 6, 2, 10, 8, -4, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-k";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 2, 6, -6, 8, -4, -10, 8, 6, 0, -4, -4, 2, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-l";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 2, -6, 6, 8, -4, -10, 8, -6, 0, -4, -4, 2, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-m";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -2, -2, 0, 0, -6, 6, -6, -2, 10, 8, -4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-n";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, 6, -6, -4, 8, 8, -10, 0, -6, -4, 2, -4, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-o";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -2, -2, 0, 0, 6, -6, -2, -6, 10, -4, 8, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-p";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 2, -10, 0, 0, -6, -6, -10, -6, -2, -4, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-q";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -10, 2, 0, 0, -6, -6, -6, -10, -2, -4, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-r";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 6, -2, -6, -8, -8, 10, 2, -6, -2, -2, 12, -12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-s";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 6, -6, -2, -8, -8, 2, 10, -2, -6, -2, -12, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-t";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 2, -6, -6, 8, -4, 2, -4, 6, 0, -4, -4, 2, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-u";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, -6, -6, -4, 8, -4, 2, 0, 6, -4, 2, -4, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-v";
N := (-24*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, -10, -6, -6, -4, -4, 2, 2, 6, 6, -10, 8, 8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-a";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -3, -8, -8, -3, -1, -7, 5, -8, 0, -6, 3, 13, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-b";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 8, -2, -6, 2, -4, 6, 2, 2, 2, 2, 0, -6, 6, -14, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-c";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -8, 2, -6, -2, 4, 6, 2, 2, 2, -2, 0, -6, 6, -14, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-d";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -3, 8, 8, -3, -1, -7, 5, 8, 0, -6, 3, 13, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-a";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -3, -8, -8, -1, -3, 5, -7, 0, -8, -6, 13, 3, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-b";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 8, -6, -4, 2, 2, 6, 2, 2, 0, 2, -6, -14, 6, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-c";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -8, -6, 4, -2, 2, 6, 2, 2, 0, -2, -6, -14, 6, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-d";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -3, 8, 8, -1, -3, 5, -7, 0, 8, -6, 13, 3, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.1-a";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, -3, 6, 2, 6, 6, 5, 5, -1, 5, 3, 0, -1, 8, -4, -12, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.1-b";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 0, 1, -2, -9, 6, 8, 0, -3, 8, -5, -6, 2, -2, 2, 3, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.1-c";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 0, -1, -2, 9, -6, 8, 0, -3, 8, 5, 6, 2, -2, 2, -3, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.1-d";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 3, -6, 2, -6, -6, 5, 5, -1, 5, -3, 0, -1, 8, -4, 12, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.2-a";
N := (11*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -5, 0, 6, 2, -10, 4, 3, 5, -8, -2, 2, 10, 1, -7, -1, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.2-b";
N := (11*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 5, 0, -6, 2, 10, -4, 3, 5, -8, -2, -2, -10, 1, -7, -1, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.4-a";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, 6, -3, 2, 6, 6, 5, 5, 5, -1, 0, 3, -1, -4, 8, 15, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.4-b";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 1, 0, -2, 6, -9, 0, 8, 8, -3, -6, -5, 2, 2, -2, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.4-c";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, -1, 0, -2, -6, 9, 0, 8, 8, -3, 6, 5, 2, 2, -2, 13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.4-d";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, -6, 3, 2, -6, -6, 5, 5, 5, -1, 0, -3, -1, -4, 8, -15, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.3-a";
N := (11*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -5, 6, 0, 2, 4, -10, 5, 3, -2, -8, 10, 2, 1, -1, -7, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 398.3-b";
N := (11*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 5, -6, 0, 2, -4, 10, 5, 3, -2, -8, -10, -2, 1, -1, -7, 2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-a";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, -6, -6, -4, -4, 2, 2, -6, -6, -10, 2, 2, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-b";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -4, 4, 8, -8, 4, 4, -6, -6, 8, -8, -2, -8, -8, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-c";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, 6, 6, -4, -4, 2, 2, 6, 6, -10, 2, 2, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-d";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -4, -8, 8, 4, 4, -6, -6, -8, 8, -2, -8, -8, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-a";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, -2, 1, 0, -8, -7, -1, 4, 8, 4, -8, -2, -2, -11, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-b";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 4, -2, -5, -4, 4, 5, -3, -8, -8, 0, -8, -6, -2, 9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-c";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -4, -5, 4, -2, -3, -7, -4, 8, -2, 10, 16, -8, -15, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-d";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 6, 6, 0, -8, 2, -6, 6, 6, 2, -8, -8, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-e";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -4, -4, -3, 0, -6, 1, -1, 0, 0, 6, 2, -8, 4, 13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-f";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 2, -6, -6, 0, -8, 2, -6, -6, -6, 2, -8, -8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-g";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 2, -1, 0, -8, -7, -1, 4, -8, -4, -8, -2, -2, 11, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-h";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 4, 5, -4, -2, -3, -7, -4, -8, 2, 10, 16, -8, 15, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-i";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -4, 2, 5, 4, 4, 5, -3, -8, 8, 0, -8, -6, -2, -9, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.2-j";
N := (-10*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 4, 4, 3, 0, -6, 1, -1, 0, 0, -6, 2, -8, 4, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-a";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -2, 0, 0, 1, -7, -8, 4, -1, 4, 8, -8, -2, -2, 5, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-b";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -2, 4, -4, -5, 5, 4, -8, -3, 0, -8, -8, -2, -6, 9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-c";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 0, 4, -5, -3, -2, -4, -7, -2, 8, 10, -8, 16, 1, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-d";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 6, 6, -8, 0, -6, 2, 6, 6, 2, -8, -8, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-e";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -4, -4, 0, -3, 1, -6, 0, -1, 6, 0, 2, 4, -8, -3, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-f";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 2, -6, -6, -8, 0, -6, 2, -6, -6, 2, -8, -8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-g";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 2, 0, 0, -1, -7, -8, 4, -1, -4, -8, -8, -2, -2, -5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-h";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, 0, -4, 5, -3, -2, -4, -7, 2, -8, 10, -8, 16, -1, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-i";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 2, -4, 4, 5, 5, 4, -8, -3, 0, 8, -8, -2, -6, -9, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.3-j";
N := (10*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 4, 4, 0, 3, 1, -6, 0, -1, -6, 0, 2, 4, -8, 3, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.1-a";
N := (-13*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 6, -2, 6, -6, 0, 0, 10, -6, -6, 6, 2, 0, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.1-b";
N := (-13*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -6, -2, -6, 6, 0, 0, 10, -6, 6, -6, 2, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-a";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 8, -4, -8, 8, 0, -6, -8, -10, -10, -11, 2, -5, -7, -6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-b";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, -2, 2, -6, -6, 8, -8, 2, -2, 6, 2, 2, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-c";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 4, 2, 0, -8, 4, 4, -4, -6, -2, -10, 2, 10, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-d";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, -8, 6, -8, 0, 0, -2, 4, 2, -2, 6, 8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-e";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, -8, -6, 8, 0, 0, -2, 4, -2, 2, 6, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-f";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -4, 2, 0, 8, 4, 4, -4, -6, 2, 10, 2, 10, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-g";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 2, 2, 6, 6, 8, -8, 2, -2, -6, -2, 2, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.2-h";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -8, 4, -8, -8, 0, -6, -8, -10, -10, 11, -2, -5, -7, 6, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.4-a";
N := (13*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 6, 2, -2, -6, 6, 0, 0, -6, 10, 6, -6, 2, 0, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.4-b";
N := (13*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, -2, -2, 6, -6, 0, 0, -6, 10, -6, 6, 2, 0, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.3-a";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -4, 8, -8, 0, 8, -8, -6, -10, -10, 2, -11, -5, -7, 5, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.3-b";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, 2, 2, -6, -6, -8, 8, -2, 2, 2, 6, 2, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.3-c";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, 2, 2, -8, 0, 4, 4, -6, -4, -10, -2, 2, 10, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.3-d";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, -8, -8, 6, 0, 0, 4, -2, -2, 2, 6, 8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.3-e";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, -8, 8, -6, 0, 0, 4, -2, 2, -2, 6, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.3-f";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, -2, 2, 8, 0, 4, 4, -6, -4, 10, 2, 2, 10, -14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.3-g";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, -2, 2, 6, 6, -8, 8, -2, 2, -2, -6, 2, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 402.3-h";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 4, -8, -8, 0, -8, -8, -6, -10, -10, -2, 11, -5, -7, -5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-a";
N := (-12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, 2, 6, 6, -4, -4, 2, -4, 6, 6, -10, -4, -4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-b";
N := (-12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, 8, 10, -6, 4, 4, -6, -10, -2, 6, -12, 12, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-c";
N := (-12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 0, 8, -10, 6, 4, 4, -6, -10, 2, -6, -12, 12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-d";
N := (-12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, 2, -6, -6, -4, -4, 2, -4, -6, -6, -10, -4, -4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.4-a";
N := (-17*w + 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 3, 3, 2, 3, 0, 8, -1, 2, 2, 6, -12, -1, -4, 5, -9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.4-b";
N := (-17*w + 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -3, -3, 2, -3, 0, 8, -1, 2, 2, -6, 12, -1, -4, 5, 9, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-a";
N := (12*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, 2, 6, 6, -4, -4, -4, 2, 6, 6, -10, -4, -4, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-b";
N := (12*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, 8, -6, 10, 4, 4, -10, -6, 6, -2, -12, -12, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-c";
N := (12*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 0, 8, 6, -10, 4, 4, -10, -6, -6, 2, -12, -12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-d";
N := (12*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, 2, -6, -6, -4, -4, -4, 2, -6, -6, -10, -4, -4, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.5-a";
N := (-17*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 3, 3, 2, 0, 3, -1, 8, 2, 2, -12, 6, -1, 5, -4, 9, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.5-b";
N := (-17*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -3, -3, 2, 0, -3, -1, 8, 2, 2, 12, -6, -1, 5, -4, -9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.1-a";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -6, 0, 10, 10, 8, 0, -8, -8, 2, 4, 10, -12, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.1-b";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 4, 6, -4, 6, -6, -4, 2, 2, -6, -4, -14, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.1-c";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -6, 0, -10, 10, 8, 0, -8, 8, -2, 4, 10, -12, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.1-d";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -2, 0, 6, 6, 0, 12, 8, 4, -6, -8, 6, 12, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.1-e";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -4, -6, -4, 6, -6, -4, -2, -2, -6, -4, -14, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.1-f";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -2, 0, -6, 6, 0, 12, 8, -4, 6, -8, 6, 12, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.1-g";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 8, 0, -6, -4, -10, 2, 8, 6, 6, 2, -4, 2, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.1-h";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 8, 0, -3, -4, 8, -7, -1, -6, 12, 11, -4, 2, -6, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.1-i";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 8, 0, 3, -4, 8, -7, -1, 6, -12, 11, -4, 2, 6, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.1-j";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 8, 0, 6, -4, -10, 2, 8, -6, -6, 2, -4, 2, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.2-a";
N := (-14*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, 6, 0, 8, -4, 2, 2, -6, 6, -4, 2, 14, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.2-b";
N := (-14*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -3, -5, 0, -6, -9, -6, -7, -9, 12, 5, -8, -12, 3, -8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.2-c";
N := (-14*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, 6, 0, -5, -2, -5, -11, -6, 11, 6, 4, -15, -6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.2-d";
N := (-14*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, -6, 0, -5, -2, -5, -11, 6, -11, 6, 4, -15, 6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.2-e";
N := (-14*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 3, -5, 0, 6, -9, -6, -7, -9, -12, -5, -8, -12, 3, 8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.2-f";
N := (-14*w + 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, -6, 0, 8, -4, 2, 2, 6, -6, -4, 2, 14, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.5-a";
N := (11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, -6, 6, -2, -8, 0, 6, -2, 10, -6, 10, -4, -12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.5-b";
N := (11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 2, -2, 4, 2, -2, -12, -2, 0, 6, 6, -10, 12, -14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.5-c";
N := (11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -6, 6, 2, 4, 4, -6, -10, -2, -6, -14, 8, -4, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.5-d";
N := (11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, -4, 8, -5, 4, -4, -8, 9, 7, -12, 6, 9, 2, 12, 13, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.5-e";
N := (11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 4, 8, 5, -4, -4, -8, 9, 7, 12, -6, 9, 2, 12, -13, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.5-f";
N := (11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -6, -6, -2, 4, 4, -6, -10, 2, 6, -14, 8, -4, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.5-g";
N := (11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, 2, 2, -4, 2, -2, -12, -2, 0, -6, 6, -10, 12, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.5-h";
N := (11*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -6, -6, 2, -8, 0, 6, -2, -10, 6, 10, -4, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.6-a";
N := (-7*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, 6, -10, 2, 8, -4, -2, 10, -2, 6, 10, -12, 8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.6-b";
N := (-7*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, 6, 10, -2, 8, -4, -2, 10, 2, -6, 10, -12, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.4-a";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -6, 10, 0, 8, 10, -8, 0, 2, -8, 4, -12, 10, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.4-b";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, 6, 4, 6, -4, -4, -6, 2, 2, -6, -14, -4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.4-c";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -6, -10, 0, 8, 10, -8, 0, -2, 8, 4, -12, 10, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.4-d";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -2, 6, 0, 0, 6, 8, 12, -6, 4, -8, 12, 6, 2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.4-e";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -6, -4, 6, -4, -4, -6, -2, -2, -6, -14, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.4-f";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -2, -6, 0, 0, 6, 8, 12, 6, -4, -8, 12, 6, -2, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.4-g";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 8, -6, 0, -10, -4, 8, 2, 6, 6, 2, 2, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.4-h";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 8, -3, 0, 8, -4, -1, -7, 12, -6, 11, 2, -4, -15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.4-i";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 8, 3, 0, 8, -4, -1, -7, -12, 6, 11, 2, -4, 15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.4-j";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 8, 6, 0, -10, -4, 8, 2, -6, -6, 2, 2, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.3-a";
N := (14*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, 0, 6, -4, 8, 2, 2, 6, -6, -4, 14, 2, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.3-b";
N := (14*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -3, -5, -6, 0, -6, -9, -9, -7, 5, 12, -8, 3, -12, 5, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.3-c";
N := (14*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, 0, 6, -2, -5, -11, -5, 11, -6, 6, -15, 4, 3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.3-d";
N := (14*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 0, -6, -2, -5, -11, -5, -11, 6, 6, -15, 4, -3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.3-e";
N := (14*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 3, -5, 6, 0, -6, -9, -9, -7, -5, -12, -8, 3, -12, -5, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.3-f";
N := (14*w + 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, 0, -6, -4, 8, 2, 2, -6, 6, -4, 14, 2, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.8-a";
N := (11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, -6, -2, 6, 0, -8, -2, 6, -6, 10, 10, -12, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.8-b";
N := (11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 2, 4, -2, -2, 2, -2, -12, 6, 0, 6, 12, -10, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.8-c";
N := (11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -6, 2, 6, 4, 4, -10, -6, -6, -2, -14, -4, 8, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.8-d";
N := (11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, -4, 8, 4, -5, -8, -4, 7, 9, 6, -12, 9, 12, 2, 6, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.8-e";
N := (11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 4, 8, -4, 5, -8, -4, 7, 9, -6, 12, 9, 12, 2, -6, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.8-f";
N := (11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -6, -2, -6, 4, 4, -10, -6, 6, 2, -14, -4, 8, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.8-g";
N := (11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, 2, -4, 2, -2, 2, -2, -12, -6, 0, 6, 12, -10, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.8-h";
N := (11*w - 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -6, 2, -6, 0, -8, -2, 6, 6, -10, 10, -12, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.7-a";
N := (7*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, 6, 2, -10, -4, 8, 10, -2, 6, -2, 10, 8, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 408.7-b";
N := (7*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, 6, -2, 10, -4, 8, 10, -2, -6, 2, 10, 8, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-a";
N := (12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, 8, -6, 0, -4, 2, 2, 2, -6, 6, 8, 8, -16, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-b";
N := (12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, -6, 8, -9, 6, 5, 11, -7, 2, -9, -3, -10, 8, 2, 3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-c";
N := (12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, -2, 4, 2, 0, 4, 2, 2, 10, -6, 6, -4, 8, 16, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-d";
N := (12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 0, 2, -2, 0, 0, -2, -2, -10, 2, -10, -10, -16, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-e";
N := (12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, 6, 8, 9, -6, 5, 11, -7, 2, 9, 3, -10, 8, 2, -3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-f";
N := (12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 0, 2, 2, 0, 0, -2, -2, -10, -2, 10, -10, -16, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-g";
N := (12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, 8, 6, 0, -4, 2, 2, 2, 6, -6, 8, 8, -16, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.1-h";
N := (12*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, 2, 4, -2, 0, 4, 2, 2, 10, 6, -6, -4, 8, 16, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.3-a";
N := (w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 6, 6, -7, 6, 0, 5, 5, 11, 5, 0, 6, -10, 11, -13, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.3-b";
N := (w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -6, -6, -7, -6, 0, 5, 5, 11, 5, 0, -6, -10, 11, -13, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.4-a";
N := (13*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, -2, 1, -8, 6, 4, 1, 1, 2, 2, -5, 5, -4, -4, 16, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.4-b";
N := (13*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, 4, -2, 1, -6, 10, -5, -5, 11, -7, -8, 2, 2, 5, -11, -10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.4-c";
N := (13*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, -4, 2, 1, 6, -10, -5, -5, 11, -7, 8, -2, 2, 5, -11, 10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.4-d";
N := (13*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, 2, -1, -8, -6, -4, 1, 1, 2, 2, 5, -5, -4, -4, 16, -8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-a";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, -6, 8, 0, -6, 2, -4, 2, 2, 6, -6, 8, -16, 8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-b";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -6, -3, 8, 6, -9, 11, 5, 2, -7, -3, -9, -10, 2, 8, -12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-c";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, -2, 4, 0, 2, 2, 4, 10, 2, 6, -6, -4, 16, 8, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-d";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 0, 2, 0, -2, -2, 0, -10, -2, -10, 2, -10, 12, -16, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-e";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 6, 3, 8, -6, 9, 11, 5, 2, -7, 3, 9, -10, 2, 8, 12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-f";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 0, 2, 0, 2, -2, 0, -10, -2, 10, -2, -10, 12, -16, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-g";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 6, 8, 0, 6, 2, -4, 2, 2, -6, 6, 8, -16, 8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.2-h";
N := (12*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, 2, 4, 0, -2, 2, 4, 10, 2, -6, 6, -4, 16, 8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.6-a";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 6, 6, -7, 0, 6, 5, 5, 5, 11, 6, 0, -10, -13, 11, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.6-b";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -6, -6, -6, -7, 0, -6, 5, 5, 5, 11, -6, 0, -10, -13, 11, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.5-a";
N := (-13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -6, 1, -2, -8, 4, 6, 1, 1, 2, 2, 5, -5, -4, 16, -4, -3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.5-b";
N := (-13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -2, 4, 1, 10, -6, -5, -5, -7, 11, 2, -8, 2, -11, 5, -6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.5-c";
N := (-13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 2, -4, 1, -10, 6, -5, -5, -7, 11, -2, 8, 2, -11, 5, 6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 412.5-d";
N := (-13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, -1, 2, -8, -4, -6, 1, 1, 2, 2, -5, 5, -4, 16, -4, 3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 431.1-a";
N := (-16*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -2, -3, -7, 2, 1, -4, -6, -4, 0, -11, 4, 1, -9, -8, -5, -4, -7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 431.1-b";
N := (-16*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 3, 7, -2, 1, 4, 6, -4, 0, -11, 4, -1, 9, -8, -5, -4, 7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 431.2-a";
N := (16*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -3, 2, -7, 1, -6, -4, 0, -4, 4, -11, -9, 1, -8, -4, -5, -6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 431.2-b";
N := (16*w - 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 3, -2, 7, 1, 6, 4, 0, -4, 4, -11, 9, -1, -8, -4, -5, 6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-a";
N := (-24*w + 84)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -6, 2, 6, 6, 5, -4, 2, 2, -3, 6, -4, -1, 8, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-b";
N := (-24*w + 84)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, -3, 2, -6, -6, -4, 5, 2, 2, -6, 3, -4, 8, -1, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-c";
N := (-24*w + 84)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, 3, 2, 6, 6, -4, 5, 2, 2, 6, -3, -4, 8, -1, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-d";
N := (-24*w + 84)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 6, 2, -6, -6, 5, -4, 2, 2, 3, -6, -4, -1, 8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-a";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 7, -2, -7, 1, 5, -8, -4, 6, -2, -2, -3, -5, -3, -2, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-b";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -2, -2, 10, 0, -3, -2, -8, -2, 1, 0, -12, -7, -14, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-c";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 5, -4, -4, 2, -2, -5, 2, -6, -8, -1, 6, 4, -3, -2, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-d";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 3, 5, -9, -6, -10, -6, -8, -12, -9, 1, -3, -12, 5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-e";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 3, -5, 9, -6, -10, -6, -8, 12, 9, 1, -3, -12, -5, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-f";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -5, 4, -4, -2, 2, -5, 2, -6, -8, 1, -6, 4, -3, -2, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-g";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 2, -2, -10, 0, -3, -2, -8, -2, -1, 0, -12, -7, -14, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-h";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -7, 2, -7, -1, -5, -8, -4, 6, -2, 2, 3, -5, -3, -2, -3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-a";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 7, 8, 6, -10, -6, -1, 4, 6, -10, 5, 4, -2, -3, -16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-b";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 7, 0, 7, 5, -5, -2, -2, 2, -12, 0, -9, -3, -9, -8, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-c";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, 6, 1, -9, 3, -4, 4, -2, -2, -6, -9, -5, -13, -14, 15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-d";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 0, 1, -8, -2, -6, 2, -3, 12, 2, 6, 7, -4, -2, 7, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-e";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 3, -4, -1, 9, 7, -6, 2, 10, 0, 4, -5, -11, 7, 12, -5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-f";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, -3, 4, -1, -9, -7, -6, 2, 10, 0, -4, 5, -11, 7, 12, 5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-g";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, -1, -8, 2, 6, 2, -3, 12, 2, -6, -7, -4, -2, 7, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-h";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -6, 1, 9, -3, -4, 4, -2, -2, 6, 9, -5, -13, -14, -15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-i";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -7, 0, 7, -5, 5, -2, -2, 2, -12, 0, 9, -3, -9, -8, 9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-j";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -7, 8, -6, 10, -6, -1, 4, 6, 10, -5, 4, -2, -3, 16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-a";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 7, -7, 5, 1, -4, -8, -2, 6, -3, -2, -5, -2, -3, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-b";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 5, -2, 0, 10, -2, -3, -2, -8, 0, 1, -12, -14, -7, -14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-c";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -4, 5, -4, -2, 2, 2, -5, -8, -6, 6, -1, 4, -2, -3, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-d";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 3, -9, 5, -10, -6, -8, -6, -9, -12, 1, -12, -3, -7, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-e";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 3, 9, -5, -10, -6, -8, -6, 9, 12, 1, -12, -3, 7, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-f";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 4, -5, -4, 2, -2, 2, -5, -8, -6, -6, 1, 4, -2, -3, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-g";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -5, -2, 0, -10, -2, -3, -2, -8, 0, -1, -12, -14, -7, 14, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-h";
N := (-6*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -7, -7, -5, -1, -4, -8, -2, 6, 3, 2, -5, -2, -3, -3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.5-a";
N := (-3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 7, 0, 8, -10, 6, -1, -6, 6, 4, 5, -10, 4, -3, -2, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.5-b";
N := (-3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 7, 7, -5, 5, -2, -2, -12, 2, -9, 0, -3, -8, -9, -5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.5-c";
N := (-3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, -3, 1, 3, -9, 4, -4, -2, -2, -9, -6, -5, -14, -13, 15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.5-d";
N := (-3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 1, 0, -8, -6, -2, -3, 2, 2, 12, 7, 6, -4, 7, -2, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.5-e";
N := (-3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, -4, 3, -1, 7, 9, 2, -6, 0, 10, -5, 4, -11, 12, 7, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.5-f";
N := (-3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 4, -3, -1, -7, -9, 2, -6, 0, 10, 5, -4, -11, 12, 7, 9, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.5-g";
N := (-3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -1, 0, -8, 6, 2, -3, 2, 2, 12, -7, -6, -4, 7, -2, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.5-h";
N := (-3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, 3, 1, -3, 9, 4, -4, -2, -2, 9, 6, -5, -14, -13, -15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.5-i";
N := (-3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -7, 7, 5, -5, -2, -2, -12, 2, 9, 0, -3, -8, -9, 5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.5-j";
N := (-3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -7, 0, 8, 10, -6, -1, -6, 6, 4, -5, 10, 4, -3, -2, -6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.1-a";
N := (-8*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 6, 3, -3, 2, 3, 6, -7, 2, -4, -4, -6, -3, -4, -7, 8, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.1-b";
N := (-8*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 2, -3, -5, -8, 6, -4, 11, -4, 8, 8, 6, 11, -6, -13, 8, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.1-c";
N := (-8*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -2, 3, 5, -8, -6, 4, 11, -4, 8, 8, -6, -11, -6, -13, 8, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.1-d";
N := (-8*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -6, -3, 3, 2, -3, -6, -7, 2, -4, -4, 6, 3, -4, -7, 8, 9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.2-a";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 6, -3, 3, 2, 6, 3, 2, -7, -4, -4, -3, -6, -4, 8, -7, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.2-b";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 2, -5, -3, -8, -4, 6, -4, 11, 8, 8, 11, 6, -6, 8, -13, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.2-c";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -2, 5, 3, -8, 4, -6, -4, 11, 8, 8, -11, -6, -6, 8, -13, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.2-d";
N := (8*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -6, 3, -3, 2, -6, -3, 2, -7, -4, -4, 3, 6, -4, 8, -7, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-a";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, -3, -4, -1, 6, -3, -2, -6, 10, -6, -7, 6, -1, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-b";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 3, -2, -4, -6, 1, -2, -3, 10, -6, 7, 6, -1, 6, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-c";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -3, 2, -4, 6, -1, -2, -3, 10, -6, -7, -6, -1, 6, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-d";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, 3, -4, 1, -6, -3, -2, -6, 10, 6, 7, 6, -1, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-a";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -2, -2, 0, 0, 8, -4, -4, -10, 10, 10, 8, 6, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-b";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -4, -6, 6, -4, -4, -10, 2, -2, -2, 4, -16, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-c";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, 2, 6, 0, -4, 2, 2, 6, 6, 8, 8, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-d";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, -2, 6, 0, 0, -6, -6, 6, 2, -12, 0, 8, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-e";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, 2, -2, -8, 8, -8, -4, 4, 10, 6, -6, 8, -2, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-f";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, -1, -6, -6, 5, 5, 11, 6, -3, -4, -13, 14, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-g";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, -1, 6, 6, 5, 5, 11, -6, 3, -4, -13, 14, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-h";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, -2, -2, 8, -8, -8, -4, 4, -10, -6, -6, 8, -2, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-i";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -2, -6, 0, 0, -6, -6, -6, -2, -12, 0, 8, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-j";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, 2, -6, 0, -4, 2, 2, -6, -6, 8, 8, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-k";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 4, -6, -6, 4, -4, -10, 2, 2, 2, 4, -16, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-l";
N := (-4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 2, -2, 0, 0, 8, -4, -4, 10, -10, 10, 8, 6, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.3-a";
N := (-19*w + 68)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, -4, 1, -5, 1, -3, -7, 8, 4, -9, -4, -16, -3, 8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.3-b";
N := (-19*w + 68)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 4, 1, 5, -1, -3, -7, 8, -4, 9, -4, -16, -3, -8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.4-a";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 4, 2, -2, -9, 0, 0, 3, 3, 10, -3, -9, -10, -12, 9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.4-b";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -4, -2, -2, 9, 0, 0, 3, 3, -10, 3, -9, -10, -12, -9, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-a";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -8, -2, 0, 0, -4, 8, -4, 10, -10, 10, 6, 8, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-b";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -6, -6, -4, 6, -10, -4, 2, -2, -2, 4, 4, -16, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-c";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, 2, 0, 6, 2, -4, 2, 6, 6, 8, -4, 8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-d";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, -2, 0, 6, -6, 0, -6, 2, 6, -12, 8, 0, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-e";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 0, -2, 8, -8, -4, -8, 4, 6, 10, -6, -2, 8, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-f";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, -1, -6, -6, 5, 5, 11, -3, 6, -4, 14, -13, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-g";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, -1, 6, 6, 5, 5, 11, 3, -6, -4, 14, -13, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-h";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 0, -2, -8, 8, -4, -8, 4, -6, -10, -6, -2, 8, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-i";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, -2, 0, -6, -6, 0, -6, -2, -6, -12, 8, 0, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-j";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 2, 0, -6, 2, -4, 2, -6, -6, 8, -4, 8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-k";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 6, -6, 4, -6, -10, -4, 2, 2, 2, 4, 4, -16, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-l";
N := (4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 8, -2, 0, 0, -4, 8, -4, -10, 10, 10, 6, 8, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.6-a";
N := (19*w + 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -4, 2, 1, 1, -5, -7, -3, 8, -9, 4, -4, -3, -16, 3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.6-b";
N := (19*w + 49)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, -2, 1, -1, 5, -7, -3, 8, 9, -4, -4, -3, -16, -3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.5-a";
N := (-5*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 4, -2, 0, -9, 3, 0, 3, -3, 10, -9, -12, -10, -4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.5-b";
N := (-5*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -4, -2, 0, 9, 3, 0, 3, 3, -10, -9, -12, -10, 4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.1-a";
N := (21*w - 67)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 3, -3, 8, 6, 3, 5, -4, -7, 2, -6, 3, -4, 5, -4, 0, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.1-b";
N := (21*w - 67)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -3, 3, 8, -6, -3, 5, -4, -7, 2, 6, -3, -4, 5, -4, 0, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.4-a";
N := (21*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, -3, 3, 8, 3, 6, -4, 5, 2, -7, 3, -6, -4, -4, 5, -9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 446.4-b";
N := (21*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 3, -3, 8, -3, -6, -4, 5, 2, -7, -3, 6, -4, -4, 5, 9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.1-a";
N := (-8*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, 0, -5, -6, 5, 10, -5, 0, 8, -2, 0, -10, 14, 12, -3, 0, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.1-b";
N := (-8*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -5, 0, 5, -6, -5, -10, -5, 0, 8, -2, 0, 10, 14, 12, -3, 0, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.2-a";
N := (-8*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, -5, 0, -6, 10, 5, 0, -5, -2, 8, -10, 0, 14, -3, 12, 15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.2-b";
N := (-8*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -5, 5, 0, -6, -10, -5, 0, -5, -2, 8, 10, 0, 14, -3, 12, -15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-a";
N := (-15*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -3, -4, 0, 1, 10, 3, 3, 1, -2, -10, 0, 5, -14, 0, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-b";
N := (-15*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 0, 4, 3, -2, -9, 3, 5, -2, 2, 8, -3, 10, 0, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-c";
N := (-15*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 4, 0, -6, -8, 10, -6, -2, -12, -2, 10, 14, -12, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-d";
N := (-15*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, -2, 6, -6, 8, -8, 2, -6, 2, 6, 14, 4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-e";
N := (-15*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, 2, -6, 6, 8, -8, 2, -6, -2, -6, 14, 4, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-f";
N := (-15*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -4, 0, 6, -8, 10, -6, -2, 12, 2, 10, 14, -12, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-g";
N := (-15*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 0, -4, -3, -2, -9, 3, 5, 2, -2, 8, -3, 10, 0, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.1-h";
N := (-15*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 3, 4, 0, -1, 10, 3, 3, 1, 2, 10, 0, 5, -14, 0, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-a";
N := (-15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -4, -3, 1, 0, 3, 10, 1, 3, -10, -2, 0, -14, 5, -1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-b";
N := (-15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -1, 3, 4, -9, -2, 5, 3, 2, -2, 8, 10, -3, 1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-c";
N := (-15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 2, -6, 0, 10, -8, -2, -6, -2, -12, 10, -12, 14, -2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-d";
N := (-15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 2, -6, 6, -8, 8, -6, 2, 6, 2, 14, -4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-e";
N := (-15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, -2, 6, -6, -8, 8, -6, 2, -6, -2, 14, -4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-f";
N := (-15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, -2, 6, 0, 10, -8, -2, -6, 2, 12, 10, -12, 14, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-g";
N := (-15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, 1, -3, -4, -9, -2, 5, 3, -2, 2, 8, 10, -3, -1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 450.2-h";
N := (-15*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 4, 3, -1, 0, 3, 10, 1, 3, 10, 2, 0, -14, 5, 1, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.1-a";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -1, -5, 5, -2, -2, -8, 6, 1, -8, -2, 0, -9, -10, -16, 5, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.1-b";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, 0, 0, 8, -3, 3, -4, -4, 2, -7, 0, 9, 5, 14, 5, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.1-c";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -7, 3, 6, -10, 10, -8, -3, -2, 8, 12, -3, 10, 8, -7, -16, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.1-d";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, -3, 3, 2, -6, 6, -4, -1, 8, 8, -6, 3, -4, 2, 5, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.1-e";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 3, -3, 2, 6, -6, -4, -1, 8, 8, 6, -3, -4, 2, 5, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.1-f";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, 7, -3, 6, 10, -10, -8, -3, -2, 8, -12, 3, 10, 8, -7, 16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.1-g";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 0, 0, 8, 3, -3, -4, -4, 2, -7, 0, -9, 5, 14, 5, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.1-h";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 1, 5, -5, -2, 2, 8, 6, 1, -8, -2, 0, 9, -10, -16, 5, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.2-a";
N := (-23*w + 74)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 0, 0, 6, -6, 8, -8, 2, 10, -8, -2, 10, -4, 4, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.2-b";
N := (-23*w + 74)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 0, 0, 6, 6, -8, -8, 2, 10, -8, 2, -10, -4, 4, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.4-a";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -1, 5, -5, -2, -8, -2, 1, 6, -2, -8, -9, 0, -10, 5, -16, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.4-b";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, 0, 0, 8, 3, -3, -4, -4, -7, 2, 9, 0, 5, 5, 14, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.4-c";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 3, -7, 6, 10, -10, -3, -8, 8, -2, -3, 12, 10, -7, 8, -6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.4-d";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 3, -3, 2, 6, -6, -1, -4, 8, 8, 3, -6, -4, 5, 2, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.4-e";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, -3, 3, 2, -6, 6, -1, -4, 8, 8, -3, 6, -4, 5, 2, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.4-f";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, -3, 7, 6, -10, 10, -3, -8, 8, -2, 3, -12, 10, -7, 8, 6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.4-g";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 0, 0, 8, -3, 3, -4, -4, -7, 2, -9, 0, 5, 5, 14, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.4-h";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 1, -5, 5, -2, 8, 2, 1, 6, -2, -8, 9, 0, -10, 5, -16, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.3-a";
N := (23*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 0, 0, 6, 8, -6, 2, -8, -8, 10, 10, -2, -4, 4, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 458.3-b";
N := (23*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 0, 0, 6, -8, 6, 2, -8, -8, 10, -10, 2, -4, 4, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.4-a";
N := (-10*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 6, 8, 4, -6, 0, -4, 10, -6, -2, 6, -12, -8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.4-b";
N := (-10*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, -6, 8, -4, -6, 0, -4, 10, 6, 2, 6, -12, -8, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.7-a";
N := (25*w - 81)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 6, 3, -8, -3, -7, -2, -2, -8, 3, 6, -5, -10, -5, -9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.7-b";
N := (25*w - 81)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -4, 3, -4, 9, -3, -6, -8, -2, 7, 0, -13, -8, -9, -1, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.7-c";
N := (25*w - 81)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -6, -3, -8, 3, -7, -2, -2, -8, -3, -6, -5, -10, -5, 9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.7-d";
N := (25*w - 81)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, 4, -3, -4, -9, -3, -6, -8, -2, -7, 0, -13, -8, -9, 1, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.8-a";
N := (-13*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 0, 2, 2, -4, 4, -6, -6, -4, -2, -2, 8, 8, 4, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.8-b";
N := (-13*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 0, -2, 2, 4, 4, -6, -6, -4, 2, 2, 8, 8, 4, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.5-a";
N := (-10*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 6, 4, 8, 4, 0, -6, 10, -4, -2, -6, 6, -8, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.5-b";
N := (-10*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -6, -4, 8, -4, 0, -6, 10, -4, 2, 6, 6, -8, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.10-a";
N := (25*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 3, 6, -8, -3, -2, -7, -8, -2, 6, 3, -5, -5, -10, -6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.10-b";
N := (25*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 3, -4, -4, 9, -6, -3, -2, -8, 0, 7, -13, -9, -8, 16, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.10-c";
N := (25*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -3, -6, -8, 3, -2, -7, -8, -2, -6, -3, -5, -5, -10, 6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.10-d";
N := (25*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -3, 4, -4, -9, -6, -3, -2, -8, 0, -7, -13, -9, -8, -16, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.9-a";
N := (-13*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 2, 0, 2, -4, -6, 4, -4, -6, -2, -2, 8, 4, 8, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 464.9-b";
N := (-13*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -2, 0, 2, 4, -6, 4, -4, -6, 2, 2, 8, 4, 8, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.1-a";
N := (-23*w + 81)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, 3, 4, 2, 4, 8, -5, -6, -1, -3, 4, -9, -4, -13, 4, 7, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.1-b";
N := (-23*w + 81)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, -3, -4, 2, -4, -8, -5, -6, -1, -3, -4, 9, -4, -13, 4, -7, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.1-c";
N := (-23*w + 81)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 0, 6, -8, 2, -2, 2, 8, 2, -2, 6, -2, 12, 8, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.1-d";
N := (-23*w + 81)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, -6, -8, -2, 2, 2, 8, 2, -2, -6, 2, 12, 8, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.2-a";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -5, 0, -1, 4, 2, 0, 0, -3, -5, -3, 3, 12, 8, -8, -5, 17, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.2-b";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, 2, -8, -4, 6, 2, 2, 8, -10, 6, 2, -6, 4, -4, 12, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.2-c";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 5, 0, 1, 4, -2, 0, 0, -3, -5, -3, -3, -12, 8, -8, -5, -17, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.2-d";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, -2, 8, -4, -6, -2, 2, 8, -10, 6, -2, 6, 4, -4, 12, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.2-e";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, -4, 7, -4, -6, 8, -4, 5, -1, -3, -1, 0, 4, 8, 3, -11, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.2-f";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -3, 4, -7, -4, 6, -8, -4, 5, -1, -3, 1, 0, 4, 8, 3, 11, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.4-a";
N := (-23*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, 4, 3, 2, 8, 4, -6, -5, -3, -1, -9, 4, -4, 4, -13, 9, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.4-b";
N := (-23*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, -4, -3, 2, -8, -4, -6, -5, -3, -1, 9, -4, -4, 4, -13, -9, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.4-c";
N := (-23*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 6, 0, -8, -2, 2, 8, 2, -2, 2, -2, 6, 12, 12, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.4-d";
N := (-23*w - 58)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -6, 0, -8, 2, -2, 8, 2, -2, 2, 2, -6, 12, 12, 8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.3-a";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -5, -1, 0, 4, 0, 2, -3, 0, -3, -5, 12, 3, 8, -5, -8, 15, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.3-b";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, -8, 2, -4, 2, 6, 8, 2, 6, -10, -6, 2, 4, 12, -4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.3-c";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 5, 1, 0, 4, 0, -2, -3, 0, -3, -5, -12, -3, 8, -5, -8, -15, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.3-d";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, 8, -2, -4, -2, -6, 8, 2, 6, -10, 6, -2, 4, 12, -4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.3-e";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 7, -4, -4, 8, -6, 5, -4, -3, -1, 0, -1, 4, 3, 8, -5, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 466.3-f";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -3, -7, 4, -4, -8, 6, 5, -4, -3, -1, 0, 1, 4, 3, 8, 5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-a";
N := (-17*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -5, 6, -2, 4, -8, 7, 0, -7, -7, 2, 0, 9, -13, 4, 0, -12, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-b";
N := (-17*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 6, -2, -6, -6, -10, 0, 8, 2, 6, -6, -6, -10, -4, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-c";
N := (-17*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 6, 6, 8, 0, -9, -4, -7, -1, 2, 0, 9, 5, 8, 8, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-d";
N := (-17*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 3, -5, -3, -3, 5, 3, -7, -4, -3, 0, -6, 2, 2, 14, 5, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-e";
N := (-17*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 1, 5, -1, -1, -7, -7, -3, 8, 5, 8, -10, 8, -8, -8, -7, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-f";
N := (-17*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -1, -5, -1, 1, 7, -7, -3, 8, 5, -8, 10, 8, -8, -8, 7, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-g";
N := (-17*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -3, 5, -3, 3, -5, 3, -7, -4, -3, 0, 6, 2, 2, 14, -5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-h";
N := (-17*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 5, -6, 2, 4, 8, -7, 0, -7, -7, 2, 0, -9, -13, 4, 0, 12, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-i";
N := (-17*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -6, 2, -6, 6, 10, 0, 8, 2, 6, 6, 6, -10, -4, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.1-j";
N := (-17*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, -6, -6, 8, 0, 9, -4, -7, -1, 2, 0, -9, 5, 8, 8, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-a";
N := (17*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -5, -2, 6, 4, 7, -8, -7, 0, 2, -7, 9, 0, -13, 0, 4, 15, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-b";
N := (17*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -2, 6, -6, -10, -6, 8, 0, 6, 2, -6, -6, -10, -4, -4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-c";
N := (17*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 6, 6, 8, -9, 0, -7, -4, 2, -1, 9, 0, 5, 8, 8, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-d";
N := (17*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, -5, 3, -3, 5, -3, -7, 3, -3, -4, -6, 0, 2, 14, 2, -11, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-e";
N := (17*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 5, 1, -1, -7, -1, -3, -7, 5, 8, -10, 8, 8, -8, -8, 5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-f";
N := (17*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -5, -1, -1, 7, 1, -3, -7, 5, 8, 10, -8, 8, -8, -8, -5, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-g";
N := (17*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, 5, -3, -3, -5, 3, -7, 3, -3, -4, 6, 0, 2, 14, 2, 11, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-h";
N := (17*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 5, 2, -6, 4, -7, 8, -7, 0, 2, -7, -9, 0, -13, 0, 4, -15, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-i";
N := (17*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 2, -6, -6, 10, 6, 8, 0, 6, 2, 6, 6, -10, -4, -4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 478.4-j";
N := (17*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, -6, -6, 8, 9, 0, -7, -4, 2, -1, -9, 0, 5, 8, 8, 9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.1-a";
N := (-8*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -4, 0, 7, 3, 2, -7, 2, 5, 8, 6, 0, -3, -5, 2, -12, -15, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.1-b";
N := (-8*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 3, -4, -6, -2, -9, 2, -4, -1, 5, -1, -3, 6, -6, -2, -7, 3, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.1-c";
N := (-8*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -4, -6, 6, 10, 6, 2, 4, 0, -10, 6, 10, 6, 2, 8, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.1-d";
N := (-8*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 0, 0, 5, -9, -10, 3, -4, -3, 4, -6, -8, -9, -1, 14, 12, 3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.1-e";
N := (-8*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 4, 6, -6, 10, -6, -2, 4, 0, -10, 6, -10, -6, 2, 8, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.1-f";
N := (-8*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, 0, 0, -5, -9, 10, -3, -4, -3, 4, -6, 8, 9, -1, 14, 12, -3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.1-g";
N := (-8*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 4, 0, -7, 3, -2, 7, 2, 5, 8, 6, 0, 3, -5, 2, -12, 15, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.1-h";
N := (-8*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, 4, 6, 2, -9, -2, 4, -1, 5, -1, -3, -6, 6, -2, -7, 3, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.2-a";
N := (-8*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, -4, 7, 0, 3, -7, 2, 5, 2, 6, 8, -3, 0, -5, -12, 2, -14, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.2-b";
N := (-8*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 3, -4, -2, -6, -9, -4, 2, 5, -1, -3, -1, -6, 6, -2, 3, -7, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.2-c";
N := (-8*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -4, 6, -6, 10, 2, 6, 0, 4, 6, -10, 6, 10, 2, 4, 8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.2-d";
N := (-8*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, 5, 0, -9, 3, -10, -3, -4, -6, 4, -9, -8, -1, 12, 14, -8, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.2-e";
N := (-8*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 4, -6, 6, 10, -2, -6, 0, 4, 6, -10, -6, -10, 2, 4, 8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.2-f";
N := (-8*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, -5, 0, -9, -3, 10, -3, -4, -6, 4, 9, 8, -1, 12, 14, 8, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.2-g";
N := (-8*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 4, -7, 0, 3, 7, -2, 5, 2, 6, 8, 3, 0, -5, -12, 2, 14, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 479.2-h";
N := (-8*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 3, 4, 2, 6, -9, 4, -2, 5, -1, -3, -1, 6, -6, -2, 3, -7, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-a";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 8, -6, 6, 4, 4, -2, -2, 6, -6, 4, 4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-b";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, -1, 3, 3, 2, 2, -7, -7, -3, -3, -10, -10, -10, -18, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-c";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 2, -2, 2, -6, -6, 0, 0, 6, -6, 4, -2, -2, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-d";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 3, -1, -3, 3, -2, -2, 7, 7, 3, -3, 10, 10, 10, -18, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-e";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 2, 2, 2, 6, 6, 0, 0, -6, -6, -4, 2, 2, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-f";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 2, 2, -2, -6, -6, 0, 0, -6, 6, 4, -2, -2, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-g";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, -1, -3, -3, 2, 2, -7, -7, 3, 3, -10, -10, -10, 18, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-h";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, 2, -2, -2, 6, 6, 0, 0, 6, 6, -4, 2, 2, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-i";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -3, -1, 3, -3, -2, -2, 7, 7, -3, 3, 10, 10, 10, 18, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.1-j";
N := (22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 8, 6, -6, 4, 4, -2, -2, -6, 6, 4, 4, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 489.1-a";
N := (-16*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, -5, 3, 1, -2, 6, -4, -9, -10, -1, -2, -6, 6, 5, -4, -1, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 489.1-b";
N := (-16*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, 2, -6, -2, -10, 6, 8, 0, -10, 2, 2, 6, -6, -4, 8, 16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 489.1-c";
N := (-16*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -2, 6, -2, 10, -6, 8, 0, -10, 2, -2, -6, -6, -4, 8, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 489.1-d";
N := (-16*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, 5, -3, 1, 2, -6, -4, -9, -10, -1, 2, 6, 6, 5, -4, 1, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 489.2-a";
N := (16*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 5, 3, -5, 1, 6, -2, -9, -4, -1, -10, -6, -2, 6, -4, 5, -12, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 489.2-b";
N := (16*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, -6, 2, -2, 6, -10, 0, 8, 2, -10, 6, 2, -6, 8, -4, -12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 489.2-c";
N := (16*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 6, -2, -2, -6, 10, 0, 8, 2, -10, -6, -2, -6, 8, -4, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 489.2-d";
N := (16*w + 43)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -5, -3, 5, 1, -6, 2, -9, -4, -1, -10, 6, 2, 6, -4, 5, 12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-a";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, 8, -4, -2, 0, 0, -2, -6, 4, 6, -4, 12, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-b";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, 8, 0, 6, -10, -4, 2, -4, 0, 8, -4, -4, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-c";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 8, 6, 0, 0, 2, 2, -2, -2, -8, -10, 8, -12, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-d";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, -2, 6, -6, -8, -8, -6, -6, -6, -2, -4, 12, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-e";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 8, 2, -2, 6, 6, -6, 0, -8, 6, 6, 2, 0, 8, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-f";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, 6, 4, -4, 2, -6, -4, -2, 4, 12, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-g";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -2, 6, -6, 0, 0, 10, -6, 6, -10, -12, -4, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-h";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 2, -6, -6, -4, 8, 2, -10, 6, 2, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-i";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 3, -1, 9, 6, 8, -7, -1, 2, 12, -10, -4, 5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-j";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -2, -6, 2, 10, 0, 8, 6, -2, 6, 2, 4, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-k";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 6, -2, 4, 0, -6, -2, 10, 10, -4, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-l";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 1, -1, -3, -9, 6, -4, -7, 7, 10, 4, 2, -4, -9, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-m";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 4, 6, -4, 4, -6, 2, 6, -2, -12, -10, -8, 4, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-n";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -4, 6, 4, -4, -6, 2, 6, -2, 12, -10, -8, 4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-o";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -1, 1, -3, 9, -6, -4, -7, 7, 10, -4, 2, -4, -9, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-p";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, -6, 2, 4, 0, -6, -2, -10, 10, -4, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-q";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 2, -6, -2, -10, 0, 8, 6, -2, -6, 2, 4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-r";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -3, -1, -9, -6, 8, -7, -1, 2, -12, -10, -4, 5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-s";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 2, 6, 6, -4, 8, 2, -10, -6, 2, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-t";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, -2, -6, 6, 0, 0, 10, -6, -6, -10, -12, -4, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-u";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 4, -6, -4, -4, 2, -6, -4, 2, 4, 12, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-v";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -8, -2, -2, -6, -6, -6, 0, -8, 6, -6, 2, 0, 8, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-w";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, -2, -6, 6, -8, -8, -6, -6, 6, -2, -4, 12, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-x";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -8, 6, 0, 0, 2, 2, -2, -2, 8, -10, 8, -12, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-y";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 8, 0, -6, -10, -4, 2, -4, 0, 8, -4, -4, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-z";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, -8, -4, 2, 0, 0, -2, -6, 4, -6, -4, 12, -12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.3-a";
N := (-17*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 7, -3, -2, -2, -4, 0, 5, 9, 11, 7, -2, 3, -14, 3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.3-b";
N := (-17*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -3, -5, -6, -4, 4, 0, 5, -3, 7, -3, 8, -5, -2, -3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.3-c";
N := (-17*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 3, 5, -6, 4, -4, 0, 5, -3, 7, 3, 8, -5, -2, 3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.3-d";
N := (-17*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -7, 3, -2, 2, 4, 0, 5, 9, 11, -7, -2, 3, -14, -3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-a";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 8, 6, -4, 0, -2, -2, 0, 4, -6, 6, -4, -12, 12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-b";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, 8, 6, 0, -4, -10, -4, 2, 0, 8, -4, -4, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-c";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, -2, 6, 0, 0, 2, 2, -2, -2, -8, -10, -12, 8, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-d";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, -2, -6, 6, -8, -8, -6, -6, -6, -2, 12, -4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-e";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 8, -2, 6, 6, 0, -6, 6, -8, 6, 2, 8, 0, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-f";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 2, 4, 4, 6, 2, -4, -4, -6, -2, 4, 4, 12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-g";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 2, -2, -6, 6, 0, 0, -6, 10, 6, -10, -4, -12, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-h";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 2, -6, -6, 8, -4, -10, 2, 6, 2, -4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-i";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -3, -1, 6, 9, -7, 8, 2, -1, 12, -10, 5, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-j";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 6, -6, 10, 2, 8, 0, -2, 6, 6, 2, 4, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-k";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, -2, 6, 0, 4, -2, -6, 10, 10, 12, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-l";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -1, 1, -3, 6, -9, -7, -4, 10, 7, 4, 2, -9, -4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-m";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -6, 6, 4, -4, 2, -6, -2, 6, -12, -10, 4, -8, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-n";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 6, 6, -4, 4, 2, -6, -2, 6, 12, -10, 4, -8, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-o";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 1, -1, -3, -6, 9, -7, -4, 10, 7, -4, 2, -9, -4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-p";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 2, -6, 0, 4, -2, -6, -10, 10, 12, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-q";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -6, -6, -10, -2, 8, 0, -2, 6, -6, 2, 4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-r";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 3, -1, -6, -9, -7, 8, 2, -1, -12, -10, 5, -4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-s";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 2, 6, 6, 8, -4, -10, 2, -6, 2, -4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-t";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, -2, 6, -6, 0, 0, -6, 10, -6, -10, -4, -12, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-u";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, 4, -4, -6, 2, -4, -4, -6, 2, 4, 4, 12, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-v";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -8, -2, -6, -6, 0, -6, 6, -8, -6, 2, 8, 0, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-w";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -2, -2, 6, -6, -8, -8, -6, -6, 6, -2, 12, -4, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-x";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, 2, 6, 0, 0, 2, 2, -2, -2, 8, -10, -12, 8, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-y";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 8, -6, 0, -4, -10, -4, 2, 0, 8, -4, -4, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-z";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -8, -6, -4, 0, 2, -2, 0, 4, -6, -6, -4, -12, 12, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.6-a";
N := (17*w - 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -3, 7, -2, -4, -2, 5, 0, 11, 9, 7, -2, -14, 3, 4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.6-b";
N := (17*w - 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -5, -3, -6, 4, -4, 5, 0, 7, -3, -3, 8, -2, -5, 12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.6-c";
N := (17*w - 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 5, 3, -6, -4, 4, 5, 0, 7, -3, 3, 8, -2, -5, -12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.6-d";
N := (17*w - 52)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 3, -7, -2, 4, 2, 5, 0, 11, 9, -7, -2, -14, 3, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 493.2-a";
N := (-4*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, 2, 8, 1, 10, -5, -1, 5, -3, 0, -8, -10, -5, 3, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 493.2-b";
N := (-4*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -2, -8, 1, -10, -5, -1, 5, -3, 0, 8, -10, -5, 3, 4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 493.3-a";
N := (4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, 2, 8, 1, 10, -1, -5, -3, 5, -8, 0, -10, 3, -5, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 493.3-b";
N := (4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -2, -8, 1, -10, -1, -5, -3, 5, 8, 0, -10, 3, -5, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.1-a";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, 3, -1, 6, -6, 5, -7, -4, -9, -9, -4, -7, 8, 9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.1-b";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, -3, -1, -6, 6, 5, -7, -4, 9, 9, -4, -7, 8, -9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.3-a";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, -2, 2, -6, 10, 8, -10, -6, -6, 2, -10, -4, -4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.3-b";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 2, 2, 6, -10, 8, -10, -6, 6, -2, -10, -4, -4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.4-a";
N := (-22*w + 78)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -6, 2, 2, -2, -8, 10, 6, -6, 2, 6, 4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.4-b";
N := (-22*w + 78)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -3, -4, -3, 7, 0, 4, 2, -5, 1, -1, 2, -13, 12, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.4-c";
N := (-22*w + 78)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 3, -4, 3, -7, 0, 4, 2, 5, -1, -1, 2, -13, -12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.4-d";
N := (-22*w + 78)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, 6, 2, -2, 2, -8, 10, 6, 6, -2, 6, 4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.7-a";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 6, -4, -6, 10, 0, 0, -6, 4, 6, 10, 8, -12, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.7-b";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, -6, 4, -6, -10, 0, 0, -6, 4, -6, -10, 8, -12, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.8-a";
N := (15*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 5, 0, -5, -5, -10, 10, -1, 9, -4, -5, -5, -12, -9, 0, -5, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.8-b";
N := (15*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 5, 0, -1, 7, -4, 10, -1, 5, 4, -9, -1, -2, 11, 2, 3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.8-c";
N := (15*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, -3, 2, 4, -5, -1, -4, -6, 2, -1, 5, -3, -3, 0, -1, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.8-d";
N := (15*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -6, -4, -2, 2, -8, 8, -10, 10, -12, -4, -2, -4, 8, 6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.8-e";
N := (15*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 6, 4, -2, -2, 8, 8, -10, 10, 12, 4, -2, -4, 8, -6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.8-f";
N := (15*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -5, 0, 5, -5, 10, -10, -1, 9, -4, 5, 5, -12, -9, 0, 5, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.8-g";
N := (15*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, 3, -2, 4, 5, 1, -4, -6, 2, 1, -5, -3, -3, 0, 1, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.8-h";
N := (15*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -5, 0, 1, 7, 4, -10, -1, 5, 4, 9, 1, -2, 11, 2, -3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.2-a";
N := (-8*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, 0, -1, -6, 6, 5, -4, -7, -9, -9, -4, 8, -7, 3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.2-b";
N := (-8*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, 0, -1, 6, -6, 5, -4, -7, 9, 9, -4, 8, -7, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.6-a";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, -2, 2, 10, -6, 8, -6, -10, 2, -6, -10, -4, -4, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.6-b";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 2, 2, -10, 6, 8, -6, -10, -2, 6, -10, -4, -4, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.5-a";
N := (-22*w - 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, 6, 2, -2, 2, -8, 6, 10, 2, -6, 6, -4, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.5-b";
N := (-22*w - 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, 2, -4, 7, -3, 0, 2, 4, 1, -5, -1, -13, 2, -1, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.5-c";
N := (-22*w - 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, -2, -4, -7, 3, 0, 2, 4, -1, 5, -1, -13, 2, 1, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.5-d";
N := (-22*w - 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -6, 2, 2, -2, -8, 6, 10, -2, 6, 6, -4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.10-a";
N := (5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -4, 6, -6, 0, 10, 0, 4, -6, 10, 6, 8, 4, -12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.10-b";
N := (5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -6, 4, -6, -6, 0, -10, 0, 4, -6, -10, -6, 8, 4, -12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.9-a";
N := (-15*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 5, -5, 0, -5, 10, -10, -1, -4, 9, -5, -5, -12, 0, -9, -15, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.9-b";
N := (-15*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 5, -1, 0, 7, 10, -4, -1, 4, 5, -1, -9, -2, 2, 11, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.9-c";
N := (-15*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 2, -3, 4, -1, -5, -4, 2, -6, 5, -1, -3, 0, -3, -12, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.9-d";
N := (-15*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -4, -6, -2, -8, 2, 8, 10, -10, -4, -12, -2, 8, -4, 14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.9-e";
N := (-15*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 4, 6, -2, 8, -2, 8, 10, -10, 4, 12, -2, 8, -4, -14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.9-f";
N := (-15*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -5, 5, 0, -5, -10, 10, -1, -4, 9, 5, 5, -12, 0, -9, 15, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.9-g";
N := (-15*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, -2, 3, 4, 1, 5, -4, 2, -6, -5, 1, -3, 0, -3, 12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 496.9-h";
N := (-15*w + 56)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -5, 1, 0, 7, -10, 4, -1, 4, 5, 1, 9, -2, 2, 11, -5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-a";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, 1, 3, 5, 8, 4, -7, -6, 2, -8, 2, -4, -4, -5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-b";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -4, -7, -4, 2, 0, 2, -2, -7, 2, 7, 0, 3, 2, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-c";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 0, -4, 2, -6, -4, -2, -2, -8, -6, 2, -2, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-d";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, -3, -1, -3, 0, -4, 5, 2, 2, 0, -6, -4, -4, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-e";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 5, -4, -6, 0, -6, -10, 11, -2, -7, -4, 1, -14, -8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-f";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -4, -4, 6, 6, 0, 2, -10, -8, 2, 2, -2, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-g";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 4, -4, -6, -6, 0, 2, -10, -8, -2, -2, -2, -8, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-h";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, -5, -4, 6, 0, -6, -10, 11, -2, 7, 4, 1, -14, -8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-i";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, 3, -1, 3, 0, -4, 5, 2, 2, 0, 6, -4, -4, -13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-j";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 0, -4, -2, 6, -4, -2, -2, -8, 6, -2, -2, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-k";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 4, 7, -4, -2, 0, 2, -2, -7, 2, -7, 0, 3, 2, -4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.1-l";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, -1, 3, -5, -8, 4, -7, -6, 2, 8, -2, -4, -4, -5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.2-a";
N := (13*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 0, 4, 3, -5, -6, -2, -11, -8, 4, 1, -1, 1, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.2-b";
N := (13*w - 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, 0, 4, -3, 5, -6, -2, -11, -8, -4, -1, -1, 1, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-a";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, -6, 3, 8, 5, -7, 4, 2, -6, 2, -8, -4, -5, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-b";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -7, -4, -4, 0, 2, -2, 2, 2, -7, 0, 7, 3, -4, 2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-c";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -4, -4, -6, 2, -2, -4, -8, -2, 2, -6, -2, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-d";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -3, -6, -1, 0, -3, 5, -4, 2, 2, -6, 0, -4, -13, -4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-e";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 5, 0, -4, 0, -6, -10, -6, -2, 11, -4, -7, 1, -8, -14, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-f";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 0, -4, 6, 6, 2, 0, -8, -10, 2, 2, -2, 4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-g";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 0, -4, -6, -6, 2, 0, -8, -10, -2, -2, -2, 4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-h";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -5, 0, -4, 0, 6, -10, -6, -2, 11, 4, 7, 1, -8, -14, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-i";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 3, 6, -1, 0, 3, 5, -4, 2, 2, 6, 0, -4, -13, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-j";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 4, -4, 6, -2, -2, -4, -8, -2, -2, 6, -2, -12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-k";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 7, 4, -4, 0, -2, -2, 2, 2, -7, 0, -7, 3, -4, 2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.4-l";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, 6, 3, -8, -5, -7, 4, 2, -6, -2, 8, -4, -5, -4, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.3-a";
N := (-13*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 3, 4, -5, 3, -2, -6, -8, -11, 1, 4, -1, -16, 1, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 498.3-b";
N := (-13*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -3, 4, 5, -3, -2, -6, -8, -11, -1, -4, -1, -16, 1, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-a";
N := (-26*w + 91)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 2, 2, -6, -10, -10, 4, 4, -2, -2, 6, 6, 2, -8, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-b";
N := (-26*w + 91)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -2, -2, -6, 10, 10, 4, 4, -2, -2, -6, -6, 2, -8, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-a";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -6, 2, -6, -6, -2, 0, 4, 6, 6, 6, -2, -6, -12, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-b";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 4, -1, -6, -10, 5, -3, -7, 5, -4, 10, 10, 3, 7, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-c";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, 0, -1, 6, -6, 1, -7, 9, 5, -8, -6, 2, -1, 3, -14, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-d";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -6, -4, 3, -6, -2, -9, -5, -3, -3, -12, 10, -6, -3, 9, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-e";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 0, 3, 2, 6, 1, 5, 1, -7, 8, -2, 2, 7, -5, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-f";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, -6, 2, -6, 6, -8, -4, 6, -10, -2, 6, 2, -4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-g";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 4, 8, 6, 2, -4, 0, 2, 2, 2, 10, 4, 12, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-h";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, -2, 4, 7, 6, -6, 7, -1, -11, 1, -4, 6, -6, 5, 1, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-i";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -8, 0, 4, 6, -6, -4, 8, -6, 10, 2, -6, -8, 4, -12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-j";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 6, 2, 6, -6, -8, -4, 6, -10, 2, -6, 2, -4, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-k";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 2, -4, 7, -6, 6, 7, -1, -11, 1, 4, -6, -6, 5, 1, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-l";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -2, 0, -1, -6, 6, 1, -7, 9, 5, 8, 6, 2, -1, 3, 14, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-m";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 6, 4, 3, 6, 2, -9, -5, -3, -3, 12, -10, -6, -3, 9, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-n";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, -4, 8, -6, -2, -4, 0, 2, 2, -2, -10, 4, 12, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-o";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -4, -1, 6, 10, 5, -3, -7, 5, 4, -10, 10, 3, 7, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-p";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 8, 0, 4, -6, 6, -4, 8, -6, 10, -2, 6, -8, 4, -12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-q";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 0, 3, -2, -6, 1, 5, 1, -7, -8, 2, 2, 7, -5, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.1-r";
N := (-16*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 6, -2, -6, 6, 2, 0, 4, 6, 6, -6, 2, -6, -12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-a";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, -6, -2, 6, 6, 8, -4, 6, 10, 2, -6, -2, 4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-b";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -8, 4, 1, 4, 4, -1, -7, -11, 3, 12, 8, 2, 13, -3, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-c";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, 0, 1, 6, 6, -1, -7, 9, -5, -8, -6, -2, 1, -3, 14, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-d";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, 6, -2, -6, -6, 8, -4, 6, 10, -2, 6, -2, 4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-e";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 8, 0, -4, 6, 6, 4, 8, -6, -10, 2, -6, 8, -4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-f";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 8, -4, 1, -4, -4, -1, -7, -11, 3, -12, -8, 2, 13, -3, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-g";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 2, -6, -2, 2, 0, 0, -2, 2, -6, -6, 10, -4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-h";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 0, -3, -2, 6, -1, 5, 1, 7, -8, 2, -2, -7, 5, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-i";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, 4, -10, 2, -4, -4, 10, 6, -6, 10, 8, 4, 12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-j";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, -6, 2, -2, 0, 0, -2, 2, 6, 6, 10, -4, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-k";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, 0, 1, -6, -6, -1, -7, 9, -5, 8, 6, -2, 1, -3, -14, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-l";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, 4, 10, -2, -4, -4, 10, 6, 6, -10, 8, 4, 12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-m";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -8, 0, -4, -6, -6, 4, 8, -6, -10, -2, 6, 8, -4, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-n";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -4, 9, 8, 8, -9, 9, 5, -5, -12, 12, 2, -11, -11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-o";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 0, -3, 2, -6, -1, 5, 1, 7, 8, -2, -2, -7, 5, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.3-p";
N := (-8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 4, 9, -8, -8, -9, 9, 5, -5, 12, -12, 2, -11, -11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-a";
N := (-12*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 2, -2, -2, 0, 10, 4, 2, 2, -6, -4, 0, 10, -4, 12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-b";
N := (-12*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, -2, 2, 0, 10, 4, -2, 2, 6, 4, 0, -10, -4, 12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-c";
N := (-12*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, 2, -2, 0, -10, 4, 2, 2, -6, 4, 0, 10, -4, 12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.5-d";
N := (-12*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, 2, 2, 0, -10, 4, -2, 2, 6, -4, 0, -10, -4, 12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-a";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, -4, -8, 0, -2, 4, 8, 4, -6, 10, 6, 8, 12, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-b";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, 4, -8, 0, 2, 4, 8, 4, -6, -10, -6, 8, 12, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-c";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, -4, 8, 0, 2, -4, 8, -4, -6, -10, -6, -8, 12, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-d";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -2, -2, 0, 10, -4, -8, -8, -6, 2, 6, 2, 0, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-e";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 2, -2, 0, -10, -4, -8, -8, -6, -2, -6, 2, 0, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-f";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, 4, 8, 0, -2, -4, 8, -4, -6, 10, 6, -8, 12, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-g";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, 2, 0, -10, 4, -8, 8, -6, -2, -6, -2, 0, -4, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-h";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 2, 2, 0, 10, 4, -8, 8, -6, 2, 6, -2, 0, -4, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-i";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 6, -6, 8, 6, 4, 8, 0, 10, -2, -6, -10, -16, -4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-j";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, -6, -6, -8, -6, 4, 8, 0, 10, 2, 6, -10, -16, -4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-k";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 6, 6, 8, -6, -4, 8, 0, 10, 2, 6, 10, -16, -4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.7-l";
N := (-22*w + 70)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -6, 6, -8, 6, -4, 8, 0, 10, -2, -6, 10, -16, -4, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-a";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, -6, -6, -2, -6, 4, 0, 6, 6, -2, 6, -6, -12, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-b";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, 2, -1, -10, -6, -3, 5, 5, -7, 10, -4, 10, 7, 3, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-c";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, 2, -1, -6, 6, -7, 1, 5, 9, -6, -8, 2, 3, -1, 18, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-d";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -4, -6, 3, -2, -6, -5, -9, -3, -3, 10, -12, -6, 9, -3, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-e";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, -2, 3, 6, 2, 5, 1, -7, 1, -2, 8, 2, -5, 7, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-f";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -6, 2, 2, 6, -6, -4, -8, -10, 6, 6, -2, 2, 12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-g";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -4, 8, 2, 6, 0, -4, 2, 2, 10, 2, 4, 4, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-h";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 4, -2, 7, -6, 6, -1, 7, 1, -11, 6, -4, -6, 1, 5, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-i";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -8, 4, -6, 6, 8, -4, 10, -6, -6, 2, -8, -12, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-j";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 6, -2, 2, -6, 6, -4, -8, -10, 6, -6, 2, 2, 12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-k";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, -4, 2, 7, 6, -6, -1, 7, 1, -11, -6, 4, -6, 1, 5, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-l";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, -2, -1, 6, -6, -7, 1, 5, 9, 6, 8, 2, 3, -1, -18, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-m";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 4, 6, 3, 2, 6, -5, -9, -3, -3, -10, 12, -6, 9, -3, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-n";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, 4, 8, -2, -6, 0, -4, 2, 2, -10, -2, 4, 4, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-o";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, -2, -1, 10, 6, -3, 5, 5, -7, -10, 4, 10, 7, 3, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-p";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 8, 4, 6, -6, 8, -4, 10, -6, 6, -2, -8, -12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-q";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 2, 3, -6, -2, 5, 1, -7, 1, 2, -8, 2, -5, 7, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.2-r";
N := (-16*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 6, -6, 2, 6, 4, 0, 6, 6, 2, -6, -6, -12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-a";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -6, 2, -2, 6, 6, -4, 8, 10, 6, -6, 2, -2, -12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-b";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, -8, 1, 4, 4, -7, -1, 3, -11, 8, 12, 2, -3, 13, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-c";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, -2, 1, 6, 6, -7, -1, -5, 9, -6, -8, -2, -3, 1, -18, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-d";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 6, -2, -2, -6, -6, -4, 8, 10, 6, 6, -2, -2, -12, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-e";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 8, -4, 6, 6, 8, 4, -10, -6, -6, 2, 8, 12, -4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-f";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, 8, 1, -4, -4, -7, -1, 3, -11, -8, -12, 2, -3, 13, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-g";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 2, -6, 2, -2, 0, 0, 2, -2, -6, -6, 10, 4, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-h";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -2, -3, 6, -2, 5, -1, 7, 1, 2, -8, -2, 5, -7, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-i";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -4, 4, 2, -10, -4, -4, 6, 10, 10, -6, 8, 12, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-j";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, -6, -2, 2, 0, 0, 2, -2, 6, 6, 10, 4, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-k";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, 2, 1, -6, -6, -7, -1, -5, 9, 6, 8, -2, -3, 1, 18, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-l";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 4, 4, -2, 10, -4, -4, 6, 10, -10, 6, 8, 12, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-m";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -8, -4, -6, -6, 8, 4, -10, -6, 6, -2, 8, 12, -4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-n";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 4, 9, 8, 8, 9, -9, -5, 5, 12, -12, 2, -11, -11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-o";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 2, -3, -6, 2, 5, -1, 7, 1, -2, 8, -2, 5, -7, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.4-p";
N := (-8*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -4, 9, -8, -8, 9, -9, -5, 5, -12, 12, 2, -11, -11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-a";
N := (-12*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, 2, -2, 10, 0, 2, 4, -6, 2, 0, -4, 10, 12, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-b";
N := (-12*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, 2, 2, 10, 0, -2, 4, 6, 2, 0, 4, -10, 12, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-c";
N := (-12*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 2, -2, -2, -10, 0, 2, 4, -6, 2, 0, 4, 10, 12, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.6-d";
N := (-12*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, -2, 2, -10, 0, -2, 4, 6, 2, 0, -4, -10, 12, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-a";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 4, -8, -2, 0, 8, 4, -6, 4, 6, 10, 8, 4, 12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-b";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, -4, -8, 2, 0, 8, 4, -6, 4, -6, -10, 8, 4, 12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-c";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 4, 8, 2, 0, 8, -4, -6, -4, -6, -10, -8, 4, 12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-d";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, -2, -2, 10, 0, -8, -4, -6, -8, 6, 2, 2, -4, 0, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-e";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 2, -2, -10, 0, -8, -4, -6, -8, -6, -2, 2, -4, 0, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-f";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, -4, 8, -2, 0, 8, -4, -6, -4, 6, 10, -8, 4, 12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-g";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -2, 2, -10, 0, -8, 4, -6, 8, -6, -2, -2, -4, 0, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-h";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, 2, 2, 10, 0, -8, 4, -6, 8, 6, 2, -2, -4, 0, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-i";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 6, -6, 6, 8, 8, 4, 10, 0, -6, -2, -10, -4, -16, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-j";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, -6, -6, -6, -8, 8, 4, 10, 0, 6, 2, -10, -4, -16, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-k";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 6, 6, 6, -6, 8, 8, -4, 10, 0, 6, 2, 10, -4, -16, -16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 512.8-l";
N := (-22*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, -6, 6, 6, -8, 8, -4, 10, 0, -6, -2, 10, -4, -16, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-a";
N := (-21*w + 75)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -6, 3, 8, -3, -7, 2, 2, 8, -3, 6, 5, -10, 5, -9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-b";
N := (-21*w + 75)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 2, 4, -2, 0, 4, 8, 6, -4, -8, 2, -2, 6, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-c";
N := (-21*w + 75)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 2, -2, 2, -4, -8, 10, -2, 6, 2, -6, 8, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-d";
N := (-21*w + 75)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -2, -2, -2, -4, -8, 10, -2, -6, -2, -6, 8, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-e";
N := (-21*w + 75)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, -2, 4, 2, 0, 4, 8, 6, 4, 8, 2, -2, 6, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.1-f";
N := (-21*w + 75)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 6, -3, 8, 3, -7, 2, 2, 8, 3, -6, 5, -10, 5, 9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-a";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -4, -3, -1, 4, -6, -6, 6, -3, -9, -4, -16, 2, -3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-b";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, -2, 6, -2, -8, 0, -6, -6, -6, 6, 14, -4, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-c";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 0, -2, -4, -6, -4, 4, 6, -2, 2, -8, 4, -8, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-d";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 0, -2, 4, -6, -4, 4, 6, 2, -2, -8, 4, -8, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-e";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, 2, 6, 2, -8, 0, -6, -6, 6, -6, 14, -4, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.2-f";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 4, -3, 1, 4, -6, -6, 6, 3, 9, -4, -16, 2, 3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.4-a";
N := (-21*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 3, -6, 8, -3, 2, -7, 8, 2, 6, -3, 5, 5, -10, -6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.4-b";
N := (-21*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, 4, -2, 4, 0, 6, 8, -8, -4, 2, 6, -2, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.4-c";
N := (-21*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, -2, 2, -8, -4, -2, 10, 2, 6, -6, 4, 8, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.4-d";
N := (-21*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, -2, -2, -8, -4, -2, 10, -2, -6, -6, 4, 8, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.4-e";
N := (-21*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, 6, 4, 2, 4, 0, 6, 8, 8, 4, 2, 6, -2, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.4-f";
N := (-21*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -3, 6, 8, 3, 2, -7, 8, 2, -6, 3, 5, 5, -10, 6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.3-a";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 4, -3, -1, -6, 4, 6, -6, -9, -3, -4, 2, -16, 6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.3-b";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, 2, 6, -2, 0, -8, -6, -6, 6, -6, 14, -4, -4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.3-c";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 2, -2, -4, -4, -6, 6, 4, 2, -2, -8, -8, 4, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.3-d";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -2, -2, 4, -4, -6, 6, 4, -2, 2, -8, -8, 4, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.3-e";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -2, 6, 2, 0, -8, -6, -6, -6, 6, 14, -4, -4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 522.3-f";
N := (-9*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -4, -3, 1, -6, 4, 6, -6, 9, 3, -4, 2, -16, -6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-a";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 3, -8, 2, -1, 5, 4, 7, 1, 5, -9, -5, 6, -7, -2, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-b";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -7, 2, -2, 4, -2, -11, -5, -4, 3, -7, 3, 8, -5, -16, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-c";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 7, -4, 2, -1, 7, 4, 7, 7, 1, 9, -11, -10, -11, -2, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-d";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 2, -5, 2, 10, -4, -2, 7, 7, -2, -3, -1, 11, -14, -11, 6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-e";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 3, -4, 6, -5, -5, 4, -1, -1, -7, -3, -7, 6, 13, 2, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-f";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, -3, -2, -10, 6, 2, 6, 3, -3, 2, 12, 0, 10, -5, 15, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-g";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -2, -4, 6, 0, -8, 4, 6, -2, 6, 10, 4, -12, 8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-h";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, -3, 2, -6, 0, -10, -7, -7, 8, -9, -3, 11, -4, 5, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-i";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -3, -4, 6, -8, -2, 7, -1, 8, -10, 9, 5, -12, 4, -1, -8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-j";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -8, -4, -4, 2, -2, -8, 4, -2, 10, -6, 10, 8, 4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-k";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 8, 4, -4, -2, 2, -8, 4, -2, 10, 6, -10, 8, 4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-l";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 5, 0, -2, 1, -9, -4, -9, -3, -3, -11, 9, 6, 1, -14, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-m";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -5, 0, -2, -1, 9, -4, -9, -3, -3, 11, -9, 6, 1, -14, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-n";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 3, 4, 6, 8, 2, 7, -1, 8, -10, -9, -5, -12, 4, -1, 8, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-o";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 2, -4, -6, 0, -8, 4, 6, -2, -6, -10, 4, -12, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-p";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 3, 2, 6, 0, -10, -7, -7, 8, 9, 3, 11, -4, 5, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-q";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, 3, -2, 10, -6, 2, 6, 3, -3, -2, -12, 0, 10, -5, -15, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-r";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -3, 4, 6, 5, 5, 4, -1, -1, -7, 3, 7, 6, 13, 2, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-s";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 7, 2, 2, -4, -2, -11, -5, -4, -3, 7, 3, 8, -5, 16, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-t";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -3, 8, 2, 1, -5, 4, 7, 1, 5, 9, 5, 6, -7, -2, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-u";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -2, 5, 2, -10, 4, -2, 7, 7, -2, 3, 1, 11, -14, -11, -6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.1-v";
N := (-8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -7, 4, 2, 1, -7, 4, 7, 7, 1, -9, 11, -10, -11, -2, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-a";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -8, 3, 2, 5, -1, 7, 4, 5, 1, -5, -9, 6, -2, -7, 6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-b";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -7, 0, 2, 4, -2, -11, -2, -4, -5, -7, 3, 3, -5, 8, -3, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-c";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, 7, 2, 7, -1, 7, 4, 1, 7, -11, 9, -10, -2, -11, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-d";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -5, 2, 2, -4, 10, 7, -2, -2, 7, -1, -3, 11, -11, -14, -11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-e";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, 3, 6, -5, -5, -1, 4, -7, -1, -7, -3, 6, 2, 13, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-f";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 4, -2, 6, -10, 6, 2, -3, 3, 12, 2, 0, -5, 10, 14, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-g";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, -4, 0, 6, 4, -8, -2, 6, 10, 6, 4, 8, -12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-h";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, 0, 2, 0, -6, -7, -10, 8, -7, -3, -9, 11, 5, -4, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-i";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -3, 6, -2, -8, -1, 7, -10, 8, 5, 9, -12, -1, 4, 11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-j";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -8, -4, -2, 2, 4, -8, 10, -2, 10, -6, 8, 4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-k";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 8, -4, 2, -2, 4, -8, 10, -2, -10, 6, 8, 4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-l";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 0, 5, -2, -9, 1, -9, -4, -3, -3, 9, -11, 6, -14, 1, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-m";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 0, -5, -2, 9, -1, -9, -4, -3, -3, -9, 11, 6, -14, 1, 2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-n";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 3, 6, 2, 8, -1, 7, -10, 8, -5, -9, -12, -1, 4, -11, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-o";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -4, -4, 0, -6, 4, -8, -2, 6, -10, -6, 4, 8, -12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-p";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 3, 0, 2, 0, 6, -7, -10, 8, -7, 3, 9, 11, 5, -4, 9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-q";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 3, -4, -2, -6, 10, 6, 2, -3, 3, -12, -2, 0, -5, 10, -14, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-r";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, -3, 6, 5, 5, -1, 4, -7, -1, 7, 3, 6, 2, 13, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-s";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 7, 0, 2, -4, 2, -11, -2, -4, -5, 7, -3, 3, -5, 8, 3, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-t";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 8, -3, 2, -5, 1, 7, 4, 5, 1, 5, 9, 6, -2, -7, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-u";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 5, -2, 2, 4, -10, 7, -2, -2, 7, 1, 3, 11, -11, -14, 11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 524.2-v";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, -7, 2, -7, 1, 7, 4, 1, 7, 11, -9, -10, -2, -11, -2, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.1-a";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -6, 6, -2, 6, 0, -6, -6, -2, 10, -4, -2, -6, 12, 2, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.1-b";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 6, -6, -2, -6, 0, -6, -6, -2, 10, 4, 2, -6, 12, 2, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-a";
N := (-3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -6, 6, 4, 0, 2, 2, 8, 2, -2, -6, 6, -4, -8, -12, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.2-b";
N := (-3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 6, -6, 4, 0, -2, 2, 8, 2, -2, 6, -6, -4, -8, -12, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.4-a";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 6, -6, -2, 0, 6, -6, -6, 10, -2, -2, -4, -6, 2, 12, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.4-b";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, -6, 6, -2, 0, -6, -6, -6, 10, -2, 2, 4, -6, 2, 12, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.3-a";
N := (3*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, 6, -6, 4, 2, 0, 8, 2, -2, 2, 6, -6, -4, -12, -8, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 526.3-b";
N := (3*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -6, 6, 4, -2, 0, 8, 2, -2, 2, -6, 6, -4, -12, -8, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 527.1-a";
N := (-24*w - 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 1, 3, -7, 10, 2, -7, 6, -1, -3, -1, 0, 2, -3, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 527.1-b";
N := (-24*w - 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -1, -3, -7, -10, -2, -7, 6, -1, 3, 1, 0, 2, -3, -3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 527.4-a";
N := (-24*w + 77)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 1, 3, -7, 2, 10, -7, -1, 6, -1, -3, 0, -3, 2, 3, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 527.4-b";
N := (-24*w + 77)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -1, -3, -7, -2, -10, -7, -1, 6, 1, 3, 0, -3, 2, -3, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.1-a";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -6, 8, 8, -8, -8, 10, 10, -8, -8, -10, 12, 12, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.1-b";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -6, 0, 0, 0, 0, -6, -6, 0, 0, -10, 4, 4, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.1-c";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -6, 0, 0, 0, 0, -6, -6, 0, 0, -10, 4, 4, -16, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.1-d";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -6, -8, -8, -8, -8, 10, 10, 8, 8, -10, 12, 12, 16, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-a";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 7, -3, 8, 3, 1, -5, 2, 3, 5, 5, 4, 0, -12, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-b";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -2, -2, 2, -8, 4, -6, -6, 6, 6, -2, -4, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-c";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, 2, 6, 6, 8, -4, -6, -2, -6, -6, 6, 0, -8, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-d";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -3, 4, -3, 3, -7, 10, -7, -7, -5, 4, -8, 4, -4, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-e";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 6, -2, 8, 8, -10, -2, 2, 10, -6, 12, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-f";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -2, 6, -8, 4, 2, 6, 10, 10, -2, 0, 0, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-g";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 2, -6, -8, 4, 2, 6, -10, -10, -2, 0, 0, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-h";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -6, 2, 8, 8, -10, -2, -2, -10, -6, 12, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-i";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -3, -4, 3, 3, -7, 10, -7, 7, 5, 4, -8, 4, 4, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-j";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 2, -6, -6, 8, -4, -6, -2, 6, 6, 6, 0, -8, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-k";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, -2, 2, -2, -8, 4, -6, -6, -6, -6, -2, -4, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-l";
N := (-14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -7, -3, -8, -3, 1, -5, 2, 3, -5, -5, 4, 0, -12, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-a";
N := (-19*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -6, 2, 10, 8, 0, -2, -2, 6, -2, -6, 4, -12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-b";
N := (-19*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -7, 5, 4, 5, -9, -3, 6, 3, -5, -9, 8, 8, 4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-c";
N := (-19*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -6, 6, -2, -8, 8, -2, -10, 10, -6, 10, 12, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-d";
N := (-19*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 5, -7, 4, 1, 7, 1, 6, 7, 11, 3, 8, -8, 12, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-e";
N := (-19*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 2, 2, 2, 0, 8, -10, -2, 6, 6, 2, -12, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-f";
N := (-19*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 2, -2, -2, 0, 8, -10, -2, -6, -6, 2, -12, -4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-g";
N := (-19*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -5, -7, -4, -1, 7, 1, 6, 7, -11, -3, 8, -8, 12, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-h";
N := (-19*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -6, -6, 2, -8, 8, -2, -10, -10, 6, 10, 12, -4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-i";
N := (-19*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 7, 5, -4, -5, -9, -3, 6, 3, 5, 9, 8, 8, 4, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-j";
N := (-19*w + 59)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -6, -2, -10, 8, 0, -2, -2, -6, 2, -6, 4, -12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-a";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [7, 5, -3, 3, 8, -5, 1, 3, 2, 5, 5, 4, -12, 0, -14, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-b";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -2, 2, -2, 4, -8, -6, -6, 6, 6, -2, 0, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-c";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, 2, 6, 6, -4, 8, -2, -6, -6, -6, 6, -8, 0, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-d";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -3, -3, 4, -7, 3, -7, 10, -5, -7, 4, 4, -8, -18, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-e";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -2, 6, 8, 8, -2, -10, 10, 2, -6, 4, 12, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-f";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 6, -2, 4, -8, 6, 2, 10, 10, -2, 0, 0, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-g";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -6, -6, 2, 4, -8, 6, 2, -10, -10, -2, 0, 0, 4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-h";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 2, -6, 8, 8, -2, -10, -10, -2, -6, 4, 12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-i";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -3, 3, -4, -7, 3, -7, 10, 5, 7, 4, 4, -8, 18, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-j";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -6, 2, -6, -6, -4, 8, -2, -6, 6, 6, 6, -8, 0, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-k";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, -2, -2, 2, 4, -8, -6, -6, -6, -6, -2, 0, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-l";
N := (14*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-7, -5, -3, -3, -8, -5, 1, 3, 2, -5, -5, 4, -12, 0, 14, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.5-a";
N := (-19*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -6, 10, 2, 0, 8, -2, -2, -2, 6, -6, -12, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.5-b";
N := (-19*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -7, -1, 5, 5, 4, -3, -9, 3, 6, -9, -5, 8, 4, 8, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.5-c";
N := (-19*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 2, -6, -2, 6, 8, -8, -10, -2, -6, 10, 10, -4, 12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.5-d";
N := (-19*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -1, -7, 1, 4, 1, 7, 7, 6, 3, 11, 8, 12, -8, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.5-e";
N := (-19*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 2, 2, 2, 8, 0, -2, -10, 6, 6, 2, -4, -12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.5-f";
N := (-19*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 2, -2, -2, 8, 0, -2, -10, -6, -6, 2, -4, -12, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.5-g";
N := (-19*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 1, -7, -1, -4, 1, 7, 7, 6, -3, -11, 8, 12, -8, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.5-h";
N := (-19*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -2, -6, 2, -6, 8, -8, -10, -2, 6, -10, 10, -4, 12, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.5-i";
N := (-19*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 7, 1, 5, -5, -4, -3, -9, 3, 6, 9, 5, 8, 4, 8, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.5-j";
N := (-19*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, -6, -10, -2, 0, 8, -2, -2, 2, -6, -6, -12, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.1-a";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -3, -6, 2, -9, -9, -7, 5, -4, 2, 9, -6, 5, -4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.1-b";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 2, -4, 2, 0, 4, 0, -4, -2, 0, -10, 6, 12, 6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.1-c";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -2, -4, -2, 0, 4, 0, -4, -2, 0, 10, 6, 12, -6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.1-d";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 3, 6, 2, 9, 9, -7, 5, -4, 2, -9, 6, 5, -4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.6-a";
N := (9*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 2, 2, 6, -2, -10, -4, 8, -6, -10, -2, -6, 2, -4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.6-b";
N := (9*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, -2, -2, 6, 2, 10, -4, 8, -6, -10, 2, 6, 2, -4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.4-a";
N := (10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -6, -3, 2, -9, -9, 5, -7, 2, -4, -6, 9, 5, -4, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.4-b";
N := (10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -2, -4, 0, 2, 0, 4, -2, -4, -10, 0, 6, 12, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.4-c";
N := (10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 2, -4, 0, -2, 0, 4, -2, -4, 10, 0, 6, 12, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.4-d";
N := (10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 6, 3, 2, 9, 9, 5, -7, 2, -4, 6, -9, 5, -4, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.7-a";
N := (9*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 2, 2, 6, -10, -2, 8, -4, -10, -6, -6, -2, 2, -4, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 536.7-b";
N := (9*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, -2, -2, 6, 10, 2, 8, -4, -10, -6, 6, 2, 2, -4, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.1-a";
N := (-28*w - 63)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 6, 6, -1, 6, 6, 5, 5, 11, 11, -6, -6, 5, 5, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.1-b";
N := (-28*w - 63)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 4, 4, -6, -6, -6, 10, 10, -6, -6, 4, 4, 8, 8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.1-c";
N := (-28*w - 63)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, 2, 2, -9, 10, 10, 1, 1, -5, -5, -2, -2, -3, -3, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.1-d";
N := (-28*w - 63)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -2, -2, -9, -10, -10, 1, 1, -5, -5, 2, 2, -3, -3, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.1-e";
N := (-28*w - 63)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -4, -4, -6, 6, 6, 10, 10, -6, -6, -4, -4, 8, 8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.1-f";
N := (-28*w - 63)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, -6, -6, -1, -6, -6, 5, 5, 11, 11, 6, 6, 5, 5, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.1-a";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -4, 6, -2, 4, 6, -2, 2, 0, -10, 2, 8, -12, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.1-b";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -4, -6, 2, 4, 6, -2, 2, 0, 10, 2, 8, -12, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-a";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -8, 6, 6, -4, 10, -2, 10, -12, 6, 10, 8, 4, 18, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-b";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -8, -6, -6, -4, 10, -2, 10, 12, -6, 10, 8, 4, -18, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-c";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 9, -1, 9, -8, -9, -2, -11, -5, -6, 12, -11, -12, 6, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-d";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -4, 3, -3, 1, -4, 3, -6, -3, -5, -2, -4, -7, -16, -10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-e";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 4, 3, 3, -1, -4, 3, -6, -3, 5, 2, -4, -7, -16, 10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.5-f";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 9, 1, -9, -8, -9, -2, -11, 5, 6, 12, -11, -12, -6, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-a";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -6, 7, 9, -3, -8, 5, -2, 7, 9, 0, -8, 13, -10, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-b";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 6, 6, 2, -2, 0, 8, 2, 6, 10, -2, -6, -4, 12, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-c";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -2, -7, -3, 7, -4, 9, 10, 7, -5, -12, 8, -7, 2, 4, -17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-d";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 3, 1, -10, -4, 1, 0, 3, 3, 8, 5, 2, -2, 11, 4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-e";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -4, 3, -3, 1, 4, -3, -6, -3, -5, -2, -4, 7, 16, 10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-f";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -2, -6, 10, 8, 0, -10, -2, 6, -10, -2, 4, -12, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-g";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, 1, 0, 6, -5, -10, -5, 7, 0, 9, 4, 4, 5, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-h";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -8, -5, 3, -1, -4, -3, 2, 1, 9, -2, 4, -5, 12, -6, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-i";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 3, 3, -4, 10, 3, -10, 5, 3, 4, -5, -12, -16, 3, -8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-j";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -3, 3, 4, -10, 3, -10, 5, 3, -4, 5, -12, -16, 3, 8, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-k";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, 1, 0, -6, -5, -10, -5, 7, 0, -9, 4, 4, 5, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-l";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, 6, -10, 8, 0, -10, -2, -6, 10, -2, 4, -12, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-m";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, -3, 1, 10, 4, 1, 0, 3, 3, -8, -5, 2, -2, 11, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-n";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, 3, 3, -1, 4, -3, -6, -3, 5, 2, -4, 7, 16, -10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-o";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 8, -5, -3, 1, -4, -3, 2, 1, -9, 2, 4, -5, 12, 6, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-p";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 2, -7, 3, -7, -4, 9, 10, 7, 5, 12, 8, -7, 2, -4, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-q";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -6, 6, -2, 2, 0, 8, 2, 6, -10, 2, -6, -4, 12, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.6-r";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 6, 7, -9, 3, -8, 5, -2, 7, -9, 0, -8, 13, -10, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.9-a";
N := (w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, 4, 1, -8, 6, 3, -5, 3, -7, 0, 10, 10, -11, 3, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.9-b";
N := (w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, -4, 1, 8, -6, 3, -5, 3, -7, 0, -10, 10, -11, 3, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.10-a";
N := (-25*w + 88)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 0, -9, -6, -6, 1, -3, 1, 5, 0, -6, 2, 3, -13, -14, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.10-b";
N := (-25*w + 88)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 0, -9, 6, 6, 1, -3, 1, 5, 0, 6, 2, 3, -13, 14, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.4-a";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -4, -2, 6, 6, 4, 2, -2, -10, 0, 2, -12, 8, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.4-b";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -4, 2, -6, 6, 4, 2, -2, 10, 0, 2, -12, 8, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.8-a";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -8, 6, 6, 10, -4, 10, -2, 6, -12, 10, 4, 8, 0, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.8-b";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -8, -6, -6, 10, -4, 10, -2, -6, 12, 10, 4, 8, 0, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.8-c";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 9, 9, -1, -9, -8, -11, -2, -6, -5, 12, -12, -11, -13, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.8-d";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -4, 3, 1, -3, 3, -4, -3, -6, -2, -5, -4, -16, -7, -9, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.8-e";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 4, 3, -1, 3, 3, -4, -3, -6, 2, 5, -4, -16, -7, 9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.8-f";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 9, -9, 1, -9, -8, -11, -2, 6, 5, 12, -12, -11, 13, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-a";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -6, 7, -3, 9, 5, -8, 7, -2, 0, 9, -8, -10, 13, 9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-b";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 6, 6, -2, 2, 8, 0, 6, 2, -2, 10, -6, 12, -4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-c";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, -2, -7, 7, -3, 9, -4, 7, 10, -12, -5, 8, 2, -7, -17, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-d";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 3, 1, -4, -10, 0, 1, 3, 3, 5, 8, 2, 11, -2, 1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-e";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -4, 3, 1, -3, -3, 4, -3, -6, -2, -5, -4, 16, 7, 9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-f";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -2, 10, -6, 0, 8, -2, -10, -10, 6, -2, -12, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-g";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, 1, 6, 0, -10, -5, 7, -5, 9, 0, 4, 5, 4, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-h";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -8, -5, -1, 3, -3, -4, 1, 2, -2, 9, 4, 12, -5, -1, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-i";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 3, 3, 10, -4, -10, 3, 3, 5, -5, 4, -12, 3, -16, 11, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-j";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, -3, 3, -10, 4, -10, 3, 3, 5, 5, -4, -12, 3, -16, -11, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-k";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -3, 1, -6, 0, -10, -5, 7, -5, -9, 0, 4, 5, 4, 9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-l";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, -10, 6, 0, 8, -2, -10, 10, -6, -2, -12, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-m";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, -3, 1, 4, 10, 0, 1, 3, 3, -5, -8, 2, 11, -2, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-n";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, 3, -1, 3, -3, 4, -3, -6, 2, 5, -4, 16, 7, -9, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-o";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 8, -5, 1, -3, -3, -4, 1, 2, 2, -9, 4, 12, -5, 1, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-p";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 2, -7, -7, 3, 9, -4, 7, 10, 12, 5, 8, 2, -7, 17, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-q";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -6, 6, 2, -2, 8, 0, 6, 2, 2, -10, -6, 12, -4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.7-r";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 6, 7, 3, -9, 5, -8, 7, -2, 0, -9, -8, -10, 13, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.12-a";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, 4, 1, 6, -8, -5, 3, -7, 3, 10, 0, 10, 3, -11, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.12-b";
N := (w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, -4, 1, -6, 8, -5, 3, -7, 3, -10, 0, 10, 3, -11, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.11-a";
N := (-25*w - 63)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 0, -9, -6, -6, -3, 1, 5, 1, -6, 0, 2, -13, 3, 18, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 544.11-b";
N := (-25*w - 63)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 0, -9, 6, 6, -3, 1, 5, 1, 6, 0, 2, -13, 3, -18, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 550.1-a";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 8, -6, -2, 0, 10, 0, 2, -4, -6, -4, -4, -10, -2, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 550.1-b";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -8, 6, 2, 0, 10, 0, 2, -4, 6, 4, -4, -10, -2, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 550.2-a";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, 8, 0, -2, 0, 10, -4, 2, -4, -6, -4, -2, -10, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 550.2-b";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, -8, 0, 2, 0, 10, -4, 2, 4, 6, -4, -2, -10, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.1-a";
N := (-21*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 3, 2, -4, 5, -1, 4, 6, -2, 1, 5, 3, -3, 0, -1, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.1-b";
N := (-21*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 0, 1, -7, -4, -10, 1, -5, -4, -9, 1, 2, 11, -2, -3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.1-c";
N := (-21*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 0, -1, -7, 4, 10, 1, -5, -4, 9, -1, 2, 11, -2, 3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.1-d";
N := (-21*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -3, -2, -4, -5, 1, 4, 6, -2, -1, -5, 3, -3, 0, 1, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.2-a";
N := (-9*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -4, -6, 6, 0, -10, 0, -4, 6, 10, -6, -8, 4, 12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.2-b";
N := (-9*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 4, 6, 6, 0, 10, 0, -4, 6, -10, 6, -8, 4, 12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.4-a";
N := (21*w - 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, 3, -4, -1, 5, 4, -2, 6, 5, 1, 3, 0, -3, -12, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.4-b";
N := (21*w - 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 1, 0, -7, -10, -4, 1, -4, -5, 1, -9, 2, -2, 11, -5, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.4-c";
N := (21*w - 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, -1, 0, -7, 10, 4, 1, -4, -5, -1, 9, 2, -2, 11, 5, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.4-d";
N := (21*w - 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, -3, -4, 1, -5, 4, -2, 6, -5, -1, 3, 0, -3, 12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.3-a";
N := (9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 6, -6, -4, 6, -10, 0, 0, 6, -4, -6, 10, -8, 12, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 558.3-b";
N := (9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -6, 6, 4, 6, 10, 0, 0, 6, -4, 6, -10, -8, 12, 4, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 561.1-a";
N := (-8*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 6, 6, 6, 10, 0, 4, 2, -6, 6, 2, 6, -4, -8, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 561.1-b";
N := (-8*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -6, 6, -6, -10, 0, 4, 2, -6, -6, -2, 6, -4, -8, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 561.2-a";
N := (-8*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 6, 6, 10, 6, 4, 0, -6, 2, 2, 6, 6, -8, -4, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 561.2-b";
N := (-8*w + 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, 6, -10, -6, 4, 0, -6, 2, -2, -6, 6, -8, -4, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-a";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 2, -2, -2, 6, -8, 0, -6, 2, 2, 2, -2, 4, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-b";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 6, -2, -6, 2, 0, -8, 2, -6, -2, -2, -2, 4, 4, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-c";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 2, 6, 2, -2, 0, 8, -6, 2, -2, 10, -2, 12, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-d";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, -2, 2, 0, 0, 2, 2, -6, 6, 10, 4, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-e";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 2, 6, 2, -2, 8, 0, 2, -6, -10, 2, -2, -4, 12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-f";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, -2, 6, -2, 2, 8, 0, 2, -6, 10, -2, -2, -4, 12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-g";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, 2, -2, 0, 0, 2, 2, 6, -6, 10, 4, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-h";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -2, 6, -2, 2, 0, 8, -6, 2, 2, -10, -2, 12, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-i";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, -2, 6, -2, 0, -8, 2, -6, 2, 2, -2, 4, 4, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-j";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -2, -2, 2, -6, -8, 0, -6, 2, -2, -2, -2, 4, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-a";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 6, -6, -8, -6, 6, -8, 8, 4, 4, -6, 6, 4, 4, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-b";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 8, -2, -2, 8, 2, 8, -4, 6, -10, -4, -6, 2, 12, 4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-c";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -8, 1, -4, -4, -7, -1, 3, 11, 8, -12, 2, 3, 13, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-d";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, 4, 6, 0, 4, -4, -8, 4, 6, -12, 4, 4, 8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-e";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 4, -2, 6, 4, -6, 8, 4, -2, 6, -8, 2, 2, -12, -12, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-f";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -4, 4, -2, 4, -4, -4, 0, -4, -2, 0, -4, -12, -8, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-g";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 8, 1, 4, 4, -7, -1, 3, 11, -8, 12, 2, 3, 13, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-h";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 4, 4, 2, -4, -4, -4, 0, -4, 2, 0, -4, -12, -8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-i";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -8, 2, -2, -8, -2, 8, -4, 6, -10, 4, 6, 2, 12, 4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-j";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, 4, -6, 0, 4, -4, -8, 4, -6, 12, 4, 4, 8, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-k";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -4, 2, 6, -4, 6, 8, 4, -2, 6, 8, -2, 2, -12, -12, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-l";
N := (-12*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -6, 6, -8, 6, -6, -8, 8, 4, 4, 6, -6, 4, 4, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-a";
N := (-18*w + 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 2, 2, 6, -2, -4, 8, 2, 10, -2, 2, 10, 4, 12, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-b";
N := (-18*w + 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, -8, 2, -6, 0, -4, -2, -2, 10, -2, -4, -4, 12, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-c";
N := (-18*w + 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, -2, -2, 6, 6, -4, -8, -6, 6, -6, 6, 6, 4, 0, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-d";
N := (-18*w + 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -2, -2, -6, 0, -4, -2, -2, 2, 2, -10, -4, -12, 16, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-e";
N := (-18*w + 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, -2, 2, 0, -4, -2, -6, 6, 6, 2, -4, -8, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-f";
N := (-18*w + 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 2, -2, 0, -4, -2, -6, -6, -6, 2, -4, -8, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-g";
N := (-18*w + 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, -2, 2, 6, 0, -4, -2, -2, -2, -2, -10, -4, -12, -16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-h";
N := (-18*w + 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 2, -2, -6, -6, -4, -8, -6, 6, 6, -6, 6, 4, 0, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-i";
N := (-18*w + 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -8, -2, 6, 0, -4, -2, -2, -10, 2, -4, -4, 12, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.4-j";
N := (-18*w + 66)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -2, 2, -6, 2, -4, 8, 2, 10, 2, -2, 10, 4, 12, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-a";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -2, -6, 6, 2, 0, 4, -6, 6, -6, -2, -6, -12, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-b";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -2, 4, 0, 6, -8, -4, 8, 4, 8, -6, -12, 8, -4, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-c";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -6, -2, 2, 2, 2, -8, 8, -6, -2, 6, -6, -6, 4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-d";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -2, -4, 7, -6, 6, 7, -1, 11, 1, 4, 6, -6, 5, -1, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-e";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -6, 4, 3, 6, 2, -9, -5, 3, -3, 12, 10, -6, -3, -9, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-f";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, -6, 10, 6, -10, 0, -8, 10, 6, 2, 6, 2, -4, 4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-g";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -6, 2, -2, 6, -8, 0, -6, -2, 10, -10, 10, -12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-h";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 2, -4, 0, -6, 8, -4, -8, -4, 8, 6, 12, -8, -4, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-i";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, -2, 6, 6, 4, 8, 2, 10, 10, -6, 6, 8, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-j";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, -1, 0, 0, -5, -5, 7, -7, 0, 0, 14, 13, -13, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-k";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, -5, 0, 0, 11, 7, -1, -11, 0, 0, -2, 5, 11, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-l";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -2, -2, -6, -6, 4, 8, 2, 10, -10, 6, 6, 8, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-m";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 6, 10, -6, 10, 0, -8, 10, 6, -2, -6, 2, -4, 4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-n";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 2, 6, 2, 2, -6, -8, 0, -6, -2, -10, 10, 10, -12, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-o";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 2, 4, 7, 6, -6, 7, -1, 11, 1, -4, -6, -6, 5, -1, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-p";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -2, -4, 0, 6, 8, -4, -8, -4, -8, -6, 12, -8, -4, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-q";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, -4, 3, -6, -2, -9, -5, 3, -3, -12, -10, -6, -3, -9, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-r";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 2, 4, 0, -6, -8, -4, 8, 4, -8, 6, -12, 8, -4, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-s";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, 2, 2, -2, -2, -8, 8, -6, -2, -6, 6, -6, 4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.6-t";
N := (3*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 2, -6, -6, -2, 0, 4, -6, 6, 6, 2, -6, -12, 12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-a";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -6, 6, -8, 6, -6, 8, -8, 4, 4, 6, -6, 4, -4, 4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-b";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 8, -2, 2, 8, -4, 8, -10, 6, -6, -4, 2, 4, 12, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-c";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -8, -4, 1, -4, -4, -1, -7, 11, 3, -12, 8, 2, 13, 3, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-d";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, 4, 0, 6, -4, 4, 4, -8, -12, 6, 4, 8, 4, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-e";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 4, 6, -6, 4, 4, 8, 6, -2, 2, -8, 2, -12, -12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-f";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, -2, 4, 4, -2, -4, -4, -4, 0, 0, -2, -4, -8, -12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-g";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 8, 4, 1, 4, 4, -1, -7, 11, 3, 12, -8, 2, 13, 3, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-h";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 2, 4, -4, 2, -4, -4, -4, 0, 0, 2, -4, -8, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-i";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -8, -2, -2, -8, -4, 8, -10, 6, 6, 4, 2, 4, 12, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-j";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, 4, 0, -6, -4, 4, 4, -8, 12, -6, 4, 8, 4, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-k";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -4, 6, 6, -4, 4, 8, 6, -2, -2, 8, 2, -12, -12, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-l";
N := (12*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 6, -6, -8, -6, 6, 8, -8, 4, 4, -6, 6, 4, -4, 4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-a";
N := (18*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, 2, -2, 6, 8, -4, 10, 2, 2, -2, 10, 12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-b";
N := (18*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, -8, -6, 2, -4, 0, -2, -2, -2, 10, -4, 12, -4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-c";
N := (18*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 6, -2, 6, 6, -8, -4, 6, -6, 6, -6, 6, 0, 4, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-d";
N := (18*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -2, -6, -2, -4, 0, -2, -2, 2, 2, -10, -12, -4, -8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-e";
N := (18*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -6, 2, -2, -4, 0, -6, -2, 6, 6, 2, -8, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-f";
N := (18*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -6, -2, 2, -4, 0, -6, -2, -6, -6, 2, -8, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-g";
N := (18*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, -2, 6, 2, -4, 0, -2, -2, -2, -2, -10, -12, -4, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-h";
N := (18*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -6, -2, -6, -6, -8, -4, 6, -6, -6, 6, 6, 0, 4, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-i";
N := (18*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -8, 6, -2, -4, 0, -2, -2, 2, -10, -4, 12, -4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.5-j";
N := (18*w + 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -6, 2, 2, -6, 8, -4, 10, 2, -2, 2, 10, 12, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-a";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, -6, -6, 2, 6, 4, 0, 6, -6, -2, -6, -6, 12, -12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-b";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -4, 4, 6, 0, -4, -8, 4, 8, -6, 8, -12, -4, 8, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-c";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, -6, 2, 2, 2, 8, -8, -2, -6, -6, 6, -6, -12, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-d";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, -4, -2, 7, 6, -6, -1, 7, 1, 11, 6, 4, -6, -1, 5, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-e";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, -6, 3, 2, 6, -5, -9, -3, 3, 10, 12, -6, -9, -3, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-f";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -2, 10, -10, 6, -8, 0, 6, 10, 6, 2, 2, 4, -4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-g";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -6, -2, 2, 6, -2, 0, -8, -2, -6, -10, 10, 10, 4, -12, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-h";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -4, -4, -6, 0, -4, 8, -4, -8, 6, 8, 12, -4, -8, 16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-i";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, -2, -2, 6, 6, 8, 4, 10, 2, -6, 10, 6, -4, 8, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-j";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, -1, 0, 0, -5, -5, -7, 7, 0, 0, 14, -13, 13, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-k";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, -5, 0, 0, 7, 11, -11, -1, 0, 0, -2, 11, 5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-l";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 2, -2, -6, -6, 8, 4, 10, 2, 6, -10, 6, -4, 8, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-m";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 2, 10, 10, -6, -8, 0, 6, 10, -6, -2, 2, 4, -4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-n";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 6, 2, 2, -6, 2, 0, -8, -2, -6, 10, -10, 10, 4, -12, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-o";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 4, 2, 7, -6, 6, -1, 7, 1, 11, -6, -4, -6, -1, 5, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-p";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, 4, -4, 6, 0, -4, 8, -4, -8, -6, -8, 12, -4, -8, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-q";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, 6, 3, -2, -6, -5, -9, -3, 3, -10, -12, -6, -9, -3, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-r";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 4, 4, -6, 0, -4, -8, 4, 8, 6, -8, -12, -4, 8, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-s";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, 6, 2, -2, -2, 8, -8, -2, -6, 6, -6, -6, -12, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.7-t";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 6, -6, -2, -6, 4, 0, 6, -6, 2, 6, -6, 12, -12, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-a";
N := (-17*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 5, -3, -1, 5, -4, 2, 8, 4, 2, -11, -1, 7, 5, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-b";
N := (-17*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 6, 10, -2, -4, 8, -10, 10, -2, -10, 2, 4, -4, -4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-c";
N := (-17*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 5, -9, 9, 9, -6, -11, -2, 6, 3, 2, 10, 3, 11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-d";
N := (-17*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, -1, 9, 9, -4, -4, -10, -10, 6, -9, -1, -1, -13, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-e";
N := (-17*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, -1, -9, -9, -4, -4, -10, -10, -6, 9, -1, -1, -13, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-f";
N := (-17*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 5, 9, -9, 9, -6, -11, -2, -6, -3, 2, 10, 3, -11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-g";
N := (-17*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 6, -10, 2, -4, 8, -10, 10, 2, 10, 2, 4, -4, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.1-h";
N := (-17*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -5, -3, 1, -5, -4, 2, 8, 4, -2, 11, -1, 7, 5, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-a";
N := (-17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 5, -3, 5, -1, 2, -4, 4, 8, -11, 2, -1, 5, 7, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-b";
N := (-17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 6, -2, 10, 8, -4, 10, -10, -10, -2, 2, -4, 4, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-c";
N := (-17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 3, 5, 9, -9, -6, 9, -2, -11, 3, 6, 2, 3, 10, 6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-d";
N := (-17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, -1, 9, 9, -4, -4, -10, -10, -9, 6, -1, -13, -1, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-e";
N := (-17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, -1, -9, -9, -4, -4, -10, -10, 9, -6, -1, -13, -1, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-f";
N := (-17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 5, -9, 9, -6, 9, -2, -11, -3, -6, 2, 3, 10, -6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-g";
N := (-17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 6, 2, -10, 8, -4, 10, -10, 10, 2, 2, -4, 4, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 578.2-h";
N := (-17*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -5, -3, -5, 1, 2, -4, 4, 8, 11, -2, -1, 5, 7, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.1-a";
N := (-13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 3, 2, 1, 10, -6, 3, 10, 0, -2, 6, 8, 1, 8, 4, 0, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.1-b";
N := (-13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, -2, 6, -6, 10, -4, -8, -2, 2, 6, -2, -2, 12, 4, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.1-c";
N := (-13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, -6, 2, -2, -6, -4, 4, 6, -2, 2, -2, 2, 4, 16, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.1-d";
N := (-13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, -6, -6, 2, -6, 8, -8, -2, 6, 6, 6, 2, 4, 4, 4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.1-e";
N := (-13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 6, -6, -2, 6, 8, -8, -2, 6, -6, -6, 2, 4, 4, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.1-f";
N := (-13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 6, 2, 2, 6, -4, 4, 6, -2, -2, 2, 2, 4, 16, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.1-g";
N := (-13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, 2, 6, 6, -10, -4, -8, -2, 2, -6, 2, -2, 12, 4, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.1-h";
N := (-13*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -3, -2, 1, -10, 6, 3, 10, 0, -2, -6, -8, 1, 8, 4, 0, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.2-a";
N := (23*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -6, 0, -1, -9, -6, 8, -4, -7, 2, -3, -9, 2, -7, 11, -9, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.2-b";
N := (23*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 6, 0, -1, 9, 6, 8, -4, -7, 2, 3, 9, 2, -7, 11, 9, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.4-a";
N := (-13*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 2, 3, 1, -6, 10, 10, 3, -2, 0, 8, 6, 1, 4, 8, -9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.4-b";
N := (-13*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 2, 6, 10, -6, -8, -4, 2, -2, -2, 6, -2, 4, 12, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.4-c";
N := (-13*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -2, 2, -6, -2, 4, -4, -2, 6, -2, 2, 2, 16, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.4-d";
N := (-13*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -6, 2, -6, -6, 2, -8, 8, 6, -2, 6, 6, 2, 4, 4, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.4-e";
N := (-13*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 6, -2, -6, 6, -2, -8, 8, 6, -2, -6, -6, 2, 4, 4, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.4-f";
N := (-13*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 2, 2, 6, 2, 4, -4, -2, 6, 2, -2, 2, 16, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.4-g";
N := (-13*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, -2, 6, -10, 6, -8, -4, 2, -2, 2, -6, -2, 4, 12, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.4-h";
N := (-13*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -2, -3, 1, 6, -10, 10, 3, -2, 0, -8, -6, 1, 4, 8, 9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.3-a";
N := (23*w - 73)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 0, -6, -1, -6, -9, -4, 8, 2, -7, -9, -3, 2, 11, -7, -18, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 582.3-b";
N := (23*w - 73)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 6, -1, 6, 9, -4, 8, 2, -7, 9, 3, 2, 11, -7, 18, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.2-a";
N := (-17*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -2, 0, -6, 0, -3, -6, 5, 7, -1, 8, -5, -5, 10, 7, -9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.2-b";
N := (-17*w - 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 2, 0, -6, 0, 3, -6, 5, 7, -1, -8, 5, -5, 10, 7, 9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.3-a";
N := (-17*w + 63)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 0, -2, -6, -3, 0, 5, -6, -1, 7, -5, 8, -5, 7, 10, -2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 586.3-b";
N := (-17*w + 63)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 0, 2, -6, 3, 0, 5, -6, -1, 7, 5, -8, -5, 7, 10, 2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-a";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -6, 6, -6, 6, 0, 0, 10, 10, -2, 2, -12, -12, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-b";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -10, 10, -10, 4, 4, 2, 2, 2, -2, 12, 12, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-c";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 6, 6, -6, 8, 8, -6, -6, -6, 6, 4, 4, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-d";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, -2, 6, 0, 6, 8, -10, 0, 6, 0, -6, 4, 4, -14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-e";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 2, -6, -2, -2, 0, 0, -10, -10, -6, -6, 4, 4, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-f";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 2, -2, 6, -6, 0, -10, 8, 6, 0, 6, 0, 4, 4, -14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-g";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -6, 2, -2, -10, -10, 6, 6, -4, 4, 12, 12, 14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-h";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -6, -2, 2, -10, -10, 6, 6, 4, -4, 12, 12, -14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-i";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, -2, 2, 6, 6, 0, -10, 8, 6, 0, -6, 0, 4, 4, 14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-j";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, -6, 2, 2, 0, 0, -10, -10, 6, 6, 4, 4, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-k";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 2, 6, 0, -6, 8, -10, 0, 6, 0, 6, 4, 4, 14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-l";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 6, -6, 6, 8, 8, -6, -6, 6, -6, 4, 4, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-m";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -10, -10, 10, 4, 4, 2, 2, -2, 2, 12, 12, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-n";
N := (-28*w + 98)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 6, 6, 6, -6, 0, 0, 10, 10, 2, -2, -12, -12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-a";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -6, -3, 4, 5, -6, -1, -10, 8, 8, 12, 5, 2, 11, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-b";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, 0, 2, -8, 6, 0, -4, 2, 2, 2, 0, -4, 4, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-c";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -2, 0, 2, 8, -6, 0, -4, 2, 2, -2, 0, -4, 4, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-d";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 6, 3, 4, -5, 6, -1, -10, 8, 8, -12, -5, 2, 11, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-a";
N := (-7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -3, -6, 4, -6, 5, -10, -1, 8, 8, 5, 12, 11, 2, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-b";
N := (-7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 2, 2, 6, -8, -4, 0, 2, 2, 0, 2, 4, -4, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-c";
N := (-7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, -2, 2, -6, 8, -4, 0, 2, 2, 0, -2, 4, -4, -16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-d";
N := (-7*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 3, 6, 4, 6, -5, -10, -1, 8, 8, -5, -12, 11, 2, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.1-a";
N := (16*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 8, -6, 0, 4, 4, -4, -6, -12, 4, 14, 8, -8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.1-b";
N := (16*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -6, 0, 2, 6, -3, 5, -4, -7, -3, 6, 5, -10, -4, -12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.1-c";
N := (16*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, 2, 4, 10, -9, 9, -4, 9, 7, 6, -11, -2, 12, -4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.1-d";
N := (16*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -6, -2, 4, -10, 9, 9, -4, 9, -7, -6, -11, -2, 12, 4, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.1-e";
N := (16*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 6, 0, 2, -6, 3, 5, -4, -7, 3, -6, 5, -10, -4, 12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.1-f";
N := (16*w + 44)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, -8, -6, 0, -4, 4, -4, -6, 12, -4, 14, 8, -8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.4-a";
N := (14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 6, 0, -4, 0, 2, -10, -8, -10, -10, -6, 10, -4, -8, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.4-b";
N := (14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 2, -4, 8, -4, -2, -2, 8, 6, 2, 6, 10, 0, 4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.4-c";
N := (14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, 4, 8, 4, 2, -2, 8, 6, -2, -6, 10, 0, 4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.4-d";
N := (14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -6, 0, -4, 0, -2, -10, -8, -10, 10, 6, 10, -4, -8, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.4-e";
N := (14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 3, 0, 2, 6, -5, -4, 10, -7, -2, 0, 1, -13, -11, 9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.4-f";
N := (14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -3, 0, 2, -6, 5, -4, 10, -7, 2, 0, 1, -13, -11, -9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.4-g";
N := (14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 2, 6, 4, 6, 10, -10, 0, -2, 0, 12, 2, -4, 4, 6, 18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.4-h";
N := (14*w + 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, -6, 4, -6, -10, -10, 0, -2, 0, -12, 2, -4, 4, -6, -18];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.7-a";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, -6, 6, 4, 3, -6, 4, -1, -11, 6, -9, 1, 4, 2, 9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.7-b";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 2, -6, 2, 6, -2, 4, -8, 6, 10, -6, 2, -8, -8, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.7-c";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 7, 0, -6, -2, -9, -4, 2, 1, -2, 0, 9, 11, 5, 5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.7-d";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -7, 0, -6, 2, 9, -4, 2, 1, 2, 0, 9, 11, 5, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.7-e";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -2, 6, 2, -6, 2, 4, -8, 6, -10, 6, 2, -8, -8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.7-f";
N := (w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, 6, -6, 4, -3, 6, 4, -1, -11, -6, 9, 1, 4, 2, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.8-a";
N := (-9*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -6, -4, -8, 4, -2, 6, 8, -10, 2, -10, -6, -12, 0, 16, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.8-b";
N := (-9*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 6, 4, -8, -4, 2, 6, 8, -10, -2, 10, -6, -12, 0, -16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.8-c";
N := (-9*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 6, 8, -8, 8, -6, 2, 0, -2, -6, 6, 10, -8, 12, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.8-d";
N := (-9*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -6, -8, -8, -8, 6, 2, 0, -2, 6, -6, 10, -8, 12, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.2-a";
N := (16*w - 60)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 8, 4, -6, 4, 0, -4, 4, -6, 4, -12, 14, -8, 8, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.2-b";
N := (16*w - 60)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, -6, 2, -3, 6, -4, 5, -7, 6, -3, 5, -4, -10, -3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.2-c";
N := (16*w - 60)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 6, 4, -9, 10, -4, 9, 9, 6, 7, -11, 12, -2, -9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.2-d";
N := (16*w - 60)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -6, 4, 9, -10, -4, 9, 9, -6, -7, -11, 12, -2, 9, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.2-e";
N := (16*w - 60)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, 6, 2, 3, -6, -4, 5, -7, -6, 3, 5, -4, -10, 3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.2-f";
N := (16*w - 60)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -8, -4, -6, -4, 0, -4, 4, -6, -4, 12, 14, -8, 8, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.5-a";
N := (14*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 6, -4, 2, 0, -8, -10, -10, -6, -10, 10, -8, -4, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.5-b";
N := (14*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -4, 2, 8, -2, -4, 8, -2, 6, 6, 2, 10, 4, 0, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.5-c";
N := (14*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -2, 8, 2, 4, 8, -2, 6, -6, -2, 10, 4, 0, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.5-d";
N := (14*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -6, -4, -2, 0, -8, -10, -10, 6, 10, 10, -8, -4, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.5-e";
N := (14*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, 3, 2, -5, 6, 10, -4, -7, 0, -2, 1, -11, -13, 3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.5-f";
N := (14*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 0, -3, 2, 5, -6, 10, -4, -7, 0, 2, 1, -11, -13, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.5-g";
N := (14*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 6, 2, 4, 10, 6, 0, -10, -2, 12, 0, 2, 4, -4, 18, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.5-h";
N := (14*w - 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -6, -2, 4, -10, -6, 0, -10, -2, -12, 0, 2, 4, -4, -18, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.10-a";
N := (w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 6, -6, 4, -6, 3, -1, 4, -11, -9, 6, 1, 2, 4, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.10-b";
N := (w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -6, 2, 2, -2, 6, -8, 4, 6, -6, 10, 2, -8, -8, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.10-c";
N := (w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 0, 7, -6, -9, -2, 2, -4, 1, 0, -2, 9, 5, 11, -1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.10-d";
N := (w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, 0, -7, -6, 9, 2, 2, -4, 1, 0, 2, 9, 5, 11, 1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.10-e";
N := (w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 6, -2, 2, 2, -6, -8, 4, 6, 6, -10, 2, -8, -8, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.10-f";
N := (w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -6, 6, 4, 6, -3, -1, 4, -11, 9, -6, 1, 2, 4, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.9-a";
N := (9*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 6, -4, -6, -8, -2, 4, 8, 6, -10, -10, 2, -6, 0, -12, -12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.9-b";
N := (9*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 4, 6, -8, 2, -4, 8, 6, -10, 10, -2, -6, 0, -12, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.9-c";
N := (9*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, 8, 6, -8, -6, 8, 0, 2, -2, 6, -6, 10, 12, -8, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.9-d";
N := (9*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -8, -6, -8, 6, -8, 0, 2, -2, -6, 6, 10, 12, -8, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.1-a";
N := (15*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 4, -6, -7, 5, -9, 8, -7, 11, 2, 3, -3, -12, -14, -2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.1-b";
N := (15*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 6, -4, 9, 9, 5, 2, -1, 11, 6, 9, 5, 8, 14, -12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.1-c";
N := (15*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 3, -1, -6, 0, 5, -4, -7, 2, 9, 6, -4, 5, -4, 6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.1-d";
N := (15*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 4, 7, 1, -9, 6, -3, -3, -6, -11, -5, -16, 2, 0, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.1-e";
N := (15*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, -9, -4, -7, 0, 2, -7, -10, -4, 12, 6, 0, 13, -14, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.1-f";
N := (15*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -4, -9, 4, 7, 0, 2, -7, -10, 4, -12, 6, 0, 13, 14, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.1-g";
N := (15*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 4, -7, -1, -9, 6, -3, -3, 6, 11, -5, -16, 2, 0, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.1-h";
N := (15*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, -3, -1, 6, 0, 5, -4, -7, 2, -9, -6, -4, 5, -4, -6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.1-i";
N := (15*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, -4, -9, -9, 5, 2, -1, 11, -6, -9, 5, 8, 14, 12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.1-j";
N := (15*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -4, -6, 7, -5, -9, 8, -7, 11, -2, -3, -3, -12, -14, 2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.2-a";
N := (15*w - 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -4, -6, 5, -7, 8, -9, 11, -7, 3, 2, -3, -14, -12, 9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.2-b";
N := (15*w - 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, 0, -4, 9, 9, 2, 5, 11, -1, 9, 6, 5, 14, 8, -3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.2-c";
N := (15*w - 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 6, -1, 0, -6, -4, 5, 2, -7, 6, 9, -4, -4, 5, -3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.2-d";
N := (15*w - 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 4, 1, 7, 6, -9, -3, -3, -11, -6, -5, 2, -16, -5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.2-e";
N := (15*w - 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, -9, -7, -4, 2, 0, -10, -7, 12, -4, 6, 13, 0, -9, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.2-f";
N := (15*w - 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -2, -9, 7, 4, 2, 0, -10, -7, -12, 4, 6, 13, 0, 9, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.2-g";
N := (15*w - 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 4, -1, -7, 6, -9, -3, -3, 11, 6, -5, 2, -16, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.2-h";
N := (15*w - 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -6, -1, 0, 6, -4, 5, 2, -7, -6, -9, -4, -4, 5, 3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.2-i";
N := (15*w - 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, -4, -9, -9, 2, 5, 11, -1, -9, -6, 5, 14, 8, 3, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 594.2-j";
N := (15*w - 57)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 4, -6, -5, 7, 8, -9, 11, -7, -3, -2, -3, -14, -12, -9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-a";
N := (-20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, 0, 2, 3, 6, 5, 5, 2, 5, -9, 12, -1, 14, -13, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.1-b";
N := (-20*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -6, 0, 2, -3, -6, 5, 5, 2, 5, 9, -12, -1, 14, -13, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-a";
N := (20*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 6, 2, 6, 3, 5, 5, 5, 2, 12, -9, -1, -13, 14, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 596.2-b";
N := (20*w - 62)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, -6, 2, -6, -3, 5, 5, 5, 2, -12, 9, -1, -13, 14, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-a";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 6, -2, 5, -4, -1, 5, 5, 8, 10, 4, -11, 10, 4, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-b";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 2, 0, 4, -10, 8, 4, -6, 6, 0, -10, 2, -4, 4, 14, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-c";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -4, 0, 3, -6, -3, -3, 3, 6, -6, -8, -7, -10, 16, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-d";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 4, 0, -3, -6, -3, -3, 3, -6, 6, -8, -7, -10, -16, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-e";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, -2, 0, -4, 10, 8, 4, -6, 6, 0, 10, 2, -4, 4, -14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.1-f";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -6, 2, -5, -4, -1, 5, 5, -8, -10, 4, -11, 10, -4, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-a";
N := (-10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 6, 3, 5, -2, -1, -4, 5, 5, 10, 8, 4, 10, -11, 5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-b";
N := (-10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-6, 0, 2, -10, 4, 4, 8, 6, -6, -10, 0, 2, 4, -4, -2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-c";
N := (-10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 1, 3, 0, -3, -6, 3, -3, -6, 6, -8, -10, -7, -7, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-d";
N := (-10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, -1, -3, 0, -3, -6, 3, -3, 6, -6, -8, -10, -7, 7, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-e";
N := (-10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [6, 0, -2, 10, -4, 4, 8, 6, -6, 10, 0, 2, 4, -4, 2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 600.2-f";
N := (-10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -6, -3, -5, 2, -1, -4, 5, 5, -10, -8, 4, 10, -11, -5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

