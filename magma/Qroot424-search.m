print "Field 2.2.424.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 106);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w)*OK);
Append(~Plist,(3)*OK+(w + 1)*OK);
Append(~Plist,(3)*OK+(w + 2)*OK);
Append(~Plist,(5)*OK+(w + 1)*OK);
Append(~Plist,(5)*OK+(w + 4)*OK);
Append(~Plist,(3*w + 31)*OK);
Append(~Plist,(-3*w + 31)*OK);
Append(~Plist,(-2*w - 21)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(19)*OK+(w + 7)*OK);
Append(~Plist,(19)*OK+(w + 12)*OK);
Append(~Plist,(24*w - 247)*OK);
Append(~Plist,(-24*w - 247)*OK);
Append(~Plist,(53)*OK+(w)*OK);
Append(~Plist,(61)*OK+(w + 17)*OK);
Append(~Plist,(61)*OK+(w + 44)*OK);
Append(~Plist,(67)*OK+(w + 21)*OK);
Append(~Plist,(67)*OK+(w + 46)*OK);
Append(~Plist,(83)*OK+(w + 40)*OK);
Append(~Plist,(83)*OK+(w + 43)*OK);
Append(~Plist,(16*w + 165)*OK);
Append(~Plist,(16*w - 165)*OK);
Append(~Plist,(w + 3)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(101)*OK+(w + 45)*OK);
Append(~Plist,(101)*OK+(w + 56)*OK);
Append(~Plist,(109)*OK+(w + 18)*OK);
Append(~Plist,(109)*OK+(w + 91)*OK);
Append(~Plist,(3*w - 29)*OK);
Append(~Plist,(3*w + 29)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(139)*OK+(w + 55)*OK);
Append(~Plist,(139)*OK+(w + 84)*OK);
Append(~Plist,(157)*OK+(w + 48)*OK);
Append(~Plist,(157)*OK+(w + 109)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(173)*OK+(w + 25)*OK);
Append(~Plist,(173)*OK+(w + 148)*OK);
Append(~Plist,(179)*OK+(w + 74)*OK);
Append(~Plist,(179)*OK+(w + 105)*OK);
Append(~Plist,(181)*OK+(w + 58)*OK);
Append(~Plist,(181)*OK+(w + 123)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(-8*w - 81)*OK);
Append(~Plist,(-8*w + 81)*OK);
Append(~Plist,(-19*w - 195)*OK);
Append(~Plist,(19*w - 195)*OK);
Append(~Plist,(251)*OK+(w + 68)*OK);
Append(~Plist,(251)*OK+(w + 183)*OK);
Append(~Plist,(-3*w - 35)*OK);
Append(~Plist,(3*w - 35)*OK);
Append(~Plist,(277)*OK+(w + 99)*OK);
Append(~Plist,(277)*OK+(w + 178)*OK);
Append(~Plist,(45*w + 463)*OK);
Append(~Plist,(-45*w + 463)*OK);
Append(~Plist,(283)*OK+(w + 39)*OK);
Append(~Plist,(283)*OK+(w + 244)*OK);
Append(~Plist,(13*w + 135)*OK);
Append(~Plist,(-13*w + 135)*OK);
Append(~Plist,(349)*OK+(w + 111)*OK);
Append(~Plist,(349)*OK+(w + 238)*OK);
Append(~Plist,(-26*w + 267)*OK);
Append(~Plist,(-26*w - 267)*OK);
Append(~Plist,(373)*OK+(w + 35)*OK);
Append(~Plist,(373)*OK+(w + 338)*OK);
Append(~Plist,(379)*OK+(w + 131)*OK);
Append(~Plist,(379)*OK+(w + 248)*OK);
Append(~Plist,(389)*OK+(w + 103)*OK);
Append(~Plist,(389)*OK+(w + 286)*OK);
Append(~Plist,(397)*OK+(w + 30)*OK);
Append(~Plist,(397)*OK+(w + 367)*OK);
Append(~Plist,(6*w + 65)*OK);
Append(~Plist,(-6*w + 65)*OK);
Append(~Plist,(419)*OK+(w + 189)*OK);
Append(~Plist,(419)*OK+(w + 230)*OK);
Append(~Plist,(421)*OK+(w + 37)*OK);
Append(~Plist,(421)*OK+(w + 384)*OK);
Append(~Plist,(-7*w + 75)*OK);
Append(~Plist,(-7*w - 75)*OK);
Append(~Plist,(7*w - 69)*OK);
Append(~Plist,(7*w + 69)*OK);
Append(~Plist,(9*w - 95)*OK);
Append(~Plist,(-9*w - 95)*OK);
Append(~Plist,(443)*OK+(w + 97)*OK);
Append(~Plist,(443)*OK+(w + 346)*OK);
Append(~Plist,(-20*w + 207)*OK);
Append(~Plist,(-20*w - 207)*OK);
Append(~Plist,(63*w - 649)*OK);
Append(~Plist,(63*w + 649)*OK);
Append(~Plist,(491)*OK+(w + 149)*OK);
Append(~Plist,(491)*OK+(w + 342)*OK);
Append(~Plist,(499)*OK+(w + 51)*OK);
Append(~Plist,(499)*OK+(w + 448)*OK);
Append(~Plist,(509)*OK+(w + 124)*OK);
Append(~Plist,(509)*OK+(w + 385)*OK);
Append(~Plist,(-21*w + 215)*OK);
Append(~Plist,(21*w + 215)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(557)*OK+(w + 138)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[1, -3, 2, 2, -3, -1, 4, 8, -2, -1, 4, 4, 9, -2, -1, -11, 2, 7, 15, 0, 7, 7, 13, -7, 6, -14, 18, -12, 12, -8]);
ECSearch("1.1-b",(1)*OK,[1, 2, -3, -3, 2, 4, -1, -2, 8, 4, -1, 9, 4, -2, -11, -1, 7, 2, 0, 15, 7, 7, -7, 13, -14, 6, -12, 18, -8, 12]);
ECSearch("1.1-c",(1)*OK,[-1, -2, 3, 3, -2, 4, -1, -2, 8, -4, 1, 9, 4, 2, 11, 1, -7, -2, 0, -15, 7, 7, -7, 13, 14, -6, 12, -18, -8, 12]);
ECSearch("1.1-d",(1)*OK,[-1, 3, -2, -2, 3, -1, 4, 8, -2, 1, -4, 4, 9, 2, 1, 11, -2, -7, -15, 0, 7, 7, 13, -7, -6, 14, -18, 12, 12, -8]);
ECSearch("3.1-a",(3)*OK+(w + 1)*OK,[-2, 0, 3, -1, -2, 2, 1, 5, -2, 2, 0, 4, 10, 10, 2, -2, 2, 6, 6, 7, -5, -1, -17, 1, -3, -15, 9, 1, -3]);
ECSearch("3.1-b",(3)*OK+(w + 1)*OK,[1, 0, 1, -3, 4, 0, 3, -1, 4, -8, 4, 0, -6, 2, 2, 12, 0, -4, 12, -5, -1, 7, -1, -3, -15, -11, -19, -9, 3]);
ECSearch("3.1-c",(3)*OK+(w + 1)*OK,[-1, 0, -1, 3, 4, 0, 3, -1, -4, 8, 4, 0, 6, -2, -2, -12, 0, 4, -12, -5, -1, 7, -1, 3, 15, 11, 19, -9, 3]);
ECSearch("3.1-d",(3)*OK+(w + 1)*OK,[2, 0, -3, 1, -2, 2, 1, 5, 2, -2, 0, 4, -10, -10, -2, 2, -2, -6, -6, 7, -5, -1, -17, -1, 3, 15, -9, 1, -3]);
ECSearch("3.2-a",(3)*OK+(w + 2)*OK,[-2, 0, -1, 3, 2, -2, 5, 1, 2, -2, 4, 0, 10, 2, 10, 2, -2, 6, 6, -5, 7, -17, -1, -3, 1, 9, -15, -3, 1]);
ECSearch("3.2-b",(3)*OK+(w + 2)*OK,[1, 0, -3, 1, 0, 4, -1, 3, -8, 4, 0, 4, -6, 2, 2, 0, 12, 12, -4, -1, -5, -1, 7, -15, -3, -19, -11, 3, -9]);
ECSearch("3.2-c",(3)*OK+(w + 2)*OK,[-1, 0, 3, -1, 0, 4, -1, 3, 8, -4, 0, 4, 6, -2, -2, 0, -12, -12, 4, -1, -5, -1, 7, 15, 3, 19, 11, 3, -9]);
ECSearch("3.2-d",(3)*OK+(w + 2)*OK,[2, 0, 1, -3, 2, -2, 5, 1, -2, 2, 4, 0, -10, -2, -10, -2, 2, -6, -6, -5, 7, -17, -1, 3, -1, -9, 15, -3, 1]);
