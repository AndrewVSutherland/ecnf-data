print "Field 2.2.445.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 111);
OK := Integers(K);
Plist := [];
Append(~Plist,(3)*OK+(w)*OK);
Append(~Plist,(3)*OK+(w + 2)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(5)*OK+(w + 2)*OK);
Append(~Plist,(7)*OK+(w + 2)*OK);
Append(~Plist,(7)*OK+(w + 4)*OK);
Append(~Plist,(11)*OK+(w + 3)*OK);
Append(~Plist,(11)*OK+(w + 7)*OK);
Append(~Plist,(13)*OK+(w + 4)*OK);
Append(~Plist,(13)*OK+(w + 8)*OK);
Append(~Plist,(23)*OK+(w + 6)*OK);
Append(~Plist,(23)*OK+(w + 16)*OK);
Append(~Plist,(37)*OK+(w)*OK);
Append(~Plist,(37)*OK+(w + 36)*OK);
Append(~Plist,(43)*OK+(w + 15)*OK);
Append(~Plist,(43)*OK+(w + 27)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(79)*OK+(w + 22)*OK);
Append(~Plist,(79)*OK+(w + 56)*OK);
Append(~Plist,(83)*OK+(w + 34)*OK);
Append(~Plist,(83)*OK+(w + 48)*OK);
Append(~Plist,(89)*OK+(w + 44)*OK);
Append(~Plist,(103)*OK+(w + 20)*OK);
Append(~Plist,(103)*OK+(w + 82)*OK);
Append(~Plist,(w + 1)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(113)*OK+(w + 42)*OK);
Append(~Plist,(113)*OK+(w + 70)*OK);
Append(~Plist,(127)*OK+(w + 59)*OK);
Append(~Plist,(127)*OK+(w + 67)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(137)*OK+(w + 43)*OK);
Append(~Plist,(137)*OK+(w + 93)*OK);
Append(~Plist,(139)*OK+(w + 40)*OK);
Append(~Plist,(139)*OK+(w + 98)*OK);
Append(~Plist,(163)*OK+(w + 24)*OK);
Append(~Plist,(163)*OK+(w + 138)*OK);
Append(~Plist,(179)*OK+(w + 41)*OK);
Append(~Plist,(179)*OK+(w + 137)*OK);
Append(~Plist,(193)*OK+(w + 80)*OK);
Append(~Plist,(193)*OK+(w + 112)*OK);
Append(~Plist,(197)*OK+(w + 26)*OK);
Append(~Plist,(197)*OK+(w + 170)*OK);
Append(~Plist,(199)*OK+(w + 65)*OK);
Append(~Plist,(199)*OK+(w + 133)*OK);
Append(~Plist,(251)*OK+(w + 99)*OK);
Append(~Plist,(251)*OK+(w + 151)*OK);
Append(~Plist,(w + 19)*OK);
Append(~Plist,(w - 20)*OK);
Append(~Plist,(271)*OK+(w + 50)*OK);
Append(~Plist,(271)*OK+(w + 220)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(293)*OK+(w + 46)*OK);
Append(~Plist,(293)*OK+(w + 246)*OK);
Append(~Plist,(311)*OK+(w + 81)*OK);
Append(~Plist,(311)*OK+(w + 229)*OK);
Append(~Plist,(313)*OK+(w + 85)*OK);
Append(~Plist,(313)*OK+(w + 227)*OK);
Append(~Plist,(-3*w - 35)*OK);
Append(~Plist,(3*w - 38)*OK);
Append(~Plist,(337)*OK+(w + 33)*OK);
Append(~Plist,(337)*OK+(w + 303)*OK);
Append(~Plist,(353)*OK+(w + 149)*OK);
Append(~Plist,(353)*OK+(w + 203)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(383)*OK+(w + 35)*OK);
Append(~Plist,(383)*OK+(w + 347)*OK);
Append(~Plist,(397)*OK+(w + 158)*OK);
Append(~Plist,(397)*OK+(w + 238)*OK);
Append(~Plist,(-3*w + 26)*OK);
Append(~Plist,(3*w + 23)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(-2*w - 5)*OK);
Append(~Plist,(433)*OK+(w + 165)*OK);
Append(~Plist,(433)*OK+(w + 267)*OK);
Append(~Plist,(-3*w - 22)*OK);
Append(~Plist,(3*w - 25)*OK);
Append(~Plist,(457)*OK+(w + 38)*OK);
Append(~Plist,(457)*OK+(w + 418)*OK);
Append(~Plist,(461)*OK+(w + 134)*OK);
Append(~Plist,(461)*OK+(w + 326)*OK);
Append(~Plist,(479)*OK+(w + 66)*OK);
Append(~Plist,(479)*OK+(w + 412)*OK);
Append(~Plist,(503)*OK+(w + 87)*OK);
Append(~Plist,(503)*OK+(w + 415)*OK);
Append(~Plist,(509)*OK+(w + 68)*OK);
Append(~Plist,(509)*OK+(w + 440)*OK);
Append(~Plist,(547)*OK+(w + 205)*OK);
Append(~Plist,(547)*OK+(w + 341)*OK);
Append(~Plist,(557)*OK+(w + 255)*OK);
Append(~Plist,(557)*OK+(w + 301)*OK);
Append(~Plist,(563)*OK+(w + 92)*OK);
Append(~Plist,(563)*OK+(w + 470)*OK);
Append(~Plist,(577)*OK+(w + 142)*OK);
Append(~Plist,(577)*OK+(w + 434)*OK);
Append(~Plist,(593)*OK+(w + 148)*OK);
Append(~Plist,(593)*OK+(w + 444)*OK);
Append(~Plist,(601)*OK+(w + 258)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("3.1-a",(3)*OK+(w)*OK,[0, 1, -2, 0, 4, 4, -4, -6, 2, -8, -4, 6, -2, -4, 8, 0, 16, 8, 0, -4, -8, -6, -8, 20, -18, -2, 2, 2, 12]);
ECSearch("3.1-b",(3)*OK+(w)*OK,[0, 1, -2, 0, -4, 4, -4, 6, -2, 8, 4, -6, 2, 4, -8, 0, 16, 8, 0, 4, 8, -6, 8, -20, -18, -2, -2, -2, -12]);
ECSearch("3.2-a",(3)*OK+(w + 2)*OK,[0, 1, -2, 4, 0, -4, 4, 2, -6, -4, -8, -2, 6, 8, -4, 16, 0, 0, 8, -8, -4, -6, 20, -8, -2, -18, 2, 2, 16]);
ECSearch("3.2-b",(3)*OK+(w + 2)*OK,[0, 1, -2, -4, 0, -4, 4, -2, 6, 4, 8, 2, -6, -8, 4, 16, 0, 0, 8, 8, 4, -6, -20, 8, -2, -18, -2, -2, -16]);
ECSearch("4.1-a",(2)*OK,[3, -1, 0, 2, -2, -3, 1, 4, 0, 8, 0, -2, 10, 5, 1, 4, 0, -10, 14, -11, 9, -6, 8, 16, 8, -20, -1, 15, 20]);
ECSearch("4.1-b",(2)*OK,[1, -3, 0, 2, -2, 1, -3, 0, -4, 0, -8, -10, 2, -1, -5, 0, 4, 14, -10, -9, 11, -6, -16, -8, -20, 8, -15, 1, 8]);
ECSearch("4.1-c",(2)*OK,[1, 1, -4, 2, 2, -3, -3, -4, -4, -4, -4, 2, 2, -9, -9, -8, -8, 10, 10, -9, -9, 10, -4, -4, 0, 0, 1, 1, 12]);
ECSearch("4.1-d",(2)*OK,[-1, 3, 0, -2, 2, 1, -3, 0, 4, 0, 8, 10, -2, 1, 5, 0, 4, 14, -10, 9, -11, -6, 16, 8, -20, 8, 15, -1, -8]);
ECSearch("4.1-e",(2)*OK,[-3, 1, 0, -2, 2, -3, 1, -4, 0, -8, 0, 2, -10, -5, -1, 4, 0, -10, 14, 11, -9, -6, -8, -16, 8, -20, 1, -15, -20]);
ECSearch("4.1-f",(2)*OK,[-1, -1, -4, -2, -2, -3, -3, 4, 4, 4, 4, -2, -2, 9, 9, -8, -8, 10, 10, 9, 9, 10, 4, 4, 0, 0, -1, -1, -12]);
