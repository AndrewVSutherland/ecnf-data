print "Field 2.2.449.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 112);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w - 10)*OK);
Append(~Plist,(w - 11)*OK);
Append(~Plist,(-116*w - 1171)*OK);
Append(~Plist,(116*w - 1287)*OK);
Append(~Plist,(-1002*w - 10115)*OK);
Append(~Plist,(-1002*w + 11117)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(10*w - 111)*OK);
Append(~Plist,(10*w + 101)*OK);
Append(~Plist,(32*w - 355)*OK);
Append(~Plist,(32*w + 323)*OK);
Append(~Plist,(8*w + 81)*OK);
Append(~Plist,(8*w - 89)*OK);
Append(~Plist,(4*w - 45)*OK);
Append(~Plist,(4*w + 41)*OK);
Append(~Plist,(3892*w - 43181)*OK);
Append(~Plist,(3892*w + 39289)*OK);
Append(~Plist,(770*w - 8543)*OK);
Append(~Plist,(-770*w - 7773)*OK);
Append(~Plist,(158*w + 1595)*OK);
Append(~Plist,(158*w - 1753)*OK);
Append(~Plist,(538*w - 5969)*OK);
Append(~Plist,(-538*w - 5431)*OK);
Append(~Plist,(14*w + 141)*OK);
Append(~Plist,(14*w - 155)*OK);
Append(~Plist,(-10790*w - 108923)*OK);
Append(~Plist,(-7900*w - 79749)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(-54*w - 545)*OK);
Append(~Plist,(54*w - 599)*OK);
Append(~Plist,(-264*w + 2929)*OK);
Append(~Plist,(264*w + 2665)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(2774*w + 28003)*OK);
Append(~Plist,(2774*w - 30777)*OK);
Append(~Plist,(-1656*w + 18373)*OK);
Append(~Plist,(-1656*w - 16717)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(-6*w + 65)*OK);
Append(~Plist,(-6*w - 59)*OK);
Append(~Plist,(-390*w - 3937)*OK);
Append(~Plist,(390*w - 4327)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(-4*w - 43)*OK);
Append(~Plist,(4*w - 47)*OK);
Append(~Plist,(-180*w - 1817)*OK);
Append(~Plist,(180*w - 1997)*OK);
Append(~Plist,(1466*w - 16265)*OK);
Append(~Plist,(-1466*w - 14799)*OK);
Append(~Plist,(18*w + 181)*OK);
Append(~Plist,(18*w - 199)*OK);
Append(~Plist,(496*w + 5007)*OK);
Append(~Plist,(-496*w + 5503)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(4124*w + 41631)*OK);
Append(~Plist,(4124*w - 45755)*OK);
Append(~Plist,(76*w + 767)*OK);
Append(~Plist,(76*w - 843)*OK);
Append(~Plist,(-2352*w + 26095)*OK);
Append(~Plist,(2352*w + 23743)*OK);
Append(~Plist,(-3238*w - 32687)*OK);
Append(~Plist,(3238*w - 35925)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(960*w + 9691)*OK);
Append(~Plist,(-960*w + 10651)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-56*w + 621)*OK);
Append(~Plist,(-56*w - 565)*OK);
Append(~Plist,(20*w + 201)*OK);
Append(~Plist,(20*w - 221)*OK);
Append(~Plist,(-10*w + 109)*OK);
Append(~Plist,(-10*w - 99)*OK);
Append(~Plist,(-454*w + 5037)*OK);
Append(~Plist,(454*w + 4583)*OK);
Append(~Plist,(13680*w - 151777)*OK);
Append(~Plist,(13680*w + 138097)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(-10*w - 103)*OK);
Append(~Plist,(10*w - 113)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(48*w + 485)*OK);
Append(~Plist,(48*w - 533)*OK);
Append(~Plist,(114*w + 1151)*OK);
Append(~Plist,(-114*w + 1265)*OK);
Append(~Plist,(-178*w + 1975)*OK);
Append(~Plist,(-178*w - 1797)*OK);
Append(~Plist,(-14*w + 157)*OK);
Append(~Plist,(14*w + 143)*OK);
Append(~Plist,(6128*w + 61861)*OK);
Append(~Plist,(6128*w - 67989)*OK);
Append(~Plist,(92*w - 1021)*OK);
Append(~Plist,(92*w + 929)*OK);
Append(~Plist,(16802*w + 169613)*OK);
Append(~Plist,(16802*w - 186415)*OK);
Append(~Plist,(7668*w - 85075)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[0, -4, -3, -1, -1, 2, -4, -7, 7, 5, 9, -8, 6, -6, -6, 6, 12, 2, 4, 15, 7, 5, 1, 0, 14, 7, -11, 5]);
ECSearch("4.1-b",(2)*OK,[0, 0, -1, 5, 1, -6, 0, -3, 3, -3, 9, 0, 6, -6, -6, -10, -4, -10, -4, -15, -15, 5, -7, -12, -6, 11, -7, 3]);
ECSearch("4.1-c",(2)*OK,[-4, 0, -1, -3, -1, -4, 2, 7, -7, 9, 5, 6, -8, -6, -6, 12, 6, 4, 2, 7, 15, 1, 5, 14, 0, -11, 7, 17]);
ECSearch("4.1-d",(2)*OK,[0, 0, 5, -1, 1, 0, -6, 3, -3, 9, -3, 6, 0, -6, -6, -4, -10, -4, -10, -15, -15, -7, 5, -6, -12, -7, 11, -9]);
ECSearch("7.1-a",(-1002*w - 10115)*OK,[0, -1, -4, 3, 0, -1, 6, 3, -2, 4, -11, -2, 12, -4, -9, -5, 2, -14, -10, 4, 6, 3, 2, 16, 18, -4, 2, -19, 12]);
ECSearch("7.2-a",(-1002*w + 11117)*OK,[-1, 0, 3, -4, 0, -1, 3, 6, 4, -2, -2, -11, -4, 12, -5, -9, -14, 2, 4, -10, 3, 6, 16, 2, -4, 18, -19, 2, -18]);
