print "Field 2.2.273.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 68);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w)*OK);
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(4*w - 35)*OK);
Append(~Plist,(7)*OK+(w + 3)*OK);
Append(~Plist,(11)*OK+(w + 1)*OK);
Append(~Plist,(11)*OK+(w + 9)*OK);
Append(~Plist,(13)*OK+(w + 6)*OK);
Append(~Plist,(2*w - 17)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(19)*OK+(w + 5)*OK);
Append(~Plist,(19)*OK+(w + 13)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(31)*OK+(w + 2)*OK);
Append(~Plist,(31)*OK+(w + 28)*OK);
Append(~Plist,(6*w + 47)*OK);
Append(~Plist,(6*w - 53)*OK);
Append(~Plist,(71)*OK+(w + 14)*OK);
Append(~Plist,(71)*OK+(w + 56)*OK);
Append(~Plist,(73)*OK+(w + 22)*OK);
Append(~Plist,(73)*OK+(w + 50)*OK);
Append(~Plist,(-14*w - 109)*OK);
Append(~Plist,(-14*w + 123)*OK);
Append(~Plist,(97)*OK+(w + 25)*OK);
Append(~Plist,(97)*OK+(w + 71)*OK);
Append(~Plist,(-10*w - 77)*OK);
Append(~Plist,(10*w - 87)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(-4*w - 29)*OK);
Append(~Plist,(4*w - 33)*OK);
Append(~Plist,(137)*OK+(w + 18)*OK);
Append(~Plist,(137)*OK+(w + 118)*OK);
Append(~Plist,(149)*OK+(w + 35)*OK);
Append(~Plist,(149)*OK+(w + 113)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(197)*OK+(w + 21)*OK);
Append(~Plist,(197)*OK+(w + 175)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(223)*OK+(w + 37)*OK);
Append(~Plist,(223)*OK+(w + 185)*OK);
Append(~Plist,(229)*OK+(w + 80)*OK);
Append(~Plist,(229)*OK+(w + 148)*OK);
Append(~Plist,(239)*OK+(w + 44)*OK);
Append(~Plist,(239)*OK+(w + 194)*OK);
Append(~Plist,(241)*OK+(w + 76)*OK);
Append(~Plist,(241)*OK+(w + 164)*OK);
Append(~Plist,(-4*w + 31)*OK);
Append(~Plist,(4*w + 27)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(271)*OK+(w + 87)*OK);
Append(~Plist,(271)*OK+(w + 183)*OK);
Append(~Plist,(4*w + 35)*OK);
Append(~Plist,(-4*w + 39)*OK);
Append(~Plist,(281)*OK+(w + 111)*OK);
Append(~Plist,(281)*OK+(w + 169)*OK);
Append(~Plist,(307)*OK+(w + 102)*OK);
Append(~Plist,(307)*OK+(w + 204)*OK);
Append(~Plist,(-16*w - 123)*OK);
Append(~Plist,(16*w - 139)*OK);
Append(~Plist,(317)*OK+(w + 26)*OK);
Append(~Plist,(317)*OK+(w + 290)*OK);
Append(~Plist,(32*w - 281)*OK);
Append(~Plist,(32*w + 249)*OK);
Append(~Plist,(349)*OK+(w + 46)*OK);
Append(~Plist,(349)*OK+(w + 302)*OK);
Append(~Plist,(359)*OK+(w + 107)*OK);
Append(~Plist,(359)*OK+(w + 251)*OK);
Append(~Plist,(12*w + 95)*OK);
Append(~Plist,(12*w - 107)*OK);
Append(~Plist,(397)*OK+(w + 49)*OK);
Append(~Plist,(397)*OK+(w + 347)*OK);
Append(~Plist,(401)*OK+(w + 29)*OK);
Append(~Plist,(401)*OK+(w + 371)*OK);
Append(~Plist,(409)*OK+(w + 176)*OK);
Append(~Plist,(409)*OK+(w + 232)*OK);
Append(~Plist,(-12*w + 103)*OK);
Append(~Plist,(-12*w - 91)*OK);
Append(~Plist,(431)*OK+(w + 30)*OK);
Append(~Plist,(431)*OK+(w + 400)*OK);
Append(~Plist,(449)*OK+(w + 60)*OK);
Append(~Plist,(449)*OK+(w + 388)*OK);
Append(~Plist,(-4*w + 27)*OK);
Append(~Plist,(4*w + 23)*OK);
Append(~Plist,(-24*w + 209)*OK);
Append(~Plist,(-24*w - 185)*OK);
Append(~Plist,(-6*w + 47)*OK);
Append(~Plist,(6*w + 41)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(14*w + 111)*OK);
Append(~Plist,(14*w - 125)*OK);
Append(~Plist,(557)*OK+(w + 238)*OK);
Append(~Plist,(557)*OK+(w + 318)*OK);
Append(~Plist,(-4*w - 21)*OK);
Append(~Plist,(4*w - 25)*OK);
Append(~Plist,(-10*w + 91)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[3, 5, 0, 0, -2, 3, 3, -2, -2, 7, 8, 8, -11, -11, -9, -9, 2, 2, 10, 10, -8, -8, -12, -12, -2, -2, -15, -15]);
ECSearch("4.1-b",(2)*OK,[-3, 5, 0, 0, -2, -3, -3, -2, -2, 7, 8, 8, -11, -11, 9, 9, 2, 2, 10, 10, -8, -8, 12, 12, -2, -2, 15, 15]);
ECSearch("4.1-c",(2)*OK,[3, -5, 0, 0, 2, 3, 3, 2, 2, 7, -8, -8, -11, -11, 9, 9, -2, -2, 10, 10, 8, 8, -12, -12, -2, -2, -15, -15]);
ECSearch("4.1-d",(2)*OK,[-3, -5, 0, 0, 2, -3, -3, 2, 2, 7, -8, -8, -11, -11, -9, -9, -2, -2, 10, 10, 8, 8, 12, 12, -2, -2, 15, 15]);
ECSearch("4.2-a",(w + 8)*OK,[0, 0, 4, 0, 0, 2, 0, 0, -1, -7, -5, -11, 7, -5, 13, 0, 0, -17, 7, -17, 13, -19, 5, 0, 0, -20, -20, 0, 0]);
ECSearch("4.2-b",(w + 8)*OK,[0, 0, -4, 0, 0, -2, 0, 0, 1, 7, -5, 11, -7, -5, 13, 0, 0, 17, -7, -17, 13, 19, -5, 0, 0, -20, -20, 0, 0]);
ECSearch("4.3-a",(-w + 9)*OK,[0, 0, 4, 0, 0, 2, 0, 0, -7, -1, -5, 7, -11, 13, -5, 0, 0, 7, -17, 13, -17, 5, -19, 0, 0, -20, -20, 0, 0]);
ECSearch("4.3-b",(-w + 9)*OK,[0, 0, -4, 0, 0, -2, 0, 0, 7, 1, -5, -7, 11, 13, -5, 0, 0, -7, 17, 13, -17, -5, 19, 0, 0, -20, -20, 0, 0]);
