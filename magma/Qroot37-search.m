print "Field 2.2.37.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 9);
OK := Integers(K);
Plist := [];
Append(~Plist,(w - 3)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(-w - 1)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(3*w - 8)*OK);
Append(~Plist,(-3*w - 5)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(-3*w - 4)*OK);
Append(~Plist,(3*w - 7)*OK);
Append(~Plist,(4*w - 11)*OK);
Append(~Plist,(-4*w - 7)*OK);
Append(~Plist,(-3*w + 5)*OK);
Append(~Plist,(3*w + 2)*OK);
Append(~Plist,(-3*w - 11)*OK);

effort := 400;
print "Isogeny class 1.1-a";
N := (1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 3, 3, -3, -3, 6, -2, -3, -3, 3, 3, 9, 9, -12, -12, -3, -3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 9.1-a";
N := (3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, 0, 0, 6, -2, 6, 6, -12, -12, -6, -6, 12, 12, 12, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 9.2-a";
N := (w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, -3, -3, 3, -6, -2, 3, -3, 3, -3, -9, 9, 12, 12, 3, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 9.3-a";
N := (w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -3, -3, 3, -3, -6, -2, -3, 3, -3, 3, 9, -9, 12, 12, -3, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 11.1-a";
N := (w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 1, -5, 3, 4, -1, 6, -8, -6, -5, 10, 2, 1, -4, 8, 9, 2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 11.1-b";
N := (w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 3, 3, -3, 0, -9, -2, 12, 6, 3, -6, 6, -9, -12, 0, 15, 6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 11.2-a";
N := (w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, 3, -5, 4, -1, 6, -6, -8, 10, -5, 1, 2, 8, -4, 2, 9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 11.2-b";
N := (w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, -3, 3, 0, -9, -2, 6, 12, -6, 3, -9, 6, 0, -12, 6, 15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 12.1-a";
N := (2*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 5, -2, -2, -8, 1, -3, -10, -3, -3, 10, 10, 3, 10, 0, 7, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 12.1-b";
N := (2*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, 2, 2, -4, -7, 7, 2, -7, 3, 14, -6, 13, -2, -8, -13, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 12.2-a";
N := (2*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, -2, -2, -2, -8, 1, -10, -3, -3, -3, 10, 10, 10, 3, 7, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 12.2-b";
N := (2*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -2, 2, 2, -4, -7, 2, 7, 3, -7, -6, 14, -2, 13, -13, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 16.1-a";
N := (4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 1, 3, 3, -2, -10, -3, -3, 9, 9, -3, -3, 4, 4, 15, 15, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 21.1-a";
N := (w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -6, 0, -2, -4, 0, -6, -12, 12, -12, -12, 4, 4, 0, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 21.1-b";
N := (w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 6, -2, -4, 12, -8, 10, -4, 2, 0, -2, -8, -4, -12, -16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 21.1-c";
N := (w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, 0, 4, 2, -6, -2, 10, 8, 8, -6, 10, 4, -4, 0, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 21.4-a";
N := (w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 0, -6, -2, -4, -6, 0, 12, -12, -12, -12, 4, 4, 0, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 21.4-b";
N := (w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -2, 6, -4, 12, 10, -8, 2, -4, -2, 0, -4, -8, -16, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 21.4-c";
N := (w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, 4, 0, 2, -6, 10, -2, 8, 8, 10, -6, -4, 4, 8, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.1-a";
N := (5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 0, 1, -3, 1, 1, -10, 9, -7, -3, -7, 3, -9, 4, -4, -11, 5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.1-b";
N := (5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 1, 1, -3, -3, 2, -3, -3, -3, -3, -9, -9, 4, 4, 9, 9, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 25.1-c";
N := (5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, -3, 1, 1, 1, -10, -7, 9, -7, -3, -9, 3, -4, 4, 5, -11, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.1-a";
N := (3*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, 0, 0, -6, -2, -6, 6, -12, 12, 6, -6, -12, -12, -12, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.3-a";
N := (-2*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -3, 3, -6, 3, 6, -11, -6, -3, 0, -12, 0, 6, 3, 3, 3, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.3-b";
N := (-2*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, 3, 3, 0, 6, -2, -9, 6, 9, 9, 9, 6, 0, 9, 9, -9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.3-c";
N := (-2*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, -3, 3, 0, -6, -2, 9, 6, 9, -9, -9, 6, 0, -9, -9, -9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.3-d";
N := (-2*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 3, -3, -6, -3, -6, -11, 6, -3, 0, 12, 0, 6, -3, -3, -3, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.2-a";
N := (3*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, 0, 0, -6, -2, 6, -6, 12, -12, -6, 6, -12, -12, 12, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.4-a";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, -3, 3, -6, 6, -11, -3, -6, -12, 0, 6, 0, 3, 3, 0, 3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.4-b";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 3, 0, 0, 3, 6, -2, 6, -9, 9, 9, 6, 9, 9, 0, -9, 9, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.4-c";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -3, 0, 0, 3, -6, -2, 6, 9, -9, 9, 6, -9, -9, 0, -9, -9, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 27.4-d";
N := (2*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -3, 3, -3, -6, -6, -11, -3, 6, 12, 0, 6, 0, -3, -3, 0, -3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 28.1-a";
N := (-2*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 6, -4, -6, -2, -2, -12, -4, -4, 2, 2, -4, -4, -12, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 28.2-a";
N := (2*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -4, 6, -6, -2, -12, -2, -4, -4, 2, 2, -4, -4, 8, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.1-a";
N := (w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -3, -2, -5, -4, 3, -9, 7, 4, -2, 1, -4, -10, 8, 11, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.1-b";
N := (w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 1, -2, 3, -8, 11, 3, -9, -12, -6, -3, 12, -14, 4, -9, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.2-a";
N := (-2*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, 0, -6, 6, -2, 0, -12, 0, -6, -6, -12, 0, -6, -12, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.2-b";
N := (-2*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 4, -3, -2, 11, 0, 0, 6, -12, -9, 0, 13, 4, 6, -3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.2-c";
N := (-2*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, 0, 3, -6, 7, 0, -12, -6, 12, 3, 0, 15, 12, 6, 15, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.4-a";
N := (w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -3, -5, -4, 3, 7, -9, -2, 4, -4, 1, 8, -10, 0, 11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.4-b";
N := (w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 1, 3, -8, 11, -9, 3, -6, -12, 12, -3, 4, -14, -12, -9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.3-a";
N := (2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, 0, -6, 6, -2, -12, 0, -6, 0, -12, -6, -6, 0, 0, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.3-b";
N := (2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 1, -3, -2, 11, 0, 0, -12, 6, 0, -9, 4, 13, -3, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 33.3-c";
N := (2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, 3, 3, -6, 7, -12, 0, 12, -6, 0, 3, 12, 15, 15, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.1-a";
N := (6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -3, -3, 6, -12, 2, 2, 8, 8, -11, -11, 8, 8, 2, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.1-b";
N := (6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 5, -1, 2, 8, 2, -2, 12, 8, -9, -7, 4, -8, -10, 10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.1-c";
N := (6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -1, 5, 2, 8, -2, 2, 8, 12, -7, -9, -8, 4, 10, -10, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.2-a";
N := (2*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -5, -2, 2, 8, 1, 3, -10, -3, 3, -10, 10, -3, -10, 0, 7, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.2-b";
N := (2*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, 2, -2, 4, -7, -7, 2, -7, -3, -14, -6, -13, 2, 8, -13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.2-c";
N := (2*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, 0, -6, 2, -7, -3, 0, -9, 3, -6, 6, 5, 2, 0, 9, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.2-d";
N := (2*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 1, 0, 6, -2, -7, 3, 0, -9, -3, 6, 6, -5, -2, 0, 9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.3-a";
N := (2*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -5, 2, 2, -2, 8, 1, -10, 3, 3, -3, 10, -10, -10, -3, 7, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.3-b";
N := (2*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 2, -2, 2, 4, -7, 2, -7, -3, -7, -6, -14, 2, -13, -13, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.3-c";
N := (2*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -6, 0, 2, -7, 0, -3, 3, -9, 6, -6, 2, 5, 9, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 36.3-d";
N := (2*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 6, 0, -2, -7, 0, 3, -3, -9, 6, 6, -2, -5, 9, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 37.1-a";
N := (-2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -1, -1, 3, 3, -10, -9, -9, 3, 3, -3, -3, -4, -4, -15, -15, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 37.1-b";
N := (-2*w + 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 0, -1, -1, -5, -5, -6, -9, -9, -9, -9, 1, 1, 8, 8, 9, 9, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 41.1-a";
N := (3*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 0, 0, 0, 6, -3, 7, 0, 0, 3, 0, -3, -9, 15, -12, -6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 41.2-a";
N := (-3*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 0, 0, 6, 0, -3, 7, 0, 3, 0, -3, 0, 15, -9, -6, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 44.1-a";
N := (2*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, -1, 0, -1, 2, 0, -6, -9, 6, -6, -3, -4, -4, -3, -6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 44.2-a";
N := (2*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, -1, 0, -1, 2, -6, 0, 6, -9, -3, -6, -4, -4, -6, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.1-a";
N := (4*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 4, -2, -2, 10, 12, 2, 0, -6, 4, -2, 12, -2, 6, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 48.2-a";
N := (4*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -2, 4, -2, 10, 2, 12, -6, 0, -2, 4, -2, 12, -8, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 49.1-a";
N := (7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, -3, -3, 1, 2, 0, 0, -6, -6, 9, 9, 13, 13, 3, 3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 49.2-a";
N := (-3*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -3, 3, 3, -6, 2, 3, -3, 3, -3, -9, -9, -12, -12, -3, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 49.3-a";
N := (3*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -3, 3, 3, -6, 2, -3, 3, -3, 3, -9, -9, -12, -12, -3, -3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 53.1-a";
N := (-3*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, 0, 5, 3, 5, -2, -1, -11, 0, -10, 4, -4, 1, 4, -12, -13, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 53.1-b";
N := (-3*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, 0, -3, 3, -3, 6, 7, -3, 0, 6, 12, 12, -15, 12, -12, 3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 53.2-a";
N := (3*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 5, 0, 5, 3, -2, -1, 0, -11, 4, -10, -4, 4, 1, -13, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 53.2-b";
N := (3*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -3, -3, 0, -3, 3, 6, 7, 0, -3, 12, 6, 12, 12, -15, 3, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.1-a";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, -2, -8, -4, 6, -4, 2, -8, -2, -12, -12, 8, -12, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.1-b";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, -2, -10, -2, -10, 4, 12, -14, 10, 4, 4, -12, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.1-c";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 2, -4, 8, 6, 0, 6, -8, 6, 0, -12, 8, -4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.1-d";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, -2, 8, 4, 2, -8, -2, -4, -6, -8, 4, 0, 0, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.1-e";
N := (-3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 0, -2, 2, -6, 6, -12, 0, 6, -6, 4, 4, 0, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.4-a";
N := (-2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 0, 4, -2, -6, -2, -10, -8, 8, -6, -10, -4, 4, 0, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.4-b";
N := (-2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 6, 0, 2, -4, 0, 6, 12, 12, -12, 12, -4, -4, 0, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.4-c";
N := (-2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -6, -2, 4, 12, -8, -10, 4, 2, 0, 2, 8, 4, -12, 16, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.2-a";
N := (3*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -2, -2, -8, -4, -4, 6, -8, 2, -12, -2, 8, -12, 8, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.2-b";
N := (3*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, -2, -10, -10, -2, 12, 4, 10, -14, 4, 4, 4, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.2-c";
N := (3*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 2, -4, 8, 0, 6, -8, 6, 0, 6, 8, -12, 0, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.2-d";
N := (3*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -6, 8, 4, -8, 2, -4, -2, -8, -6, 0, 4, -12, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.2-e";
N := (3*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 0, -2, 2, 6, -6, 0, -12, -6, 6, 4, 4, 0, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.5-a";
N := (-2*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 4, 0, -2, -6, -10, -2, 8, -8, -10, -6, 4, -4, -8, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.5-b";
N := (-2*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 0, 6, 2, -4, 6, 0, 12, 12, 12, -12, -4, -4, 0, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 63.5-c";
N := (-2*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -2, -6, 4, 12, -10, -8, 2, 4, 2, 0, 4, 8, 16, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.1-a";
N := (8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 1, -3, 3, -1, -2, -2, 9, 1, -7, -3, 1, 9, 12, -4, -13, -9, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 64.1-b";
N := (8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -3, 1, -1, 3, -2, -2, 1, 9, -3, -7, 9, 1, -4, 12, -9, -13, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 67.1-a";
N := (4*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -3, -1, 3, 5, 2, -10, 3, 5, -9, -9, 3, 5, -8, 5, -7, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 67.2-a";
N := (-4*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -1, -3, 5, 3, 2, -10, 5, 3, -9, -9, 5, 3, -8, -7, 5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 71.1-a";
N := (-3*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, -4, 4, 6, 4, 6, -4, 12, 2, 10, 0, 2, -8, -4, 8, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 71.1-b";
N := (-3*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 1, -4, 0, 5, -3, -4, -6, -7, -2, 3, 10, 4, -5, -2, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 71.2-a";
N := (3*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, 4, -4, 4, 6, 6, -4, 2, 12, 0, 10, -8, 2, 8, -4, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 71.2-b";
N := (3*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -4, 1, 5, 0, -3, -4, -7, -6, 3, -2, 4, 10, -2, -5, -12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 73.1-a";
N := (-3*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -2, 4, 0, 3, 4, 4, 6, 2, 2, -6, 8, 1, -12, -12, 2, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 73.2-a";
N := (3*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -2, 0, 4, 4, 3, 4, 6, 2, 2, 8, -6, -12, 1, 2, -12, -6, 2, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-a";
N := (5*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 4, 4, 4, 2, 2, -6, 8, 12, -6, -6, -4, -8, 8, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.1-b";
N := (5*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 4, -2, 4, 0, 8, 2, 2, 4, 6, -12, 4, 8, -2, 0, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.2-a";
N := (5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 4, 0, 4, 4, 2, -6, 2, 12, 8, -6, -6, -8, -4, -8, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 75.2-b";
N := (5*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 4, 0, 4, 8, 2, 2, 6, 4, 4, -12, -2, 8, -8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 77.1-a";
N := (-4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, -2, 3, 4, 2, -9, -6, -3, 0, 3, 3, -14, -2, 3, -15, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 77.4-a";
N := (-4*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, -2, 3, 4, 2, -6, -9, 0, -3, 3, 3, -2, -14, -15, 3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.1-a";
N := (9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, 0, 0, 6, -2, -6, -6, 12, 12, 6, 6, 12, 12, -12, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.1-b";
N := (9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 3, 3, 3, 6, -2, 3, 3, -3, -3, -9, -9, -12, -12, 3, 3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.2-a";
N := (3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 3, 0, -3, -6, 7, -6, -3, 6, 0, 12, -6, 9, -9, 9, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.2-b";
N := (3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 0, 0, 6, 3, 7, 0, 6, 6, -12, 6, 12, 12, -15, -6, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.2-c";
N := (3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 0, 3, -2, -1, 6, 9, 6, 0, 12, -6, -5, 13, 15, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.2-d";
N := (3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 0, -3, 2, -1, -6, 9, 6, 0, -12, -6, 5, -13, -15, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.2-e";
N := (3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 0, -6, -3, 7, 0, 6, 6, 12, -6, 12, -12, 15, 6, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.2-f";
N := (3*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -3, 0, 3, 6, 7, 6, -3, 6, 0, -12, -6, -9, 9, -9, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.3-a";
N := (3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 3, -3, 0, -6, 7, -3, -6, 0, 6, -6, 12, -9, 9, 12, 9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.3-b";
N := (3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 6, 0, 3, 7, 6, 0, -12, 6, 12, 6, -15, 12, 12, -6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.3-c";
N := (3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 3, 0, -2, -1, 9, 6, 0, 6, -6, 12, 13, -5, -12, 15, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.3-d";
N := (3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -3, 0, 2, -1, 9, -6, 0, 6, -6, -12, -13, 5, -12, -15, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.3-e";
N := (3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -6, 0, -3, 7, 6, 0, 12, 6, 12, -6, 15, -12, 12, 6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 81.3-f";
N := (3*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -3, 3, 0, 6, 7, -3, 6, 0, 6, -6, -12, 9, -9, 12, -9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.1-a";
N := (2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, -2, -6, 8, -2, -6, 0, 4, -4, -12, -8, -8, 0, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.1-b";
N := (2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 0, 4, 2, -12, 6, 12, -6, -6, 0, 4, 4, 0, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.1-c";
N := (2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -6, -8, -7, 0, 9, -9, -3, 6, -6, 4, -5, -15, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.1-d";
N := (2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -2, 2, -4, 10, 2, -8, 12, 0, 0, 0, 8, -8, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.1-e";
N := (2*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -2, 4, 4, 8, -6, 12, -6, -8, -2, -8, 12, 4, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.2-a";
N := (-4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 2, 10, 6, 0, 4, 4, 6, -2, 12, 4, 12, 16, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.2-b";
N := (-4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, -1, 5, 7, -9, 2, 9, 3, 10, -4, 1, -11, -9, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.2-c";
N := (-4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -3, 1, -7, 3, -6, 9, 3, 6, 0, -5, -5, -9, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.2-d";
N := (-4*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -5, 7, 5, -9, -10, -11, 9, -14, -12, -13, -1, -3, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.4-a";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -2, 2, -6, 8, -6, -2, 4, 0, -12, -4, -8, -8, 8, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.4-b";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 0, 4, 2, 6, -12, -6, 12, 0, -6, 4, 4, -12, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.4-c";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -6, 0, -8, -7, 9, 0, -3, -9, -6, 6, -5, 4, 12, -15, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.4-d";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -2, 2, -4, 2, 10, 12, -8, 0, 0, 8, 0, 0, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.4-e";
N := (2*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -2, 4, 4, -6, 8, -6, 12, -2, -8, 12, -8, 0, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.3-a";
N := (4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, -2, 2, 10, 0, 6, 4, 4, -2, 6, 4, 12, 16, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.3-b";
N := (4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -1, 0, 5, 7, 2, -9, 3, 9, -4, 10, -11, 1, 4, -9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.3-c";
N := (4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, 0, 1, -7, -6, 3, 3, 9, 0, 6, -5, -5, 0, -9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 84.3-d";
N := (4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -5, -2, 7, 5, -10, -9, 9, -11, -12, -14, -1, -13, -4, -3, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.1-a";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 3, 3, 2, -9, 11, 1, 12, -8, -12, 3, -2, -12, -2, -7, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.1-b";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -4, -6, -10, -6, -6, -8, 0, -2, 6, -4, 4, 16, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.1-c";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -5, 3, -6, 7, -5, -7, 4, -8, -12, -5, -10, 12, 6, -15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.1-d";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 0, 0, 2, 6, 2, 10, 0, 4, -6, 6, -8, 0, -8, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.1-e";
N := (3*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 1, -1, 2, 7, -9, 7, 0, -8, 0, 13, -6, 4, -2, -9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.3-a";
N := (5*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 3, -3, 0, 9, -2, 6, -12, 6, 3, -9, -6, 0, 12, 6, -15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.3-b";
N := (5*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, -3, -3, 6, 7, -12, 0, -12, -6, 0, -3, -12, -15, 15, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.3-c";
N := (5*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -1, 3, 2, 11, 0, 0, 12, 6, 0, 9, -4, -13, -3, -6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.3-d";
N := (5*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, 5, -4, 1, 6, -6, 8, -10, -5, 1, -2, -8, 4, 2, -9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.3-e";
N := (5*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 0, 6, -6, -2, -12, 0, 6, 0, -12, 6, 6, 0, 0, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.4-a";
N := (-4*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -1, 3, 8, 11, -9, -3, 6, -12, 12, 3, -4, 14, -12, 9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.4-b";
N := (-4*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 3, -5, 4, 3, 7, 9, 2, 4, -4, -1, -8, 10, 0, -11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.4-c";
N := (-4*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 5, -3, 4, 1, 6, -8, 6, 5, 10, 2, -1, 4, -8, 9, -2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.4-d";
N := (-4*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -3, 3, 0, 9, -2, 12, -6, -3, -6, 6, 9, 12, 0, 15, -6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.2-a";
N := (3*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -2, 3, 2, -9, 1, 11, -8, 12, 3, -12, -12, -2, -7, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.2-b";
N := (3*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -4, -6, -10, -6, -6, 0, -8, 6, -2, 4, -4, 0, 16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.2-c";
N := (3*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, -2, 3, -6, 7, -7, -5, -8, 4, -5, -12, 12, -10, -15, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.2-d";
N := (3*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 0, 2, 6, 10, 2, 4, 0, 6, -6, 0, -8, 8, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.2-e";
N := (3*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -1, 2, 7, 7, -9, -8, 0, 13, 0, 4, -6, -9, -2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.6-a";
N := (-5*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, 3, 0, 9, -2, -12, 6, 3, 6, -6, -9, 12, 0, -15, 6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.6-b";
N := (-5*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -3, 0, -3, 6, 7, 0, -12, -6, -12, -3, 0, -15, -12, -6, 15, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.6-c";
N := (-5*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, -4, 3, 2, 11, 0, 0, 6, 12, 9, 0, -13, -4, -6, -3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.6-d";
N := (-5*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, -3, -4, 1, 6, 8, -6, -5, -10, -2, 1, 4, -8, -9, 2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.6-e";
N := (-5*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 0, 6, -6, -2, 0, -12, 0, 6, 6, -12, 0, 6, 12, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.5-a";
N := (4*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -1, 2, 3, 8, 11, -3, -9, -12, 6, 3, 12, 14, -4, 9, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.5-b";
N := (4*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 2, -5, 4, 3, 9, 7, 4, 2, -1, -4, 10, -8, -11, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.5-c";
N := (4*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -3, 5, 4, 1, 6, 6, -8, 10, 5, -1, 2, -8, 4, -2, 9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 99.5-d";
N := (4*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 3, -3, 0, 9, -2, -6, 12, -6, -3, 9, 6, 0, 12, -6, 15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-a";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, -2, -4, -4, -12, -2, -2, 6, 6, 12, 12, 16, 16, -12, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 100.1-b";
N := (10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, 5, 3, 3, 2, 5, 5, -8, -8, -9, -9, 2, 2, 2, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 101.1-a";
N := (w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -1, 4, 1, -3, 0, -6, 6, -1, 2, 2, 2, 5, -4, -7, 10, 5, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 101.1-b";
N := (w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -3, 0, -3, -3, 0, -6, -2, 3, 6, -6, 6, 9, 0, 9, 6, 9, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 101.2-a";
N := (w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -1, 1, 4, 0, -3, -6, 6, 2, -1, 2, 2, -4, 5, 10, -7, -12, 5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 101.2-b";
N := (w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, -3, 0, 0, -3, -6, -2, 6, 3, 6, -6, 0, 9, 6, 9, -12, 9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 107.1-a";
N := (-2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 1, -1, 1, -3, -6, 10, 5, -7, -7, -3, 1, 13, -12, -4, 13, -1, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 107.1-b";
N := (-2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 0, -1, 3, -3, -3, -2, -2, -3, -11, -1, 7, 9, 1, 4, -4, 5, -15, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 107.1-c";
N := (-2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 5, -1, -3, -3, 2, 2, 9, -3, 9, 9, 9, -3, 8, 8, -3, 3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 107.2-a";
N := (2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -1, 1, -3, 1, -6, 10, -7, 5, -3, -7, 13, 1, -4, -12, -1, 13, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 107.2-b";
N := (2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 0, 3, -1, -3, -3, -2, -2, -11, -3, 7, -1, 1, 9, -4, 4, -15, 5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 107.2-c";
N := (2*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, -1, 5, -3, -3, 2, 2, -3, 9, 9, 9, -3, 9, 8, 8, 3, -3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-a";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 2, -2, -2, 2, -2, -8, -6, 10, 6, -4, -4, -4, -14, -14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-b";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 2, 2, 2, 2, -8, -6, -10, -6, -4, 4, 4, 14, -14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-c";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 5, 1, -2, 8, -2, -2, 12, -8, 9, -7, -4, 8, 10, 10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-d";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -1, -5, -2, 8, 2, 2, 8, -12, 7, -9, 8, -4, -10, -10, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-e";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 2, -2, 2, 8, 1, 10, -3, -3, 3, -10, 10, -10, -3, -7, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-f";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, -2, 4, -7, -2, 7, 3, 7, 6, 14, 2, -13, 13, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-g";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -5, -1, 2, -2, -8, 0, 6, -12, -1, 1, -10, 12, -10, -6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-h";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -5, 1, -2, -2, 8, 0, 6, 12, 1, 1, 10, -12, 10, -6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-i";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -3, 3, -6, -12, -2, 2, 8, -8, 11, -11, -8, -8, -2, 2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-j";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -1, -3, -3, 2, 2, 12, 12, -6, 0, 9, -9, 14, -16, -6, 6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.1-k";
N := (6*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 1, -3, 3, -2, 2, -12, 12, -6, 0, -9, -9, -14, 16, 6, 6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-a";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 5, 3, 2, -5, -2, 5, 2, 5, 8, -12, -8, 6, -13, 11, -13, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-b";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, -5, -4, -4, 4, 3, -10, 3, -9, -1, 4, 6, -7, 3, 1, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-c";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 1, 3, 0, -2, 2, 9, 6, -3, 3, 3, -6, 4, 7, 3, 3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-d";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, 0, -3, 8, -7, 12, -9, 6, 0, 6, -6, -13, 5, 3, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-e";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, 0, 3, -8, -7, -12, -9, 6, 0, -6, -6, 13, -5, -3, 6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-f";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -1, 3, 0, 2, 2, -9, 6, -3, -3, -3, -6, -4, -7, -3, 3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-g";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -5, 4, 4, 4, -3, -10, 3, 9, 1, 4, -6, 7, -3, 1, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.3-h";
N := (-4*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, -3, 2, 5, 2, 5, -2, 5, 8, 12, 8, 6, 13, -11, 13, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-a";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, -2, 2, -2, 2, -8, -2, 10, -6, -4, 6, -4, -4, -14, -14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-b";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 2, 2, 2, 2, -8, 2, -10, -6, -4, -6, 4, 4, -14, 14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-c";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 1, 5, -2, 8, -2, -2, -8, 12, -7, 9, 8, -4, 10, 10, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-d";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -5, -1, -2, 8, 2, 2, -12, 8, -9, 7, -4, 8, -10, -10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-e";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 2, -2, 8, 1, -3, 10, 3, -3, 10, -10, -3, -10, 0, -7, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-f";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -2, 2, 4, -7, 7, -2, 7, 3, 14, 6, -13, 2, -8, 13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-g";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, -5, 2, -2, 0, -8, -12, 6, 1, -1, 12, -10, -6, -10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-h";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -5, -2, -2, 0, 8, 12, 6, 1, 1, -12, 10, -6, 10, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-i";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 3, -3, -6, -12, 2, -2, -8, 8, -11, 11, -8, -8, 2, -2, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-j";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, -3, -3, 2, 2, 12, 12, 0, -6, -9, 9, -16, 14, 6, -6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.2-k";
N := (6*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, 3, -3, -2, 2, 12, -12, 0, -6, -9, -9, 16, -14, 6, 6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-a";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 5, -5, 2, -2, 5, 5, 2, -12, 8, 6, -8, 11, -13, 8, -13, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-b";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -4, -5, -4, 4, -10, 3, -9, 3, 4, -1, -7, 6, 1, 3, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-c";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, 0, 3, -2, 2, 6, 9, 3, -3, -6, 3, 7, 4, 3, 3, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-d";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -3, 0, 8, -7, -9, 12, 0, 6, -6, 6, 5, -13, 6, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-e";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, 3, 0, -8, -7, -9, -12, 0, 6, -6, -6, -5, 13, 6, -3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-f";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 0, 3, 2, 2, 6, -9, -3, -3, -6, -3, -7, -4, 3, -3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-g";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 4, -5, 4, 4, -10, -3, 9, 3, 4, 1, 7, -6, 1, -3, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 108.4-h";
N := (4*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -5, 5, 2, 2, 5, 5, -2, 12, 8, 6, 8, -11, 13, 8, 13, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 111.1-a";
N := (-5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -3, 0, 3, 3, 3, 6, -3, 0, 12, 6, 6, 6, 12, -12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 111.1-b";
N := (-5*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 3, 4, 3, 5, -3, 2, 5, -4, 12, 2, -2, 14, -4, -12, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 111.2-a";
N := (-5*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, -3, 3, 3, 3, -3, 6, 12, 0, 6, 6, 12, 6, 0, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 111.2-b";
N := (-5*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, 3, 5, 3, -3, 5, 2, 12, -4, -2, 2, -4, 14, 12, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.1-a";
N := (11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -2, -2, -9, 3, -8, -8, 8, 8, -6, -6, -7, -7, -3, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.2-a";
N := (5*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, -3, -5, 4, -1, 6, 6, -8, 10, -5, -1, -2, 8, -4, -2, -9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.2-b";
N := (5*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -3, 3, -3, 6, -2, 3, -3, 3, 3, -9, -9, -12, -12, 3, 3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.2-c";
N := (5*w + 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, 3, 3, 0, -9, -2, -6, 12, -6, 3, 9, -6, 0, -12, -6, -15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.3-a";
N := (5*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -5, -3, 4, -1, 6, -8, 6, -5, 10, -2, -1, -4, 8, -9, -2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.3-b";
N := (5*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 3, -3, -3, 6, -2, -3, 3, 3, 3, -9, -9, -12, -12, 3, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 121.3-c";
N := (5*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, 3, 3, 0, -9, -2, 12, -6, 3, -6, -6, 9, -12, 0, -15, -6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.1-a";
N := (2*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 1, -2, 2, -3, -3, 4, -5, -11, 4, 2, 11, -16, 8, 3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.2-a";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 1, 6, 2, 7, -9, 0, -7, -1, 0, 6, -13, 4, -16, 5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.2-b";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, 2, 6, 3, -3, -8, 13, -7, 4, 14, -7, 8, -8, -3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.2-c";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -4, 1, -2, 3, -8, 0, -2, -4, -5, 0, -7, -4, -2, -3, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.2-d";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, -2, 2, 6, -8, 0, -8, -8, -10, 10, 8, -10, 0, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.2-e";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, -6, -5, -4, -12, 6, -3, 0, 6, 3, -8, -14, -9, 6, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.2-f";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 2, -6, 6, 0, -4, 8, -4, 10, 10, 4, 10, -8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.2-g";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, 2, 6, 6, -12, 4, -8, 2, -2, -4, -4, 2, 4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.2-h";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 3, 2, 3, 0, 0, 2, -7, -4, -14, 1, -8, -2, 13, -6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.2-i";
N := (-4*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -2, -3, -4, -7, 12, 2, -2, 8, -1, 4, 13, 8, -8, -3, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.4-a";
N := (2*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -2, 2, -3, 4, -3, -11, -5, 2, 4, -16, 11, 3, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.3-a";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -2, 6, 2, 7, 0, -9, -1, -7, 6, 0, 4, -13, 5, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.3-b";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -2, 2, 6, 3, -8, -3, -7, 13, 14, 4, 8, -7, -3, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.3-c";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -3, 1, -2, 3, 0, -8, -4, -2, 0, -5, -4, -7, -3, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.3-d";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, -2, 2, 6, 0, -8, -8, -8, 10, -10, -10, 8, 2, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.3-e";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, -6, -5, -4, 6, -12, 0, -3, 3, 6, -14, -8, 6, -9, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.3-f";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 2, -6, 6, -4, 0, -4, 8, 10, 10, 10, 4, 6, -8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.3-g";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 2, 6, 6, 4, -12, 2, -8, -4, -2, 2, -4, 0, 4, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.3-h";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 5, 2, 3, 0, 2, 0, -4, -7, 1, -14, -2, -8, -6, 13, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 132.3-i";
N := (4*w + 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, -3, -4, -7, 2, 12, 8, -2, 4, -1, 8, 13, -3, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 137.1-a";
N := (6*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, 1, -3, -3, 1, 6, 6, -9, 9, 1, -5, 7, -11, 8, 4, 15, 13, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 137.2-a";
N := (-6*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 0, -3, 1, 1, -3, 6, 6, 9, -9, -5, 1, -11, 7, 4, 8, 13, 15, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 139.1-a";
N := (-4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -1, -5, -5, -5, -2, 10, -3, -3, -3, 1, -9, 1, 4, 8, -5, -1, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 139.1-b";
N := (-4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, -5, -1, 3, -1, -6, -2, 5, 5, -7, -3, -9, -11, 0, 4, 7, -1, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 139.2-a";
N := (4*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -5, -1, -5, -5, -2, 10, -3, -3, 1, -3, 1, -9, 8, 4, -1, -5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 139.2-b";
N := (4*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -4, -1, -5, -1, 3, -6, -2, 5, 5, -3, -7, -11, -9, 4, 0, -1, 7, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 141.2-a";
N := (-5*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -3, -1, -3, 7, -2, -10, -2, 2, 4, -11, 2, -9, 10, -3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 141.2-b";
N := (-5*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, -3, -3, -3, 9, -2, -6, 6, 6, -12, 9, 6, -9, 6, 15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 141.2-c";
N := (-5*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 0, -4, 0, -2, 4, -4, 10, 2, 10, -2, 8, 0, -14, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 141.3-a";
N := (-5*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -3, 0, -3, -1, 7, -2, -2, -10, 2, -11, 4, -9, 2, -3, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 141.3-b";
N := (-5*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, 0, -3, -3, 9, -2, 6, -6, 6, 9, -12, -9, 6, 15, 6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 141.3-c";
N := (-5*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 0, 0, -4, -2, 4, 10, -4, 2, -2, 10, 0, 8, 12, -14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-a";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, 6, 0, -8, 2, -6, 0, 6, 12, -6, 0, 4, -14, 0, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-b";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -4, -4, 2, -10, 4, -6, 8, 6, -4, -8, 10, -4, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-c";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -4, 2, -4, 2, 4, -10, 8, -6, -4, 6, 10, -8, -2, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.1-d";
N := (12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, 6, -8, 2, 0, -6, 12, 6, 0, -6, -14, 4, -6, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-a";
N := (4*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 3, -3, 2, -10, 3, -3, 9, -9, 3, -3, -4, -4, -15, 15, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.2-b";
N := (4*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 4, 2, 2, 10, -12, 2, 0, 6, -4, -2, -12, 2, -6, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-a";
N := (4*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, -3, 3, 2, -10, -3, 3, -9, 9, -3, 3, -4, -4, 15, -15, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 144.3-b";
N := (4*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 2, 4, 2, 10, 2, -12, 6, 0, -2, -4, 2, -12, -8, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-a";
N := (7*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, 3, 7, 10, 0, -4, 4, -6, 3, 1, -1, -13, 1, -13, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-b";
N := (7*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -2, 4, 4, -10, 2, -6, -2, 8, 0, 10, -4, 12, 8, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-c";
N := (7*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 3, -1, -6, -8, 4, -4, 2, -5, -3, -13, 7, 5, 3, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.1-d";
N := (7*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, 4, -4, -2, 10, 10, -2, -8, 8, 2, -12, -12, 0, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.3-a";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 3, -3, 4, 2, -9, -6, -9, 0, -6, 6, 10, 13, 3, -15, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.3-b";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -3, 3, -4, -2, 9, -6, -9, 0, 6, -6, 10, 13, 3, -15, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.3-c";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -4, 2, 5, -7, 10, -2, 0, -8, 7, 0, 14, -10, -3, -1, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.3-d";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, -5, 1, 4, 2, 11, -6, 7, 8, -6, -2, 2, -15, -1, 9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.3-e";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, 5, -1, -4, -2, -11, -6, 7, -8, 6, 2, 2, -15, -1, 9, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.3-f";
N := (w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, -2, -5, 7, -10, 2, 0, -8, -7, 0, -14, -10, -3, -1, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.4-a";
N := (4*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, 4, -4, -4, 4, 6, 4, -12, -8, 0, 12, 12, 12, 8, 16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.4-b";
N := (4*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 4, -4, 0, -2, 6, 10, 2, -8, 8, -10, 6, -4, 4, 8, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.4-c";
N := (4*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 0, 6, 2, 4, -6, 0, -12, -12, 12, 12, 4, 4, 0, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.4-d";
N := (4*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, 2, -6, 4, -12, 10, 8, -2, -4, 2, 0, -4, -8, -16, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.4-e";
N := (4*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, -4, 4, 4, -4, 6, -4, 12, -8, 0, -12, 12, 12, 8, 16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.2-a";
N := (7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 5, 7, 10, -4, 0, -6, 4, 1, 3, -13, -1, -13, 1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.2-b";
N := (7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 4, -2, 4, -10, -6, 2, 8, -2, 10, 0, 12, -4, 0, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.2-c";
N := (7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 1, -1, -6, 4, -8, 2, -4, -3, -5, 7, -13, 3, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.2-d";
N := (7*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 4, -2, -4, -2, 10, 10, -8, -2, 2, 8, -12, -12, 0, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.6-a";
N := (-w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -3, 3, 4, 2, -6, -9, 0, -9, 6, -6, 13, 10, -15, 3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.6-b";
N := (-w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 3, -3, -4, -2, -6, 9, 0, -9, -6, 6, 13, 10, -15, 3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.6-c";
N := (-w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -4, 5, 2, -7, 10, 0, -2, 7, -8, 14, 0, -3, -10, 0, -1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.6-d";
N := (-w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, 1, -5, 4, 2, -6, 11, 8, 7, -2, -6, -15, 2, 9, -1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.6-e";
N := (-w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, -1, 5, -4, -2, -6, -11, -8, 7, 2, 6, -15, 2, 9, -1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.6-f";
N := (-w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, -5, -2, 7, -10, 0, 2, -7, -8, -14, 0, -3, -10, 0, -1, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.5-a";
N := (4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, -4, 4, -4, 4, 4, 6, -8, -12, 12, 0, 12, 12, 16, 8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.5-b";
N := (4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 4, 0, -4, -2, 6, 2, 10, 8, -8, 6, -10, 4, -4, 0, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.5-c";
N := (4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 6, 0, 2, 4, 0, -6, -12, -12, 12, 12, 4, 4, 0, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.5-d";
N := (4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -6, 2, 4, -12, 8, 10, -4, -2, 0, 2, -8, -4, -12, -16, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 147.5-e";
N := (4*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 4, -4, 4, -4, -4, 6, -8, 12, -12, 0, 12, 12, 16, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 151.1-a";
N := (-6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, -1, -3, -1, 3, -2, -2, 11, -7, 3, -13, -3, -5, 4, 8, 1, 3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 151.1-b";
N := (-6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 3, 1, -1, 3, -6, -10, -5, -7, -9, -9, 1, 7, 4, 4, 9, -13, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 151.2-a";
N := (-6*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 4, -3, -1, 3, -1, -2, -2, -7, 11, -13, 3, -5, -3, 8, 4, 3, 1, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 151.2-b";
N := (-6*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 1, 3, 3, -1, -6, -10, -7, -5, -9, -9, 7, 1, 4, 4, -13, 9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.1-a";
N := (-5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 4, 3, 3, -8, -1, 6, -3, 0, 12, -12, 4, 13, 3, -6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.2-a";
N := (-2*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -5, 2, -2, 2, 1, 12, -3, -10, 1, -8, 7, -15, -3, -7, -12, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.2-b";
N := (-2*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, 2, -6, 6, -1, -4, 9, -6, 3, 0, -3, 5, -13, 15, -12, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.4-a";
N := (5*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 1, 3, 3, -8, -1, -3, 6, 12, 0, -12, 13, 4, -6, 3, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.3-a";
N := (2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, -5, 2, -2, 1, 12, -10, -3, -8, 1, 7, -3, -15, -12, -7, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 159.3-b";
N := (2*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, -1, 6, -6, -1, -4, -6, 9, 0, 3, -3, -13, 5, -12, 15, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.1-a";
N := (6*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, -4, 0, 0, -7, -7, 0, 0, 3, -6, 3, -7, -7, -6, 6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.1-b";
N := (6*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 4, 0, 0, 2, -3, -1, 0, 8, 7, 4, -3, -13, -1, 0, -14, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.2-a";
N := (-6*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 2, 0, 0, -7, -7, 0, 3, 0, 3, -6, -7, -7, 6, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 164.2-b";
N := (-6*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 4, 2, 0, -3, -1, 0, 7, 8, -3, 4, -1, -13, -14, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 175.1-a";
N := (-5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, 2, -4, 0, 0, 2, -6, -8, 2, -4, 12, -12, 2, 0, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 175.2-a";
N := (5*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, 2, 0, -4, 0, -6, 2, 2, -8, 12, -4, 2, -12, 8, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-a";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, 8, 8, -6, 6, 6, -12, 6, 6, 8, -4, 6, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-b";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, -2, 8, -4, -4, -6, 8, 2, -12, 2, -8, 12, 8, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-c";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 4, 8, 0, -6, 8, 6, 0, -6, -8, 12, 0, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-d";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 2, -2, 2, 2, 8, 6, -10, 2, 0, 14, 4, 12, -10, 6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-e";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, 2, 2, 6, 6, 0, -12, -6, -6, -4, -4, 0, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-f";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 4, 4, 4, -4, -10, 6, -2, 8, -6, -2, 8, 12, -10, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-g";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -2, -2, -2, 2, 8, -6, 10, 2, 0, -14, -4, -12, -10, -6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-h";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -6, -8, 4, -8, -2, 4, -2, -8, 6, 0, -4, -12, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-i";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 0, 2, -10, -10, 2, -12, 4, 10, 14, -4, -4, 4, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-j";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, -8, 8, -6, -6, -6, -12, 6, -6, -8, 4, 6, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.1-k";
N := (3*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -4, 4, -4, -4, -10, -6, 2, 8, -6, 2, -8, -12, -10, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.2-a";
N := (-6*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, 2, 2, -6, -6, 12, 0, 6, 6, -4, -4, 0, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.2-b";
N := (-6*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, -2, -8, 4, 2, 8, 2, -4, -6, 8, -4, 0, 0, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.2-c";
N := (-6*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, 4, 8, 6, 0, -6, -8, 6, 0, 12, -8, -4, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.2-d";
N := (-6*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, 6, 4, 12, 10, 8, -2, -4, -2, 0, 4, 8, -16, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.2-e";
N := (-6*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 0, 2, -10, -2, 10, -4, 12, -14, -10, -4, -4, -12, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.2-f";
N := (-6*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, -2, 8, -4, 6, 4, -2, -8, -2, 12, 12, -8, -12, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.2-g";
N := (-6*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, -6, 2, -4, -6, 0, -12, -12, -12, 12, -4, -4, 0, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.2-h";
N := (-6*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -4, 0, -2, -6, 10, 2, -8, 8, 10, 6, 4, -4, 8, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.5-a";
N := (-5*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 0, 0, -7, -4, -6, -12, 9, -3, -3, 0, 5, 5, 12, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.5-b";
N := (-5*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 0, 0, 7, -4, 6, -12, 9, 3, 3, 0, -5, -5, -12, -12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-a";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, 8, 8, 6, -6, -12, 6, 6, 6, -4, 8, -6, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-b";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 2, 8, -4, -6, -4, 2, 8, 2, -12, 12, -8, 12, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-c";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 4, 8, -6, 0, 6, 8, -6, 0, 12, -8, 4, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-d";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -2, 2, 2, 2, 6, 8, 2, -10, 14, 0, 12, 4, 6, -10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-e";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, 2, 2, 6, 6, -12, 0, -6, -6, -4, -4, 0, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-f";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 4, 4, 4, -4, 6, -10, 8, -2, -2, -6, 12, 8, -6, -10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-g";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -2, -2, -2, 2, -6, 8, 2, 10, -14, 0, -12, -4, -6, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-h";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -6, 2, -8, 4, -2, -8, -2, 4, 6, -8, -4, 0, 0, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-i";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 0, 2, -10, 2, -10, 4, -12, 14, 10, -4, -4, 12, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-j";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, -8, 8, -6, -6, -12, -6, -6, 6, 4, -8, 6, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.4-k";
N := (3*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 4, -4, -4, -4, -6, -10, 8, 2, 2, -6, -12, -8, 6, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.3-a";
N := (6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, 2, 2, -6, -6, 0, 12, 6, 6, -4, -4, 0, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.3-b";
N := (6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, 6, -8, 4, 8, 2, -4, 2, 8, -6, 0, -4, 12, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.3-c";
N := (6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, -2, 4, 8, 0, 6, -8, -6, 0, 6, -8, 12, 0, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.3-d";
N := (6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 6, 2, 4, 12, 8, 10, -4, -2, 0, -2, 8, 4, 12, -16, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.3-e";
N := (6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 0, 2, -10, 10, -2, 12, -4, -10, -14, -4, -4, -4, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.3-f";
N := (6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 2, 8, -4, 4, 6, -8, -2, 12, -2, -8, 12, -8, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.3-g";
N := (6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -6, 0, 2, -4, 0, -6, -12, -12, 12, -12, -4, -4, 0, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.3-h";
N := (6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 0, -4, -2, -6, 2, 10, 8, -8, 6, 10, -4, 4, 0, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.8-a";
N := (5*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 0, 0, -7, -4, -12, -6, -3, 9, 0, -3, 5, 5, -12, 12, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 189.8-b";
N := (5*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 0, 0, 7, -4, -12, 6, 3, 9, 0, 3, -5, -5, -12, -12, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-a";
N := (8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 3, -6, 2, 4, 1, 3, 10, 5, 3, -2, -6, -3, -10, 8, 15, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-b";
N := (8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 2, 4, -2, 6, -6, 0, 10, 8, -6, 0, -10, 4, -2, -10, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-c";
N := (8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, 6, -2, 8, -3, 9, -2, -3, 1, 2, 10, -13, 2, -8, 7, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.1-d";
N := (8*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, 2, 2, 4, 5, 7, 2, -3, 7, -10, -6, -3, -2, 0, 7, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-a";
N := (8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -2, 2, -6, 4, 1, 10, 3, 3, 5, -6, -2, -10, -3, 15, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-b";
N := (8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -2, 4, 6, -6, 10, 0, -6, 8, -10, 0, -2, 4, 8, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-c";
N := (8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, -2, 6, 8, -3, -2, 9, 1, -3, 10, 2, 2, -13, 7, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 192.2-d";
N := (8*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 2, 2, 4, 5, 2, 7, 7, -3, -6, -10, -2, -3, 7, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-a";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, 4, 5, 7, 1, 7, -11, -2, -10, 11, -9, -6, -9, -6, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-b";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 2, -2, -8, -6, 2, -8, 0, 0, 4, 0, -8, 0, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-c";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, 3, -7, 3, 1, 3, -6, 7, -9, -10, -2, -5, 2, -13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-d";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, 0, -1, -7, -9, 3, 9, 6, -6, -3, -13, 14, 15, -6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-e";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, 0, -7, 3, 3, 1, 7, -6, -10, -9, -5, -2, -13, 2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-f";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, -2, -2, -8, 2, -6, 0, -8, 4, 0, -8, 0, 0, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-g";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -3, -1, -7, 3, -9, 6, 9, -3, -6, 14, -13, -6, 15, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-h";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 0, 0, -10, 2, 6, 6, -12, -12, 6, 6, -4, -4, 0, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-i";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 3, 3, 7, -3, -11, -10, -13, -1, -10, 2, 5, -10, 15, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-j";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -5, 5, 7, 7, 1, -2, -11, 11, -10, -6, -9, -6, -9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.1-k";
N := (14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, 2, 3, 7, -11, -3, -13, -10, -10, -1, 5, 2, 15, -10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.2-a";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -2, 0, -4, 10, 6, -2, 0, -4, 2, -2, 12, -8, -4, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.2-b";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 4, -6, 6, 2, 12, -2, -4, 4, -2, -2, -4, -4, 8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.2-c";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 4, 3, 3, -10, 0, -8, -10, 7, 4, -8, -10, -13, -13, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.2-d";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -4, -3, -3, 10, 0, -8, -10, -7, -4, 8, -10, -13, -13, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.2-e";
N := (-6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 2, 0, 4, -10, -6, -2, 0, 4, -2, 2, 12, -8, -4, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.3-a";
N := (6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, -2, -4, 10, -2, 6, -4, 0, -2, 2, -8, 12, 0, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.3-b";
N := (6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -6, 4, 6, 2, -2, 12, 4, -4, -2, -2, -4, -4, -12, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.3-c";
N := (6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 3, 4, 3, -10, -8, 0, 7, -10, -8, 4, -13, -10, 0, -13, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.3-d";
N := (6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -2, -3, -4, -3, 10, -8, 0, -7, -10, 8, -4, -13, -10, 0, -13, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 196.3-e";
N := (6*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 0, 2, 4, -10, -2, -6, 4, 0, 2, -2, -8, 12, 0, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.1-a";
N := (w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 2, 3, 0, 7, -3, 2, 0, 2, -1, -12, 0, -8, 15, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.2-a";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, 2, 0, 2, 2, 2, -6, -10, 0, -6, 6, 2, -2, 2, 8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.2-b";
N := (5*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 2, 3, -5, -3, -3, -2, 9, -9, -2, -1, -9, -3, 13, 0, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.4-a";
N := (w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -4, 0, 3, 7, -3, 0, 2, -1, 2, 0, -12, -8, 8, 15, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.3-a";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, 0, 2, 0, 2, 2, -10, -6, -6, 0, 2, 6, -2, 8, 2, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 201.3-b";
N := (5*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 3, 2, -3, -5, -3, -2, -9, 9, -1, -2, -3, -9, 13, -6, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 213.1-a";
N := (-4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -1, -3, 0, -1, -4, 3, -12, 3, -6, -6, -6, -10, -7, -6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 213.2-a";
N := (7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, -2, -6, -5, 3, -10, 0, 5, -2, -3, 14, 4, -7, 8, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 213.2-b";
N := (7*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 1, 4, 0, -3, 1, -10, 0, 9, -12, 3, -6, -12, -5, 4, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 213.4-a";
N := (4*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -1, 2, 0, -3, -1, -4, -12, 3, -6, 3, -6, -6, -7, -10, -6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 213.3-a";
N := (7*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -1, -5, -6, 3, -10, 5, 0, -3, -2, 4, 14, 8, -7, 12, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 213.3-b";
N := (7*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 1, -3, 0, 1, -10, 9, 0, 3, -12, -12, -6, 4, -5, 0, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 219.1-a";
N := (-5*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -2, 1, 2, 2, -5, -2, 10, 10, 9, 9, -1, -3, 8, -9, -16, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 219.1-b";
N := (-5*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, -2, -3, 2, -6, 5, 2, -2, -10, 7, -9, -3, 9, -8, 9, -8, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 219.4-a";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, 0, 2, 1, 2, -5, 10, -2, 9, 10, -1, 9, 8, -3, -16, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 219.4-b";
N := (5*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, 4, 2, -3, -6, 5, -2, 2, 7, -10, -3, -9, -8, 9, -8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-a";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, -4, -4, -10, 10, 10, 8, 8, -10, -10, 12, 12, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.1-b";
N := (15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, -4, 2, 2, 12, -8, -8, -3, -3, 11, 11, -6, -6, -6, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-a";
N := (5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 0, -4, 4, -4, 2, -2, -6, 8, -12, 6, -6, 4, 8, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-b";
N := (5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, -1, -3, 3, 2, 3, -3, -3, 3, 9, -9, -4, -4, -9, 9, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-c";
N := (5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 3, -1, 1, -1, -10, 7, 9, -7, 3, 9, 3, 4, -4, -5, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-d";
N := (5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -1, 3, 1, -1, -10, -9, -7, -3, 7, -3, -9, -4, 4, 11, 5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.2-e";
N := (5*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, 2, 4, 0, 8, -2, 2, 4, -6, 12, 4, -8, 2, 0, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-a";
N := (5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -4, 0, -4, 4, 2, -6, -2, -12, 8, -6, 6, 8, 4, -8, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-b";
N := (5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -1, -1, 3, -3, 2, -3, 3, 3, -3, -9, 9, -4, -4, 9, -9, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-c";
N := (5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -1, 3, -1, 1, -10, 9, 7, 3, -7, 3, 9, -4, 4, -11, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-d";
N := (5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, -1, -1, 1, -10, -7, -9, 7, -3, -9, -3, 4, -4, 5, 11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 225.3-e";
N := (5*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -4, 0, 4, 8, 2, -2, -6, 4, 4, 12, 2, -8, -8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.1-a";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -4, -10, -4, -4, -6, -12, 2, -12, 10, -4, -2, -12, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.1-b";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -2, -6, 12, 6, 4, -8, 0, 8, 8, -4, 8, 8, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.1-c";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 0, 2, 6, -2, 6, 0, -4, -2, -6, -4, 8, -8, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.1-d";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, 2, 2, 8, -2, 8, 0, 0, -12, 12, -12, 0, 0, 16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.1-e";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -4, 6, -8, 0, 2, 12, 6, 8, 10, -4, 2, 4, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.1-f";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 2, 6, 2, 4, -4, 0, -10, 6, 4, 0, 6, -12, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.1-g";
N := (w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, -2, 6, -6, 0, -8, -8, -6, -10, 8, 8, 2, -4, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.2-a";
N := (8*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, 4, -1, 10, 2, -3, 12, -8, -5, 6, -14, -14, 2, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.2-b";
N := (8*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 3, 0, 1, -2, 2, -9, 8, 4, -9, 6, -2, -10, -10, -9, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.2-c";
N := (8*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 0, -2, -2, 2, -6, 8, 4, 6, -6, 4, -4, -16, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.2-d";
N := (8*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, -6, 4, 6, 2, -6, 0, -10, 2, -4, -4, -12, 4, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.2-e";
N := (8*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, 0, 7, -4, 0, 9, -6, -6, -9, -6, -14, 4, 6, -15, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.3-a";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 1, 5, 2, -9, 4, 0, 4, -6, 4, 1, 4, 1, -5, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.3-b";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 4, 2, -2, -10, -10, 0, -8, 2, 10, -4, 8, 8, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.3-c";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 4, -2, -2, 10, -10, 8, 8, 2, 14, 8, 0, 12, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.3-d";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, -2, -6, -10, 0, 8, 6, -8, -4, -6, 10, -12, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.3-e";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 1, -6, -1, 12, 8, 12, 2, 4, -3, -4, -3, -13, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.3-f";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, -2, 2, -2, 0, -4, -2, 0, 12, -2, -14, -8, -4, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.3-g";
N := (-5*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, 2, 4, 10, -4, -2, -6, 4, 14, 14, -8, 10, 2, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.4-a";
N := (5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, -3, -2, -7, -9, -3, -12, 0, -6, -9, -14, -8, -6, 3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.4-b";
N := (5*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, 1, 8, -7, 7, -9, -2, -8, 6, 9, 8, -2, -12, 1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.8-a";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, -4, -10, -4, -6, -4, 2, -12, 10, -12, -2, -4, -8, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.8-b";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -2, -6, 12, 4, 6, 0, -8, 8, 8, 8, -4, 0, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.8-c";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 0, 2, 6, 6, -2, -4, 0, -6, -2, 8, -4, 0, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.8-d";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, 2, 2, 8, 8, -2, 0, 0, 12, -12, 0, -12, 16, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.8-e";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -4, 6, -8, 2, 0, 6, 12, 10, 8, 2, -4, 8, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.8-f";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 2, 6, 2, -4, 4, -10, 0, 4, 6, 6, 0, 0, -12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.8-g";
N := (w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, -2, 6, -6, -8, 0, -6, -8, 8, -10, 2, 8, 0, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.7-a";
N := (-8*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, 4, -1, 10, -3, 2, -8, 12, 6, -5, -14, -14, 5, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.7-b";
N := (-8*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 3, 0, 1, -2, -9, 2, 4, 8, 6, -9, -10, -2, -9, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.7-c";
N := (-8*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 0, -2, -2, -6, 2, 4, 8, -6, 6, -4, 4, 0, -16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.7-d";
N := (-8*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, -6, 4, 6, -6, 2, -10, 0, -4, 2, -12, -4, -8, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.7-e";
N := (-8*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, 0, 7, -4, 9, 0, -6, -6, -6, -9, 4, -14, -15, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.6-a";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 1, 5, 2, -9, 0, 4, -6, 4, 1, 4, 1, 4, 6, -5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.6-b";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 4, 2, -2, -10, -10, -8, 0, 10, 2, 8, -4, -8, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.6-c";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 4, -2, -2, -10, 10, 8, 8, 14, 2, 0, 8, 0, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.6-d";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, -2, -6, -10, 8, 0, -8, 6, -6, -4, -12, 10, 12, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.6-e";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, 1, -6, -1, 8, 12, 2, 12, -3, 4, -3, -4, 6, -13, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.6-f";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, -2, 2, -2, -4, 0, 0, -2, -2, 12, -8, -14, -4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.6-g";
N := (5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, 2, 4, 10, -2, -4, 4, -6, 14, 14, 10, -8, 8, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.5-a";
N := (5*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, -3, -2, -7, -3, -9, 0, -12, -9, -6, -8, -14, 3, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 231.5-b";
N := (5*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, 1, 8, -7, -9, 7, -8, -2, 9, 6, -2, 8, 1, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 233.1-a";
N := (-6*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -1, -5, -3, -1, -6, -6, -9, -11, 7, 9, -9, 5, 4, -4, -15, 5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 233.2-a";
N := (6*w - 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -5, -1, -1, -3, -6, -6, -11, -9, 9, 7, 5, -9, -4, 4, 5, -15, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-a";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 0, 0, -6, 3, 7, 0, -6, -6, 12, -6, -12, 12, -15, 6, -12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-b";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 3, 6, -3, 6, -11, 6, 3, 0, 12, 0, -6, 3, 3, -3, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-c";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 3, -3, 0, 6, -2, 9, -6, -9, -9, -9, -6, 0, 9, -9, 9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-d";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 0, -3, -2, -1, -6, -9, -6, 0, -12, 6, -5, 13, -15, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-e";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 3, 0, 3, -6, 7, 6, 3, -6, 0, -12, 6, 9, -9, -9, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-f";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -5, 4, 0, 0, -5, 11, 0, 0, 0, 0, 0, 0, 16, -11, 0, 0, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-g";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -3, -3, 0, -6, -2, -9, -6, -9, 9, 9, -6, 0, -9, 9, 9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-h";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 5, -4, 0, 0, 5, 11, 0, 0, 0, 0, 0, 0, -16, 11, 0, 0, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-i";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -3, 0, -3, 6, 7, -6, 3, -6, 0, 12, 6, -9, 9, 9, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-j";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 0, 3, 2, -1, 6, -9, -6, 0, 12, 6, 5, -13, 15, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-k";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 0, 6, -3, 7, 0, -6, -6, -12, 6, -12, -12, 15, -6, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.1-l";
N := (9*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -3, 6, 3, -6, -11, -6, 3, 0, -12, 0, -6, -3, -3, 3, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.3-a";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -3, -3, 4, -10, 6, 3, -9, 0, 12, 6, 13, -14, 0, -3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.3-b";
N := (-6*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, -3, 3, -4, -10, -6, 3, -9, 0, -12, 6, -13, 14, 0, -3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-a";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, -6, 0, 3, 7, -6, 0, 12, -6, -12, -6, -15, 12, -12, 6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-b";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -3, -3, 6, 6, -11, 3, 6, 12, 0, -6, 0, 3, 3, 0, -3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-c";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 0, 0, -3, 6, -2, -6, 9, -9, -9, -6, -9, 9, 0, 9, -9, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-d";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, -3, 0, -2, -1, -9, -6, 0, -6, 6, -12, 13, -5, 12, -15, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-e";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 3, 3, 0, -6, 7, 3, 6, 0, -6, 6, -12, -9, 9, -12, -9, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-f";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, -5, 0, 0, -5, 11, 0, 0, 0, 0, 0, 0, -11, 16, 0, 0, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-g";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 0, 0, -3, -6, -2, -6, -9, 9, -9, -6, 9, -9, 0, 9, 9, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-h";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 5, 0, 0, 5, 11, 0, 0, 0, 0, 0, 0, 11, -16, 0, 0, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-i";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -3, -3, 0, 6, 7, 3, -6, 0, -6, 6, 12, 9, -9, -12, 9, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-j";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, 3, 0, 2, -1, -9, 6, 0, -6, 6, 12, -13, 5, 12, 15, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-k";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, 6, 0, -3, 7, -6, 0, -12, -6, -12, 6, 15, -12, -12, -6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.2-l";
N := (9*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 3, 3, 6, -6, -11, 3, -6, -12, 0, -6, 0, -3, -3, 0, 3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.4-a";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, -3, -3, 4, -10, 3, 6, 0, -9, 6, 12, -14, 13, -3, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 243.4-b";
N := (6*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, 3, -3, -4, -10, 3, -6, 0, -9, 6, -12, 14, -13, -3, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 249.2-a";
N := (7*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 2, 5, 4, 6, 6, 12, -6, 2, 10, -3, 2, -2, -13, 8, 15, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 249.3-a";
N := (-7*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 0, 4, 5, 6, 6, -6, 12, 10, 2, 2, -3, -13, -2, 15, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-a";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -6, -4, -8, 6, -2, 6, -8, 2, 4, 0, -12, 16, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-b";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -4, -6, 2, 6, 10, -8, 12, -6, -10, 4, 4, -4, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-c";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 6, -4, 2, 10, 0, 2, -12, 0, 4, -4, 4, 4, 12, -2, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-d";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 6, 0, -2, 2, 12, -6, 0, -12, -12, 0, 4, 4, 0, 6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-e";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 2, 2, 2, -2, 0, 4, 6, -6, -4, 12, 12, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-f";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -6, 4, 8, -2, 2, -2, 0, 10, 4, -8, 4, 0, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-g";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, 2, -2, 2, -2, -8, 8, 6, -2, 4, 12, 0, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-h";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -4, -8, 10, 0, -6, 4, 2, 12, -4, 16, -8, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-i";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, -6, -2, -2, 2, 8, 0, 10, -6, 12, 4, 0, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-j";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 5, -7, -1, -5, 2, -1, -3, -10, 12, 7, -5, 1, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-k";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 2, -10, 10, 2, 8, 0, 14, 6, 4, 4, -8, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-l";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, -6, 3, 1, 5, -9, -6, 3, -3, -6, 0, 13, 13, -15, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-m";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 4, 2, -2, -6, 6, 8, -8, 14, 6, -12, -4, 0, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-n";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, -1, -9, -3, -9, -2, 1, -3, 2, 4, 15, 3, 1, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-o";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -6, 1, -1, 7, 11, -10, -3, -3, 14, 0, -11, -11, 1, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.1-p";
N := (-6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 6, 8, -4, 6, 0, -6, 0, 6, -12, -4, 8, -12, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.3-a";
N := (-2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, -2, 10, 6, 0, -4, 4, 6, 2, -12, -4, 12, -16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.3-b";
N := (-2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, -3, -1, -7, 3, 6, -9, 3, 6, 0, 5, 5, -9, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.3-c";
N := (-2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -6, -4, 6, -2, -2, 12, 4, -4, 2, -2, 4, 4, -12, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.3-d";
N := (-2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -5, -7, 5, -9, 10, 11, 9, -14, 12, 13, 1, -3, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.3-e";
N := (-2*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, -1, -5, 7, -9, -2, -9, 3, 10, 4, -1, 11, -9, -4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.4-a";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, -2, -4, 4, 8, 6, -12, -6, -8, 2, 8, -12, 4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.4-b";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, -6, 8, -7, 0, -9, 9, -3, 6, 6, -4, 5, -15, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.4-c";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -2, 0, -6, 1, -12, 5, 7, -1, 14, 10, -2, 13, 5, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.4-d";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -2, -2, -4, 10, -2, 8, 12, 0, 0, 0, -8, -8, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.4-e";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, 6, 6, -2, -12, 2, 4, -4, 2, -2, 4, 4, 8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.4-f";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, -2, 6, 8, -2, 6, 0, 4, -4, 12, 8, 8, 0, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.4-g";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 2, 0, 6, 1, -12, -5, -7, -1, 14, -10, 2, -13, 5, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.4-h";
N := (-4*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 0, -4, 2, -12, -6, -12, -6, -6, 0, -4, -4, 0, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-a";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -6, 4, -4, -8, -2, 6, -8, 6, 4, 2, -12, 0, 8, 16, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-b";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, 4, -6, 2, 10, 6, 12, -8, -10, -6, 4, 4, -12, -4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-c";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 6, 2, 10, 2, 0, 0, -12, -4, 4, 4, 4, -2, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-d";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 6, -2, 2, -6, 12, -12, 0, 0, -12, 4, 4, 6, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-e";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 4, 2, 2, -2, 2, 4, 0, -6, 6, 12, -4, -8, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-f";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -6, 0, 4, 8, 2, -2, 0, -2, 4, 10, 4, -8, -8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-g";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 0, 2, -2, -2, 2, 8, -8, -2, 6, 12, 4, 0, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-h";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, -4, -8, 0, 10, 4, -6, 12, 2, 16, -4, 12, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-i";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, 0, -6, -2, 2, -2, 0, 8, -6, 10, 4, 12, 12, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-j";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 5, 2, -7, -1, 2, -5, -3, -1, 12, -10, -5, 7, 8, 1, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-k";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -4, 2, -10, 2, 10, 0, 8, 6, 14, 4, 4, 8, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-l";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 3, -6, 1, 5, -6, -9, -3, 3, 0, -6, 13, 13, 12, -15, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-m";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 4, 0, 2, -2, 6, -6, -8, 8, 6, 14, -4, -12, -8, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-n";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, -9, -3, -2, -9, -3, 1, 4, 2, 3, 15, -12, 1, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-o";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -6, -1, 7, -10, 11, -3, -3, 0, 14, -11, -11, 8, 1, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.2-p";
N := (6*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 6, -6, 8, -4, 0, 6, 0, -6, -12, 6, 8, -4, 0, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.6-a";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 2, -2, 10, 0, 6, 4, -4, 2, 6, -4, -12, -16, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.6-b";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 0, -1, -7, 6, 3, 3, -9, 0, 6, 5, 5, 0, -9, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.6-c";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -6, 6, -2, 12, -2, -4, 4, -2, 2, 4, 4, -8, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.6-d";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -5, 2, -7, 5, 10, -9, 9, 11, 12, -14, 1, 13, 4, -3, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.6-e";
N := (-2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -1, 0, -5, 7, -2, -9, 3, -9, 4, 10, 11, -1, -4, -9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.5-a";
N := (-4*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 2, -4, 4, 6, 8, -6, -12, 2, -8, -12, 8, 0, 4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.5-b";
N := (-4*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -6, 0, 8, -7, -9, 0, -3, 9, 6, 6, 5, -4, -12, -15, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.5-c";
N := (-4*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 0, -2, -6, 1, 5, -12, -1, 7, 10, 14, 13, -2, 0, 5, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.5-d";
N := (-4*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 2, -2, -4, -2, 10, 12, 8, 0, 0, -8, 0, 0, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.5-e";
N := (-4*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 6, 4, 6, -2, 2, -12, -4, 4, -2, 2, 4, 4, 12, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.5-f";
N := (-4*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, -2, -2, 6, 8, 6, -2, 4, 0, 12, -4, 8, 8, -8, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.5-g";
N := (-4*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 0, 2, 6, 1, -5, -12, -1, -7, -10, 14, -13, 2, 0, 5, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 252.5-h";
N := (-4*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 0, -4, 2, -6, -12, -6, -12, 0, -6, -4, -4, 12, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-a";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -1, 3, -3, 1, -2, -2, 9, 1, 7, 3, 1, 9, -12, 4, 13, 9, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-b";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -3, -3, 3, 3, 6, -2, -3, -3, -3, -3, 9, 9, 12, 12, 3, 3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-c";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 3, -1, 1, -3, -2, -2, 1, 9, 3, 7, 9, 1, 4, -12, 9, 13, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-d";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -1, -1, -3, -3, -2, -10, -3, -3, -9, -9, -3, -3, -4, -4, -15, -15, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-e";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 3, 1, 1, 3, -2, 2, -1, -9, 3, -7, -9, -1, 4, 12, -9, 13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-f";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -1, 3, -3, -2, 10, 3, 3, 9, -9, 3, 3, 4, -4, -15, 15, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-g";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 3, -3, -3, 3, 6, 2, 3, 3, 3, -3, -9, -9, -12, 12, 3, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-h";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 1, 3, 3, 1, -2, 2, -9, -1, -7, 3, -1, -9, 12, 4, 13, -9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-i";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, -3, -3, -1, -2, 2, -9, -1, 7, -3, -1, -9, -12, -4, -13, 9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-j";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -3, 3, 3, -3, 6, 2, 3, 3, -3, 3, -9, -9, 12, -12, -3, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-k";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, 1, -3, 3, -2, 10, 3, 3, -9, 9, 3, 3, -4, 4, 15, -15, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 256.1-l";
N := (16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -3, -1, -1, -3, -2, 2, -1, -9, -3, 7, -9, -1, -4, -12, 9, -13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 269.1-a";
N := (-6*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, 3, 2, -3, 5, 1, -6, 0, -2, -2, 4, -9, 9, 3, 3, 4, -14, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 269.1-b";
N := (-6*w + 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 1, -1, -1, -5, -2, -6, -5, -1, -9, -5, -7, -11, 12, -12, -5, -3, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 269.2-a";
N := (6*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, 2, 3, 5, -3, 1, -6, -2, 0, 4, -2, 9, -9, 3, 3, -14, 4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 269.2-b";
N := (6*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, -1, 1, -5, -1, -2, -6, -1, -5, -5, -9, -11, -7, -12, 12, -3, -5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 271.1-a";
N := (-7*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, -4, 2, 4, 3, -7, 4, -10, 8, -8, -12, -1, 10, 10, -4, -1, 0, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 271.2-a";
N := (-7*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, 2, -4, 3, 4, -7, 4, 8, -10, -12, -8, 10, -1, -4, 10, 0, -1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 275.1-a";
N := (5*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -2, -2, -4, 4, 10, 10, -6, -12, 14, 2, 2, 8, 8, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 275.2-a";
N := (5*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -2, -2, -4, 4, 10, 10, -12, -6, 2, 14, 8, 2, 0, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 284.1-a";
N := (-6*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, -4, 3, -1, 3, 2, 3, -10, 7, 3, 4, -2, -2, 4, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 284.2-a";
N := (6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, -2, -1, 3, 3, 2, -10, 3, 3, 7, -2, 4, 4, -2, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.1-a";
N := (9*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 3, 2, -2, 2, -1, 3, 2, -7, -8, 1, 0, -5, 1, 10, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.1-b";
N := (9*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, -4, -2, 4, 1, 7, 4, -9, 0, 13, -8, 15, -13, -6, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.1-c";
N := (9*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 0, 4, -4, 2, 10, -6, 0, -8, 10, 2, 8, 4, 0, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.1-d";
N := (9*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 3, -2, -1, -4, -2, -6, -3, 1, -11, -4, -4, -5, 12, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.1-e";
N := (9*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -1, -2, 6, -2, -1, -5, -2, -11, -8, 9, -8, -9, 13, 10, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.2-a";
N := (-2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -1, 4, -2, 4, 3, -3, 12, -4, -3, -12, -13, -3, 5, -6, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.4-a";
N := (-9*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 3, 2, 2, -2, -1, 3, 2, -8, -7, 0, 1, 1, -5, 0, 10, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.4-b";
N := (-9*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, -4, 4, -2, 1, 7, 4, 0, -9, -8, 13, -13, 15, 12, -6, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.4-c";
N := (-9*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, 0, -4, 4, 2, 10, -6, -8, 0, 2, 10, 4, 8, 0, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.4-d";
N := (-9*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 3, -1, -2, -4, -2, -6, 1, -3, -4, -11, -5, -4, 3, 12, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.4-e";
N := (-9*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -1, -2, -2, 6, -1, -5, -2, -8, -11, -8, 9, 13, -9, -16, 10, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 287.3-a";
N := (2*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, 4, 4, -2, 3, -3, 12, -3, -4, -13, -12, 5, -3, -8, -6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-a";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, 4, 4, 0, 0, -6, -2, -6, -6, 0, 0, 6, 6, 4, 4, -4, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 289.1-b";
N := (17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 1, 1, 3, 3, 10, 2, -9, -9, -9, -9, 9, 9, 4, 4, -9, -9, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 292.1-a";
N := (-6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 3, 6, 1, 4, 3, 8, 8, 6, 11, -8, -3, -9, -4, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 292.1-b";
N := (-6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 0, 0, -2, -2, 0, 2, 2, 0, 8, -2, 12, -6, 2, -4, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 292.1-c";
N := (-6*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -1, 0, -3, -4, -7, 0, -6, 6, -9, 0, -9, 5, 8, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 292.2-a";
N := (6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, -2, 1, 6, 4, 3, 8, 8, 11, 6, -3, -8, -4, -9, -12, 8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 292.2-b";
N := (6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 4, -2, 0, -2, 0, 2, 2, 8, 0, 12, -2, 2, -6, 0, -4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 292.2-c";
N := (6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, -4, -3, 0, -4, -7, -6, 0, -9, 6, -9, 0, 8, 5, -6, 0, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 293.1-a";
N := (-4*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 0, 1, -1, 3, 5, 2, -2, -3, -5, 3, 13, 1, -11, 4, 4, 3, -13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 293.2-a";
N := (4*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, -1, 1, 5, 3, 2, -2, -5, -3, 13, 3, -11, 1, 4, 4, -13, 3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-a";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 2, 3, 6, 7, 7, -5, -8, -4, 5, -12, -12, 10, 15, 6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-b";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -4, 1, -8, 3, 3, 1, -8, -10, 5, -10, 4, -14, 7, -6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-c";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, -6, -6, -2, 12, 0, -6, 0, 12, -6, 6, 0, 0, -12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-d";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -1, -2, 7, -7, -9, -8, 0, -13, 0, -4, 6, 9, -2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-e";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -3, 3, 6, 7, 12, 0, 12, 6, 0, 3, -12, -15, -15, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-f";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -4, 6, -10, 6, -6, 0, 8, -6, -2, -4, 4, 0, 16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-g";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 0, -2, 6, -10, 2, 4, 0, -6, -6, 0, 8, -8, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-h";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 4, 1, 8, 3, -3, 1, -8, 10, -5, -10, -4, 14, -7, -6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-i";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, 3, -2, -9, -1, 11, -8, -12, -3, -12, 12, 2, 7, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.1-j";
N := (3*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -1, -3, 2, 11, 0, 0, -12, -6, 0, -9, -4, -13, 3, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.2-a";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 5, 4, 3, -7, -9, -2, -4, 4, 1, -8, 10, 0, 11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.2-b";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 0, -2, 6, -2, 10, 0, -4, 6, 6, 8, 0, 8, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.2-c";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 4, 6, -10, 6, -6, -8, 0, 2, 6, 4, -4, -16, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.2-d";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -2, 8, -6, -8, -6, -8, -2, 14, -2, 2, 2, 0, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.2-e";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, 1, -2, 7, 9, 7, 0, 8, 0, 13, 6, -4, 2, -9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.2-f";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 2, -8, -6, 8, -6, -8, 2, -14, -2, -2, -2, 0, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.2-g";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 5, -3, 6, 7, 5, -7, 4, 8, 12, -5, 10, -12, -6, -15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.2-h";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, -3, 8, 11, 9, 3, -6, 12, -12, -3, -4, 14, 12, -9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.2-i";
N := (-6*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -3, -3, -2, -9, -11, 1, 12, 8, 12, 3, 2, 12, 2, -7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.5-a";
N := (w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 3, 1, 1, 8, -9, -3, -2, -8, -8, -14, -4, -7, 11, -10, 3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.5-b";
N := (w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -1, -1, -8, -9, -3, 2, 8, -8, -14, 4, 7, -11, -10, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.6-a";
N := (7*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 0, -3, 6, 7, -9, -3, -6, -3, 6, -9, 6, 12, -6, -3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.6-b";
N := (7*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 3, 4, 4, -6, 7, -9, 2, -5, -4, -10, -8, -8, 0, 7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.6-c";
N := (7*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 0, -3, -6, 7, -9, 3, 6, -3, 6, 9, -6, -12, -6, 3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.6-d";
N := (7*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -2, -3, 4, -4, -6, 7, 9, -2, -5, -4, 10, 8, 8, 0, -7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.4-a";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 5, 3, 6, 7, -5, 7, -4, -8, -12, 5, 10, -12, 6, 15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.4-b";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 3, 1, -8, 3, 1, 3, -10, -8, -10, 5, -14, 4, -6, 7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.4-c";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, -6, -6, -2, 0, 12, 0, -6, -6, 12, 0, 6, -12, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.4-d";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, -1, -2, 7, -9, -7, 0, -8, 0, -13, 6, -4, -2, 9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.4-e";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 0, 3, 6, 7, 0, 12, 6, 12, 3, 0, -15, -12, 6, -15, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.4-f";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -4, 6, -10, -6, 6, 8, 0, -2, -6, 4, -4, 16, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.4-g";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 0, -2, 6, 2, -10, 0, 4, -6, -6, 8, 0, -8, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.4-h";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -3, 1, 8, 3, 1, -3, 10, -8, -10, -5, 14, -4, -6, -7, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.4-i";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -3, 3, -2, -9, 11, -1, -12, -8, -12, -3, 2, 12, -2, 7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.4-j";
N := (3*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -3, 2, 11, 0, 0, -6, -12, -9, 0, -13, -4, 6, 3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.3-a";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 2, 5, 4, 3, -9, -7, -4, -2, 1, 4, 10, -8, 11, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.3-b";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 0, -2, 6, 10, -2, -4, 0, 6, 6, 0, 8, 8, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.3-c";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 4, 6, -10, -6, 6, 0, -8, 6, 2, -4, 4, 0, -16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.3-d";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -2, 8, -6, -6, -8, -2, -8, -2, 14, 2, 2, -4, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.3-e";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 1, -2, 7, 7, 9, 8, 0, 13, 0, -4, 6, -9, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.3-f";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 2, 2, -8, -6, -6, 8, 2, -8, -2, -14, -2, -2, -4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.3-g";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 2, -3, 6, 7, -7, 5, 8, 4, -5, 12, -12, 10, -15, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.3-h";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -3, 8, 11, 3, 9, 12, -6, -3, -12, 14, -4, -9, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.3-i";
N := (6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, -3, -2, -9, 1, -11, 8, 12, 3, 12, 12, 2, -7, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.8-a";
N := (w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, 3, 1, 8, -9, -2, -3, -8, -8, -4, -14, 11, -7, 3, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.8-b";
N := (w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -3, -1, -8, -9, 2, -3, -8, 8, 4, -14, -11, 7, -3, -10, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.7-a";
N := (7*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 0, -3, 6, 7, -3, -9, -3, -6, -9, 6, 12, 6, -3, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.7-b";
N := (7*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, 2, 4, 4, -6, -9, 7, -5, 2, -10, -4, -8, -8, 7, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.7-c";
N := (7*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 0, 0, -3, -6, 7, 3, -9, -3, 6, 9, 6, -12, -6, 3, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 297.7-d";
N := (7*w + 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, -3, -2, 4, -4, -6, 9, 7, -5, -2, 10, -4, 8, 8, -7, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-a";
N := (10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, -4, -4, 10, -2, -6, -2, 12, 6, -2, 16, 14, 0, 4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-b";
N := (10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -5, 4, 0, -1, 5, 8, 7, 3, -6, 10, -7, -8, 0, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-c";
N := (10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -1, -5, 3, 6, -3, 9, 0, -8, -3, 9, -2, -2, -2, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-d";
N := (10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 4, -6, -6, -9, 0, 6, 4, 9, -6, -8, 7, 7, -1, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-e";
N := (10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -4, -4, -10, -2, 2, 2, 0, 2, -6, -8, -2, 16, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-f";
N := (10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, 0, 0, 11, -9, -12, -9, 9, 6, -6, -5, 16, 0, -9, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-g";
N := (10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 4, 4, 4, 6, -10, 6, -6, 4, 4, 12, -8, 12, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.1-h";
N := (10*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -5, 1, -3, -3, 2, 9, 3, 0, 0, 9, 3, -14, 10, 12, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-a";
N := (10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 2, -4, -4, 10, -6, -2, 12, -2, -2, 6, 14, 16, 4, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-b";
N := (10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -2, 0, 4, -1, 8, 5, 3, 7, 10, -6, -8, -7, -5, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-c";
N := (10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 3, 3, -5, 6, 9, -3, -8, 0, 9, -3, -2, -2, 2, -2, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-d";
N := (10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 3, -6, 4, -6, 0, -9, 4, 6, -6, 9, 7, -8, -1, 7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-e";
N := (10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, -4, -4, -10, 2, -2, 0, 2, -6, 2, -2, -8, -4, 16, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-f";
N := (10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 0, 0, 11, -12, -9, 9, -9, -6, 6, 16, -5, -9, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-g";
N := (10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, 4, 4, -10, 6, -6, 6, 4, 4, -8, 12, 4, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 300.2-h";
N := (10*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, -3, -3, 2, 3, 9, 0, 0, 3, 9, 10, -14, -6, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 308.1-a";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, 2, 6, -8, -4, 6, -4, 0, -11, 9, -8, -5, -5, 12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 308.1-b";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 0, 4, -10, -6, 12, 6, -6, 9, 9, -2, 13, 15, 6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 308.1-c";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 2, 6, 8, -8, 2, -12, 8, 9, -11, -12, 3, -3, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 308.1-d";
N := (-8*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -3, -4, 2, -9, 6, -9, 0, 9, 9, 2, -10, 15, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 308.4-a";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 2, 2, 6, -8, 6, -4, 0, -4, 9, -11, -5, -8, 12, -5, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 308.4-b";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 0, 4, -10, 12, -6, -6, 6, 9, 9, 13, -2, 6, 15, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 308.4-c";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 2, 6, 8, 2, -8, 8, -12, -11, 9, 3, -12, 12, -3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 308.4-d";
N := (-8*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, -3, -4, 2, 6, -9, 0, -9, 9, 9, -10, 2, -3, 15, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 317.1-a";
N := (-6*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 0, 5, -3, 5, -3, 2, 2, -3, -9, -7, 3, 11, 7, -4, -12, -9, 13, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 317.1-b";
N := (-6*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 1, 1, -3, 5, 2, 2, 5, -5, 5, 11, -9, -5, -4, 4, -5, -11, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 317.2-a";
N := (6*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, -3, 5, -3, 5, 2, 2, -9, -3, 3, -7, 7, 11, -12, -4, 13, -9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 317.2-b";
N := (6*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 1, 1, 5, -3, 2, 2, -5, 5, 11, 5, -5, -9, 4, -4, -11, -5, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.1-a";
N := (-7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 1, 2, 0, 4, -1, 4, 3, 4, 0, -8, 1, -4, 12, -9, -9, -7, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 321.4-a";
N := (7*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 2, 1, 4, 0, -1, 4, 4, 3, -8, 0, -4, 1, -9, 12, -7, -9, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-a";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, 3, 3, 6, -12, -2, -2, -8, -8, 11, 11, 8, 8, -2, -2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-b";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 3, 3, 2, 2, -12, -12, 0, 6, 9, -9, -16, 14, -6, 6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-c";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 0, 2, -7, 0, 3, -3, 9, -6, 6, 2, 5, -9, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-d";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 5, 1, 2, -2, 8, 0, -6, 12, 1, -1, -10, 12, 10, 6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-e";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 5, 2, -2, 0, 8, 12, -6, -1, 1, 12, -10, 6, 10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-f";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, 0, 6, 2, -7, 3, 0, 9, -3, 6, -6, 5, 2, 0, -9, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-g";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 5, -1, -2, -2, -8, 0, -6, -12, -1, -1, 10, -12, -10, 6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-h";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -1, 3, 3, 2, 2, -12, -12, 6, 0, -9, 9, 14, -16, 6, -6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-i";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 1, 3, -3, -2, 2, 12, -12, 6, 0, 9, 9, -14, 16, -6, -6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-j";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 2, -2, -2, 2, 8, 2, -10, 6, 4, -6, -4, -4, 14, 14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-k";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -2, -2, 2, 2, -2, 8, 6, 10, 6, 4, 4, 4, -14, 14, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-l";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 2, 2, -8, 1, 3, 10, 3, 3, -10, -10, 3, 10, 0, -7, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-m";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 1, -5, 2, 8, 2, -2, -8, -12, 7, 9, -8, 4, -10, 10, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-n";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 5, -2, -2, 0, -8, -12, -6, -1, -1, -12, 10, 6, -10, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-o";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -5, 1, 2, 8, -2, 2, -12, -8, 9, 7, 4, -8, 10, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-p";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -2, -2, 2, 2, 8, -2, 10, 6, 4, 6, 4, 4, 14, -14, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-q";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -2, -2, -4, -7, -7, -2, 7, -3, -14, 6, 13, -2, 8, 13, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-r";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 2, -2, 2, 2, 8, 6, -10, -6, 4, -4, -4, 14, 14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-s";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 1, 0, -6, -2, -7, -3, 0, 9, 3, -6, -6, -5, -2, 0, -9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-t";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -2, 2, 2, -8, 1, 10, 3, 3, 3, -10, -10, 10, 3, -7, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-u";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -5, -3, 3, -2, 2, -12, 12, 0, 6, 9, 9, 16, -14, -6, -6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-v";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, 0, -2, -7, 0, -3, 3, 9, -6, -6, -2, -5, -9, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.1-w";
N := (18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -2, -2, -4, -7, -2, -7, -3, 7, 6, -14, -2, 13, 13, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-a";
N := (6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, -5, 4, -8, -8, 5, 6, -9, -3, -11, -8, -2, 15, 1, -3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-b";
N := (6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -4, 1, -2, -1, -2, -11, -6, -8, 0, 2, 5, -1, 1, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-c";
N := (6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, -1, -4, -5, 4, 3, 0, 0, 2, 10, -7, -3, -7, -6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-d";
N := (6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -2, 1, 4, -5, -4, 3, 0, 0, -2, 10, 7, 3, 7, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-e";
N := (6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -4, -1, 2, -1, 2, -11, -6, 8, 0, 2, -5, 1, -1, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.2-f";
N := (6*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, -5, -4, 8, -8, -5, 6, -9, 3, 11, -8, 2, -15, -1, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.4-a";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -3, 0, 2, 2, 3, 3, 6, 0, 12, -6, -4, -1, -12, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.4-b";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -6, 0, 1, -7, 3, -3, 0, -12, 3, -3, -14, -8, -6, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.4-c";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -2, -5, -4, 2, -8, 9, 5, 0, -6, -4, 10, 12, 11, 6, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.4-d";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -6, 0, -1, -7, -3, -3, 0, 12, -3, -3, 14, 8, 6, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.4-e";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, 2, -5, 4, -2, -8, -9, 5, 0, 6, 4, 10, -12, -11, -6, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.4-f";
N := (2*w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, -3, 0, -2, 2, -3, 3, 6, 0, -12, -6, 4, 1, 12, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-a";
N := (6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-5, 2, 4, -5, -8, -8, 6, 5, -3, -9, -8, -11, 15, -2, -3, 1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-b";
N := (6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 1, -4, -2, -1, -11, -2, -8, -6, 2, 0, -1, 5, -8, 1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-c";
N := (6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, -2, -4, -5, 3, 4, 0, 0, 10, 2, -3, -7, -6, -7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-d";
N := (6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 1, -2, 4, -5, 3, -4, 0, 0, 10, -2, 3, 7, -6, 7, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-e";
N := (6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -1, -4, 2, -1, -11, 2, 8, -6, 2, 0, 1, -5, -8, -1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.3-f";
N := (6*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, -2, -4, -5, 8, -8, 6, -5, 3, -9, -8, 11, -15, 2, -3, -1, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.5-a";
N := (-2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, 0, -3, 2, 2, 3, 3, 0, 6, -6, 12, -1, -4, -12, -12, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.5-b";
N := (-2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 0, -6, 1, -7, -3, 3, -12, 0, -3, 3, -8, -14, 0, -6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.5-c";
N := (-2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -4, -4, -5, 2, -8, 5, 9, -6, 0, 10, -4, 11, 12, -8, 6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.5-d";
N := (-2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, -6, -1, -7, -3, -3, 12, 0, -3, -3, 8, 14, 0, 6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.5-e";
N := (-2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 4, 4, -5, -2, -8, 5, -9, 6, 0, 10, 4, -11, -12, -8, -6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 324.5-f";
N := (-2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, 0, -3, -2, 2, 3, -3, 0, 6, -6, -12, 1, 4, -12, 12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 329.1-a";
N := (-6*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -4, 2, -4, 8, -4, -8, -10, 6, 2, -2, 4, -4, 8, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 329.1-b";
N := (-6*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, 0, 0, 0, -6, 8, -8, 2, 6, -14, 6, -8, 8, 2, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 329.2-a";
N := (9*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 1, 4, 0, 0, -8, 2, 0, -6, 0, 6, -6, -2, 4, -12, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 329.4-a";
N := (6*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -4, -4, 2, 8, -4, -10, -8, 6, -2, 2, -4, 4, 8, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 329.4-b";
N := (6*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -3, 0, 0, 0, -6, 8, 2, -8, 6, 6, -14, 8, -8, -4, 2, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 329.3-a";
N := (9*w - 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 1, 4, 0, 0, -8, 2, -6, 0, 0, -6, 6, 4, -2, 6, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.1-a";
N := (-6*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 5, 0, 3, 2, -7, 0, 0, -9, 0, 0, -9, -10, -1, -9, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 332.2-a";
N := (6*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 5, -1, 3, 0, 2, -7, 0, 0, 0, -9, -9, 0, -1, -10, -6, -9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.1-a";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 4, 4, 4, -2, 2, -2, -12, 0, 6, -2, 4, -4, 0, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.1-b";
N := (-6*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -4, 4, 4, -2, -2, 2, 0, -12, -2, 6, -4, 4, 12, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.2-a";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -2, 4, -4, 6, -6, -6, 0, -6, 8, -14, -8, 4, -6, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.2-b";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -4, 3, -5, 3, -2, 5, -4, -12, -2, -2, -14, 4, 12, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.2-c";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 1, 1, 3, -3, 10, 9, -9, 3, -3, 3, -3, 4, 4, 15, -15, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.2-d";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 3, 0, 3, -3, -3, -6, -3, 0, -12, -6, 6, -6, -12, 12, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.2-e";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 2, 4, 4, -6, 6, -6, 0, 6, -8, -14, 8, -4, 6, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.2-f";
N := (w + 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 1, 1, -5, 5, 6, 9, -9, -9, 9, -1, 1, -8, -8, -9, 9, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.3-a";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, -2, -4, 4, 6, -6, -6, -6, 0, -14, 8, 4, -8, 0, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.3-b";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -3, -5, 3, 3, 5, -2, -12, -4, -2, -2, 4, -14, 12, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.3-c";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 1, 1, -3, 3, 10, -9, 9, -3, 3, -3, 3, 4, 4, -15, 15, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.3-d";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, 3, -3, 3, -3, -3, -6, -12, 0, 6, -6, -12, -6, 0, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.3-e";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 2, 4, 4, -6, -6, 6, 6, 0, -14, -8, -4, 8, 0, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 333.3-f";
N := (w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 1, 1, 5, -5, 6, -9, 9, 9, -9, 1, -1, -8, -8, 9, -9, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 336.1-a";
N := (4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 0, -10, 8, 0, 0, 6, 0, -12, 6, 14, -4, 0, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 336.1-b";
N := (4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, -4, 2, 8, 8, -8, 6, -4, -12, -10, -2, 4, 8, -2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 336.1-c";
N := (4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 4, -2, -4, 2, -2, 2, -8, -6, 6, 0, 12, -4, 4, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 336.1-d";
N := (4*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, -6, 4, -10, -6, -6, 0, 6, -6, 12, 4, 4, -12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 336.2-a";
N := (-8*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 4, -2, 2, 6, 2, -8, -12, 10, 6, -4, -4, 12, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 336.4-a";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 0, 0, -10, 8, 0, 0, 0, 6, 6, -12, -4, 14, 6, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 336.4-b";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, -4, 2, 8, -8, 8, -4, 6, -10, -12, 4, -2, -2, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 336.4-c";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -2, 4, -4, 2, 2, -2, -6, -8, 0, 6, -4, 12, 0, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 336.4-d";
N := (4*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -6, 0, 4, -10, -6, -6, 6, 0, 12, -6, 4, 4, 0, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 336.3-a";
N := (8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 4, -2, 2, 2, 6, -12, -8, 6, 10, -4, -4, 8, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 343.1-a";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, 3, 3, -1, -2, 0, 0, 6, -6, -9, -9, 13, 13, 3, 3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 343.1-b";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, 3, 0, 1, -2, 0, -12, -9, 6, -6, 6, -7, -4, 6, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 343.1-c";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -5, 4, 8, -2, -11, 10, -8, 4, 14, -1, 12, 0, 12, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 343.1-d";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 5, -4, -8, 2, -11, -10, 8, 4, -14, 1, 12, 0, 12, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 343.1-e";
N := (-7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -1, -3, 0, -1, 2, 0, 12, 9, 6, 6, -6, -7, -4, 6, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 343.2-a";
N := (7*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, 3, 3, -1, -2, 0, 0, -6, 6, -9, -9, 13, 13, 3, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 343.2-b";
N := (7*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -1, 0, 3, 1, -2, -12, 0, 6, -9, 6, -6, -4, -7, 3, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 343.2-c";
N := (7*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, 4, -5, 8, -2, 10, -11, 4, -8, -1, 14, 0, 12, -6, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 343.2-d";
N := (7*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -1, -4, 5, -8, 2, -10, -11, 4, 8, 1, -14, 0, 12, -6, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 343.2-e";
N := (7*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 0, -3, -1, 2, 12, 0, 6, 9, -6, 6, -4, -7, 3, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 349.1-a";
N := (10*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -1, -5, 1, 5, -2, -10, 9, 9, -13, -1, -11, 9, -12, 12, 5, 9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 349.1-b";
N := (10*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -3, 3, -1, -3, -2, -2, -9, 3, 7, -11, -13, 1, 4, -16, 1, -13, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 349.2-a";
N := (-10*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -5, -1, 5, 1, -2, -10, 9, 9, -1, -13, 9, -11, 12, -12, 9, 5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 349.2-b";
N := (-10*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, 3, -3, -3, -1, -2, -2, 3, -9, -11, 7, 1, -13, -16, 4, -13, 1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 361.1-a";
N := (19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -4, -1, -1, 3, 3, -1, 2, -6, -6, -3, -3, 12, 12, -4, -4, 6, 6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-a";
N := (11*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 4, -6, -2, -6, -6, 0, 0, 6, 6, -8, 12, 0, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-b";
N := (11*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 1, -7, -10, 0, 10, -11, -6, -6, 9, -4, -14, 1, -4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-c";
N := (11*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 2, 2, 2, 6, -6, 0, -12, 6, 6, 14, -4, 0, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-d";
N := (11*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -4, 0, -6, -10, 6, -2, 8, 8, -6, -6, 0, 4, 0, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-e";
N := (11*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, 1, -3, -2, 8, 10, -3, -6, -6, 1, 4, 2, 5, -12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.1-f";
N := (11*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, -3, -3, -2, 0, -6, -3, -6, -6, 9, -12, -6, -3, 12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.3-a";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -2, 4, 5, 9, 9, -11, 10, 10, 2, 1, -4, 2, 10, 0, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.3-b";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -2, 4, 5, 9, -9, -11, 10, 10, -2, -1, -4, 2, -10, 0, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.3-c";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, 0, -6, 6, -2, 12, 0, -6, 0, 12, 6, -6, 0, 0, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.3-d";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -2, 4, -6, -2, -2, 0, -12, -12, 2, -10, -4, 2, -12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.3-e";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 5, 3, -6, -1, -2, 2, 10, -2, 3, 3, -10, -4, 12, 2, -5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.3-f";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, 1, -3, -2, 11, 0, 0, -12, 6, 0, 9, 4, 13, 3, -6, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.3-g";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -5, 3, -6, -1, -2, -2, 10, -2, 3, -3, 10, -4, 12, -2, 5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.3-h";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, -2, 4, -6, -2, 2, 0, -12, -12, -2, 10, -4, 2, 12, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.3-i";
N := (-7*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 3, 3, -6, 7, 12, 0, 12, -6, 0, -3, 12, 15, -15, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.4-a";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, -2, 3, -8, 11, -3, -9, -12, -6, 3, -12, -14, 4, 9, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.4-b";
N := (-2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 3, -2, -5, -4, 3, 9, 7, 4, -2, -1, 4, -10, 8, -11, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.2-a";
N := (11*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 0, -6, -2, -6, -6, 0, 0, 6, 6, 12, -8, -8, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.2-b";
N := (11*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 1, 1, -7, -10, 10, 0, -6, -11, 9, -6, -14, -4, -4, 1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.2-c";
N := (11*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, -4, 2, 2, -6, 6, -12, 0, 6, 6, -4, 14, -12, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.2-d";
N := (11*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -4, -6, -10, -2, 6, 8, 8, -6, -6, 4, 0, -8, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.2-e";
N := (11*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 1, 1, -3, -2, 10, 8, -6, -3, 1, -6, 2, 4, -12, 5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.2-f";
N := (11*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, -3, -3, -2, -6, 0, -6, -3, 9, -6, -6, -12, 12, -3, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.6-a";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 0, 4, 5, 9, -11, 9, 10, 10, 1, 2, 2, -4, 0, 10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.6-b";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 0, 4, 5, 9, -11, -9, 10, 10, -1, -2, 2, -4, 0, -10, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.6-c";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, 0, -6, 6, -2, 0, 12, 0, -6, 6, 12, 0, -6, 12, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.6-d";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 0, 4, -6, -2, 0, -2, -12, -12, -10, 2, 2, -4, 0, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.6-e";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 3, 5, -6, -1, -2, 10, 2, 3, -2, -10, 3, 12, -4, -5, 2, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.6-f";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 1, -4, -3, -2, 11, 0, 0, 6, -12, 9, 0, 13, 4, -6, 3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.6-g";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 3, -5, -6, -1, -2, 10, -2, 3, -2, 10, -3, 12, -4, 5, -2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.6-h";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 0, 4, -6, -2, 0, 2, -12, -12, 10, -2, 2, -4, 0, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.6-i";
N := (7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 3, 0, 3, -6, 7, 0, 12, -6, 12, -3, 0, 15, 12, -6, -15, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.5-a";
N := (2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -2, -1, 3, -8, 11, -9, -3, -6, -12, -12, 3, 4, -14, 12, 9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 363.5-b";
N := (2*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -2, 3, -5, -4, 3, 7, 9, -2, 4, 4, -1, 8, -10, 0, -11, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 367.1-a";
N := (-8*w - 11)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, 0, -5, -5, 3, 5, 2, 2, -3, -3, -7, -3, -13, 7, -12, 4, -5, -15, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 367.2-a";
N := (-8*w + 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, -5, -5, 5, 3, 2, 2, -3, -3, -3, -7, 7, -13, 4, -12, -15, -5, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.1-a";
N := (9*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -4, 2, -4, -6, 4, 6, 0, 10, -14, 12, 12, -2, 16, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.1-b";
N := (9*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, -6, 0, -2, -8, 2, -4, -10, 6, 4, 4, 6, 4, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.1-c";
N := (9*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 0, -4, 4, -2, -2, 10, -4, 8, 6, 2, 4, 8, 8, -16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.1-d";
N := (9*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, 0, -4, 2, 2, 10, 0, -12, -10, 2, -4, 0, 8, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.3-a";
N := (8*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 0, 0, 6, 3, 7, 0, 0, 3, 0, 3, 9, -15, -12, 6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.4-a";
N := (5*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 0, -6, 0, 3, 7, 0, -3, 0, -3, 0, -15, 9, -6, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.2-a";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 4, -4, 2, -6, 4, 6, 10, 0, 12, -14, -2, 12, -6, 16, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.2-b";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, 0, -6, -2, -8, 2, -10, -4, 4, 6, 6, 4, -6, 4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.2-c";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 4, 4, -4, -2, -2, 10, 8, -4, 2, 6, 8, 4, -16, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.2-d";
N := (-9*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 0, -4, 0, 2, 2, 10, -12, 0, 2, -10, 0, -4, 4, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.6-a";
N := (-8*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 0, 6, 0, 3, 7, 0, 3, 0, 3, 0, -15, 9, 6, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 369.5-a";
N := (5*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 0, 0, -6, 3, 7, 0, 0, -3, 0, -3, 9, -15, 12, -6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 371.2-a";
N := (-10*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, -3, 5, -5, -2, 3, 0, -3, 12, 6, 4, 12, -11, -9, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 371.3-a";
N := (-10*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 3, -3, -5, 5, -2, 3, -3, 0, 6, 12, 4, -11, 12, 8, -9, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.1-a";
N := (-4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 0, 0, 4, 6, 4, 0, 4, -6, 8, 0, 6, -14, 4, -12, 10, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.2-a";
N := (7*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -1, 3, 0, -4, -1, 6, -3, 6, 9, 12, 3, 5, -4, -15, 0, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.2-b";
N := (7*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 4, 0, 0, 0, 8, 8, 0, 10, -2, -10, -6, -2, -16, 8, 2, -2, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.4-a";
N := (4*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -2, 4, 0, 6, 4, 4, 0, 8, -6, 6, 0, 4, -14, 10, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.3-a";
N := (7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, -1, 0, 3, -4, -1, -3, 6, 9, 6, 3, 12, -4, 5, 0, -15, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 381.3-b";
N := (7*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 4, 0, 0, 8, 8, 10, 0, -10, -2, -2, -6, 8, -16, -2, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-a";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, -5, -7, -9, 7, -6, 7, -8, 11, -5, 5, 2, 3, -10, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-b";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -4, -2, -2, 2, 10, -12, 6, -10, 0, 8, -4, 8, 2, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-c";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -3, -9, -3, 5, 0, 9, 4, -13, -3, 11, -14, 7, 12, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-d";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -3, 3, -7, -10, -7, -4, -11, 1, -7, 2, 5, 2, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-e";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 6, 6, 2, -6, -12, -2, 2, 0, -4, -8, -8, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-f";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -3, 1, -7, -3, 12, 3, -12, 9, 9, 13, -2, -3, 12, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-g";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -6, 6, 2, 2, 8, 8, 10, -14, 8, 8, 8, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-h";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -1, -5, 11, 3, 6, -3, 0, 1, 3, 7, 6, 1, 6, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-i";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 3, 1, -7, -5, 0, -3, -8, -5, -5, -3, -2, -1, -8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.1-j";
N := (6*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 5, -1, 1, -3, 4, -3, 4, 3, -11, 3, 10, 7, 0, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-a";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 0, 4, 2, 0, 6, -6, 12, 6, 6, -8, 10, -6, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-b";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 3, -1, 2, 3, 0, 8, 4, -2, 0, 5, 4, 7, -3, 2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-c";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 4, -2, 2, -3, -12, -5, 13, 7, -2, 2, 2, -1, 5, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-d";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, 2, -2, 6, 0, 8, 8, -8, 10, 10, 10, -8, 2, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-e";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 2, -6, -2, 7, 0, 9, 1, -7, 6, 0, -4, 13, 5, 16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-f";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 0, 1, 2, -6, 0, -6, -9, -3, 6, 4, 4, -6, 3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-g";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 2, -2, -6, 3, -8, 3, 7, 13, 14, -4, -8, 7, -3, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-h";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 6, 5, -4, 6, 12, 0, -3, 3, -6, 14, 8, 6, 9, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-i";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, -2, 6, 6, -4, 0, 4, 8, 10, -10, -10, -4, 6, 8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-j";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, 3, 4, -7, 2, -12, -8, -2, 4, 1, -8, -13, -3, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-k";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -4, 2, -2, -3, -12, 5, -13, 7, -2, -2, -2, 1, 5, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-l";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, -2, -6, 6, 4, 12, -2, -8, -4, 2, -2, 4, 0, -4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-m";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 0, -4, 2, 0, -6, 6, 12, 6, -6, 8, -10, -6, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.3-n";
N := (10*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -5, -2, -3, 0, 2, 0, 4, -7, 1, 14, 2, 8, -6, -13, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.4-a";
N := (-8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 0, 4, -7, -6, -9, 9, 9, -6, 12, 4, 7, -3, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.4-b";
N := (-8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 4, 4, 6, -2, 6, -10, -8, 14, 2, -8, 10, 6, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.4-c";
N := (-8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 4, -4, 6, -2, -6, 10, -8, 14, -2, 8, -10, 6, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.4-d";
N := (-8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -2, -2, -3, 4, 3, 11, -5, 2, -4, 16, -11, 3, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.4-e";
N := (-8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, 0, 1, 2, 0, 6, 9, 6, -6, 3, 4, 4, -3, 6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.4-f";
N := (-8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 0, -4, -7, -6, 9, -9, 9, -6, -12, -4, -7, -3, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-a";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -5, -7, -9, -6, 7, -8, 7, -5, 11, 2, 5, -10, 3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-b";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -4, -2, -2, 10, 2, 6, -12, 0, -10, -4, 8, 2, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-c";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -3, -9, -3, 0, 5, 4, 9, -3, -13, -14, 11, 12, 7, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-d";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, -3, 3, -10, -7, -4, -7, 1, -11, 2, -7, 2, 5, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-e";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 0, 6, 6, -6, 2, -2, -12, 0, 2, -8, -4, -6, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-f";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -3, 1, -7, 12, -3, -12, 3, 9, 9, -2, 13, 12, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-g";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -6, 6, 2, 2, 8, 8, -14, 10, 8, 8, -4, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-h";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -4, -1, -5, 11, 6, 3, 0, -3, 3, 1, 6, 7, 6, 1, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-i";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 3, 1, -7, 0, -5, -8, -3, -5, -5, -2, -3, -8, -1, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.2-j";
N := (6*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 5, -1, 1, 4, -3, 4, -3, -11, 3, 10, 3, 0, 7, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-a";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 4, 0, 4, 2, 6, 0, 12, -6, 6, 6, 10, -8, -12, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-b";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, -1, 2, 3, 8, 0, -2, 4, 5, 0, 7, 4, 2, -3, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-c";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -3, -2, 2, -3, -5, -12, 7, 13, 2, -2, -1, 2, 0, 5, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-d";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 2, -2, 6, 8, 0, -8, 8, 10, 10, -8, 10, 0, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-e";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -1, -6, -2, 7, 9, 0, -7, 1, 0, 6, 13, -4, 16, 5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-f";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 0, 1, 2, 0, -6, -9, -6, 6, -3, 4, 4, 3, -6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-g";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, -2, -6, 3, 3, -8, 13, 7, -4, 14, 7, -8, 8, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-h";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, 6, 5, -4, 12, 6, -3, 0, -6, 3, 8, 14, 9, 6, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-i";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, -2, 6, 6, 0, -4, 8, 4, -10, 10, -4, -10, 8, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-j";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 2, 3, 4, -7, -12, 2, -2, -8, 1, 4, -13, -8, 8, -3, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-k";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 3, 2, -2, -3, 5, -12, 7, -13, -2, -2, 1, -2, 0, 5, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-l";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, -2, -6, 6, 12, 4, -8, -2, 2, -4, 4, -2, -4, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-m";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, 0, -4, 2, -6, 0, 12, 6, -6, 6, -10, 8, 12, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.6-n";
N := (-10*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, -3, -2, -3, 0, 0, 2, -7, 4, 14, 1, 8, 2, -13, -6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.5-a";
N := (8*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, 0, 4, -7, -9, -6, 9, 9, 12, -6, 7, 4, 0, -3, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.5-b";
N := (8*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 4, 4, 6, 6, -2, -8, -10, 2, 14, 10, -8, -8, 6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.5-c";
N := (8*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, 4, -4, 6, -6, -2, -8, 10, -2, 14, -10, 8, 8, 6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.5-d";
N := (8*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -2, -2, -3, 3, 4, -5, 11, -4, 2, -11, 16, -8, 3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.5-e";
N := (8*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, 0, 1, 2, 6, 0, 6, 9, 3, -6, 4, 4, 6, -3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 396.5-f";
N := (8*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, 0, -4, -7, 9, -6, 9, -9, -12, -6, -7, -4, 0, -3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-a";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -1, -1, 3, 3, 2, 5, 5, -5, -5, -9, -9, -4, -4, -13, -13, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 400.1-b";
N := (20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 2, 0, 0, 2, 6, 6, -6, -6, -6, -6, 2, 2, -12, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-a";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, -1, -4, -3, 1, -7, -6, 0, -2, 8, 4, -6, -2, -3, 11, 12, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.1-b";
N := (2*w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 2, -1, 0, 3, -7, 11, -6, 0, -6, -12, 12, 6, 2, -13, 3, -12, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-a";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -1, -2, -3, -4, 1, -7, 0, -6, 8, -2, -6, 4, -3, -2, 12, 11, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 404.2-b";
N := (2*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -1, 2, 3, 0, -7, 11, 0, -6, -12, -6, 6, 12, -13, 2, -12, 3, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.1-a";
N := (w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 2, -1, -3, -2, -7, 0, -2, -10, -7, -2, -3, -7, 2, 0, 1, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.1-b";
N := (w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -4, 0, 0, -2, 7, 8, -2, -10, 3, -6, -5, -3, 4, 10, -9, 0, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.1-c";
N := (w + 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, 4, 0, 2, 7, -4, -6, -6, -5, -6, 9, -9, -12, 6, -3, 0, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.2-a";
N := (-7*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -2, -3, -3, 8, -7, 6, -8, -7, -10, -1, -8, -2, 11, -9, -2, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.2-b";
N := (-7*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, 4, -5, 1, 2, 5, -10, 2, -9, 6, 11, -6, 16, -7, -9, -2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.2-c";
N := (-7*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 2, -3, 5, -4, 1, 6, -8, 1, 2, -1, 4, 14, -5, -1, -6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.2-d";
N := (-7*w + 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, 4, -4, 0, 4, -2, 10, 6, 8, 2, -6, -14, 2, 4, -8, 10, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.4-a";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 0, -3, -1, -2, -7, -2, 0, -7, -10, -3, -2, 2, -7, 1, 0, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.4-b";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, -4, -2, 0, 7, 8, -10, -2, -6, 3, -3, -5, 10, 4, 0, -9, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.4-c";
N := (w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, -4, 2, 0, 7, -4, -6, -6, -6, -5, -9, 9, 6, -12, 0, -3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.3-a";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, -2, -3, -3, 8, -7, -8, 6, -10, -7, -8, -1, 11, -2, -2, -9, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.3-b";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -2, 1, -5, 2, 5, 2, -10, 6, -9, -6, 11, -7, 16, -2, -9, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.3-c";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, 2, 5, -3, -4, 1, -8, 6, 2, 1, 4, -1, -5, 14, -6, -1, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 411.3-d";
N := (-7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 2, 0, -4, 4, -2, 6, 10, 2, 8, -14, -6, 4, 2, 10, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.2-a";
N := (7*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 0, 2, -4, 0, 6, -2, 0, -10, 4, -8, -2, 6, 4, 8, 8, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 417.3-a";
N := (7*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 2, 0, 0, -4, 6, -2, -10, 0, -8, 4, 6, -2, 8, 4, 8, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 419.1-a";
N := (-5*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -3, 0, 0, 6, 6, -3, -11, 3, -3, 12, -9, -9, 0, -9, 12, -15, -3, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 419.2-a";
N := (-5*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, 0, 0, 6, 6, -3, -11, -3, 3, -9, 12, 0, -9, 12, -9, -3, -15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.1-a";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, -3, -4, -2, 2, 5, -12, -7, -1, 3, 7, 13, -13, 0, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.1-b";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -4, 4, 2, -2, -6, -6, -8, -10, 6, -12, -4, 0, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.1-c";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 3, 0, -6, 6, -11, 0, -3, -3, 9, 3, 3, -3, 0, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.1-d";
N := (3*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 3, 0, -2, -2, -1, 0, -5, 9, 11, 13, -15, -11, 0, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.3-a";
N := (-8*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 0, 3, -1, 3, -7, -2, 10, -2, -2, -4, -11, -2, 9, -10, -3, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.3-b";
N := (-8*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 0, -4, 0, 2, 4, 4, 10, -2, -10, -2, -8, 0, 14, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.3-c";
N := (-8*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 3, -3, 3, -9, -2, 6, 6, -6, 12, 9, -6, 9, -6, 15, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.2-a";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 4, -2, -4, 2, 5, -7, -12, -1, 7, 3, -13, 13, -4, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.2-b";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 4, -4, 2, -2, -6, -6, -8, 6, -10, -4, -12, 8, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.2-c";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 0, -6, 0, 6, -11, -3, 0, -3, 3, 9, -3, 3, 12, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.2-d";
N := (3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -4, -2, 0, -2, -1, -5, 0, 9, 13, 11, -11, -15, 0, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.6-a";
N := (8*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, 0, 3, -1, -7, -2, -2, 10, -2, -11, -4, 9, -2, -3, -10, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.6-b";
N := (8*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 0, 0, -4, 2, 4, 10, 4, -2, -2, -10, 0, -8, 12, 14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 423.6-c";
N := (8*w - 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 3, 0, 3, -3, -9, -2, 6, 6, -6, 9, 12, 9, -6, 15, -6, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-a";
N := (12*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, 4, -2, 4, -2, 2, 6, 12, 6, -2, -14, 16, 6, -14, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-b";
N := (12*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, 6, 0, 8, 2, 6, 0, 6, -12, 6, 0, -4, 14, 0, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-c";
N := (12*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, -4, 2, 10, -2, 12, -6, 0, 2, 4, 2, -12, 8, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-d";
N := (12*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, -6, 8, 2, 0, -6, 12, -6, 0, -6, 14, -4, 6, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-e";
N := (12*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 2, 8, -10, -10, -2, 12, 2, -6, 2, 4, -2, -10, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-f";
N := (12*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 4, 4, 2, 10, 4, -6, -8, -6, -4, 8, -10, 4, -2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-g";
N := (12*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -2, -8, -10, 10, -2, 12, -2, 6, 2, -4, 2, 10, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-h";
N := (12*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -4, -2, 4, 2, -4, -10, 8, 6, 4, 6, -10, 8, 2, -4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.1-i";
N := (12*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 2, 4, 2, -4, -2, -2, 6, 12, -6, 2, -14, -16, -6, 14, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-a";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, 6, 3, 2, -1, 6, 3, -12, 12, -12, -6, 5, -13, -9, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.3-b";
N := (-8*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, 6, -3, -2, -1, -6, 3, -12, -12, 12, -6, -5, 13, 9, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-a";
N := (12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -2, 4, 4, -2, 6, 2, 6, 12, -14, -2, 6, 16, 0, -14, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-b";
N := (12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 0, 6, 8, 2, 0, 6, -12, 6, 0, 6, 14, -4, -6, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-c";
N := (12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -4, -2, 2, 10, 12, -2, 0, -6, 4, 2, -12, 2, 6, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-d";
N := (12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 2, -6, 0, 8, 2, -6, 0, -6, 12, -6, 0, -4, 14, 0, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-e";
N := (12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, -4, 8, -10, -2, -10, 2, 12, 2, -6, -2, 4, -8, -10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-f";
N := (12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 2, 4, 2, 4, 10, -8, -6, -4, -6, -10, 8, -2, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-g";
N := (12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -2, -4, -8, -10, -2, 10, -2, 12, 2, 6, 2, -4, -8, 10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-h";
N := (12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -4, 4, 2, -10, -4, 6, 8, 6, 4, 8, -10, -4, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.2-i";
N := (12*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 2, 4, -4, -2, 6, -2, -6, 12, -14, 2, -6, -16, 0, 14, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-a";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -1, 3, 6, 2, -1, 3, 6, 12, -12, -6, -12, -13, 5, 0, -9, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 432.4-b";
N := (8*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, -3, 6, -2, -1, 3, -6, -12, -12, -6, 12, 13, -5, 0, 9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.1-a";
N := (-7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, 1, -2, 0, -6, -6, 6, -6, 3, -2, 13, 2, 14, -15, 2, 12, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 433.2-a";
N := (7*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, -2, 1, -6, 0, -6, 6, 3, -6, 13, -2, 14, 2, 2, -15, 0, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-a";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, -4, 2, 6, -6, -6, 8, 0, -2, 6, -12, 4, 8, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-b";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 2, 2, 6, -12, 12, 8, 0, 10, -6, 0, -8, -10, 2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-c";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, 2, -2, -6, 2, 8, -8, -10, 6, -4, 12, 8, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-d";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 4, 2, 6, -6, -6, 0, 8, 6, -2, 4, -12, 8, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-e";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 6, -6, -10, 2, 0, -8, -6, 2, -12, -4, 16, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-f";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -1, -7, 6, 0, 12, -10, 0, -5, 9, 3, 7, -1, 5, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-g";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 6, -2, -4, 0, -4, 12, 6, -10, 8, 8, 6, -10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-h";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, -6, -2, -6, 2, 0, 8, 14, 6, -4, -4, 8, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-i";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, 4, -6, 6, 2, 2, 0, 0, 6, 6, 4, 4, 0, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-j";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 2, 6, -2, 0, -4, 12, -4, -10, 6, 8, 8, -10, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-k";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 1, 1, -10, -12, 8, 8, -2, 1, -9, 3, -1, -15, -1, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-l";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 6, -6, 2, -10, -8, 0, 2, -6, -4, -12, -12, 16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-m";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -2, 2, 6, 12, -12, 0, 8, -6, 10, -8, 0, 2, -10, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-n";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -4, -6, -2, 2, -6, 8, 0, 6, 14, -4, -4, 0, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-o";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 4, 2, -2, 2, -6, -8, 8, 6, -10, 12, -4, 0, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-p";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 1, -7, 6, 12, 0, 0, -10, 9, -5, 7, 3, 5, -1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-q";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 10, -10, 6, 6, 0, 0, 6, 6, 4, 4, 12, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-r";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -5, 1, -10, 8, -12, -2, 8, -9, 1, -1, 3, -1, -15, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-s";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 6, 2, 2, -10, 8, 8, 0, 8, -6, -6, 8, 16, -2, 2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.1-t";
N := (21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 2, -10, 8, 8, 8, 0, -6, -6, 16, 8, 2, -2, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.2-a";
N := (7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 5, -3, -7, 10, 0, -4, 4, 6, -3, 1, 1, 13, -1, -13, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.2-b";
N := (7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 1, -3, 1, -6, 8, 4, -4, -2, 5, -3, 13, -7, -5, 3, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.2-c";
N := (7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, -4, -4, -10, -2, -6, -2, -8, 0, 10, 4, -12, -8, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.2-d";
N := (7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -3, 3, -1, 2, 0, 0, -6, 6, -9, 9, -13, -13, -3, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.2-e";
N := (7*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -4, 4, -2, -10, 10, -2, 8, -8, 2, 12, 12, 0, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-a";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, 2, 8, 4, 4, 6, -8, -2, 12, 2, 8, -12, 8, -12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-b";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 2, 6, -8, -4, 8, 2, -4, 2, 8, 6, 0, 4, -12, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-c";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 4, -4, 0, 0, -10, 8, 4, -8, 12, -4, -4, 0, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-d";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 2, 2, 11, 0, 0, -8, -6, -12, -12, 5, 12, -12, 2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-e";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 2, 0, -2, 5, 8, -10, 2, 2, -10, -6, -15, -8, -6, 0, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-f";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, 2, 10, 10, -2, 12, -4, -10, 14, 4, 4, 4, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-g";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -2, -2, -11, 0, 0, -8, 6, 12, 12, 5, 12, -12, 2, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-h";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, 0, -6, 2, -6, 6, -12, 12, 6, 6, 12, 12, 12, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-i";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 0, 2, -5, -8, -10, 2, -2, 10, 6, -15, -8, -6, 0, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-j";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -4, 4, 0, 0, -10, 8, -4, 8, -12, -4, -4, 0, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-k";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 0, 2, -2, -6, -6, 0, 12, 6, -6, 4, 4, 0, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.4-l";
N := (-9*w + 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 4, -8, 0, 6, -8, -6, 0, -6, 8, -12, 0, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.6-a";
N := (-11*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 4, 4, 4, 4, -6, 4, -12, 8, 0, 12, -12, -12, -8, 16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.6-b";
N := (-11*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 3, -3, 6, 2, 3, 3, -3, -3, 9, -9, 12, 12, 3, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.6-c";
N := (-11*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 2, 6, -4, -12, -10, 8, -2, 4, -2, 0, 4, 8, 16, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.6-d";
N := (-11*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, 0, -6, -2, 4, 6, 0, -12, 12, -12, 12, -4, -4, 0, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.6-e";
N := (-11*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -4, -4, 0, 2, 6, -10, 2, -8, -8, 10, 6, 4, -4, -8, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.6-f";
N := (-11*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -4, -4, -4, -4, -6, -4, 12, 8, 0, -12, -12, -12, -8, 16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.7-a";
N := (10*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -4, 5, -2, -7, -10, 0, -2, 7, -8, -14, 0, 3, 10, 0, 1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.7-b";
N := (10*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -2, 1, 5, 4, -2, -6, 11, 8, 7, 2, -6, 15, -2, 9, 1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.7-c";
N := (10*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -3, -3, 4, -2, -6, -9, 0, -9, -6, -6, -13, -10, -15, -3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.7-d";
N := (10*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 2, -1, -5, -4, 2, -6, -11, -8, 7, -2, 6, 15, -2, 9, 1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.7-e";
N := (10*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 3, 3, -4, 2, -6, 9, 0, -9, 6, 6, -13, -10, -15, -3, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.7-f";
N := (10*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, -3, 3, 6, 2, -3, -3, 3, 3, -9, 9, 12, 12, -3, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.7-g";
N := (10*w + 17)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, -5, 2, 7, 10, 0, 2, -7, -8, 14, 0, 3, 10, 0, 1, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.3-a";
N := (7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, 5, -7, 10, -4, 0, 6, 4, 1, -3, 13, 1, -13, -1, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.3-b";
N := (7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -3, 1, 1, -6, 4, 8, -2, -4, -3, 5, -7, 13, 3, -5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.3-c";
N := (7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -4, -2, -4, -10, -6, -2, -8, -2, 10, 0, -12, 4, 0, -8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.3-d";
N := (7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, 3, -3, -1, 2, 0, 0, 6, -6, 9, -9, -13, -13, 3, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.3-e";
N := (7*w - 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -4, -2, 4, -2, 10, -10, 8, -2, 2, -8, 12, 12, 0, 0, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-a";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 2, 2, 8, 4, 6, 4, -2, -8, 2, 12, -12, 8, -12, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-b";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 6, 2, -8, -4, 2, 8, 2, -4, 6, 8, 4, 0, 0, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-c";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, 0, -4, 0, -10, 0, 4, 8, 12, -8, -4, -4, -8, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-d";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 2, 2, 11, 0, 0, -6, -8, -12, -12, 12, 5, 2, -12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-e";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 0, 2, -2, 5, -10, 8, 2, 2, -6, -10, -8, -15, 0, -6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-f";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, 2, 10, -2, 10, -4, 12, 14, -10, 4, 4, -12, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-g";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, -2, -2, -11, 0, 0, 6, -8, 12, 12, 12, 5, 2, -12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-h";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, 0, -6, 2, 6, -6, 12, -12, 6, 6, 12, 12, 12, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-i";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -2, 2, -5, -10, -8, -2, 2, 6, 10, -8, -15, 0, -6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-j";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 0, 4, 0, -10, 0, -4, 8, -12, 8, -4, -4, -8, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-k";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 0, 2, -2, -6, -6, 12, 0, -6, 6, 4, 4, 0, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.5-l";
N := (9*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -2, -2, 4, -8, 6, 0, -6, -8, -6, 0, -12, 8, -4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.9-a";
N := (11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 4, 4, 4, 4, 4, -6, 8, -12, 12, 0, -12, -12, 16, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.9-b";
N := (11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, -3, 3, 6, 2, 3, 3, -3, -3, -9, 9, 12, 12, -3, 3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.9-c";
N := (11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, 6, 2, -4, -12, 8, -10, 4, -2, 0, -2, 8, 4, -12, 16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.9-d";
N := (11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, -6, 0, -2, 4, 0, 6, 12, -12, 12, -12, -4, -4, 0, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.9-e";
N := (11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -4, 0, -4, 2, 6, 2, -10, -8, -8, 6, 10, -4, 4, 0, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.9-f";
N := (11*w + 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, -4, -4, -4, -4, -4, -6, 8, 12, -12, 0, -12, -12, 16, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.8-a";
N := (10*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -4, -2, 5, -7, -10, -2, 0, -8, 7, 0, -14, 10, 3, 1, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.8-b";
N := (10*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -2, 5, 1, 4, -2, 11, -6, 7, 8, -6, 2, -2, 15, 1, 9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.8-c";
N := (10*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -2, -3, -3, 4, -2, -9, -6, -9, 0, -6, -6, -10, -13, -3, -15, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.8-d";
N := (10*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 2, -5, -1, -4, 2, -11, -6, 7, -8, 6, -2, -2, 15, 1, 9, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.8-e";
N := (10*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 3, 3, -4, 2, 9, -6, -9, 0, 6, 6, -10, -13, -3, -15, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.8-f";
N := (10*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 3, -3, 6, 2, -3, -3, 3, 3, 9, -9, 12, 12, 3, -3, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 441.8-g";
N := (10*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 4, 2, -5, 7, 10, 2, 0, -8, -7, 0, 14, 10, 3, 1, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-a";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -3, 0, -1, -3, 0, -3, 0, 3, 12, 8, -16, -6, 0, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-b";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -4, 1, -2, 1, 9, -4, 3, 6, -11, 4, 0, -14, -6, -8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-c";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, 3, -6, 1, 9, 0, -9, 6, 3, 0, 4, 10, -6, 0, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-d";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 5, 2, -9, 7, 0, -5, -2, -9, 8, -4, -2, 2, 0, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-e";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 0, 0, 10, 6, 0, 12, 0, -6, 6, 4, -8, 12, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-f";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -2, -5, -1, 3, 8, 9, -2, -6, -6, 8, 16, -12, 10, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.1-g";
N := (-10*w + 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 5, 4, -5, -1, -1, 10, -3, 4, -8, -10, -6, 2, 4, 0, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-a";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 0, -3, -1, 0, -3, 0, -3, 12, 3, -16, 8, 0, -6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-b";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, -2, -2, 1, 1, -4, 9, 6, 3, 4, -11, -14, 0, -8, -6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-c";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -2, -6, 3, 1, 0, 9, 6, -9, 0, 3, 10, 4, 0, -6, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-d";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, 5, -9, 0, 7, -2, -5, 8, -9, -2, -4, 0, 2, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-e";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, 0, 0, 10, 0, 6, 0, 12, 6, -6, -8, 4, 12, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-f";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 3, -1, -5, 3, 9, 8, -6, -2, 8, -6, -12, 16, 0, 10, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 444.2-g";
N := (-10*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 5, -1, -5, -1, -3, 10, -8, 4, -6, -10, 4, 2, 8, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.1-a";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 4, 4, -6, -2, -6, 2, 6, -4, -4, 0, -6, -8, -2, -6, 8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.1-b";
N := (-7*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, -5, -6, 0, 4, 3, -3, -2, 2, -8, 2, -9, 2, 8, -10, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.2-a";
N := (-2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 0, 4, -4, 2, -10, 6, 6, 0, 0, 14, -6, 0, -12, 0, -16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.4-a";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 0, -6, 4, -2, -6, 6, 2, -4, -4, -6, 0, -2, -8, 8, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.4-b";
N := (7*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -5, -5, 0, -6, 4, 3, -2, -3, -8, 2, -9, 2, 8, 2, -12, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 447.3-a";
N := (2*w + 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 0, 0, -4, 4, 2, -10, 6, 6, 0, 0, -6, 14, -12, 0, -16, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 448.1-a";
N := (-8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 2, 4, -6, -2, 6, 0, 4, -12, -6, -6, -12, -4, -4, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 448.2-a";
N := (8*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, 4, 2, -6, -2, 0, 6, -12, 4, -6, -6, -4, -12, 0, -4, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 451.1-a";
N := (-6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, 1, -5, -2, -1, 4, 10, 7, -8, -6, 13, 12, -8, -11, 8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 451.1-b";
N := (-6*w + 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 3, -1, 1, 4, 7, 10, 0, 3, 6, 6, 3, 4, 0, 3, -14, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 451.2-a";
N := (7*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, -2, 4, 0, 1, 11, 6, 3, 12, 3, 12, -5, 7, 12, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 451.4-a";
N := (6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -5, 1, -2, -1, 4, 10, -8, 7, 13, -6, -8, 12, 8, -11, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 451.4-b";
N := (6*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, 1, -1, 4, 7, 10, 0, 6, 3, 3, 6, 0, 4, -14, 3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 451.3-a";
N := (7*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 4, -2, 0, 1, 11, 6, 12, 3, 12, 3, 7, -5, -6, 12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 453.2-a";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 3, 3, 6, -3, -2, -6, 6, 0, -3, 3, 6, -3, 9, 0, 0, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 453.2-b";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, 3, 3, 0, 3, 2, 10, 2, 6, 9, -5, 8, -5, 5, -6, 6, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 453.2-c";
N := (7*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -1, -1, -2, 1, -2, 10, 6, 0, 1, 3, 6, 5, 5, 0, -8, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 453.3-a";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, 0, 6, 3, -3, -2, 6, -6, -3, 0, 6, 3, 9, -3, 0, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 453.3-b";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 3, 4, 0, 3, 3, 2, 2, 10, 9, 6, 8, -5, 5, -5, 6, -6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 453.3-c";
N := (7*w - 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -1, 0, -2, -1, 1, -2, 6, 10, 1, 0, 6, 3, 5, 5, -8, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 469.1-a";
N := (-3*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 3, 0, 4, 0, 8, 8, 6, -4, 10, 0, -2, 4, -12, -8, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 469.4-a";
N := (3*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 3, 0, 0, 4, 8, 8, -4, 6, 0, 10, 4, -2, -12, 4, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 471.1-a";
N := (-8*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, -4, 0, 4, 2, 6, -2, -6, -8, -12, 12, -4, -12, 2, -6, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 471.2-a";
N := (-5*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, -2, -3, 3, -2, -10, -9, -6, 3, 9, 12, 6, -14, 4, 6, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 471.4-a";
N := (8*w + 7)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -4, 0, 4, 0, 2, 6, -6, -2, -12, -8, -4, 12, 2, -12, -8, -6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 471.3-a";
N := (5*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 1, 3, -3, -2, -10, -6, -9, 9, 3, 6, 12, 4, -14, 0, 6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-a";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, -4, 0, 6, -2, 6, 6, 4, -8, 2, 12, 12, 0, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-b";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -4, 1, -1, -2, 9, -6, -7, -8, 10, -2, 0, -3, 8, 0, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-c";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, -2, -2, 0, 2, 6, -6, -2, 12, 6, 6, 8, -8, 6, 2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-d";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, 1, 1, 6, -7, -2, -5, -12, 6, 2, -8, 1, 0, 0, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-e";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 2, 2, 4, -2, -2, -10, 10, -8, 6, -6, -16, -8, 6, -10, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-f";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, -6, -4, 2, -2, 6, -2, -8, 6, 6, -4, -8, -2, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-g";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, -5, -3, 2, 9, -6, 7, -12, 6, -6, -4, 1, 12, -16, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.1-h";
N := (-9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 0, 4, 6, 6, 10, -10, -8, -8, -14, 8, 4, -8, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.3-a";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -5, 3, -5, 2, -1, 11, 0, -10, -4, -4, -1, -4, 12, -13, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.3-b";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 5, -2, -2, -2, -1, 12, 3, -10, 1, 8, 7, 15, 3, 7, -12, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.3-c";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, -2, -6, -6, 1, -4, -9, -6, 3, 0, -3, -5, 13, -15, -12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.3-d";
N := (-7*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 0, 3, 3, 3, -6, 7, 3, 0, 6, -12, 12, 15, -12, 12, 3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.4-a";
N := (-4*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 3, -3, -3, -6, 7, -3, 0, -6, 12, -12, 15, -12, -12, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.4-b";
N := (-4*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -5, -3, 5, 2, -1, -11, 0, 10, 4, 4, -1, -4, -12, 13, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.4-c";
N := (-4*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, -1, -3, 3, 8, -1, -3, -6, -12, 0, 12, -13, -4, -6, -3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-a";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, -4, 6, -2, 6, 6, -8, 4, 2, 12, 12, -8, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-b";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -2, -1, 1, -2, 9, -7, -6, 10, -8, -2, -3, 0, 0, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-c";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -4, 0, -2, 2, 6, -2, -6, 6, 12, 6, -8, 8, 2, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-d";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 2, 1, 1, 6, -7, -5, -2, 6, -12, 2, 1, -8, 0, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-e";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -4, 4, 2, -2, -2, 10, -10, 6, -8, -6, -8, -16, -10, 6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-f";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, -4, -6, 2, -2, -2, 6, 6, -8, 6, -8, -4, 6, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-g";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 2, -3, -5, 2, 9, 7, -6, 6, -12, -6, 1, -4, -16, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.2-h";
N := (9*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 4, 0, 6, 6, -10, 10, -8, -8, -14, 4, 8, -12, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.6-a";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -5, 0, -5, 3, 2, -1, 0, 11, -4, -10, -4, -4, -1, -13, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.6-b";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -2, 5, -2, -2, -1, 12, -10, 3, 8, 1, 7, 3, 15, -12, 7, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.6-c";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 1, -6, -6, 1, -4, -6, -9, 0, 3, -3, 13, -5, -12, -15, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.6-d";
N := (7*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 3, 0, 3, 3, -6, 7, 0, 3, -12, 6, 12, -12, 15, 3, 12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.5-a";
N := (4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 3, 0, -3, -3, -6, 7, 0, -3, 12, -6, -12, -12, 15, -3, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.5-b";
N := (4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -5, 0, 5, -3, 2, -1, 0, -11, 4, 10, 4, -4, -1, 13, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 477.5-c";
N := (4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -1, -4, 3, -3, 8, -1, -6, -3, 0, -12, 12, -4, -13, -3, -6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.2-a";
N := (10*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 3, 1, 0, 7, 4, -6, -2, 4, 1, 5, -10, -2, -12, 14, 9, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.2-b";
N := (10*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, -1, 0, -1, 2, 6, 0, 6, -9, 3, 6, -4, -4, 6, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.2-c";
N := (10*w + 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -3, 1, 0, 7, 4, 6, -2, 4, 1, -5, 10, -2, -12, -14, -9, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.3-a";
N := (10*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, 1, 3, 0, 7, 4, -2, -6, 1, 4, -10, 5, -12, -2, 9, 14, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.3-b";
N := (10*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -1, 1, 0, -1, 2, 0, 6, -9, 6, 6, 3, -4, -4, 3, 6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 484.3-c";
N := (10*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 1, -3, 0, 7, 4, -2, 6, 1, 4, 10, -5, -12, -2, -9, -14, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 491.1-a";
N := (12*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 0, -5, 1, 5, -3, -2, 2, -1, -1, -7, 7, 3, -3, 4, -8, 15, -9, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 491.2-a";
N := (-12*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 1, -5, -3, 5, -2, 2, -1, -1, 7, -7, -3, 3, -8, 4, -9, 15, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.1-a";
N := (2*w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -4, -4, 4, -6, 11, 7, 3, 7, -2, 4, -8, -5, 15, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-a";
N := (-8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -4, 0, -6, 2, -6, 8, 0, 2, -2, 16, 4, 16, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.2-b";
N := (-8*w + 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, -3, 2, -4, 8, -8, -12, -2, -6, 4, -12, -2, -3, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.4-a";
N := (2*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -3, 4, -4, -6, 11, 7, 7, 3, 4, -2, -5, -8, 8, 15, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.3-a";
N := (8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, 0, -4, -6, 2, -6, 0, 8, -2, 2, 4, 16, 8, 16, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 492.3-b";
N := (8*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -2, 2, -3, -4, 8, -8, -2, -12, 4, -6, -2, -12, 12, -3, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 497.1-a";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -2, -3, 1, -3, 2, -9, 8, 7, 9, 14, -2, 2, -4, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 497.1-b";
N := (w + 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 3, -2, 0, 0, 6, -6, 0, -2, -12, -8, 6, -6, -8, -8, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 497.4-a";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -2, 1, -3, -3, 2, 8, -9, 9, 7, -2, 14, -4, 2, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 497.4-b";
N := (w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 3, -2, 0, 0, 6, -6, -2, 0, -8, -12, -6, 6, -8, -8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.1-a";
N := (13*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 4, -2, 0, -2, 2, -8, 6, 6, 8, 10, -6, -4, 12, 12, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 507.2-a";
N := (13*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 4, 0, -2, -2, 2, 6, -8, 8, 6, -6, 10, 12, -4, 10, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.1-a";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, -3, 3, 4, -1, -8, -4, 10, -3, 0, 3, -1, 4, 2, 8, 12, -14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.1-b";
N := (-6*w + 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 3, 1, -4, 4, -7, -2, 3, 6, -9, 2, 7, 11, -4, 3, -2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.2-a";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 3, -3, -1, 4, -8, -4, -3, 10, 3, 0, 4, -1, 8, 2, -14, 12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 508.2-b";
N := (6*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 3, 3, -4, 1, 4, -7, 3, -2, -9, 6, 7, 2, -4, 11, -2, 3, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.2-a";
N := (-8*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -2, 0, -3, -2, 2, -6, -12, -12, -6, -6, -9, 10, 4, 0, 6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.2-b";
N := (-8*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, -2, 0, 3, -2, 11, -6, 9, 3, -3, 6, 0, 4, 13, -15, -15, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.2-c";
N := (-8*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -3, -2, -4, -3, 2, 5, -6, -1, -3, -3, 2, 4, -4, 13, -7, -7, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.2-d";
N := (-8*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 2, 6, -3, 2, 2, 6, 6, 0, 0, -6, 3, 8, 14, 12, 6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.2-e";
N := (-8*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 4, 1, 0, 0, 1, 11, 6, -6, -6, 0, 9, -12, 4, -14, 12, 6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.2-f";
N := (-8*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 4, 6, -3, 4, 2, 6, 0, 0, 12, 0, 3, 4, -14, -6, -6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.2-g";
N := (-8*w + 13)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 0, 1, -4, -6, -7, -5, 0, 6, -2, -6, 9, 10, -2, -2, -12, 10, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.3-a";
N := (-8*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -2, -3, 0, -2, 2, -12, -6, -6, -12, -9, -6, 4, 10, 6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.3-b";
N := (-8*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, -2, 3, 0, -2, 11, 9, -6, -3, 3, 0, 6, 13, 4, -15, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.3-c";
N := (-8*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -3, -2, -3, -4, 2, 5, -1, -6, -3, -3, 4, 2, 13, -4, -7, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.3-d";
N := (-8*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 2, -3, 6, 2, 2, 6, 6, 0, 0, 3, -6, 14, 8, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.3-e";
N := (-8*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, 1, 0, 0, 1, 11, -6, 6, 0, -6, -12, 9, -14, 4, 6, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.3-f";
N := (-8*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 4, -3, 6, 4, 2, 0, 6, 12, 0, 3, 0, -14, 4, -6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 511.3-g";
N := (-8*w - 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 0, 1, -6, -4, -7, -5, 6, 0, -6, -2, 10, 9, -2, -2, 10, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 517.2-a";
N := (-3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -3, 0, 0, 0, 6, -2, -6, 0, 0, 6, -6, 12, 0, 6, 6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 517.2-b";
N := (-3*w - 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -3, -4, 4, 0, 2, 0, 2, 6, -2, 2, -2, 0, 12, -6, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 517.3-a";
N := (3*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -3, 0, 0, 0, 6, -2, 0, -6, 0, -6, 6, 0, 12, 6, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 517.3-b";
N := (3*w - 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -3, 4, -4, 0, 2, 0, 6, 2, -2, -2, 2, 12, 0, -4, -6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.2-a";
N := (-11*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, 4, -4, -2, -2, 2, 10, -8, 8, 6, 6, -4, -12, 8, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.2-b";
N := (-11*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -5, 0, -4, 0, 4, 4, 3, -6, -2, 2, 3, -2, 7, -11, -5, -12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.2-c";
N := (-11*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -1, 4, 1, -3, -6, -6, 0, -9, 5, -12, 4, 0, 3, -1, 8, -1, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.3-a";
N := (-11*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, -4, 4, -2, -2, 10, 2, 8, -8, 6, 6, -12, -4, 8, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.3-b";
N := (-11*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, -5, 0, -4, 4, 4, -6, 3, 2, -2, -2, 3, -11, 7, -12, -5, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 519.3-c";
N := (-11*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 4, -1, -3, 1, -6, -6, -9, 0, -12, 5, 0, 4, -1, 3, -1, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 521.1-a";
N := (11*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, -5, 0, 5, -1, -1, -2, 9, 6, -7, -3, 9, 9, 12, 3, -4, 12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 521.2-a";
N := (-11*w + 46)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 2, 0, -5, -1, 5, -1, -2, 6, 9, -3, -7, 9, 9, 3, 12, 12, -4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 525.1-a";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 2, 0, -2, 0, -6, 6, 0, -6, 10, 10, -8, 0, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 525.1-b";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, -4, -4, 2, 2, 2, -12, 0, -6, 2, 0, 4, -8, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 525.1-c";
N := (5*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, 2, 0, -8, -8, 2, 0, -12, -8, 0, -8, -4, 0, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 525.2-a";
N := (-10*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 0, 4, -6, -6, 6, -8, 12, -6, -6, 4, 4, 8, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 525.4-a";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, 0, 2, -2, -6, 0, 0, 6, 10, -6, -8, 10, 8, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 525.4-b";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, -4, -4, 2, 2, 2, 0, -12, 2, -6, 4, 0, 0, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 525.4-c";
N := (5*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 2, 0, 2, -8, 2, -8, -12, 0, 0, -8, -4, -8, 8, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 525.3-a";
N := (10*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 4, 0, -6, 6, -6, 12, -8, -6, -6, 4, 4, -8, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.1-a";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 2, -3, -2, 3, 5, -5, 0, 8, 11, 12, -16, -2, -1, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.1-b";
N := (4*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 5, 4, 7, 7, -1, -12, -6, -3, -4, 2, 8, -7, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-a";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 0, 1, -4, 0, 6, 3, 12, 6, 9, 4, -8, 15, 6, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-b";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -5, 0, 5, -6, 9, 0, -8, -2, -4, -5, 8, 11, -4, -2, 9, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-c";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 0, 2, -2, 12, 6, 8, -4, -6, -6, 2, -8, -10, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.2-d";
N := (-8*w + 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 3, -2, 5, -8, 12, -6, 4, 7, -8, 9, 4, -10, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-a";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -3, -3, -2, 3, -5, 5, 8, 0, 12, 11, -2, -16, 6, -1, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.4-b";
N := (4*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -1, 5, 4, 7, -1, 7, -6, -12, -4, -3, 8, 2, 8, -7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-a";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 0, 1, -4, 6, 0, 12, 3, 9, 6, -8, 4, 6, 15, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-b";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -5, 5, -6, 9, -8, 0, -4, -2, 8, -5, -4, 11, 9, -2, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-c";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -2, 0, 2, -2, 6, 12, -4, 8, -6, -6, -8, 2, 8, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 528.3-d";
N := (8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 1, 3, -2, 5, 12, -8, 4, -6, -8, 7, 4, 9, -5, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-a";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, -3, 1, 3, 3, -2, -6, -3, -7, -9, -13, 3, -9, -4, 0, -3, 1, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-b";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, -2, -2, 2, 2, 1, -12, 2, 2, 3, 3, -6, -6, 8, 8, -3, -3, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 529.1-c";
N := (23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 0, 1, -3, 3, 3, -2, -6, -7, -3, -13, -9, -9, 3, 0, -4, 1, -3, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.1-a";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 1, -4, -2, 11, 2, -5, 0, -5, 11, 8, 8, 7, 11, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.1-b";
N := (7*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 5, 8, -6, -9, 6, -13, 4, 1, -7, -4, 8, 5, -3, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.3-a";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 3, 0, 9, 2, -6, 12, -6, -3, 9, -6, 0, -12, 6, 15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.3-b";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, 1, 6, 7, 8, -3, 0, -6, 0, -6, 9, -8, -11, 6, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.3-c";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, -1, 2, 2, 4, 6, -2, -2, -8, -4, 6, -6, -4, 0, -12, -16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.3-d";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, -4, 4, 6, -8, 1, -8, -4, 9, -13, 9, -6, 3, -12, 9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.3-e";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 1, 2, -3, -4, -2, 6, -9, 0, 3, -3, -3, -2, -14, -15, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.3-f";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, 4, -4, -6, 8, -1, -8, -4, -9, 13, -9, -6, 3, -12, 9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.3-g";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, -3, -4, 1, -6, 6, -8, 10, 5, -1, -2, 8, -4, 2, 9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.3-h";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, -1, -2, -2, -4, -6, 2, -2, -8, 4, -6, 6, -4, 0, -12, -16, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.3-i";
N := (-9*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 1, -1, -6, -7, -8, 3, 0, -6, 0, 6, -9, -8, -11, 6, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.4-a";
N := (-2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, -2, 3, 1, 8, -6, -6, -12, -3, 12, 6, 10, 1, 9, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.4-b";
N := (-2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 3, -3, 0, 9, 2, -12, 6, 3, 6, -6, 9, -12, 0, 15, 6, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.4-c";
N := (-2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -4, -3, -3, -4, 8, -4, -6, 11, -8, 6, 8, -5, 11, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.4-d";
N := (-2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, -2, -5, -7, -8, 2, 2, 4, -3, 4, -10, 2, -7, 13, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.4-e";
N := (-2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, 5, -4, 1, -6, 8, -6, -5, -10, -2, -1, -4, 8, 9, 2, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.4-f";
N := (-2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 1, 2, -3, -1, -8, 6, -6, -12, 3, -12, -6, 10, 1, 9, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.4-g";
N := (-2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, 4, 3, 3, 4, -8, -4, -6, -11, 8, -6, 8, -5, 11, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.4-h";
N := (-2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, -3, 2, 5, 7, 8, -2, 2, 4, 3, -4, 10, 2, -7, 13, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.2-a";
N := (7*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -3, 1, -4, -2, 2, 11, 0, -5, 11, -5, 8, 8, 11, 7, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.2-b";
N := (7*w - 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, 5, 8, -6, 6, -9, 4, -13, -7, 1, 8, -4, -3, 5, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.6-a";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 3, 3, 0, 9, 2, 12, -6, -3, -6, -6, 9, -12, 0, 15, 6, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.6-b";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 1, 1, 6, 7, 8, 0, -3, 0, -6, 9, -6, -11, -8, 12, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.6-c";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, 2, 2, 4, 6, -2, -2, -4, -8, -6, 6, 0, -4, -16, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.6-d";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 1, -4, 4, 6, -8, -8, 1, 9, -4, 9, -13, 3, -6, 9, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.6-e";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, 2, -3, -4, -2, -9, 6, 3, 0, -3, -3, -14, -2, 3, -15, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.6-f";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 4, -4, -6, 8, -8, -1, -9, -4, -9, 13, 3, -6, 9, -12, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.6-g";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, -3, -4, 1, -6, -8, 6, 5, 10, -2, -1, -4, 8, 9, 2, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.6-h";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -1, -2, -2, -4, -6, -2, 2, 4, -8, 6, -6, 0, -4, -16, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.6-i";
N := (9*w - 19)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 1, -1, -6, -7, -8, 0, 3, 0, -6, -9, 6, -11, -8, 12, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.5-a";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, -2, 3, 1, 8, -6, -6, -3, -12, 6, 12, 1, 10, -12, 9, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.5-b";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, -3, 0, 9, 2, 6, -12, 6, 3, 9, -6, 0, -12, 6, 15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.5-c";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, -4, -3, -3, -4, -4, 8, 11, -6, 6, -8, -5, 8, 6, 11, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.5-d";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, -3, -2, -5, -7, -8, 2, 2, -3, 4, -10, 4, -7, 2, -4, 13, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.5-e";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 1, 5, -4, 1, -6, -6, 8, -10, -5, -1, -2, 8, -4, 2, 9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.5-f";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 1, 2, -3, -1, -8, -6, 6, 3, -12, -6, -12, 1, 10, -12, 9, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.5-g";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 4, 3, 3, 4, -4, -8, -11, -6, -6, 8, -5, 8, 6, 11, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 539.5-h";
N := (2*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -3, 2, 5, 7, 8, 2, -2, 3, 4, 10, -4, -7, 2, -4, 13, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.1-a";
N := (12*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 2, -1, 0, 3, 2, 2, -3, -6, 6, 12, -6, -9, 2, 8, -3, 9, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 548.2-a";
N := (-12*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -1, 2, 3, 0, 2, 2, -6, -3, 12, 6, -9, -6, 8, 2, 9, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.1-a";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 1, -4, 0, 2, 3, 1, 8, -10, -4, 9, -6, -11, -3, -14, 4, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.1-b";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -2, 2, 6, 2, -3, 4, -7, 5, 8, 0, -9, -8, -12, -14, 7, -1, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.1-c";
N := (-8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -2, 2, -2, -2, 5, -8, 5, 9, 8, 0, 1, 0, 12, -14, 5, 9, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.2-a";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, 1, 2, 0, 3, 1, -10, 8, 9, -4, -11, -6, -14, -3, 8, 4, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.2-b";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 2, -2, 2, 6, -3, 4, 5, -7, 0, 8, -8, -9, -14, -12, -1, 7, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 556.2-c";
N := (8*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, -2, -2, -2, 5, -8, 9, 5, 0, 8, 0, 1, -14, 12, 9, 5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.1-a";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 0, -4, 2, 2, 2, 10, 8, 2, -10, -6, 4, 10, 4, -10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.1-b";
N := (-8*w - 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -3, -1, 3, -4, 0, 2, 3, 3, 9, 6, 1, 13, -10, 5, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.2-a";
N := (-10*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, 1, 3, -6, 4, 3, 6, -9, 14, 3, 15, -5, -7, 16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.2-b";
N := (-10*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, -5, 3, 2, -8, -7, 2, -7, -2, -1, -11, 3, 7, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.2-c";
N := (-10*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, -5, -5, 4, -8, 9, 2, -3, -2, 1, -9, 7, -9, -8, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.2-d";
N := (-10*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 2, -3, -5, 2, 6, -9, -6, -11, -6, 3, 13, 15, 7, -2, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.4-a";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 4, 2, -4, 2, 2, 8, 10, 2, -6, -10, 10, 4, -10, 4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.4-b";
N := (8*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 3, -1, -4, 0, 3, 2, 3, 6, 9, 13, 1, 5, -10, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.3-a";
N := (-10*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -1, 3, 1, -6, 4, 6, 3, -9, 3, 14, -5, 15, 16, -7, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.3-b";
N := (-10*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 3, 3, -5, 2, -8, 2, -7, -7, -1, -2, 3, -11, -12, 7, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.3-c";
N := (-10*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 1, -5, -5, 4, -8, 2, 9, -3, 1, -2, 7, -9, -8, -9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 564.3-d";
N := (-10*w - 14)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 3, -5, -3, 2, 6, -6, -9, -11, 3, -6, 15, 13, -2, 7, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-a";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, -6, -4, 12, -10, 8, -2, 4, 2, 0, -4, -8, 16, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-b";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 2, 2, -2, 2, 6, -8, -2, -10, 14, 0, -12, -4, 6, 10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-c";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 0, -2, 2, 6, -6, 12, 0, -6, 6, 4, 4, 0, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-d";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -2, -4, 8, -6, 0, -6, 8, -6, 0, -12, 8, 4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-e";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -4, -4, 4, -4, -6, 10, -8, 2, 2, 6, 12, 8, 6, 10, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-f";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, 8, 8, -6, 6, 12, -6, -6, -6, -4, 8, 6, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-g";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 6, 2, 8, 4, -2, 8, 2, 4, 6, 8, 4, 0, 0, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-h";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, -8, 8, 6, 6, 12, 6, 6, -6, 4, -8, -6, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-i";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, -2, -10, 2, 10, -4, -12, 14, -10, 4, 4, 12, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-j";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 6, -2, -4, 6, 0, -12, 12, 12, 12, 4, 4, 0, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-k";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -4, 4, -4, -4, 6, 10, -8, -2, -2, 6, -12, -8, -6, 10, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-l";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, 2, -8, -4, -6, 4, -2, 8, 2, 12, -12, 8, 12, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-m";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 2, -2, 2, 2, -6, -8, -2, 10, -14, 0, 12, 4, -6, 10, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.1-n";
N := (-9*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -4, 0, 2, -6, -10, 2, -8, -8, -10, 6, -4, 4, -8, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-a";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 6, 3, 2, 2, 9, 0, -6, -6, 12, -6, -4, 5, 6, 3, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-b";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 6, -1, -3, 4, -2, -4, -4, 4, -12, -13, -8, -4, 12, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-c";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, 3, -3, -4, 8, -12, 9, -9, -6, -9, -6, -4, 5, 6, 12, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-d";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, 0, 6, -1, -7, -6, 12, -6, -12, 6, 6, -13, -4, -12, -6, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-e";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 0, 1, -9, -2, 8, 4, -10, 4, -6, -5, -4, -4, 6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-f";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 3, -5, -4, -8, 2, 1, -5, -4, 9, -2, 4, -9, 12, 6, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-g";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, -2, 4, -5, 5, 0, 2, 2, 10, -2, -12, 3, -4, -12, 8, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-h";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 2, 4, 5, 5, 0, -2, -2, 10, -2, 12, -3, 4, -12, -8, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-i";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -3, -5, 4, -8, 2, -1, 5, -4, 9, 2, -4, 9, 12, -6, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-j";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -2, 0, -1, -9, -2, -8, -4, -10, 4, 6, 5, 4, -4, -6, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-k";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 1, 0, 6, 1, -7, -6, -12, 6, -12, 6, -6, 13, 4, -12, 6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-l";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -3, -3, 4, 8, -12, -9, 9, -6, -9, 6, 4, -5, 6, -12, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-m";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, 6, 1, -3, 4, 2, 4, -4, 4, 12, 13, 8, -4, -12, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.3-n";
N := (-3*w - 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, 3, -2, 2, 9, 0, 6, -6, 12, 6, 4, -5, 6, -3, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.4-a";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 0, 2, -4, -7, -4, 3, 4, -5, -7, -10, -10, 13, 3, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.4-b";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 0, -2, -8, -5, -8, 7, -8, 1, -9, 6, 2, 9, 15, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.4-c";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -4, 4, 2, 8, 5, 0, 11, 8, -9, -1, -2, 6, -1, 3, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.4-d";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 4, 4, -2, 8, 5, 0, -11, 8, -9, 1, 2, -6, -1, -3, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.4-e";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, 0, 2, -8, -5, 8, -7, -8, 1, 9, -6, -2, 9, -15, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.4-f";
N := (-6*w + 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, 0, -2, -4, -7, 4, -3, 4, -5, 7, 10, 10, 13, -3, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.7-a";
N := (-8*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, 3, 3, -8, 8, -6, -6, -9, 6, 6, 6, -8, -2, 0, -6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.7-b";
N := (-8*w - 1)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, -3, 3, 8, 8, -6, 6, 9, 6, 6, -6, 8, 2, 0, 6, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.8-a";
N := (11*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 6, 6, -2, 8, -6, 3, -3, -12, 0, 6, 4, 13, 9, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.8-b";
N := (11*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 1, 3, 4, 4, -6, -5, 2, 4, 2, 3, -7, 2, -5, -15, -8, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.8-c";
N := (11*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 0, 0, -2, -10, 12, 9, -9, -6, -12, 6, 4, -5, -15, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.8-d";
N := (11*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, 0, 2, -10, 12, -9, 9, -6, -12, -6, -4, 5, -15, 0, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.8-e";
N := (11*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -1, -3, 4, -4, -6, -5, -2, -4, 2, 3, 7, -2, 5, -15, 8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.8-f";
N := (11*w - 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, -6, 6, 2, 8, -6, -3, 3, -12, 0, -6, -4, -13, 9, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-a";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -6, 2, -4, 12, 8, -10, 4, -2, 0, 2, -8, -4, 12, 16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-b";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 2, 2, -2, 2, -8, 6, -10, -2, 0, 14, -4, -12, 10, 6, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-c";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 0, 0, -2, 2, -6, 6, 0, 12, 6, -6, 4, 4, 0, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-d";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, -2, -4, 8, 0, -6, 8, -6, 0, -6, 8, -12, 0, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-e";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, -4, -4, 4, -4, 10, -6, 2, -8, 6, 2, 8, 12, 10, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-f";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 0, 8, 8, 6, -6, -6, 12, -6, -6, 8, -4, -6, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-g";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 2, 6, 8, 4, 8, -2, 4, 2, 8, 6, 0, 4, 12, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-h";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, 0, -8, 8, 6, 6, 6, 12, -6, 6, -8, 4, -6, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-i";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, 0, -2, -10, 10, 2, -12, -4, -10, 14, 4, 4, -4, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-j";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 6, 0, -2, -4, 0, 6, 12, -12, 12, 12, 4, 4, 0, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-k";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 4, -4, -4, -4, 10, 6, -2, -8, 6, -2, -8, -12, 10, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-l";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 2, 2, -8, -4, 4, -6, 8, -2, 12, 2, 8, -12, -8, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-m";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -2, 2, 2, 2, -8, -6, 10, -2, 0, -14, 4, 12, 10, -6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.2-n";
N := (9*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, 0, -4, 2, -6, 2, -10, -8, -8, 6, -10, 4, -4, 0, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-a";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 3, 6, 2, 2, 0, 9, -6, -6, -6, 12, 5, -4, 3, 6, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-b";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 6, 4, -1, -3, -2, 4, -4, -4, -12, 4, -8, -13, 12, -4, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-c";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -4, -3, 3, -4, 8, 9, -12, -6, -9, -6, -9, 5, -4, 12, 6, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-d";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -1, 6, 0, -1, -7, 12, -6, -12, -6, 6, 6, -4, -13, -6, -12, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-e";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 0, 2, 1, -9, 8, -2, -10, 4, -6, 4, -4, -5, 6, -4, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-f";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -5, 3, -4, -8, 1, 2, -4, -5, -2, 9, -9, 4, 6, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-g";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -5, 4, -2, -5, 5, 2, 0, 10, 2, -12, -2, -4, 3, 8, -12, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-h";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 5, 4, 2, 5, 5, -2, 0, 10, -2, 12, -2, 4, -3, -8, -12, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-i";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -5, -3, 4, -8, -1, 2, -4, 5, 2, 9, 9, -4, -6, 12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-j";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -2, -1, -9, -8, -2, -10, -4, 6, 4, 4, 5, -6, -4, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-k";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 1, 6, 0, 1, -7, -12, -6, -12, 6, -6, 6, 4, 13, 6, -12, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-l";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -3, -3, 4, 8, -9, -12, -6, 9, 6, -9, -5, 4, -12, 6, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-m";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 6, -4, 1, -3, 2, 4, -4, 4, 12, 4, 8, 13, -12, -4, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.6-n";
N := (-3*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 3, -6, -2, 2, 0, 9, -6, 6, 6, 12, -5, 4, -3, 6, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.5-a";
N := (-6*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 0, 2, -4, -4, -7, 4, 3, -7, -5, -10, -10, 3, 13, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.5-b";
N := (-6*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -4, -2, -8, -8, -5, -8, 7, -9, 1, 2, 6, 15, 9, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.5-c";
N := (-6*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 4, -4, 2, 8, 0, 5, 8, 11, -1, -9, 6, -2, 3, -1, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.5-d";
N := (-6*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 4, 4, -2, 8, 0, 5, 8, -11, 1, -9, -6, 2, -3, -1, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.5-e";
N := (-6*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 4, 2, -8, 8, -5, -8, -7, 9, 1, -2, -6, -15, 9, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.5-f";
N := (-6*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 0, 0, -2, -4, 4, -7, 4, -3, 7, -5, 10, 10, -3, 13, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.10-a";
N := (8*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -5, 3, 3, -8, 8, -6, -6, 6, -9, 6, 6, -2, -8, -6, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.10-b";
N := (8*w - 9)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 5, 3, -3, 8, 8, 6, -6, 6, 9, -6, 6, 2, 8, 6, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.9-a";
N := (-11*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 6, 6, -2, 8, 3, -6, -12, -3, 6, 0, 13, 4, 12, 9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.9-b";
N := (-11*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, 1, 4, 3, 4, -6, 2, -5, 2, 4, -7, 3, -5, 2, -8, -15, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.9-c";
N := (-11*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 0, 0, -2, -10, 9, 12, -6, -9, 6, -12, -5, 4, 0, -15, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.9-d";
N := (-11*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 0, 0, 2, -10, -9, 12, -6, 9, -6, -12, 5, -4, 0, -15, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.9-e";
N := (-11*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, -1, 4, -3, -4, -6, -2, -5, 2, -4, 7, 3, 5, -2, 8, -15, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 567.9-f";
N := (-11*w - 18)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 2, 6, -6, 2, 8, -3, -6, -12, 3, -6, 0, -13, -4, -12, 9, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-a";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -4, -4, -4, -2, -10, 10, 2, 0, -8, -10, 6, 0, -8, 0, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-b";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, -2, -2, 0, -4, -6, 10, -12, -2, 12, 10, -4, -4, 2, 16, -14, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-c";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 0, 2, -2, 6, -6, 0, 4, 10, -10, -12, 8, 4, 16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-d";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 4, 0, -2, -10, 6, -6, 8, -4, -6, 6, -8, -12, -4, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-e";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 4, 10, -2, 10, 10, 8, 8, 6, 6, -4, -4, 0, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-f";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 2, -4, 2, 8, -6, -4, 2, -8, 2, 10, 8, -2, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-g";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [4, 0, 0, -4, 2, -10, 2, 6, -4, 8, -2, 2, -8, -4, -8, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-h";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -4, -8, 10, 6, 2, 0, -4, 2, 6, 2, -6, 12, 8, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-i";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 4, 0, -6, -2, -2, 2, 0, 12, -6, -2, 12, -16, 12, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-j";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 1, -5, 2, 0, 2, 6, -4, 0, -9, -3, 4, -8, -2, 2, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-k";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 0, 0, 4, -6, 2, 2, 8, -8, -2, -10, -14, -2, 0, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-l";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -5, 1, 2, 0, 6, 2, 0, -4, -3, -9, -8, 4, 2, -2, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-m";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 4, -4, -4, 2, -2, -2, 12, 4, 2, -6, -6, -10, -12, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-n";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 4, -4, 0, 2, -10, 6, 2, 8, -4, 2, -2, -4, -8, 12, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-o";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -4, -4, -2, 8, 2, 4, -2, -8, 6, 12, -10, 2, 12, 2, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-p";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [5, 1, -1, 5, 2, 8, 6, -6, 0, 4, 5, -5, 8, -12, -6, 6, 5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-q";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, 4, -6, -2, 2, -2, 12, 0, -2, -6, -16, 12, 0, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-r";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 4, 2, 6, 2, -6, 8, 0, 6, 6, 4, 4, -8, -16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-s";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, 0, 4, -6, 2, 2, -8, 8, -10, -2, -2, -14, 0, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-t";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, -4, -4, -2, -10, 2, 10, -8, 0, 6, -10, -8, 0, -8, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-u";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, 0, 4, -2, -10, -6, 6, -4, 8, 6, -6, -12, -8, 8, -4, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-v";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, 0, -8, 10, 2, 6, -4, 0, 6, 2, -6, 2, 8, 12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-w";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, -4, 2, -6, 8, 2, -4, 2, -8, 8, 10, 0, -2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-x";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, -2, -2, -4, 8, 2, -2, 4, 6, -8, -10, 12, 12, 2, 12, 2, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-y";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 4, -6, 6, -6, -6, 0, 0, -2, -2, -4, -4, 8, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-z";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, -5, 3, 6, 4, -2, -10, 12, -12, -9, -5, 12, -4, 6, 6, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-aa";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, 4, -4, 2, -2, -2, 4, 12, -6, 2, -10, -6, -4, -12, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-ab";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 4, 4, 2, 6, -6, 2, 0, 8, 6, 6, 4, 4, -16, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-ac";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 0, 0, 4, 2, -2, -6, 6, 4, 0, -10, 10, 8, -12, 16, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-ad";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -4, 0, 4, -6, -6, -10, -12, -8, 6, -6, 2, 10, -16, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-ae";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 5, -1, 2, 8, -6, 6, 4, 0, -5, 5, -12, 8, 6, -6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-af";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, -4, 4, -6, -10, -6, -8, -12, -6, 6, 10, 2, 4, -16, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-ag";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 3, -5, 6, 4, -10, -2, -12, 12, -5, -9, -4, 12, 6, 6, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.1-ah";
N := (24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 0, -2, -4, -6, -12, 10, 12, -2, -4, 10, 2, -4, -14, 16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-a";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, 3, 3, 1, 2, -2, -9, 1, -7, 3, -1, 9, -12, 4, 13, -9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-b";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -1, 6, 2, -8, -3, -9, -2, -3, -1, -2, 10, 13, -2, 8, 7, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-c";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, 2, -2, -4, 5, -7, 2, -3, -7, 10, -6, 3, 2, 0, 7, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-d";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 4, 2, -6, -6, 0, 10, 8, 6, 0, -10, -4, 2, 10, 8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-e";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -1, -1, -3, 2, -2, -1, 9, -3, 7, -9, 1, 4, -12, 9, -13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.2-f";
N := (8*w)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -3, -6, -2, -4, 1, -3, 10, 5, -3, 2, -6, 3, 10, -8, 15, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-a";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -1, 1, 3, 2, -2, 1, -9, 3, -7, 9, -1, 4, -12, -9, 13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-b";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 2, 2, 6, -8, -3, -2, -9, -1, -3, 10, -2, -2, 13, 7, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-c";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 2, -2, 2, -4, 5, 2, -7, -7, -3, -6, 10, 2, 3, 7, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-d";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 2, 4, -6, -6, 10, 0, 6, 8, -10, 0, 2, -4, 8, 10, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-e";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 3, -3, -1, 2, -2, 9, -1, 7, -3, 1, -9, -12, 4, -13, 9, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 576.3-f";
N := (8*w - 8)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, 2, -2, -6, -4, 1, 10, -3, -3, 5, -6, 2, 10, 3, 15, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 581.2-a";
N := (-4*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 1, 1, 0, 4, -2, -7, -9, 6, 8, -7, 5, 4, 5, 2, -3, 10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 581.3-a";
N := (4*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 1, 1, 4, 0, -2, -7, 6, -9, -7, 8, 4, 5, 2, 5, 10, -3, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 583.2-a";
N := (9*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 1, 3, -1, 2, 1, -10, -2, -6, -7, -2, -13, -8, -2, 15, -10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 583.2-b";
N := (9*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 3, 3, 1, 2, -3, -2, 6, -2, 13, -10, 9, 8, 2, 5, -6, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 583.3-a";
N := (-9*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, -1, 3, 2, 1, -10, -6, -2, -2, -7, -13, -2, -8, -10, 15, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 583.3-b";
N := (-9*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 3, 1, 3, 2, -3, -2, -2, 6, -10, 13, 9, 2, 8, -6, 5, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-a";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 6, 0, -8, 2, -6, -6, -6, 0, 0, 6, 4, 4, 0, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-b";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 5, 2, 1, 9, 5, -1, 9, 6, -6, 9, -15, 6, -5, 10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-c";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 0, 1, -7, -9, 9, -3, 0, -6, -3, -5, 4, 3, 12, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-d";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -6, -6, 0, 2, 2, -12, -8, -12, -4, 0, 8, -8, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-e";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -6, -6, 10, 10, 0, 0, -6, 2, -4, 12, 0, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-f";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, -2, 1, 1, 3, -7, 3, -6, 10, 1, -3, -14, -9, 10, 17];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-g";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -4, -7, 1, -3, -5, -5, 0, -6, 5, 7, 8, 15, 4, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-h";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, 0, 3, -1, -3, -7, -3, 4, -2, -13, 7, -8, -9, 4, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-i";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 2, 1, -7, -3, 7, -7, -2, -6, 9, -7, -2, -13, 2, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-j";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -4, -2, 4, 4, 2, -6, 6, -8, 10, 12, -8, 12, 0, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.1-k";
N := (14*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 4, -1, -5, -3, -3, 13, -8, -2, -9, -5, -12, 7, 0, 15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-a";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -6, -3, 1, 10, 6, 0, 0, -9, 0, 6, -10, 5, 15, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-b";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, 4, 7, -7, 2, -7, -3, -14, 6, 13, -2, -8, -13, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-c";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -2, -3, 1, 2, 10, 0, -12, 3, -8, 2, -2, -11, -5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-d";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 0, 3, -1, -2, 0, 12, 6, 3, -12, -12, -14, -5, -9, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-e";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 1, 0, -5, -7, -2, -9, 3, -9, 4, -10, -11, 1, 4, -9, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-f";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, 2, 8, -1, 3, -10, -3, 3, -10, -10, 3, 10, 0, 7, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-g";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -3, 1, 2, 0, 12, 6, -3, 12, 12, -14, -5, -9, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-h";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 2, -2, -10, 0, 6, 4, -4, 2, -6, 4, 12, 16, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-i";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 2, 3, -1, -2, -10, 0, -12, -3, 8, -2, -2, -11, -5, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-j";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 5, 2, -7, -5, 10, -9, 9, 11, 12, 14, -1, -13, -4, -3, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-k";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 3, 0, -1, 7, 6, 3, 3, -9, 0, -6, -5, -5, 0, -9, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.3-l";
N := (2*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 6, 3, -1, -10, -6, 0, 0, 9, 0, -6, -10, 5, 15, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.4-a";
N := (8*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, -2, 4, 7, 7, -2, 7, 3, -14, 6, 13, -2, -8, -13, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.4-b";
N := (8*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -2, -4, -4, 4, -6, 10, 12, -8, 12, 0, -12, 0, -16, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.4-c";
N := (8*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, -4, -2, 6, 12, 6, 12, 0, 6, 4, 4, -12, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.4-d";
N := (8*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 2, -2, 4, 2, -10, -12, -8, 0, 0, 8, 0, 0, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.4-e";
N := (8*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 2, -4, -4, -6, -8, 6, 12, 2, 8, 12, -8, 0, 4, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.4-f";
N := (8*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 4, 4, -4, -6, -10, -12, -8, -12, 0, -12, 0, -16, -8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.4-g";
N := (8*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, 2, 2, 8, -1, -3, 10, 3, -3, -10, -10, 3, 10, 0, 7, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.4-h";
N := (8*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, 2, -2, 6, -8, -6, 2, -4, 0, 12, 4, -8, -8, 8, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.4-i";
N := (8*w - 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 6, 0, 8, 7, 9, 0, 3, -9, 6, -6, -5, 4, 12, -15, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-a";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 6, -8, 2, -6, -6, 0, -6, 6, 0, 4, 4, 0, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-b";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 5, 1, 9, -1, 5, 6, 9, 9, -6, 6, -15, 10, -5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-c";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 1, -7, 9, -9, 0, -3, -3, -6, 4, -5, 12, 3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-d";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -6, 2, -6, 0, 2, 2, -8, -12, -4, -12, 8, 0, 0, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-e";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 0, -6, -6, 10, 10, 0, 0, 2, -6, 12, -4, 0, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-f";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 1, 1, 1, -7, 3, -6, 3, 1, 10, -14, -3, 10, -9, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-g";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, -1, -7, 1, -5, -3, 0, -5, 5, -6, 8, 7, 4, 15, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-h";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, 3, -1, -7, -3, 4, -3, -13, -2, -8, 7, 4, -9, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-i";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, 1, -7, 7, -3, -2, -7, 9, -6, -2, -7, 2, -13, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-j";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, -4, 4, 4, -6, 2, -8, 6, 12, 10, 12, -8, -12, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.2-k";
N := (14*w + 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 4, -3, -1, -5, -3, -3, -8, 13, -9, -2, -12, -5, 0, 7, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-a";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -3, -6, 1, 10, 0, 6, -9, 0, 6, 0, 5, -10, 0, 15, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-b";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -2, -2, 4, 7, 2, -7, -3, -7, 6, -14, -2, 13, -13, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-c";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -3, -2, 1, 2, 0, 10, 3, -12, 2, -8, -11, -2, 0, -5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-d";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 3, 0, -1, -2, 12, 0, 3, 6, -12, -12, -5, -14, -12, -9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-e";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, 1, -5, -7, -9, -2, -9, 3, -10, 4, 1, -11, -9, 4, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-f";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 2, 2, 8, -1, -10, 3, 3, -3, -10, -10, 10, 3, 7, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-g";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -3, 0, 1, 2, 12, 0, -3, 6, 12, 12, -5, -14, -12, -9, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-h";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 0, -2, -10, 6, 0, -4, 4, -6, 2, 12, 4, 12, 16, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-i";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 2, -1, -2, 0, -10, -3, -12, -2, 8, -11, -2, 0, -5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-j";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 2, 5, -7, -5, -9, 10, 11, 9, 14, 12, -13, -1, -3, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-k";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 0, 3, -1, 7, 3, 6, -9, 3, -6, 0, -5, -5, -9, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.6-l";
N := (-2*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 3, 6, -1, -10, 0, -6, 9, 0, -6, 0, 5, -10, 0, 15, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.5-a";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -3, -2, -2, 4, 7, -2, 7, 3, 7, 6, -14, -2, 13, -13, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.5-b";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -4, -2, -4, 4, 10, -6, -8, 12, 0, 12, 0, -12, -8, -16, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.5-c";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 0, 0, -4, -2, 12, 6, 12, 6, 6, 0, 4, 4, 0, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.5-d";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, 2, -2, 4, -10, 2, -8, -12, 0, 0, 0, 8, -8, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.5-e";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 2, -4, -4, -8, -6, 12, 6, 8, 2, -8, 12, 4, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.5-f";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 4, 2, 4, -4, -10, -6, -8, -12, 0, -12, 0, -12, -8, -16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.5-g";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -5, 2, 2, 8, -1, 10, -3, -3, 3, -10, -10, 10, 3, 7, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.5-h";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 4, -2, 2, 6, -8, 2, -6, 0, -4, 4, 12, -8, -8, 0, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 588.5-i";
N := (8*w - 2)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 0, 6, 8, 7, 0, 9, -9, 3, -6, 6, 4, -5, -15, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 591.2-a";
N := (-8*w + 5)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -2, -4, 0, 4, -6, 10, 12, 6, 4, 12, 8, -6, 2, 4, -12, -10, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 591.3-a";
N := (-8*w + 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, -2, 4, 0, -6, 10, 6, 12, 12, 4, -6, 8, 4, 2, -10, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 592.1-a";
N := (-8*w + 4)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -3, -3, 5, 5, 6, -9, -9, -7, -7, 9, 9, -12, -12, 3, 3, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 599.1-a";
N := (-13*w + 53)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -1, 1, -1, 3, 3, 1, -11, -5, 3, 6, 7, 4, -10, -3, 16, 9, -14, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 599.2-a";
N := (-13*w - 40)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, -1, -1, 1, 3, 3, 1, -11, 3, -5, 7, 6, -10, 4, 16, -3, -14, 9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.1-a";
N := (12*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 0, 0, -2, -2, 6, -6, 0, 4, -6, 6, 0, -12, 8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.1-b";
N := (12*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, 4, -4, -6, 6, 2, -6, 0, 0, -2, 6, -4, 8, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.3-a";
N := (-7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -2, -3, -5, 3, 1, -10, 3, 5, -2, 9, 5, -5, -9, -4, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.3-b";
N := (-7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 3, 1, 3, -5, -2, -10, -3, 5, -9, 9, -3, 5, 8, -5, -7, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.3-c";
N := (-7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -2, -3, -5, 3, 3, -2, -9, -9, -2, 1, 9, -3, -13, 0, -6, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.3-d";
N := (-7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 2, 3, -5, -3, -1, -10, -3, 5, -2, -9, -5, -5, 9, 4, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.3-e";
N := (-7*w + 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 0, -2, 0, -2, -2, 2, 6, -10, 0, 6, -6, 2, 2, -2, 8, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.4-a";
N := (11*w - 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 3, 1, -3, 5, -2, -10, 3, -5, 9, -9, 3, -5, 8, 5, 7, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.4-b";
N := (11*w - 47)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 4, -2, -3, 0, -7, -3, 2, 0, -2, -1, -12, 0, 8, 15, -8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.2-a";
N := (-12*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, 0, -2, -2, -6, 6, 4, 0, 6, -6, 0, 8, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.2-b";
N := (-12*w - 21)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -4, 4, -6, 6, -6, 2, 0, 0, 6, -2, -4, 8, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.6-a";
N := (7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -3, -2, 3, -5, 1, -10, 5, 3, 9, -2, -5, 5, -9, -8, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.6-b";
N := (7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 1, 3, -5, 3, -2, -10, 5, -3, 9, -9, 5, -3, 8, -7, -5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.6-c";
N := (7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -3, -2, 3, -5, 3, -2, -9, -9, 1, -2, -3, 9, -13, -6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.6-d";
N := (7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 3, 2, -3, -5, -1, -10, 5, -3, -9, -2, -5, -5, 9, -8, 4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.6-e";
N := (7*w + 29)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -2, 0, -2, 0, -2, 2, -10, 6, 6, 0, 2, -6, 2, 8, -2, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.5-a";
N := (-11*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 1, 3, 5, -3, -2, -10, -5, 3, -9, 9, -5, 3, 8, 7, 5, -1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 603.5-b";
N := (-11*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -2, 4, 0, -3, -7, -3, 0, 2, -1, -2, 0, -12, 8, -8, 15, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.1-a";
N := (-12*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 0, 6, 2, 2, -6, -10, 6, 8, 0, -2, 0, -12, 10, -8, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.1-b";
N := (-12*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 1, 3, 0, 1, 2, -3, 6, 3, -12, -6, -6, -14, -14, 12, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.1-c";
N := (-12*w + 50)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 5, 0, -4, -3, 7, 4, -10, -4, 3, -10, -12, -5, 13, 5, -8, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.2-a";
N := (-12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 0, 2, 6, 2, -6, 6, -10, 0, 8, 0, -2, 10, -12, 8, -8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.2-b";
N := (-12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 1, 1, 0, 3, 1, 2, 6, -3, -12, 3, -6, -6, -14, -14, 0, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 604.2-c";
N := (-12*w - 38)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 5, -3, -4, 7, 4, -4, -10, -10, 3, -5, -12, 5, 13, -12, -8, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-a";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, 0, 3, -1, 1, 1, 10, -7, 9, 7, 3, 9, -3, 4, -4, 5, -11, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-b";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, 4, -1, -1, -3, -3, -2, -3, -3, 3, 3, 9, 9, -4, -4, 9, 9, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-c";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, -3, -3, -3, -3, 2, -3, -3, -3, -3, -9, -9, 12, 12, -3, -3, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 625.1-d";
N := (25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -1, 0, -1, 3, 1, 1, 10, 9, -7, 3, 7, -3, 9, -4, 4, -11, 5, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.1-a";
N := (-6*w - 28)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 3, 3, 0, 1, -2, -10, -6, -6, -6, 1, -12, 6, -7, -2, 10, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 628.2-a";
N := (6*w - 34)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -2, 3, 3, 1, 0, -2, -10, -6, -6, 1, -6, 6, -12, -2, -7, 0, 10, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 633.2-a";
N := (13*w + 24)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 4, 0, 0, 4, -2, -8, -8, 0, 12, 8, 0, 10, -12, -2, -2, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 633.3-a";
N := (13*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 4, 4, 0, -2, -8, 0, -8, 8, 12, 10, 0, -2, -12, 0, -2, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-a";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 3, 2, 4, -6, 11, -9, -4, -3, -3, 4, -15, 14, 16, -13, 1];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-b";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 1, 6, 2, -4, -3, 1, 10, 5, -3, 6, 7, 2, 0, -1, -13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-c";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 5, 1, 6, -7, 0, 5, 6, -6, -2, 6, -1, -5, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-d";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, -1, -6, 4, 2, 3, 7, -12, 9, -3, -12, 1, -10, 8, 15, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-e";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, -3, 2, 6, 4, -7, -3, -2, -11, -7, 2, 7, -14, 8, 15, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.1-f";
N := (-10*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -4, -1, -5, -4, 3, 2, 5, -4, -8, 8, 16, -3, -9, 6, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.2-a";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, 5, 0, 0, 8, 11, 3, -12, -3, 3, 6, -7, 2, 0, -3, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.2-b";
N := (-4*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 0, -4, 6, 10, -6, -8, -4, 10, 8, 6, -4, -4, 0, -16, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.4-a";
N := (10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 3, -2, 4, 2, -6, 11, -4, -9, -3, -3, 4, 14, -15, -13, 16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.4-b";
N := (10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 1, -2, 2, 6, -4, -3, 10, 1, -3, 5, 6, 2, 7, -1, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.4-c";
N := (10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 1, 1, 5, 6, -7, 5, 0, -6, 6, -2, -1, 6, -16, -5, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.4-d";
N := (10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 4, -6, 2, 3, -12, 7, -3, 9, -12, -10, 1, 15, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.4-e";
N := (10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, 2, 6, 2, 4, -7, -2, -3, -7, -11, 2, -14, 7, 15, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.4-f";
N := (10*w - 22)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -4, -3, -5, -1, -4, 3, 5, 2, -8, -4, 8, -3, 16, 6, -9, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.3-a";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 5, 2, 0, 0, 8, 11, -12, 3, 3, -3, 6, 2, -7, -3, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 636.3-b";
N := (4*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 2, 6, -4, 10, -6, -4, -8, 8, 10, 6, -4, -4, -16, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.1-a";
N := (-9*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 2, -5, -7, 2, -10, 3, -6, -3, -2, -2, -13, 8, -10, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.1-b";
N := (-9*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -5, 2, 6, -1, 7, 6, 0, -3, -6, -7, 6, 4, -11, 0, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.1-c";
N := (-9*w + 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -2, -2, 3, 7, 6, -4, 1, 2, -3, -2, 8, 13, 8, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.3-a";
N := (5*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, 4, -1, 5, 0, 3, -4, 7, -6, 3, 2, -4, 10, 2, 5, 12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.3-b";
N := (5*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -4, 4, 4, -6, -6, -4, -2, 12, 0, -10, 8, 2, -8, 4, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.3-c";
N := (5*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, -2, 1, -3, 0, 1, -4, -3, -12, 3, 6, 6, -6, 10, 7, 6, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.4-a";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 1, 2, -6, 5, -3, -10, 0, 5, -2, 3, -14, 4, 7, -8, 12, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.4-b";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 4, -4, 6, -4, -6, -4, -12, 2, 10, 0, -2, -8, 4, -8, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.4-c";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, -1, 4, 0, -5, 3, -4, 6, -7, -2, -3, -10, 4, 5, 2, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.4-d";
N := (-2*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -1, -4, 0, 3, -1, -10, 0, 9, -12, -3, 6, -12, 5, -4, 0, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.2-a";
N := (9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 4, 1, -5, 2, -7, 2, 3, -10, -3, -6, -2, -2, 8, -13, -10, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.2-b";
N := (9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -5, -1, 6, 7, 6, -3, 0, -7, -6, 4, 6, 0, -11, 4, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.2-c";
N := (9*w + 6)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -2, 3, 3, -2, 7, 6, 1, -4, -3, 2, 8, -2, 8, 13, 8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.6-a";
N := (5*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 2, -1, 4, 0, 5, 3, -4, -6, 7, 2, 3, 10, -4, 5, 2, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.6-b";
N := (5*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, -4, -6, 4, -6, -4, 12, -2, -10, 0, 2, 8, 4, -8, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.6-c";
N := (5*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 1, -2, 0, -3, 1, -4, -12, -3, 6, 3, -6, 6, 7, 10, 6, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.5-a";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 2, 1, 5, -6, -3, -10, 5, 0, 3, -2, 4, -14, -8, 7, 12, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.5-b";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, -4, 4, -4, 6, -6, -4, 2, -12, 0, 10, -8, -2, -8, 4, -6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.5-c";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 4, -1, -5, 0, 3, -4, -7, 6, -3, -2, 4, -10, 2, 5, -12, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 639.5-d";
N := (2*w + 25)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, -4, -1, 3, 0, -1, -10, 9, 0, -3, -12, -12, 6, -4, 5, 0, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 656.1-a";
N := (12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -4, -2, 6, 0, 1, -9, 4, 8, -1, -6, 5, 11, -1, 0, 14, -15];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 656.1-b";
N := (12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -2, 0, 0, -1, 3, 8, -9, 11, -8, 1, 6, 5, 8, -9, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 656.1-c";
N := (12*w - 32)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 0, 2, 2, 4, 9, -7, 4, 0, -11, -14, -5, 7, -11, -12, -10, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 656.2-a";
N := (-12*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 3, -2, -4, 0, 6, 1, -9, 4, -1, 8, 5, -6, -1, 11, 14, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 656.2-b";
N := (-12*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -3, 0, -2, -1, 0, 3, 8, -9, -8, 11, 6, 1, 8, 5, -8, -9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 656.2-c";
N := (-12*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 0, 4, 2, 9, -7, 4, -11, 0, -5, -14, -11, 7, -10, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.1-a";
N := (-9*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, 4, 0, -2, 2, -2, 2, -4, 8, -2, -2, 8, -4, 12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.1-b";
N := (-9*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 0, 0, 2, 4, 12, -2, 4, -6, 8, 6, -4, -8, 2, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.1-c";
N := (-9*w - 33)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 0, -4, -4, 2, 6, 6, 6, 8, 0, -10, -6, -8, 16, 0, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.3-a";
N := (14*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, -4, -4, 3, -4, 6, 2, -2, -8, -6, -12, -1, -2, 12, -6, -2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.3-b";
N := (14*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, -4, 2, 3, 2, 6, 5, 2, 2, 10, 7, -9, 3, -9, 8, 9, 8, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.3-c";
N := (14*w - 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 0, 2, -1, 2, -2, -5, -2, -10, -10, 9, 9, 1, 3, -8, -9, 16, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.4-a";
N := (-11*w + 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, 0, -4, 4, -3, -4, 6, -2, 2, 8, 6, 12, 1, -2, 12, 6, 2, 13];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.2-a";
N := (9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, 0, 4, -2, 2, 2, -2, 8, -4, -2, -2, -4, 8, 12, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.2-b";
N := (9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -4, 2, 0, 4, 12, 4, -2, 8, -6, -4, 6, 2, -8, 2, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.2-c";
N := (9*w - 42)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, -4, -4, -4, 2, 6, 6, 6, 0, 8, -6, -10, 16, -8, 8, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.6-a";
N := (-14*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -4, 0, 3, -4, -4, 6, -2, 2, -6, -8, -1, -12, 12, -2, -2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.6-b";
N := (-14*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 3, 2, -4, 2, 3, 6, 5, 2, 2, 7, 10, 3, -9, 8, -9, 8, 9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.6-c";
N := (-14*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, 0, 2, -1, -2, -5, -10, -2, 9, -10, 1, 9, -8, 3, 16, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 657.5-a";
N := (-11*w - 16)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -4, 0, -3, 4, -4, 6, 2, -2, 6, 8, 1, 12, 12, -2, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-a";
N := (15*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 0, 4, -4, 2, 6, 2, 12, -8, 6, -6, 8, 4, 8, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-b";
N := (15*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, -4, 4, -10, -10, 10, 8, -8, 10, -10, -12, -12, 8, -8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-c";
N := (15*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 4, 4, -4, 12, 2, -9, 5, 3, 9, 4, 8, -14, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-d";
N := (15*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 0, 4, -4, -4, -12, 2, -9, -5, -3, 9, -4, -8, 14, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-e";
N := (15*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 4, 2, -2, 12, 8, -8, -3, 3, -11, 11, 6, 6, 6, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.1-f";
N := (15*w - 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, 0, -4, 8, -2, 2, 6, -4, -4, -12, 2, -8, 8, 0, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-a";
N := (-10*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 4, -2, -2, -3, 8, -4, -10, 7, 6, 6, 10, 2, -8, -15, 10, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-b";
N := (-10*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -4, 2, -2, 3, 8, 4, -10, 7, -6, -6, 10, -2, 8, 15, 10, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-c";
N := (-10*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -5, -3, -2, 1, -7, -6, 5, -12, -4, 12, 6, -11, 5, 1, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-d";
N := (-10*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 0, -2, -2, -5, 8, -4, 6, -1, -6, -6, 6, -10, 4, -1, -14, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-e";
N := (-10*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 5, 3, -2, -1, -7, 6, 5, -12, 4, -12, 6, 11, -5, -1, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.3-f";
N := (-10*w + 45)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 0, 2, -2, 5, 8, 4, 6, -1, 6, 6, 6, 10, -4, 1, -14, 7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-a";
N := (15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, -4, -4, 4, 2, 2, 6, -8, 12, -6, 6, 4, 8, 8, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-b";
N := (15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, 4, -4, -10, 10, -10, -8, 8, -10, 10, -12, -12, -8, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-c";
N := (15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, -2, 4, 4, -4, 2, 12, 5, -9, 9, 3, 8, 4, 8, -14, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-d";
N := (15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 0, 2, -4, 4, -4, 2, -12, -5, -9, 9, -3, -8, -4, 8, 14, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-e";
N := (15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-4, 4, 4, -2, 2, 12, -8, 8, 3, -3, 11, -11, 6, 6, -6, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.2-f";
N := (15*w + 30)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -4, 2, -4, 0, 8, 2, -2, -4, 6, -12, -4, -8, 2, 0, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-a";
N := (10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -2, 4, -3, -2, 8, -10, -4, 6, 7, 10, 6, -8, 2, 10, -15, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-b";
N := (10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 2, -4, 3, -2, 8, -10, 4, -6, 7, 10, -6, 8, -2, 10, 15, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-c";
N := (10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -3, -5, 1, -2, -7, 5, -6, -4, -12, 6, 12, 5, -11, 8, 1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-d";
N := (10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, -2, 0, -5, -2, 8, 6, -4, -6, -1, 6, -6, 4, -10, -14, -1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-e";
N := (10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 3, 5, -1, -2, -7, 5, 6, 4, -12, 6, -12, -5, 11, 8, -1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 675.4-f";
N := (10*w + 35)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, 2, 0, 5, -2, 8, 6, 4, 6, -1, 6, 6, -4, 10, -14, 1, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-a";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -1, -1, 6, 6, -1, -7, 0, 0, 3, 3, 0, 0, 14, 14, -3, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 676.1-b";
N := (26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -3, 1, 1, -2, -2, -9, 3, 0, 0, 13, 13, 12, 12, -2, -2, -5, -5, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 687.2-a";
N := (11*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 1, 4, -2, 1, 8, 1, 4, -12, -9, -1, 10, 4, 8, 13, -7, 4, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 687.2-b";
N := (11*w - 48)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 3, 0, -4, 3, -4, 5, 10, -2, 3, 1, -6, 0, -10, 7, 3, 2, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 687.3-a";
N := (-11*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, 1, 1, -2, 8, 1, -12, 4, -1, -9, 4, 10, 13, 8, 4, -7, 3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 687.3-b";
N := (-11*w - 37)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 0, 3, 3, -4, -4, 5, -2, 10, 1, 3, 0, -6, 7, -10, 2, 3, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-a";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, 4, 5, -9, 3, -6, 0, 6, -3, 4, -14, 0, 9, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-b";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -4, 2, 6, 2, 6, 0, -12, 6, 10, -4, -4, 8, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-c";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, 10, 10, 6, 2, 0, 12, -6, 6, -12, 8, 8, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-d";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 6, 4, -8, -10, 4, -2, 12, -2, -4, -6, 12, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-e";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -3, 4, -7, -5, 5, -2, 0, -2, -5, -8, -14, -12, -5, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-f";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, -2, 0, -4, 2, 4, -10, -12, 10, -12, -2, -12, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-g";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 2, 2, -2, -6, -8, -4, 10, -10, 4, -4, -12, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-h";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 4, 2, -2, 10, 2, -8, 0, 6, -2, -12, 4, 8, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-i";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 4, 2, -2, -6, -10, 8, 4, 6, -6, 12, -4, -8, -12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-j";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -2, -4, 0, -6, 12, -6, 0, -6, 4, -14, -12, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-k";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 4, 2, 2, 6, 2, 0, 12, 10, -2, 4, 4, -12, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-l";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 2, -6, -2, 6, -8, -8, 2, 10, -4, -4, -12, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-m";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -6, -2, 10, 10, 0, 0, 6, -10, 4, -12, 0, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.1-n";
N := (-12*w + 51)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -6, -10, 10, -6, -8, 8, 6, -10, 4, 4, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-a";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, 4, 2, 2, 4, -12, 10, -14, 10, -2, 16, -8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-b";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, 6, 2, 2, 6, -8, -12, 6, -6, -8, -12, 12, 16, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-c";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 6, -2, 10, -4, -2, -8, 6, -2, -4, 0, 12, 12, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-d";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 4, 10, -2, -6, 2, 0, -8, -2, 6, 4, 12, -8, 8, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-e";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, 2, -2, -6, -2, -12, -8, 6, -2, 12, 4, -8, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-f";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, 6, 2, -6, -8, -6, 8, -10, 2, 4, 8, 0, -8, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-g";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 6, 2, 2, -6, 4, 0, -6, 2, 12, -8, -12, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-h";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -2, -10, -6, 8, 6, -12, -6, 6, -16, 4, -12, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-i";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 4, 2, -6, 2, -2, -12, 8, 6, 10, -12, 12, -12, 12, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-j";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 4, 2, -6, 0, 12, 6, 6, -6, -14, 4, 0, -6, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-k";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -2, 6, 2, 6, 0, -4, -10, -10, 8, -12, -8, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-l";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 0, -6, 6, -6, -6, 8, -12, 2, -2, 8, 8, 8, 8, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-m";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 4, -2, 6, 2, -2, 0, 0, 2, 6, -12, -8, -16, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-n";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, -2, -6, 2, -8, 6, -12, 2, -6, 0, 4, 8, 0, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-o";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -6, 6, -6, -10, -4, -4, -6, 6, 8, 16, 0, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-p";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -6, 2, 2, -6, 8, 0, 6, 10, -12, -4, 12, -4, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.2-q";
N := (-9*w - 3)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 4, -6, -10, 2, 2, -8, -8, -10, 6, -4, -4, -8, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-a";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -4, -4, -2, 10, -2, -10, 10, -12, -4, -10, 10, -2, -4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-b";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -3, 0, -1, -2, 2, 9, -8, 4, -9, -6, 2, 10, -10, 9, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-c";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 0, 2, 2, 6, 6, -6, 0, 0, -6, 2, 14, 12, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-d";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -5, 4, 1, 10, 2, 3, -12, -8, -5, -6, 14, 14, 2, -5, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-e";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -3, -2, -1, 10, 8, 5, 4, 8, -13, -8, 6, 4, 0, 9, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-f";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, 0, -7, -4, 0, -9, 6, -6, -9, 6, 14, -4, 6, 15, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-g";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -1, 6, -3, -10, 8, 5, 0, 8, 1, 0, -10, -8, -4, 9, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-h";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, 2, -2, 2, 6, -8, 4, 6, 6, -4, 4, -16, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-i";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -6, -4, 6, 2, 6, 0, -10, 2, 4, 4, 12, 4, 8, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-j";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 1, 6, 3, -10, 8, -5, 0, 8, 1, 0, 10, 8, -4, -9, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-k";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, 0, -2, 2, 6, -6, 6, 0, 0, 6, -2, -14, 12, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-l";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 3, -2, 1, 10, 8, -5, -4, 8, -13, 8, -6, -4, 0, -9, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.5-m";
N := (w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 4, -4, 2, 10, -2, 10, -10, -12, -4, 10, -10, 2, -4, 4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-a";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, -4, 4, 10, -2, 12, 0, 8, -10, 0, 2, -4, -8, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-b";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, -4, -2, -2, 10, -10, -8, 0, -10, 2, -8, 4, 8, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-c";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, -6, -6, -10, -6, -2, 0, 10, -2, -4, 8, -8, 0, -2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-d";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -6, 6, -10, 2, 2, 0, 2, 10, 0, 8, 4, 8, 6, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-e";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, -5, -2, -9, 0, 4, -6, -4, -1, 4, -1, -4, -6, -5, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-f";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -4, 2, -2, 10, 10, 8, -8, -14, 2, 0, -8, 0, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-g";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -3, -1, -4, -5, -8, -8, -10, -8, -5, -10, 3, 4, -12, -9, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-h";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 0, 4, 2, -6, 0, 0, -12, 6, 12, 10, -8, 0, 12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-i";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, -2, -4, 10, 2, -4, 4, 6, -14, 14, -10, 8, -8, 2, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-j";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, 2, 6, -10, -8, 0, -8, -6, 6, -4, 12, -10, -12, 4, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-k";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 3, -1, 6, -1, -8, 12, 2, -12, 3, 4, 3, 4, -6, -13, -7];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-l";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 6, -6, -10, -2, 2, 0, -2, -10, 0, -8, -4, -8, 6, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-m";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 0, -4, 2, 6, 0, 0, 12, -6, 12, -10, 8, 0, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-n";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 2, -2, -2, 4, 0, 0, 2, 2, 12, 8, 14, 4, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-o";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 3, 1, 4, -5, 8, -8, -10, 8, 5, -10, -3, -4, 12, -9, 11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-p";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 4, -4, 10, 2, 12, 0, -8, 10, 0, -2, 4, 8, -4, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.6-q";
N := (-4*w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 2, 6, 6, -10, 6, -2, 0, -10, 2, -4, -8, 8, 0, -2, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.7-a";
N := (13*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 4, -6, -8, 2, 0, -6, 12, 10, -8, -2, 4, 8, -4, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.7-b";
N := (13*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 2, 6, 12, 4, -6, 0, -8, 8, -8, -8, 4, 0, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.7-c";
N := (13*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 4, 10, -4, -6, 4, -2, -12, 10, 12, 2, 4, -8, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.7-d";
N := (13*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, -2, 6, 6, 2, 4, 0, -6, 2, -8, 4, 0, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.7-e";
N := (13*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, -3, -4, 2, -6, 9, 0, -3, 3, -3, 2, 14, -15, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.7-f";
N := (13*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 2, -6, -6, -8, 0, 6, -8, 8, 10, -2, -8, 0, 4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.7-g";
N := (13*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, -2, -6, 2, -4, -4, 10, 0, 4, -6, -6, 0, 0, 12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.7-h";
N := (13*w + 23)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -2, -2, -2, 8, 8, 2, 0, 0, 12, 12, 0, 12, 16, 0, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.8-a";
N := (13*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, -6, -2, 2, -6, 12, 0, 0, -6, 0, 4, -8, 6, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.8-b";
N := (13*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 5, -3, 2, -7, -9, 3, 12, 0, -6, 9, 14, 8, -6, -3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.8-c";
N := (13*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 0, 7, 11, -6, 9, 12, 3, 0, -3, -5, -8, -12, -6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.8-d";
N := (13*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 3, 1, -8, -7, 7, 9, 2, -8, 6, -9, -8, 2, -12, -1, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.8-e";
N := (13*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -6, 2, 2, -6, -12, 0, 0, -6, 0, -4, 8, 6, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.8-f";
N := (13*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 3, -4, 2, -9, 6, 3, 0, 3, -3, 14, 2, 3, 15, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.8-g";
N := (13*w + 41)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 0, -7, 11, -6, -9, -12, 3, 0, 3, 5, 8, -12, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-a";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -3, 4, 5, 3, -9, 0, -6, -3, 6, -14, 4, 9, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-b";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, -4, 2, 6, 6, 2, -12, 0, 10, 6, -4, -4, -12, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-c";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 4, 10, 10, 2, 6, 12, 0, 6, -6, 8, -12, 0, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-d";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 6, 4, -10, -8, -2, 4, -2, 12, -6, -4, 0, 12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-e";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -3, 4, -7, 5, -5, 0, -2, -5, -2, -14, -8, -5, -12, 12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-f";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, -2, 0, 2, -4, -10, 4, 10, -12, -2, -12, -12, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-g";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 4, 4, 2, 2, -6, -2, -4, -8, -10, 10, -4, 4, 12, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-h";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 4, 2, -2, 2, 10, 0, -8, -2, 6, 4, -12, 8, 8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-i";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 4, 2, -2, -10, -6, 4, 8, -6, 6, -4, 12, -12, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-j";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 0, -2, -4, -6, 0, -6, 12, -6, 0, -14, 4, -12, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-k";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 4, 2, 2, 2, 6, 12, 0, -2, 10, 4, 4, -4, -12, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-l";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 2, -6, 6, -2, -8, -8, 10, 2, -4, -4, 8, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-m";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -6, -2, 10, 10, 0, 0, -10, 6, -12, 4, 0, 0, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.4-n";
N := (-12*w - 39)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, -6, -10, -6, 10, 8, -8, -10, 6, 4, 4, -8, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-a";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, -6, 4, 2, 4, 2, 10, -12, 10, -14, 16, -2, 6, -8, 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-b";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 0, 0, 6, 2, 6, 2, -12, -8, -6, 6, -12, -8, 16, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-c";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -2, 0, 6, -2, -4, 10, -8, -2, -2, 6, 0, -4, 12, 12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-d";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 4, 10, -2, 2, -6, -8, 0, 6, -2, 12, 4, 8, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-e";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, -4, 2, -2, -2, -6, -8, -12, -2, 6, 4, 12, 0, -8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-f";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, 0, 6, 2, -8, -6, 8, -6, 2, -10, 8, 4, -8, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-g";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 4, 6, 2, -6, 2, 0, 4, 2, -6, -8, 12, -8, -12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-h";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -4, -2, -10, 8, -6, -12, 6, 6, -6, 4, -16, 12, -12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-i";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 4, 4, 2, -6, -2, 2, 8, -12, 10, 6, 12, -12, 12, -12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-j";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 4, 6, 4, 2, 0, -6, 6, 12, -6, 6, 4, -14, -6, 0, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-k";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 0, 0, -2, 6, 6, 2, -4, 0, -10, -10, -12, 8, 4, -8, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-l";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -4, 0, -6, 6, -6, -6, -12, 8, -2, 2, 8, 8, 8, 8, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-m";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -4, 4, -2, 6, -2, 2, 0, 0, 6, 2, -8, -12, -12, -16, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-n";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 2, 4, -2, -6, -8, 2, -12, 6, -6, 2, 4, 0, 0, 8, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-o";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 0, -6, 6, -10, -6, -4, -4, 6, -6, 16, 8, 8, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-p";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 0, 4, -6, 2, -6, 2, 0, 8, 10, 6, -4, -12, -4, 12, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.3-q";
N := (9*w - 12)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 0, 4, -6, -10, 2, 2, -8, -8, 6, -10, -4, -4, 0, -8, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-a";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, -4, -4, -2, 10, -10, -2, -12, 10, -10, -4, -2, 10, -4, -4, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-b";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 2, -3, 0, -1, -2, 9, 2, 4, -8, -6, -9, 10, 2, 9, -10, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-c";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 0, 2, 2, 6, 6, 0, -6, -6, 0, 14, 2, -12, 12, -16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-d";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, -5, 4, 1, 10, 3, 2, -8, -12, -6, -5, 14, 14, -5, 2, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-e";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -3, -2, -1, 10, 5, 8, 8, 4, -8, -13, 4, 6, 9, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-f";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 2, -1, 0, -7, -4, -9, 0, -6, 6, 6, -9, -4, 14, 15, 6, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-g";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, 2, -1, 6, -3, -10, 5, 8, 8, 0, 0, 1, -8, -10, 9, -4, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-h";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, 2, -2, 6, 2, 4, -8, 6, 6, 4, -4, 0, -16, -10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-i";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, -6, -4, 6, 6, 2, -10, 0, 4, 2, 12, 4, 8, 4, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-j";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -2, 1, 6, 3, -10, -5, 8, 8, 0, 0, 1, 8, 10, -9, -4, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-k";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, 0, -2, 2, -6, 6, 0, 6, 6, 0, -14, -2, 12, 12, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-l";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -2, 3, -2, 1, 10, -5, 8, 8, -4, 8, -13, -4, -6, -9, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.12-m";
N := (w - 27)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, 4, -4, 2, 10, 10, -2, -12, -10, 10, -4, 2, -10, 4, -4, 16];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-a";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, -4, 4, 10, 12, -2, 8, 0, 0, -10, -4, 2, -4, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-b";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -4, -4, -2, -2, -10, 10, 0, -8, 2, -10, 4, -8, 8, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-c";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -3, -2, -6, -6, -10, -2, -6, 10, 0, -4, -2, -8, 8, -2, 0, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-d";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, -6, 6, -10, 2, 2, 2, 0, 0, 10, 4, 8, 6, 8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-e";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -3, -1, -5, -2, -9, 4, 0, -4, -6, 4, -1, -4, -1, -5, -6, -12];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-f";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, -4, 2, -2, 10, 10, -8, 8, 2, -14, -8, 0, 12, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-g";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, -1, -3, -1, -4, -5, -8, -8, -8, -10, -10, -5, 4, 3, -9, -12, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-h";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, -2, 0, 4, 2, 0, -6, -12, 0, 12, 6, -8, 10, 12, 0, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-i";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 3, 4, -2, -4, 10, -4, 2, 6, 4, 14, -14, 8, -10, 2, -8, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-j";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 0, 2, 6, -10, 0, -8, -6, -8, -4, 6, -10, 12, 4, -12, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-k";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 3, -1, 6, -1, 12, -8, -12, 2, 4, 3, 4, 3, -13, -6, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-l";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, -2, 6, -6, -10, 2, -2, -2, 0, 0, -10, -4, -8, 6, -8, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-m";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 0, -4, 2, 0, 6, 12, 0, 12, -6, 8, -10, 12, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-n";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 1, 4, 2, -2, -2, 0, 4, 2, 0, 12, 2, 14, 8, -4, 4, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-o";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 1, 3, 1, 4, -5, -8, 8, 8, -10, -10, 5, -4, -3, -9, 12, -8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-p";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, 2, 4, -4, 10, 12, 2, -8, 0, 0, 10, 4, -2, -4, 8, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.11-q";
N := (4*w - 31)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 3, 2, 6, 6, -10, -2, 6, -10, 0, -4, 2, 8, -8, -2, 0, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.10-a";
N := (13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -3, -2, 4, -6, -8, 0, 2, 12, -6, -8, 10, 4, -2, -4, 8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.10-b";
N := (13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, 2, 6, 12, -6, 4, -8, 0, -8, 8, 4, -8, -8, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.10-c";
N := (13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 1, 2, 4, 10, -4, 4, -6, -12, -2, 12, 10, 4, 2, 12, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.10-d";
N := (13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -1, 0, 0, -2, 6, 2, 6, 0, 4, 2, -6, 4, -8, 8, 0, 14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.10-e";
N := (13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, 2, -3, -4, 2, 9, -6, -3, 0, -3, 3, 14, 2, -3, -15, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.10-f";
N := (13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, 2, -6, -6, 0, -8, -8, 6, 10, 8, -8, -2, 4, 0, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.10-g";
N := (13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, -1, -4, -2, -6, 2, -4, -4, 0, 10, -6, 4, 0, -6, 12, 0, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.10-h";
N := (13*w - 36)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 3, -2, -2, -2, 8, 2, 8, 0, 0, 12, 12, 12, 0, 0, 16, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.9-a";
N := (-13*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 1, 4, -6, -2, 2, 12, -6, 0, 0, 0, -6, -8, 4, 0, 6, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.9-b";
N := (-13*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 2, 5, -3, 2, -7, 3, -9, 0, 12, 9, -6, 8, 14, -3, -6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.9-c";
N := (-13*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, 4, 0, 7, 11, 9, -6, 3, 12, -3, 0, -8, -5, -6, -12, -2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.9-d";
N := (-13*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 3, 1, -8, -7, 9, 7, -8, 2, -9, 6, 2, -8, -1, -12, 4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.9-e";
N := (-13*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -1, -4, -6, 2, 2, -12, -6, 0, 0, 0, -6, 8, -4, 0, 6, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.9-f";
N := (-13*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, 2, 3, -4, 2, 6, -9, 0, 3, -3, 3, 2, 14, 15, 3, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 693.9-g";
N := (-13*w + 54)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, -1, -4, 0, -7, 11, -9, -6, 3, -12, 3, 0, 8, 5, 6, -12, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.1-a";
N := (-11*w - 15)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, -3, 4, 4, -6, 7, 2, -3, 9, -12, 10, 6, 3, 8, -9, 12, 6, -4];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 699.4-a";
N := (-11*w + 26)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, 1, 4, -3, -6, 4, 7, 2, 9, -3, 10, -12, 3, 6, -9, 8, 6, 12, -9];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.1-a";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, 2, 2, 4, -4, 0, -6, 6, -8, -2, -4, 4, -4, 6, -8, 16, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.1-b";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, -3, 6, -1, -6, -6, -9, 12, 9, -6, 13, 10, 12, 12, -5];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.1-c";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, -3, 2, -7, 2, 2, -7, -12, -1, 14, 3, -2, 12, 12, -11];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.1-d";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 0, 0, -4, 6, 6, 0, -12, -12, 12, -14, -2, 0, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.1-e";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [0, -2, 0, 2, 6, -8, -6, 2, 8, 0, 8, 4, -12, -4, 0, -8, 2];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.1-f";
N := (-10*w - 10)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [3, -3, -2, -1, 2, -9, 10, -2, 3, 12, 9, -6, 7, -2, 0, -12, -3];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.2-a";
N := (10*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [2, 0, 2, -4, 4, 0, 6, -6, -2, -8, 4, -4, 6, -4, 16, -8, 8];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.2-b";
N := (10*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [1, 1, -2, 6, -3, -1, -6, -6, 12, -9, -6, 9, 10, 13, 12, 12, -14];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.2-c";
N := (10*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-1, -1, -2, 2, -3, -7, 2, 2, -12, -7, 14, -1, -2, 3, 12, 12, -6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.2-d";
N := (10*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, -2, 4, 0, 0, -4, 6, 6, -12, 0, 12, -12, -2, -14, 0, 0, 10];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.2-e";
N := (10*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-2, 0, 0, 6, 2, -8, 2, -6, 0, 8, 4, 8, -4, -12, -8, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

effort := 400;
print "Isogeny class 700.2-f";
N := (10*w - 20)*OK;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
aplist := [-3, 3, -2, 2, -1, -9, -2, 10, 12, 3, -6, 9, -2, 7, -12, 0, 6];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do a1,a2,a3,a4,a6:=Explode(aInvariants(E)); printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6; end for;

