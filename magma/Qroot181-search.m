print "Field 2.2.181.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 45);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w - 6)*OK);
Append(~Plist,(w - 7)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(-4*w - 25)*OK);
Append(~Plist,(4*w - 29)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(3*w + 19)*OK);
Append(~Plist,(3*w - 22)*OK);
Append(~Plist,(6*w + 37)*OK);
Append(~Plist,(6*w - 43)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(-2*w - 11)*OK);
Append(~Plist,(w + 1)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(-5*w + 37)*OK);
Append(~Plist,(5*w + 32)*OK);
Append(~Plist,(-21*w - 131)*OK);
Append(~Plist,(-21*w + 152)*OK);
Append(~Plist,(11*w - 79)*OK);
Append(~Plist,(-11*w - 68)*OK);
Append(~Plist,(19*w + 118)*OK);
Append(~Plist,(-19*w + 137)*OK);
Append(~Plist,(3*w + 16)*OK);
Append(~Plist,(-3*w + 19)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(-5*w + 34)*OK);
Append(~Plist,(-5*w - 29)*OK);
Append(~Plist,(-3*w + 17)*OK);
Append(~Plist,(3*w + 14)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(-3*w - 23)*OK);
Append(~Plist,(3*w - 26)*OK);
Append(~Plist,(-3*w - 13)*OK);
Append(~Plist,(3*w - 16)*OK);
Append(~Plist,(-18*w - 113)*OK);
Append(~Plist,(18*w - 131)*OK);
Append(~Plist,(w + 16)*OK);
Append(~Plist,(w - 17)*OK);
Append(~Plist,(-33*w - 206)*OK);
Append(~Plist,(-33*w + 239)*OK);
Append(~Plist,(-7*w + 53)*OK);
Append(~Plist,(7*w + 46)*OK);
Append(~Plist,(-9*w - 58)*OK);
Append(~Plist,(9*w - 67)*OK);
Append(~Plist,(-3*w + 14)*OK);
Append(~Plist,(3*w + 11)*OK);
Append(~Plist,(-17*w + 124)*OK);
Append(~Plist,(-17*w - 107)*OK);
Append(~Plist,(-15*w + 107)*OK);
Append(~Plist,(15*w + 92)*OK);
Append(~Plist,(-4*w + 23)*OK);
Append(~Plist,(4*w + 19)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(-6*w - 41)*OK);
Append(~Plist,(6*w - 47)*OK);
Append(~Plist,(26*w - 187)*OK);
Append(~Plist,(-26*w - 161)*OK);
Append(~Plist,(-3*w + 11)*OK);
Append(~Plist,(3*w + 8)*OK);
Append(~Plist,(13*w + 79)*OK);
Append(~Plist,(13*w - 92)*OK);
Append(~Plist,(-14*w + 103)*OK);
Append(~Plist,(14*w + 89)*OK);
Append(~Plist,(-3*w - 26)*OK);
Append(~Plist,(3*w - 29)*OK);
Append(~Plist,(-8*w - 53)*OK);
Append(~Plist,(-8*w + 61)*OK);
Append(~Plist,(-9*w + 62)*OK);
Append(~Plist,(-9*w - 53)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-9*w + 68)*OK);
Append(~Plist,(9*w + 59)*OK);
Append(~Plist,(-12*w + 89)*OK);
Append(~Plist,(-12*w - 77)*OK);
Append(~Plist,(-51*w - 317)*OK);
Append(~Plist,(-51*w + 368)*OK);
Append(~Plist,(-3*w - 1)*OK);
Append(~Plist,(3*w - 4)*OK);
Append(~Plist,(-17*w + 121)*OK);
Append(~Plist,(17*w + 104)*OK);
Append(~Plist,(39*w + 242)*OK);
Append(~Plist,(-39*w + 281)*OK);
Append(~Plist,(25*w + 157)*OK);
Append(~Plist,(25*w - 182)*OK);
Append(~Plist,(w + 22)*OK);
Append(~Plist,(w - 23)*OK);
Append(~Plist,(-3*w + 31)*OK);
Append(~Plist,(3*w + 28)*OK);
Append(~Plist,(15*w + 91)*OK);
Append(~Plist,(15*w - 106)*OK);
Append(~Plist,(-6*w + 49)*OK);
Append(~Plist,(6*w + 43)*OK);
Append(~Plist,(60*w - 433)*OK);
Append(~Plist,(60*w + 373)*OK);
Append(~Plist,(-4*w - 13)*OK);
Append(~Plist,(4*w - 17)*OK);
Append(~Plist,(-5*w + 43)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("3.1-a",(-w - 6)*OK,[1, -1, -1, 4, 0, 0, -4, 6, 6, 6, 2, -3, 6, 11, 4, 9, -1, 13, -12, 1, 11, 4, -1, -2, 3, -13, 12, -20, 0]);
ECSearch("3.2-a",(w - 7)*OK,[1, -1, 4, -1, 0, 0, 6, -4, 6, 6, -3, 2, 11, 6, 4, -1, 9, -12, 13, 11, 1, -1, 4, 3, -2, 12, -13, 0, -20]);
ECSearch("4.1-a",(2)*OK,[-1, -1, 0, 0, -3, -3, -4, -4, -6, -6, -2, -2, -1, -1, 14, -3, -3, 4, 4, -11, -11, 8, 8, -12, -12, 9, 9, -5, -5]);
ECSearch("9.2-a",(5*w - 36)*OK,[-1, 1, -1, -4, 0, 0, -4, 6, 6, -6, -2, 3, 6, 11, 4, 9, 1, -13, 12, -1, -11, 4, -1, -2, -3, -13, -12, 20, 0]);
ECSearch("9.3-a",(5*w + 31)*OK,[-1, 1, -4, -1, 0, 0, 6, -4, -6, 6, 3, -2, 11, 6, 4, 1, 9, 12, -13, -11, -1, -1, 4, -3, -2, -12, -13, 0, 20]);
ECSearch("12.1-a",(-2*w - 12)*OK,[3, -3, 0, -2, 4, -2, -4, -6, -8, -10, 11, 2, -3, 6, 3, -3, 3, -8, -15, 7, -2, -9, -12, 9, 3, -10, 0, 4]);
ECSearch("12.2-a",(2*w - 14)*OK,[3, 0, -3, 4, -2, -4, -2, -8, -6, 11, -10, -3, 2, 6, -3, 3, -8, 3, 7, -15, -9, -2, 9, -12, -10, 3, 4, 0]);
ECSearch("15.2-a",(-w - 5)*OK,[1, -1, 3, 6, 6, -4, 2, 6, -6, -1, -10, -1, 8, -4, -3, 3, -10, -1, -1, 11, 5, 8, 15, -6, -12, 3, 20, 2]);
ECSearch("15.3-a",(w - 6)*OK,[1, -1, 3, 6, 6, 2, -4, -6, 6, -10, -1, 8, -1, -4, 3, -3, -1, -10, 11, -1, 8, 5, -6, 15, 3, -12, 2, 20]);
ECSearch("20.1-a",(-8*w - 50)*OK,[3, 1, 0, 5, -1, 0, -2, 4, 4, -2, 4, 5, -1, -2, -3, 11, 8, 8, 7, 11, -6, 12, -10, -10, -11, 21, -9, 21]);
ECSearch("20.2-a",(8*w - 58)*OK,[1, 3, 0, -1, 5, -2, 0, 4, 4, 4, -2, -1, 5, -2, 11, -3, 8, 8, 11, 7, 12, -6, -10, -10, 21, -11, 21, -9]);
ECSearch("25.1-a",(5)*OK,[1, 1, -1, 0, 0, -4, -4, -9, -9, 2, 2, -4, -4, 14, -6, -6, -7, -7, -4, -4, 14, 14, 3, 3, -18, -18, 20, 20]);
ECSearch("27.1-a",(-3*w - 18)*OK,[1, 4, 1, 0, 0, 6, -4, 6, -6, 3, -2, 11, 6, 4, -1, -9, 12, -13, -11, -1, -1, 4, 3, 2, 12, 13, 0, 20]);
ECSearch("27.3-a",(w + 8)*OK,[2, 1, 0, -3, -3, 0, 5, -1, 6, 6, -2, 10, -4, -1, 5, 0, -3, -14, -14, 4, 4, -16, 5, -6, 9, -12, -3, -14, 10]);
ECSearch("27.3-b",(w + 8)*OK,[-2, -1, 0, -3, -3, 0, 5, -1, -6, 6, 2, -10, -4, -1, 5, 0, -3, 14, 14, -4, -4, -16, 5, 6, 9, 12, -3, 14, -10]);
ECSearch("27.2-a",(3*w - 21)*OK,[1, 1, 4, 0, 0, -4, 6, -6, 6, -2, 3, 6, 11, 4, -9, -1, -13, 12, -1, -11, 4, -1, 2, 3, 13, 12, 20, 0]);
ECSearch("27.4-a",(w - 9)*OK,[2, 1, -3, 0, 0, -3, -1, 5, 6, 6, 10, -2, -1, -4, 5, -3, 0, -14, -14, 4, 4, 5, -16, 9, -6, -3, -12, 10, -14]);
ECSearch("27.4-b",(w - 9)*OK,[-2, -1, -3, 0, 0, -3, -1, 5, 6, -6, -10, 2, -1, -4, 5, -3, 0, 14, 14, -4, -4, 5, -16, 9, 6, -3, 12, -10, 14]);
