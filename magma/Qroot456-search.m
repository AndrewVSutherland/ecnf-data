print "Field 2.2.456.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 114);
OK := Integers(K);
Plist := [];
Append(~Plist,(-3*w - 32)*OK);
Append(~Plist,(3)*OK+(w)*OK);
Append(~Plist,(5)*OK+(w + 2)*OK);
Append(~Plist,(5)*OK+(w + 3)*OK);
Append(~Plist,(-w + 11)*OK);
Append(~Plist,(-w - 11)*OK);
Append(~Plist,(11)*OK+(w + 2)*OK);
Append(~Plist,(11)*OK+(w + 9)*OK);
Append(~Plist,(13)*OK+(w + 6)*OK);
Append(~Plist,(13)*OK+(w + 7)*OK);
Append(~Plist,(19)*OK+(w)*OK);
Append(~Plist,(37)*OK+(w + 15)*OK);
Append(~Plist,(37)*OK+(w + 22)*OK);
Append(~Plist,(-5*w + 53)*OK);
Append(~Plist,(5*w + 53)*OK);
Append(~Plist,(67)*OK+(w + 28)*OK);
Append(~Plist,(67)*OK+(w + 39)*OK);
Append(~Plist,(-8*w + 85)*OK);
Append(~Plist,(8*w + 85)*OK);
Append(~Plist,(2*w - 23)*OK);
Append(~Plist,(-2*w - 23)*OK);
Append(~Plist,(83)*OK+(w + 23)*OK);
Append(~Plist,(83)*OK+(w + 60)*OK);
Append(~Plist,(w + 5)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(101)*OK+(w + 35)*OK);
Append(~Plist,(101)*OK+(w + 66)*OK);
Append(~Plist,(109)*OK+(w + 21)*OK);
Append(~Plist,(109)*OK+(w + 88)*OK);
Append(~Plist,(w + 1)*OK);
Append(~Plist,(w - 1)*OK);
Append(~Plist,(131)*OK+(w + 30)*OK);
Append(~Plist,(131)*OK+(w + 101)*OK);
Append(~Plist,(149)*OK+(w + 73)*OK);
Append(~Plist,(149)*OK+(w + 76)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(181)*OK+(w + 64)*OK);
Append(~Plist,(181)*OK+(w + 117)*OK);
Append(~Plist,(197)*OK+(w + 36)*OK);
Append(~Plist,(197)*OK+(w + 161)*OK);
Append(~Plist,(-3*w - 35)*OK);
Append(~Plist,(3*w - 35)*OK);
Append(~Plist,(211)*OK+(w + 89)*OK);
Append(~Plist,(211)*OK+(w + 122)*OK);
Append(~Plist,(251)*OK+(w + 37)*OK);
Append(~Plist,(251)*OK+(w + 214)*OK);
Append(~Plist,(7*w - 73)*OK);
Append(~Plist,(7*w + 73)*OK);
Append(~Plist,(15*w + 161)*OK);
Append(~Plist,(15*w - 161)*OK);
Append(~Plist,(-23*w + 245)*OK);
Append(~Plist,(23*w + 245)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(307)*OK+(w + 81)*OK);
Append(~Plist,(307)*OK+(w + 226)*OK);
Append(~Plist,(-18*w + 193)*OK);
Append(~Plist,(-18*w - 193)*OK);
Append(~Plist,(331)*OK+(w + 86)*OK);
Append(~Plist,(331)*OK+(w + 245)*OK);
Append(~Plist,(347)*OK+(w + 43)*OK);
Append(~Plist,(347)*OK+(w + 304)*OK);
Append(~Plist,(11*w - 119)*OK);
Append(~Plist,(11*w + 119)*OK);
Append(~Plist,(373)*OK+(w + 62)*OK);
Append(~Plist,(373)*OK+(w + 311)*OK);
Append(~Plist,(379)*OK+(w + 71)*OK);
Append(~Plist,(379)*OK+(w + 308)*OK);
Append(~Plist,(-6*w - 61)*OK);
Append(~Plist,(-6*w + 61)*OK);
Append(~Plist,(389)*OK+(w + 170)*OK);
Append(~Plist,(389)*OK+(w + 219)*OK);
Append(~Plist,(-3*w - 25)*OK);
Append(~Plist,(3*w - 25)*OK);
Append(~Plist,(419)*OK+(w + 47)*OK);
Append(~Plist,(419)*OK+(w + 372)*OK);
Append(~Plist,(421)*OK+(w + 172)*OK);
Append(~Plist,(421)*OK+(w + 249)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(-2*w - 5)*OK);
Append(~Plist,(443)*OK+(w + 185)*OK);
Append(~Plist,(443)*OK+(w + 258)*OK);
Append(~Plist,(5*w - 49)*OK);
Append(~Plist,(5*w + 49)*OK);
Append(~Plist,(14*w + 151)*OK);
Append(~Plist,(-14*w + 151)*OK);
Append(~Plist,(461)*OK+(w + 110)*OK);
Append(~Plist,(461)*OK+(w + 351)*OK);
Append(~Plist,(33*w + 353)*OK);
Append(~Plist,(33*w - 353)*OK);
Append(~Plist,(467)*OK+(w + 54)*OK);
Append(~Plist,(467)*OK+(w + 413)*OK);
Append(~Plist,(491)*OK+(w + 144)*OK);
Append(~Plist,(491)*OK+(w + 347)*OK);
Append(~Plist,(-35*w + 373)*OK);
Append(~Plist,(35*w + 373)*OK);
Append(~Plist,(523)*OK+(w + 239)*OK);
Append(~Plist,(523)*OK+(w + 284)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(547)*OK+(w + 85)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("2.1-a",(-3*w - 32)*OK,[0, -2, 2, 0, 0, -4, 4, 6, -6, 0, -6, 6, -6, -6, -12, 12, 0, 0, 2, 2, 16, -16, -6, -6, -14, 14, 6, -6, -6]);
ECSearch("2.1-b",(-3*w - 32)*OK,[0, 2, -2, 0, 0, 4, -4, 6, -6, 0, -6, 6, 6, 6, -12, 12, 0, 0, 2, 2, -16, 16, 6, 6, 14, -14, 6, -6, 6]);
ECSearch("2.1-c",(-3*w - 32)*OK,[0, -2, 2, 0, 0, -4, 4, -6, 6, 0, 6, -6, 6, 6, 12, -12, 0, 0, 2, 2, 16, -16, 6, 6, -14, 14, -6, 6, 6]);
ECSearch("2.1-d",(-3*w - 32)*OK,[0, 2, -2, 0, 0, 4, -4, -6, 6, 0, 6, -6, -6, -6, 12, -12, 0, 0, 2, 2, -16, 16, -6, -6, 14, -14, -6, 6, -6]);
