print "Field 2.2.321.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 80);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w)*OK);
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(5)*OK+(w)*OK);
Append(~Plist,(5)*OK+(w + 4)*OK);
Append(~Plist,(13)*OK+(w + 1)*OK);
Append(~Plist,(13)*OK+(w + 11)*OK);
Append(~Plist,(17)*OK+(w + 3)*OK);
Append(~Plist,(17)*OK+(w + 13)*OK);
Append(~Plist,(19)*OK+(w + 6)*OK);
Append(~Plist,(19)*OK+(w + 12)*OK);
Append(~Plist,(37)*OK+(w + 2)*OK);
Append(~Plist,(37)*OK+(w + 34)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(-4*w - 33)*OK);
Append(~Plist,(4*w - 37)*OK);
Append(~Plist,(61)*OK+(w + 28)*OK);
Append(~Plist,(61)*OK+(w + 32)*OK);
Append(~Plist,(71)*OK+(w + 22)*OK);
Append(~Plist,(71)*OK+(w + 48)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(-12*w + 113)*OK);
Append(~Plist,(113)*OK+(w + 17)*OK);
Append(~Plist,(113)*OK+(w + 95)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(131)*OK+(w + 18)*OK);
Append(~Plist,(131)*OK+(w + 112)*OK);
Append(~Plist,(151)*OK+(w + 43)*OK);
Append(~Plist,(151)*OK+(w + 107)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(167)*OK+(w + 66)*OK);
Append(~Plist,(167)*OK+(w + 100)*OK);
Append(~Plist,(173)*OK+(w + 59)*OK);
Append(~Plist,(173)*OK+(w + 113)*OK);
Append(~Plist,(179)*OK+(w + 60)*OK);
Append(~Plist,(179)*OK+(w + 118)*OK);
Append(~Plist,(191)*OK+(w + 21)*OK);
Append(~Plist,(191)*OK+(w + 169)*OK);
Append(~Plist,(8*w + 69)*OK);
Append(~Plist,(-8*w + 77)*OK);
Append(~Plist,(199)*OK+(w + 45)*OK);
Append(~Plist,(199)*OK+(w + 153)*OK);
Append(~Plist,(223)*OK+(w + 52)*OK);
Append(~Plist,(223)*OK+(w + 170)*OK);
Append(~Plist,(241)*OK+(w + 85)*OK);
Append(~Plist,(241)*OK+(w + 155)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(269)*OK+(w + 101)*OK);
Append(~Plist,(269)*OK+(w + 167)*OK);
Append(~Plist,(271)*OK+(w + 104)*OK);
Append(~Plist,(271)*OK+(w + 166)*OK);
Append(~Plist,(-10*w + 93)*OK);
Append(~Plist,(10*w + 83)*OK);
Append(~Plist,(283)*OK+(w + 98)*OK);
Append(~Plist,(283)*OK+(w + 184)*OK);
Append(~Plist,(311)*OK+(w + 26)*OK);
Append(~Plist,(311)*OK+(w + 284)*OK);
Append(~Plist,(313)*OK+(w + 36)*OK);
Append(~Plist,(313)*OK+(w + 276)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(331)*OK+(w + 131)*OK);
Append(~Plist,(331)*OK+(w + 199)*OK);
Append(~Plist,(337)*OK+(w + 127)*OK);
Append(~Plist,(337)*OK+(w + 209)*OK);
Append(~Plist,(347)*OK+(w + 46)*OK);
Append(~Plist,(347)*OK+(w + 300)*OK);
Append(~Plist,(-14*w - 117)*OK);
Append(~Plist,(14*w - 131)*OK);
Append(~Plist,(359)*OK+(w + 156)*OK);
Append(~Plist,(359)*OK+(w + 202)*OK);
Append(~Plist,(373)*OK+(w + 67)*OK);
Append(~Plist,(373)*OK+(w + 305)*OK);
Append(~Plist,(6*w - 53)*OK);
Append(~Plist,(6*w + 47)*OK);
Append(~Plist,(-4*w - 39)*OK);
Append(~Plist,(4*w - 43)*OK);
Append(~Plist,(-18*w + 169)*OK);
Append(~Plist,(18*w + 151)*OK);
Append(~Plist,(419)*OK+(w + 126)*OK);
Append(~Plist,(419)*OK+(w + 292)*OK);
Append(~Plist,(421)*OK+(w + 65)*OK);
Append(~Plist,(421)*OK+(w + 355)*OK);
Append(~Plist,(10*w - 97)*OK);
Append(~Plist,(-10*w - 87)*OK);
Append(~Plist,(-4*w + 31)*OK);
Append(~Plist,(4*w + 27)*OK);
Append(~Plist,(449)*OK+(w + 182)*OK);
Append(~Plist,(449)*OK+(w + 266)*OK);
Append(~Plist,(457)*OK+(w + 135)*OK);
Append(~Plist,(457)*OK+(w + 321)*OK);
Append(~Plist,(-2*w + 29)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(479)*OK+(w + 193)*OK);
Append(~Plist,(479)*OK+(w + 285)*OK);
Append(~Plist,(491)*OK+(w + 99)*OK);
Append(~Plist,(491)*OK+(w + 391)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("2.1-a",(2)*OK+(w)*OK,[0, 1, 3, 0, -4, 5, -3, 3, 2, 2, 2, 2, -4, -3, 15, -10, 8, 6, 12, 8, 8, 18, 18, 12, -13, 12, 18, 8, -10]);
ECSearch("2.1-b",(2)*OK+(w)*OK,[0, 1, -3, 0, -4, 5, 3, -3, 2, 2, 2, 2, -4, 3, -15, -10, 8, -6, -12, 8, 8, -18, -18, -12, -13, -12, -18, 8, -10]);
ECSearch("2.2-a",(2)*OK+(w + 1)*OK,[0, 1, 0, 3, 5, -4, 3, -3, 2, 2, 2, 2, -4, 15, -3, 8, -10, 12, 6, 8, 8, 18, 12, 18, -13, 18, 12, -10, 8]);
ECSearch("2.2-b",(2)*OK+(w + 1)*OK,[0, 1, 0, -3, 5, -4, -3, 3, 2, 2, 2, 2, -4, -15, 3, 8, -10, -12, -6, 8, 8, -18, -12, -18, -13, -18, -12, -10, 8]);
ECSearch("4.1-a",(2)*OK,[-2, 3, -3, -4, -4, -6, 6, 2, 2, 2, 2, 14, 9, -9, -10, -10, -6, 6, -1, -1, 0, 6, -6, -22, 21, -21, 17, 17]);
ECSearch("4.1-b",(2)*OK,[-2, -3, 3, -4, -4, 6, -6, 2, 2, 2, 2, 14, -9, 9, -10, -10, 6, -6, -1, -1, 0, -6, 6, -22, -21, 21, 17, 17]);
ECSearch("5.1-a",(5)*OK+(w)*OK,[1, 1, 1, 0, 3, -3, 4, -8, 1, -5, -1, 5, -6, -8, 10, 1, 13, 4, -2, 13, -5, -18, 0, 6, -19, 8, 8, 5, -1]);
ECSearch("5.1-b",(5)*OK+(w)*OK,[-1, -1, 1, 0, 3, -3, -4, 8, 1, -5, -1, 5, -6, 8, -10, 1, 13, -4, 2, 13, -5, 18, 0, -6, -19, -8, -8, 5, -1]);
ECSearch("5.2-a",(5)*OK+(w + 4)*OK,[1, 1, 1, 0, -3, 3, -8, 4, -5, 1, 5, -1, -6, 10, -8, 13, 1, -2, 4, -5, 13, -18, 6, 0, -19, 8, 8, -1, 5]);
ECSearch("5.2-b",(5)*OK+(w + 4)*OK,[-1, -1, 1, 0, -3, 3, 8, -4, -5, 1, 5, -1, -6, -10, 8, 13, 1, 2, -4, -5, 13, 18, -6, 0, -19, -8, -8, -1, 5]);
