print "Field 2.2.373.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 93);
OK := Integers(K);
Plist := [];
Append(~Plist,(-w - 9)*OK);
Append(~Plist,(-w + 10)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(6*w + 55)*OK);
Append(~Plist,(-6*w + 61)*OK);
Append(~Plist,(7*w - 71)*OK);
Append(~Plist,(7*w + 64)*OK);
Append(~Plist,(w - 11)*OK);
Append(~Plist,(-w - 10)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(-4*w - 37)*OK);
Append(~Plist,(4*w - 41)*OK);
Append(~Plist,(3*w - 31)*OK);
Append(~Plist,(-3*w - 28)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(-25*w - 229)*OK);
Append(~Plist,(-25*w + 254)*OK);
Append(~Plist,(-11*w + 112)*OK);
Append(~Plist,(-11*w - 101)*OK);
Append(~Plist,(-9*w - 82)*OK);
Append(~Plist,(9*w - 91)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(-3*w + 29)*OK);
Append(~Plist,(3*w + 26)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(-15*w + 152)*OK);
Append(~Plist,(15*w + 137)*OK);
Append(~Plist,(-9*w + 92)*OK);
Append(~Plist,(-9*w - 83)*OK);
Append(~Plist,(-33*w + 335)*OK);
Append(~Plist,(33*w + 302)*OK);
Append(~Plist,(-10*w - 91)*OK);
Append(~Plist,(10*w - 101)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(-3*w - 25)*OK);
Append(~Plist,(-3*w + 28)*OK);
Append(~Plist,(-71*w - 650)*OK);
Append(~Plist,(71*w - 721)*OK);
Append(~Plist,(w + 16)*OK);
Append(~Plist,(w - 17)*OK);
Append(~Plist,(-46*w + 467)*OK);
Append(~Plist,(46*w + 421)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(-3*w + 26)*OK);
Append(~Plist,(3*w + 23)*OK);
Append(~Plist,(-84*w - 769)*OK);
Append(~Plist,(84*w - 853)*OK);
Append(~Plist,(-29*w + 295)*OK);
Append(~Plist,(-29*w - 266)*OK);
Append(~Plist,(-3*w - 32)*OK);
Append(~Plist,(3*w - 35)*OK);
Append(~Plist,(53*w + 485)*OK);
Append(~Plist,(53*w - 538)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(-2*w - 5)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-2*w + 1)*OK);
Append(~Plist,(72*w - 731)*OK);
Append(~Plist,(-72*w - 659)*OK);
Append(~Plist,(-15*w - 136)*OK);
Append(~Plist,(15*w - 151)*OK);
Append(~Plist,(-7*w + 74)*OK);
Append(~Plist,(-7*w - 67)*OK);
Append(~Plist,(-7*w - 61)*OK);
Append(~Plist,(-7*w + 68)*OK);
Append(~Plist,(-3*w - 19)*OK);
Append(~Plist,(3*w - 22)*OK);
Append(~Plist,(-3*w + 37)*OK);
Append(~Plist,(3*w + 34)*OK);
Append(~Plist,(-5*w - 41)*OK);
Append(~Plist,(5*w - 46)*OK);
Append(~Plist,(-36*w + 365)*OK);
Append(~Plist,(36*w + 329)*OK);
Append(~Plist,(9*w + 85)*OK);
Append(~Plist,(9*w - 94)*OK);
Append(~Plist,(-68*w + 691)*OK);
Append(~Plist,(68*w + 623)*OK);
Append(~Plist,(-16*w - 145)*OK);
Append(~Plist,(16*w - 161)*OK);
Append(~Plist,(26*w + 239)*OK);
Append(~Plist,(26*w - 265)*OK);
Append(~Plist,(-48*w - 439)*OK);
Append(~Plist,(48*w - 487)*OK);
Append(~Plist,(6*w + 59)*OK);
Append(~Plist,(6*w - 65)*OK);
Append(~Plist,(107*w + 980)*OK);
Append(~Plist,(-107*w + 1087)*OK);
Append(~Plist,(-21*w + 212)*OK);
Append(~Plist,(-21*w - 191)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(w + 25)*OK);
Append(~Plist,(w - 26)*OK);
Append(~Plist,(40*w + 367)*OK);
Append(~Plist,(-40*w + 407)*OK);
Append(~Plist,(-11*w + 109)*OK);
Append(~Plist,(11*w + 98)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("3.1-a",(-w - 9)*OK,[0, -1, -2, -3, 5, -2, -6, 0, -2, -3, -2, -9, 4, 0, -8, 3, -4, 1, 3, -3, -5, -8, -16, -15, -12, 1, -8, 19, 12]);
ECSearch("3.2-a",(-w + 10)*OK,[0, -1, -3, -2, -2, 5, 0, -6, -2, -2, -3, 4, -9, -8, 0, -4, 3, 3, 1, -5, -3, -16, -8, -12, -15, -8, 1, 12, 19]);
ECSearch("7.1-a",(6*w + 55)*OK,[3, 1, 0, -4, -5, 5, 3, 1, 2, 6, 2, 5, 3, 5, -3, -5, -11, -7, 11, 13, 9, 1, 11, -9, 9, 1, 3, 17, 3]);
ECSearch("7.2-a",(-6*w + 61)*OK,[1, 3, 0, -4, 5, -5, 1, 3, 2, 2, 6, 3, 5, -3, 5, -11, -5, 11, -7, 9, 13, 11, 1, 9, -9, 3, 1, 3, 17]);
ECSearch("9.2-a",(13*w - 132)*OK,[0, 1, -2, -3, -5, 2, 6, 0, 2, -3, 2, -9, 4, 0, 8, 3, 4, 1, -3, 3, -5, 8, 16, 15, -12, 1, 8, -19, 12]);
ECSearch("9.3-a",(13*w + 119)*OK,[0, 1, -3, -2, 2, -5, 0, 6, 2, 2, -3, 4, -9, 8, 0, 4, 3, -3, 1, -5, 3, 16, 8, -12, 15, 8, 1, 12, -19]);
