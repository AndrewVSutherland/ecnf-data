print "Field 2.2.344.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 86);
OK := Integers(K);
Plist := [];
Append(~Plist,(-11*w - 102)*OK);
Append(~Plist,(w - 9)*OK);
Append(~Plist,(w + 9)*OK);
Append(~Plist,(4*w - 37)*OK);
Append(~Plist,(-4*w - 37)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-7*w - 65)*OK);
Append(~Plist,(7*w - 65)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(-15*w + 139)*OK);
Append(~Plist,(-15*w - 139)*OK);
Append(~Plist,(w + 7)*OK);
Append(~Plist,(w - 7)*OK);
Append(~Plist,(40*w - 371)*OK);
Append(~Plist,(40*w + 371)*OK);
Append(~Plist,(51*w - 473)*OK);
Append(~Plist,(5*w - 47)*OK);
Append(~Plist,(5*w + 47)*OK);
Append(~Plist,(w + 5)*OK);
Append(~Plist,(w - 5)*OK);
Append(~Plist,(-3*w - 29)*OK);
Append(~Plist,(-3*w + 29)*OK);
Append(~Plist,(6*w + 55)*OK);
Append(~Plist,(-6*w + 55)*OK);
Append(~Plist,(w + 13)*OK);
Append(~Plist,(w - 13)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(-13*w - 121)*OK);
Append(~Plist,(13*w - 121)*OK);
Append(~Plist,(w + 15)*OK);
Append(~Plist,(w - 15)*OK);
Append(~Plist,(-3*w - 25)*OK);
Append(~Plist,(3*w - 25)*OK);
Append(~Plist,(4*w - 35)*OK);
Append(~Plist,(-4*w - 35)*OK);
Append(~Plist,(-59*w + 547)*OK);
Append(~Plist,(-59*w - 547)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(34*w - 315)*OK);
Append(~Plist,(-34*w - 315)*OK);
Append(~Plist,(-24*w + 223)*OK);
Append(~Plist,(24*w + 223)*OK);
Append(~Plist,(-70*w + 649)*OK);
Append(~Plist,(-70*w - 649)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(-5*w - 49)*OK);
Append(~Plist,(-5*w + 49)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(31*w + 287)*OK);
Append(~Plist,(31*w - 287)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(-19*w - 177)*OK);
Append(~Plist,(19*w - 177)*OK);
Append(~Plist,(27*w + 251)*OK);
Append(~Plist,(27*w - 251)*OK);
Append(~Plist,(-98*w - 909)*OK);
Append(~Plist,(98*w - 909)*OK);
Append(~Plist,(-103*w + 955)*OK);
Append(~Plist,(-103*w - 955)*OK);
Append(~Plist,(-46*w - 427)*OK);
Append(~Plist,(46*w - 427)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(13*w - 119)*OK);
Append(~Plist,(13*w + 119)*OK);
Append(~Plist,(-131*w - 1215)*OK);
Append(~Plist,(131*w - 1215)*OK);
Append(~Plist,(-42*w + 389)*OK);
Append(~Plist,(42*w + 389)*OK);
Append(~Plist,(-25*w + 231)*OK);
Append(~Plist,(-25*w - 231)*OK);
Append(~Plist,(-22*w - 205)*OK);
Append(~Plist,(22*w - 205)*OK);
Append(~Plist,(19*w + 175)*OK);
Append(~Plist,(-19*w + 175)*OK);
Append(~Plist,(w + 23)*OK);
Append(~Plist,(w - 23)*OK);
Append(~Plist,(8*w - 71)*OK);
Append(~Plist,(-8*w - 71)*OK);
Append(~Plist,(12*w + 109)*OK);
Append(~Plist,(-12*w + 109)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(-7*w - 69)*OK);
Append(~Plist,(-7*w + 69)*OK);
Append(~Plist,(-79*w + 733)*OK);
Append(~Plist,(79*w + 733)*OK);
Append(~Plist,(20*w - 187)*OK);
Append(~Plist,(20*w + 187)*OK);
Append(~Plist,(64*w - 593)*OK);
Append(~Plist,(-64*w - 593)*OK);
Append(~Plist,(-2*w + 31)*OK);
Append(~Plist,(2*w + 31)*OK);
Append(~Plist,(11*w - 105)*OK);
Append(~Plist,(11*w + 105)*OK);
Append(~Plist,(-50*w + 463)*OK);
Append(~Plist,(50*w + 463)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[0, 0, 0, 0, 0, -2, -6, -6, 6, 6, 0, 0, 0, 0, 6, 6, 10, 6, 6, 0, 0, -14, -14, 0, 0, 18, 18, 10, 10, -6]);
ECSearch("9.1-a",(3)*OK,[-2, -1, 1, -1, 3, -1, 5, 4, -4, -3, 3, 6, 2, 2, 6, -8, -8, 0, -6, -10, 8, 4, 0, -8, -9, -3, -5, -5, -15]);
ECSearch("9.1-b",(3)*OK,[-2, 1, -1, 3, -1, 5, -1, -4, 4, 3, -3, 2, 6, 6, 2, -8, 0, -8, -10, -6, 4, 8, -8, 0, -3, -9, -5, -5, 3]);
ECSearch("9.1-c",(3)*OK,[2, -1, 1, -3, 1, 5, -1, -4, 4, -3, 3, -2, -6, 6, 2, -8, 0, -8, 10, 6, 4, 8, 8, 0, -3, -9, -5, -5, 3]);
ECSearch("9.1-d",(3)*OK,[2, 1, -1, 1, -3, -1, 5, 4, -4, 3, -3, -6, -2, 2, 6, -8, -8, 0, 6, 10, 8, 4, 0, 8, -9, -3, -5, -5, -15]);
ECSearch("10.1-a",(-3*w + 28)*OK,[-2, 2, 1, -1, 2, 5, 2, -3, 3, 10, 9, -2, -2, 6, 1, 4, 0, -4, -10, 3, 12, 6, -14, 15, 3, -16, 9, -4]);
ECSearch("10.1-b",(-3*w + 28)*OK,[2, -2, -1, -1, 2, 5, 2, -3, -3, -10, -9, 2, -2, 6, 1, 4, 0, 4, 10, 3, 12, -6, 14, 15, 3, -16, 9, -4]);
ECSearch("10.2-a",(-3*w - 28)*OK,[-2, 1, 2, -1, 5, 2, -3, 2, 10, 3, -2, 9, 6, -2, 1, 0, 4, -10, -4, 12, 3, -14, 6, 3, 15, 9, -16, -8]);
ECSearch("10.2-b",(-3*w - 28)*OK,[2, -1, -2, -1, 5, 2, -3, 2, -10, -3, 2, -9, 6, -2, 1, 0, 4, 10, 4, 12, 3, 14, -6, 3, 15, 9, -16, -8]);
