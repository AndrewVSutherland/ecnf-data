print "Field 2.2.213.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 53);
OK := Integers(K);
Plist := [];
Append(~Plist,(w + 7)*OK);
Append(~Plist,(2)*OK);
Append(~Plist,(-w + 7)*OK);
Append(~Plist,(-w - 6)*OK);
Append(~Plist,(2*w - 15)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(w - 9)*OK);
Append(~Plist,(w + 5)*OK);
Append(~Plist,(w - 6)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(w + 9)*OK);
Append(~Plist,(w - 10)*OK);
Append(~Plist,(w + 3)*OK);
Append(~Plist,(w - 4)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(-2*w - 15)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(w)*OK);
Append(~Plist,(w - 1)*OK);
Append(~Plist,(-3*w - 19)*OK);
Append(~Plist,(3*w - 22)*OK);
Append(~Plist,(-5*w + 38)*OK);
Append(~Plist,(-3*w + 25)*OK);
Append(~Plist,(-3*w - 22)*OK);
Append(~Plist,(w + 11)*OK);
Append(~Plist,(w - 12)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 13)*OK);
Append(~Plist,(-4*w + 33)*OK);
Append(~Plist,(-4*w - 29)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(-3*w + 20)*OK);
Append(~Plist,(3*w + 17)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(-5*w + 41)*OK);
Append(~Plist,(-5*w - 36)*OK);
Append(~Plist,(w + 14)*OK);
Append(~Plist,(w - 15)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(-3*w - 16)*OK);
Append(~Plist,(3*w - 19)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(2*w + 3)*OK);
Append(~Plist,(-6*w + 49)*OK);
Append(~Plist,(-6*w - 43)*OK);
Append(~Plist,(-3*w + 28)*OK);
Append(~Plist,(3*w + 25)*OK);
Append(~Plist,(-4*w + 27)*OK);
Append(~Plist,(4*w + 23)*OK);
Append(~Plist,(5*w + 37)*OK);
Append(~Plist,(-5*w + 42)*OK);
Append(~Plist,(-3*w + 17)*OK);
Append(~Plist,(3*w + 14)*OK);
Append(~Plist,(-7*w + 52)*OK);
Append(~Plist,(7*w + 45)*OK);
Append(~Plist,(-3*w - 13)*OK);
Append(~Plist,(3*w - 16)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(-3*w - 26)*OK);
Append(~Plist,(3*w - 29)*OK);
Append(~Plist,(-9*w - 59)*OK);
Append(~Plist,(9*w - 68)*OK);
Append(~Plist,(-8*w + 65)*OK);
Append(~Plist,(-8*w - 57)*OK);
Append(~Plist,(-6*w - 37)*OK);
Append(~Plist,(6*w - 43)*OK);
Append(~Plist,(-3*w - 10)*OK);
Append(~Plist,(3*w - 13)*OK);
Append(~Plist,(7*w - 51)*OK);
Append(~Plist,(7*w + 44)*OK);
Append(~Plist,(w + 20)*OK);
Append(~Plist,(w - 21)*OK);
Append(~Plist,(-4*w + 37)*OK);
Append(~Plist,(4*w + 33)*OK);
Append(~Plist,(-9*w + 73)*OK);
Append(~Plist,(-9*w - 64)*OK);
Append(~Plist,(-8*w - 51)*OK);
Append(~Plist,(-8*w + 59)*OK);
Append(~Plist,(-3*w + 11)*OK);
Append(~Plist,(3*w + 8)*OK);
Append(~Plist,(5*w + 28)*OK);
Append(~Plist,(5*w - 33)*OK);
Append(~Plist,(w + 21)*OK);
Append(~Plist,(w - 22)*OK);
Append(~Plist,(12*w - 91)*OK);
Append(~Plist,(13*w - 99)*OK);
Append(~Plist,(-3*w - 4)*OK);
Append(~Plist,(3*w - 7)*OK);
Append(~Plist,(-5*w + 32)*OK);
Append(~Plist,(-5*w - 27)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(-3*w + 5)*OK);
Append(~Plist,(3*w + 2)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[-1, 0, 0, 0, 0, -1, -1, 5, -5, -6, -8, -8, -10, 10, 9, 9, 5, -5, -11, -10, 10, -10, 10, 0, 1, 1, -4, -4, -16]);
ECSearch("4.1-b",(2)*OK,[1, 6, -6, 6, -6, -7, -7, -3, 3, -10, 2, 2, 0, 0, -1, -1, 9, -9, 5, -6, 6, -6, 6, 0, -7, -7, -10, -10, -4]);
ECSearch("4.1-c",(2)*OK,[1, -6, 6, -6, 6, -7, -7, 3, -3, -10, 2, 2, 0, 0, -1, -1, -9, 9, 5, 6, -6, 6, -6, 0, -7, -7, -10, -10, -4]);
ECSearch("4.1-d",(2)*OK,[-1, 0, 0, 0, 0, -1, -1, -5, 5, -6, -8, -8, 10, -10, 9, 9, -5, 5, -11, 10, -10, 10, -10, 0, 1, 1, -4, -4, -16]);
ECSearch("12.1-a",(2*w + 14)*OK,[-3, 3, 6, -6, -1, -1, -2, 2, -9, -2, -2, -11, 11, -3, -3, -2, 2, 13, 4, -4, 13, -13, 0, -5, -5, 8, 8, 2]);
ECSearch("12.1-b",(2*w + 14)*OK,[3, -3, -6, 6, -1, -1, 2, -2, -9, -2, -2, 11, -11, -3, -3, 2, -2, 13, -4, 4, -13, 13, 0, -5, -5, 8, 8, 2]);
ECSearch("25.1-a",(5)*OK,[-2, 0, -6, 6, -6, 6, 1, 1, 4, -4, -4, -4, 0, 0, -4, -4, 13, -13, 13, -1, 1, 10, -10, 0, -8, -8, 13, 13, -14]);
ECSearch("25.1-b",(5)*OK,[-2, 0, 6, -6, 6, -6, 1, 1, -4, 4, -4, -4, 0, 0, -4, -4, -13, 13, 13, 1, -1, -10, 10, 0, -8, -8, 13, 13, -14]);
ECSearch("36.1-a",(6)*OK,[0, -1, 7, -6, 5, -8, -6, -8, 6, -1, 10, 6, 9, -4, -12, 9, 0, 2, 3, -12, 12, 0, 2, 1, -13, 0, 15, 15]);
ECSearch("36.1-b",(6)*OK,[3, -4, 4, -3, 6, -1, -4, -4, -6, 2, -5, -5, -12, 4, 4, 0, -7, -8, -4, -11, 6, -8, 10, 7, -7, -7, 14, -8]);
ECSearch("36.1-c",(6)*OK,[0, -6, 0, 6, 5, -1, -1, 1, 6, -8, 10, 8, -2, 3, 9, 5, 7, -5, -10, -2, 2, -14, 12, 1, 1, 14, 8, 8]);
ECSearch("36.1-d",(6)*OK,[-1, -3, -6, -2, 7, -1, 4, 0, 3, 4, 8, 3, 9, 9, -7, 6, -6, 5, -6, -6, -9, -3, -4, -1, 7, 6, -6, -14]);
ECSearch("36.1-e",(6)*OK,[-6, 0, 6, 0, -1, 5, 1, -1, 6, 10, -8, -2, 8, 9, 3, 7, 5, -5, -2, -10, -14, 2, 12, 1, 1, 8, 14, -4]);
ECSearch("36.1-f",(6)*OK,[1, 3, 6, 2, 7, -1, -4, 0, 3, 4, 8, -3, -9, 9, -7, -6, 6, 5, 6, 6, 9, 3, 4, -1, 7, 6, -6, -14]);
ECSearch("36.1-g",(6)*OK,[4, -3, 3, -4, -1, 6, 4, 4, -6, -5, 2, 12, 5, 4, 4, 7, 0, -8, 11, 4, 8, -6, -10, -7, 7, 14, -7, 13]);
ECSearch("36.1-h",(6)*OK,[-3, -1, -2, -6, -1, 7, 0, 4, 3, 8, 4, 9, 3, -7, 9, -6, 6, 5, -6, -6, -3, -9, -4, 7, -1, -6, 6, 18]);
ECSearch("36.1-i",(6)*OK,[0, 6, 0, -6, 5, -1, 1, -1, 6, -8, 10, -8, 2, 3, 9, -5, -7, -5, 10, 2, -2, 14, -12, 1, 1, 14, 8, 8]);
ECSearch("36.1-j",(6)*OK,[1, 0, 6, -7, -8, 5, 8, 6, 6, 10, -1, -9, -6, -12, -4, 0, -9, 2, 12, -3, 0, -12, -2, -13, 1, 15, 0, 10]);
ECSearch("36.1-k",(6)*OK,[0, 1, -7, 6, 5, -8, 6, 8, 6, -1, 10, -6, -9, -4, -12, -9, 0, 2, -3, 12, -12, 0, -2, 1, -13, 0, 15, 15]);
ECSearch("36.1-l",(6)*OK,[-3, 4, -4, 3, 6, -1, 4, 4, -6, 2, -5, 5, 12, 4, 4, 0, 7, -8, 4, 11, -6, 8, -10, 7, -7, -7, 14, -8]);
ECSearch("36.1-m",(6)*OK,[-4, 3, -3, 4, -1, 6, -4, -4, -6, -5, 2, -12, -5, 4, 4, -7, 0, -8, -11, -4, -8, 6, 10, -7, 7, 14, -7, 13]);
ECSearch("36.1-n",(6)*OK,[3, 1, 2, 6, -1, 7, 0, -4, 3, 8, 4, -9, -3, -7, 9, 6, -6, 5, 6, 6, 3, 9, 4, 7, -1, -6, 6, 18]);
ECSearch("36.1-o",(6)*OK,[6, 0, -6, 0, -1, 5, -1, 1, 6, 10, -8, 2, -8, 9, 3, -7, -5, -5, 2, 10, 14, -2, -12, 1, 1, 8, 14, -4]);
ECSearch("36.1-p",(6)*OK,[-1, 0, -6, 7, -8, 5, -8, -6, 6, 10, -1, 9, 6, -12, -4, 0, 9, 2, -12, 3, 0, 12, 2, -13, 1, 15, 0, 10]);
ECSearch("49.1-a",(7)*OK,[-2, -3, 4, -4, 2, -2, 2, 2, 0, 0, -6, 2, 2, -6, 6, 4, 4, 8, -8, -8, 8, 12, -12, 0, 6, 6, -4, -4, 10]);
ECSearch("49.1-b",(7)*OK,[-2, -3, -4, 4, -2, 2, 2, 2, 0, 0, -6, 2, 2, 6, -6, 4, 4, -8, 8, 8, -8, -12, 12, 0, 6, 6, -4, -4, 10]);
ECSearch("68.1-a",(4*w - 30)*OK,[3, 0, 6, -4, -5, -7, 3, -3, -2, -4, -4, -6, -10, -1, 5, -11, 5, 9, -6, -6, -14, -6, 8, -5, -3, 0, 2, -4]);
ECSearch("68.1-b",(4*w - 30)*OK,[0, -3, 3, 2, 1, 5, 6, 0, -5, 8, 2, -9, -7, 5, -7, -2, -4, -9, -12, 12, 1, -3, 8, 1, -9, -6, 14, -4]);
ECSearch("68.1-c",(4*w - 30)*OK,[0, 3, -3, -2, 1, 5, -6, 0, -5, 8, 2, 9, 7, 5, -7, 2, 4, -9, 12, -12, -1, 3, -8, 1, -9, -6, 14, -4]);
ECSearch("68.1-d",(4*w - 30)*OK,[3, 0, -6, 4, -5, -7, -3, 3, -2, -4, -4, 6, 10, -1, 5, 11, -5, 9, 6, 6, 14, 6, -8, -5, -3, 0, 2, -4]);
ECSearch("68.2-a",(4*w + 26)*OK,[3, 6, 0, -4, -7, -5, -3, 3, -2, -4, -4, -10, -6, 5, -1, 5, -11, 9, -6, -6, -6, -14, 8, -3, -5, 2, 0, 6]);
ECSearch("68.2-b",(4*w + 26)*OK,[0, 3, -3, 2, 5, 1, 0, 6, -5, 2, 8, -7, -9, -7, 5, -4, -2, -9, 12, -12, -3, 1, 8, -9, 1, 14, -6, 0]);
ECSearch("68.2-c",(4*w + 26)*OK,[0, -3, 3, -2, 5, 1, 0, -6, -5, 2, 8, 7, 9, -7, 5, 4, 2, -9, -12, 12, 3, -1, -8, -9, 1, 14, -6, 0]);
ECSearch("68.2-d",(4*w + 26)*OK,[3, -6, 0, 4, -7, -5, 3, -3, -2, -4, -4, 10, 6, 5, -1, -5, 11, 9, 6, 6, 6, 14, -8, -3, -5, 2, 0, 6]);
ECSearch("69.1-a",(-2*w + 13)*OK,[1, -4, 4, -6, -2, 4, -4, 8, 2, -2, 6, -10, -6, 4, -4, 4, 12, 2, -6, -2, 8, -8, 0, 10, -6, 0, -8, 8]);
ECSearch("69.1-b",(-2*w + 13)*OK,[1, 4, -4, 6, 2, 4, -4, -8, 2, -2, 6, 10, 6, 4, -4, -4, -12, 2, 6, 2, -8, 8, 0, 10, -6, 0, -8, 8]);
ECSearch("69.2-a",(2*w + 11)*OK,[1, 4, -4, -2, -6, -4, 4, 8, 2, 6, -2, -6, -10, -4, 4, 12, 4, 2, -2, -6, -8, 8, 0, -6, 10, -8, 0, -16]);
ECSearch("69.2-b",(2*w + 11)*OK,[1, -4, 4, 2, 6, -4, 4, -8, 2, 6, -2, 6, 10, -4, 4, -12, -4, 2, 2, 6, 8, -8, 0, -6, 10, -8, 0, -16]);
