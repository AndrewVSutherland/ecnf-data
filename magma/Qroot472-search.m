print "Field 2.2.472.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 118);
OK := Integers(K);
Plist := [];
Append(~Plist,(51*w - 554)*OK);
Append(~Plist,(-w + 11)*OK);
Append(~Plist,(w + 11)*OK);
Append(~Plist,(29*w + 315)*OK);
Append(~Plist,(29*w - 315)*OK);
Append(~Plist,(8*w - 87)*OK);
Append(~Plist,(8*w + 87)*OK);
Append(~Plist,(15*w + 163)*OK);
Append(~Plist,(15*w - 163)*OK);
Append(~Plist,(6*w + 65)*OK);
Append(~Plist,(6*w - 65)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(2*w - 21)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(w + 9)*OK);
Append(~Plist,(w - 9)*OK);
Append(~Plist,(124*w - 1347)*OK);
Append(~Plist,(124*w + 1347)*OK);
Append(~Plist,(36*w + 391)*OK);
Append(~Plist,(36*w - 391)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(277*w + 3009)*OK);
Append(~Plist,(-13*w + 141)*OK);
Append(~Plist,(-13*w - 141)*OK);
Append(~Plist,(-3*w - 31)*OK);
Append(~Plist,(3*w - 31)*OK);
Append(~Plist,(-182*w + 1977)*OK);
Append(~Plist,(-182*w - 1977)*OK);
Append(~Plist,(w + 15)*OK);
Append(~Plist,(w - 15)*OK);
Append(~Plist,(w + 3)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(-4*w + 45)*OK);
Append(~Plist,(-4*w - 45)*OK);
Append(~Plist,(117*w + 1271)*OK);
Append(~Plist,(117*w - 1271)*OK);
Append(~Plist,(-9*w + 97)*OK);
Append(~Plist,(9*w + 97)*OK);
Append(~Plist,(50*w + 543)*OK);
Append(~Plist,(50*w - 543)*OK);
Append(~Plist,(-7*w - 75)*OK);
Append(~Plist,(-7*w + 75)*OK);
Append(~Plist,(3*w + 35)*OK);
Append(~Plist,(-3*w + 35)*OK);
Append(~Plist,(-27*w + 293)*OK);
Append(~Plist,(-27*w - 293)*OK);
Append(~Plist,(-138*w - 1499)*OK);
Append(~Plist,(138*w - 1499)*OK);
Append(~Plist,(-168*w + 1825)*OK);
Append(~Plist,(168*w + 1825)*OK);
Append(~Plist,(-335*w + 3639)*OK);
Append(~Plist,(-335*w - 3639)*OK);
Append(~Plist,(-6*w + 67)*OK);
Append(~Plist,(-6*w - 67)*OK);
Append(~Plist,(-19*w + 207)*OK);
Append(~Plist,(19*w + 207)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(189*w - 2053)*OK);
Append(~Plist,(-189*w - 2053)*OK);
Append(~Plist,(14*w + 153)*OK);
Append(~Plist,(14*w - 153)*OK);
Append(~Plist,(-3*w + 37)*OK);
Append(~Plist,(3*w + 37)*OK);
Append(~Plist,(-321*w + 3487)*OK);
Append(~Plist,(321*w + 3487)*OK);
Append(~Plist,(-5*w - 51)*OK);
Append(~Plist,(5*w - 51)*OK);
Append(~Plist,(-4*w + 39)*OK);
Append(~Plist,(4*w + 39)*OK);
Append(~Plist,(-33*w + 359)*OK);
Append(~Plist,(33*w + 359)*OK);
Append(~Plist,(71*w + 771)*OK);
Append(~Plist,(71*w - 771)*OK);
Append(~Plist,(-23*w + 249)*OK);
Append(~Plist,(23*w + 249)*OK);
Append(~Plist,(-48*w + 521)*OK);
Append(~Plist,(-48*w - 521)*OK);
Append(~Plist,(-474*w + 5149)*OK);
Append(~Plist,(474*w + 5149)*OK);
Append(~Plist,(-82*w - 891)*OK);
Append(~Plist,(82*w - 891)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(61*w + 663)*OK);
Append(~Plist,(61*w - 663)*OK);
Append(~Plist,(-627*w + 6811)*OK);
Append(~Plist,(627*w + 6811)*OK);
Append(~Plist,(78*w + 847)*OK);
Append(~Plist,(78*w - 847)*OK);
Append(~Plist,(-21*w - 227)*OK);
Append(~Plist,(21*w - 227)*OK);
Append(~Plist,(-10*w + 111)*OK);
Append(~Plist,(-10*w - 111)*OK);
Append(~Plist,(-729*w - 7919)*OK);
Append(~Plist,(933*w + 10135)*OK);
Append(~Plist,(-55*w + 597)*OK);
Append(~Plist,(-55*w - 597)*OK);
Append(~Plist,(-147*w + 1597)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[0, -2, -2, 0, 0, 6, 6, -2, -2, 0, 0, 10, 0, 0, 0, 0, 6, 6, 0, 0, 14, -6, 0, 0, 0, 0, 0, 0, 6, 6]);
ECSearch("6.1-a",(7*w - 76)*OK,[0, 3, -1, -1, 3, 4, 4, 4, 0, -6, 4, -4, -1, -5, -9, 3, 12, 0, 3, 0, -2, -2, -9, -17, 12, 16, -8, 0]);
ECSearch("6.1-b",(7*w - 76)*OK,[0, -3, 1, -1, 3, 4, 4, -4, 0, -6, -4, 4, 1, 5, -9, 3, -12, 0, 3, 0, 2, 2, 9, 17, -12, -16, -8, 0]);
ECSearch("6.2-a",(-7*w - 76)*OK,[0, -1, 3, 3, -1, 4, 4, 0, 4, -6, -4, 4, -5, -1, 3, -9, 0, 12, 3, 0, -2, -2, -17, -9, 16, 12, 0, -8]);
ECSearch("6.2-b",(-7*w - 76)*OK,[0, 1, -3, 3, -1, 4, 4, 0, -4, -6, 4, -4, 5, 1, 3, -9, 0, -12, 3, 0, 2, 2, 17, 9, -16, -12, 0, -8]);
