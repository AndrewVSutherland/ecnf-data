print "Field 2.2.220.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 55);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(3)*OK+(w + 1)*OK);
Append(~Plist,(3)*OK+(w + 2)*OK);
Append(~Plist,(2*w - 15)*OK);
Append(~Plist,(-3*w - 22)*OK);
Append(~Plist,(13)*OK+(w + 4)*OK);
Append(~Plist,(13)*OK+(w + 9)*OK);
Append(~Plist,(17)*OK+(w + 2)*OK);
Append(~Plist,(17)*OK+(w + 15)*OK);
Append(~Plist,(w + 6)*OK);
Append(~Plist,(w - 6)*OK);
Append(~Plist,(23)*OK+(w + 3)*OK);
Append(~Plist,(23)*OK+(w + 20)*OK);
Append(~Plist,(47)*OK+(w + 14)*OK);
Append(~Plist,(47)*OK+(w + 33)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(67)*OK+(w + 16)*OK);
Append(~Plist,(67)*OK+(w + 51)*OK);
Append(~Plist,(73)*OK+(w + 36)*OK);
Append(~Plist,(73)*OK+(w + 37)*OK);
Append(~Plist,(5*w + 36)*OK);
Append(~Plist,(5*w - 36)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 12)*OK);
Append(~Plist,(103)*OK+(w + 40)*OK);
Append(~Plist,(103)*OK+(w + 63)*OK);
Append(~Plist,(6*w + 43)*OK);
Append(~Plist,(-6*w + 43)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(4*w - 27)*OK);
Append(~Plist,(-4*w - 27)*OK);
Append(~Plist,(163)*OK+(w + 50)*OK);
Append(~Plist,(163)*OK+(w + 113)*OK);
Append(~Plist,(173)*OK+(w + 48)*OK);
Append(~Plist,(173)*OK+(w + 125)*OK);
Append(~Plist,(-3*w - 26)*OK);
Append(~Plist,(3*w - 26)*OK);
Append(~Plist,(193)*OK+(w + 21)*OK);
Append(~Plist,(193)*OK+(w + 172)*OK);
Append(~Plist,(197)*OK+(w + 45)*OK);
Append(~Plist,(197)*OK+(w + 152)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(223)*OK+(w + 72)*OK);
Append(~Plist,(223)*OK+(w + 151)*OK);
Append(~Plist,(-6*w - 47)*OK);
Append(~Plist,(-6*w + 47)*OK);
Append(~Plist,(233)*OK+(w + 88)*OK);
Append(~Plist,(233)*OK+(w + 145)*OK);
Append(~Plist,(-3*w - 16)*OK);
Append(~Plist,(3*w - 16)*OK);
Append(~Plist,(w + 18)*OK);
Append(~Plist,(w - 18)*OK);
Append(~Plist,(8*w + 57)*OK);
Append(~Plist,(-8*w + 57)*OK);
Append(~Plist,(277)*OK+(w + 71)*OK);
Append(~Plist,(277)*OK+(w + 206)*OK);
Append(~Plist,(293)*OK+(w + 73)*OK);
Append(~Plist,(293)*OK+(w + 220)*OK);
Append(~Plist,(337)*OK+(w + 27)*OK);
Append(~Plist,(337)*OK+(w + 310)*OK);
Append(~Plist,(9*w + 64)*OK);
Append(~Plist,(-9*w + 64)*OK);
Append(~Plist,(367)*OK+(w + 34)*OK);
Append(~Plist,(367)*OK+(w + 333)*OK);
Append(~Plist,(373)*OK+(w + 146)*OK);
Append(~Plist,(373)*OK+(w + 227)*OK);
Append(~Plist,(383)*OK+(w + 173)*OK);
Append(~Plist,(383)*OK+(w + 210)*OK);
Append(~Plist,(5*w + 42)*OK);
Append(~Plist,(-5*w + 42)*OK);
Append(~Plist,(11*w + 84)*OK);
Append(~Plist,(-11*w + 84)*OK);
Append(~Plist,(6*w - 49)*OK);
Append(~Plist,(6*w + 49)*OK);
Append(~Plist,(-3*w + 8)*OK);
Append(~Plist,(3*w + 8)*OK);
Append(~Plist,(-4*w - 21)*OK);
Append(~Plist,(4*w - 21)*OK);
Append(~Plist,(443)*OK+(w + 99)*OK);
Append(~Plist,(443)*OK+(w + 344)*OK);
Append(~Plist,(-8*w - 63)*OK);
Append(~Plist,(-8*w + 63)*OK);
Append(~Plist,(457)*OK+(w + 91)*OK);
Append(~Plist,(457)*OK+(w + 366)*OK);
Append(~Plist,(463)*OK+(w + 38)*OK);
Append(~Plist,(463)*OK+(w + 425)*OK);
Append(~Plist,(467)*OK+(w + 191)*OK);
Append(~Plist,(467)*OK+(w + 276)*OK);
Append(~Plist,(-3*w - 4)*OK);
Append(~Plist,(3*w - 4)*OK);
Append(~Plist,(487)*OK+(w + 223)*OK);
Append(~Plist,(487)*OK+(w + 264)*OK);
Append(~Plist,(-3*w + 2)*OK);
Append(~Plist,(3*w + 2)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(w + 24)*OK);
Append(~Plist,(w - 24)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("8.1-a",(4)*OK+(2*w + 2)*OK,[3, 1, 0, -4, 2, -6, -5, 3, -1, -3, -6, -2, 0, 8, -5, 12, -4, 2, -14, 6, 2, 11, 3, -6, -10, -3, -1, 4, 4]);
ECSearch("8.1-b",(4)*OK+(2*w + 2)*OK,[1, 3, 0, 4, 6, -2, -3, 5, 3, 1, -2, -6, 8, 0, -5, -4, 12, 14, -2, -2, -6, 3, 11, -10, -6, 1, 3, -4, -4]);
ECSearch("8.1-c",(4)*OK+(2*w + 2)*OK,[3, 1, 0, 4, -2, 6, 5, -3, 1, 3, -6, -2, 0, 8, -5, 12, -4, -2, 14, -6, -2, 11, 3, -6, -10, 3, 1, -4, -4]);
ECSearch("8.1-d",(4)*OK+(2*w + 2)*OK,[-1, -3, 0, -4, 6, -2, -3, 5, -3, -1, 2, 6, -8, 0, -5, 4, -12, 14, -2, 2, 6, 3, 11, 10, 6, -1, -3, 4, 4]);
ECSearch("8.1-e",(4)*OK+(2*w + 2)*OK,[1, 3, 0, -4, -6, 2, 3, -5, -3, -1, -2, -6, 8, 0, -5, -4, 12, -14, 2, 2, 6, 3, 11, -10, -6, -1, -3, 4, 4]);
ECSearch("8.1-f",(4)*OK+(2*w + 2)*OK,[-3, -1, 0, 4, 2, -6, -5, 3, 1, 3, 6, 2, 0, -8, -5, -12, 4, 2, -14, -6, -2, 11, 3, 6, 10, 3, 1, -4, -4]);
ECSearch("8.1-g",(4)*OK+(2*w + 2)*OK,[-1, -3, 0, 4, -6, 2, 3, -5, 3, 1, 2, 6, -8, 0, -5, 4, -12, -14, 2, -2, -6, 3, 11, 10, 6, 1, 3, -4, -4]);
ECSearch("8.1-h",(4)*OK+(2*w + 2)*OK,[-3, -1, 0, -4, -2, 6, 5, -3, -1, -3, 6, 2, 0, -8, -5, -12, 4, -2, 14, 6, 2, 11, 3, 6, 10, -3, -1, 4, 4]);
ECSearch("9.1-a",(3)*OK,[-1, -2, 0, -2, -2, 2, 2, -8, 8, 4, -4, -4, 4, 2, 4, -4, 2, 2, 8, -8, -6, -6, 12, -12, 8, -8, -16, 16]);
ECSearch("9.1-b",(3)*OK,[1, -2, 0, 2, 2, -2, -2, -8, 8, -4, 4, 4, -4, 2, -4, 4, -2, -2, 8, -8, -6, -6, -12, 12, 8, -8, -16, 16]);
ECSearch("9.1-c",(3)*OK,[1, -2, 0, 2, 2, -2, -2, 8, -8, 4, -4, -4, 4, 2, 4, -4, -2, -2, -8, 8, -6, -6, 12, -12, -8, 8, 16, -16]);
ECSearch("9.1-d",(3)*OK,[-1, -2, 0, -2, -2, 2, 2, 8, -8, -4, 4, 4, -4, 2, -4, 4, 2, 2, -8, 8, -6, -6, -12, 12, -8, 8, 16, -16]);
ECSearch("11.1-a",(-3*w - 22)*OK,[-2, 1, 1, 1, 4, 4, -2, -2, 0, 0, 1, 1, -8, -8, -10, 7, 7, 4, 4, 10, 10, 15, 15, 16, 16, 18, 18, -10, -10]);
ECSearch("11.1-b",(-3*w - 22)*OK,[-2, -1, -1, 1, 4, 4, -2, -2, 0, 0, -1, -1, 8, 8, -10, -7, -7, 4, 4, -10, -10, 15, 15, -16, -16, -18, -18, 10, 10]);
ECSearch("11.1-c",(-3*w - 22)*OK,[2, 1, 1, 1, -4, -4, 2, 2, 0, 0, 1, 1, -8, -8, -10, 7, 7, -4, -4, -10, -10, 15, 15, 16, 16, -18, -18, 10, 10]);
ECSearch("11.1-d",(-3*w - 22)*OK,[2, -1, -1, 1, -4, -4, 2, 2, 0, 0, -1, -1, 8, 8, -10, -7, -7, -4, -4, 10, 10, 15, 15, -16, -16, 18, 18, -10, -10]);
ECSearch("16.1-a",(4)*OK,[-2, 2, -2, -4, 4, -4, 0, 0, 4, 4, 2, -2, 6, -6, 10, 14, -14, -8, 8, -16, -16, 6, 6, -14, 14, 12, 12, 4, 4]);
ECSearch("16.1-b",(4)*OK,[1, 1, 1, 0, 4, -4, -4, 4, 4, -4, 3, 3, -4, -4, -2, -11, -11, 4, -4, 8, -8, 1, 1, -4, -4, -20, 20, 4, -4]);
ECSearch("16.1-c",(4)*OK,[1, 1, -3, 0, 0, 0, 0, 0, 0, 0, -9, -9, -12, -12, 14, 13, 13, 0, 0, 0, 0, 9, 9, 4, 4, 0, 0, 0, 0]);
ECSearch("16.1-d",(4)*OK,[-1, -1, 1, 0, 4, -4, -4, 4, -4, 4, -3, -3, 4, 4, -2, 11, 11, 4, -4, -8, 8, 1, 1, 4, 4, 20, -20, -4, 4]);
ECSearch("16.1-e",(4)*OK,[1, 1, 1, 0, -4, 4, 4, -4, -4, 4, 3, 3, -4, -4, -2, -11, -11, -4, 4, -8, 8, 1, 1, -4, -4, 20, -20, -4, 4]);
ECSearch("16.1-f",(4)*OK,[2, -2, -2, -4, -4, 4, 0, 0, 4, 4, -2, 2, -6, 6, 10, -14, 14, 8, -8, -16, -16, 6, 6, 14, -14, 12, 12, 4, 4]);
ECSearch("16.1-g",(4)*OK,[-1, -1, -3, 0, 0, 0, 0, 0, 0, 0, 9, 9, 12, 12, 14, -13, -13, 0, 0, 0, 0, 9, 9, -4, -4, 0, 0, 0, 0]);
ECSearch("16.1-h",(4)*OK,[-2, 2, -2, 4, -4, 4, 0, 0, -4, -4, 2, -2, 6, -6, 10, 14, -14, 8, -8, 16, 16, 6, 6, -14, 14, -12, -12, -4, -4]);
ECSearch("16.1-i",(4)*OK,[-1, -1, 1, 0, -4, 4, 4, -4, 4, -4, -3, -3, 4, 4, -2, 11, 11, -4, 4, 8, -8, 1, 1, 4, 4, -20, 20, 4, -4]);
ECSearch("16.1-j",(4)*OK,[2, -2, -2, 4, 4, -4, 0, 0, -4, -4, -2, 2, -6, 6, 10, -14, 14, -8, 8, 16, 16, 6, 6, 14, -14, -12, -12, -4, -4]);
ECSearch("18.1-a",(6)*OK+(3*w + 3)*OK,[1, 5, -4, 1, -4, 1, -1, -4, 0, 0, -2, -13, 5, 9, 6, -7, -2, 4, -14, 0, 15, 5, -5, 2, -22, -4, 14]);
ECSearch("18.1-b",(6)*OK+(3*w + 3)*OK,[1, -5, -4, 1, -4, 1, 1, 4, 0, 0, 2, 13, 5, -9, -6, -7, -2, -4, 14, 0, 15, -5, 5, -2, 22, 4, -14]);
ECSearch("18.1-c",(6)*OK+(3*w + 3)*OK,[1, 5, -1, 4, -1, 4, -4, -1, 0, 0, 13, 2, 5, -6, -9, 2, 7, -14, 4, 15, 0, 5, -5, -22, 2, 14, -4]);
ECSearch("18.1-d",(6)*OK+(3*w + 3)*OK,[1, -5, -1, 4, -1, 4, 4, 1, 0, 0, -13, -2, 5, 6, 9, 2, 7, 14, -4, 15, 0, -5, 5, 22, -2, -14, 4]);
ECSearch("18.1-e",(6)*OK+(3*w + 3)*OK,[1, 5, 1, -4, 1, -4, -4, -1, 0, 0, -13, -2, 5, 6, 9, -2, -7, -14, 4, 15, 0, -5, 5, -22, 2, 14, -4]);
ECSearch("18.1-f",(6)*OK+(3*w + 3)*OK,[1, -5, 1, -4, 1, -4, 4, 1, 0, 0, 13, 2, 5, -6, -9, -2, -7, 14, -4, 15, 0, 5, -5, 22, -2, -14, 4]);
ECSearch("18.1-g",(6)*OK+(3*w + 3)*OK,[1, 5, 4, -1, 4, -1, -1, -4, 0, 0, 2, 13, 5, -9, -6, 7, 2, 4, -14, 0, 15, -5, 5, 2, -22, -4, 14]);
ECSearch("18.1-h",(6)*OK+(3*w + 3)*OK,[1, -5, 4, -1, 4, -1, 1, 4, 0, 0, -2, -13, 5, 9, 6, 7, 2, -4, 14, 0, 15, 5, -5, -2, 22, 4, -14]);
ECSearch("18.2-a",(18)*OK+(w + 1)*OK,[2, 3, 3, 5, 2, 3, 6, -2, 1, -6, 0, 9, -12, 5, -2, 13, 2, 11, 4, -8, -9, 0, -11, -5, -18, -6, -2, 4]);
ECSearch("18.2-b",(18)*OK+(w + 1)*OK,[-2, 3, 3, -5, -2, -3, -6, -2, 1, 6, 0, -9, 12, 5, 2, -13, -2, -11, 4, -8, -9, 0, 11, 5, -18, -6, -2, 4]);
ECSearch("18.2-c",(18)*OK+(w + 1)*OK,[-2, 3, -3, 5, 2, 3, 6, 2, -1, 6, 0, -9, 12, 5, 2, -13, 2, 11, -4, 8, -9, 0, 11, 5, 18, 6, 2, -4]);
ECSearch("18.2-d",(18)*OK+(w + 1)*OK,[2, 3, -3, -5, -2, -3, -6, 2, -1, -6, 0, 9, -12, 5, -2, 13, -2, -11, -4, 8, -9, 0, -11, -5, 18, 6, 2, -4]);
ECSearch("18.3-a",(18)*OK+(w + 17)*OK,[2, 3, 3, 2, 5, 6, 3, 1, -2, 0, -6, -12, 9, 5, 13, -2, 11, 2, -8, 4, 0, -9, -5, -11, -6, -18, 4, -2]);
ECSearch("18.3-b",(18)*OK+(w + 17)*OK,[-2, 3, 3, -2, -5, -6, -3, 1, -2, 0, 6, 12, -9, 5, -13, 2, -11, -2, -8, 4, 0, -9, 5, 11, -6, -18, 4, -2]);
ECSearch("18.3-c",(18)*OK+(w + 17)*OK,[-2, 3, -3, 2, 5, 6, 3, -1, 2, 0, 6, 12, -9, 5, -13, 2, 11, 2, 8, -4, 0, -9, 5, 11, 6, 18, -4, 2]);
ECSearch("18.3-d",(18)*OK+(w + 17)*OK,[2, 3, -3, -2, -5, -6, -3, -1, 2, 0, -6, -12, 9, 5, 13, -2, -11, -2, 8, -4, 0, -9, -5, -11, 6, 18, -4, 2]);
