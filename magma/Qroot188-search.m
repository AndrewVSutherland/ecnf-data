print "Field 2.2.188.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 47);
OK := Integers(K);
Plist := [];
Append(~Plist,(w + 7)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-w + 6)*OK);
Append(~Plist,(-w - 6)*OK);
Append(~Plist,(w + 8)*OK);
Append(~Plist,(w - 8)*OK);
Append(~Plist,(2*w - 13)*OK);
Append(~Plist,(-2*w - 13)*OK);
Append(~Plist,(3*w - 20)*OK);
Append(~Plist,(-3*w - 20)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(w + 4)*OK);
Append(~Plist,(w - 4)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(w + 2)*OK);
Append(~Plist,(w - 2)*OK);
Append(~Plist,(w)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(w + 10)*OK);
Append(~Plist,(w - 10)*OK);
Append(~Plist,(-3*w + 22)*OK);
Append(~Plist,(3*w + 22)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(-4*w + 29)*OK);
Append(~Plist,(4*w + 29)*OK);
Append(~Plist,(w + 12)*OK);
Append(~Plist,(w - 12)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(4*w + 25)*OK);
Append(~Plist,(4*w - 25)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(w + 14)*OK);
Append(~Plist,(w - 14)*OK);
Append(~Plist,(-5*w + 32)*OK);
Append(~Plist,(-5*w - 32)*OK);
Append(~Plist,(-6*w + 43)*OK);
Append(~Plist,(6*w + 43)*OK);
Append(~Plist,(-2*w + 5)*OK);
Append(~Plist,(2*w + 5)*OK);
Append(~Plist,(-3*w - 16)*OK);
Append(~Plist,(3*w - 16)*OK);
Append(~Plist,(13)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 3)*OK);
Append(~Plist,(-7*w + 50)*OK);
Append(~Plist,(7*w + 50)*OK);
Append(~Plist,(-8*w + 53)*OK);
Append(~Plist,(-8*w - 53)*OK);
Append(~Plist,(10*w + 67)*OK);
Append(~Plist,(10*w - 67)*OK);
Append(~Plist,(-4*w + 23)*OK);
Append(~Plist,(4*w + 23)*OK);
Append(~Plist,(-3*w + 14)*OK);
Append(~Plist,(3*w + 14)*OK);
Append(~Plist,(-8*w + 57)*OK);
Append(~Plist,(8*w + 57)*OK);
Append(~Plist,(5*w - 38)*OK);
Append(~Plist,(5*w + 38)*OK);
Append(~Plist,(w + 18)*OK);
Append(~Plist,(w - 18)*OK);
Append(~Plist,(-4*w - 21)*OK);
Append(~Plist,(4*w - 21)*OK);
Append(~Plist,(-4*w + 33)*OK);
Append(~Plist,(4*w + 33)*OK);
Append(~Plist,(w + 20)*OK);
Append(~Plist,(w - 20)*OK);
Append(~Plist,(-3*w + 8)*OK);
Append(~Plist,(3*w + 8)*OK);
Append(~Plist,(7*w - 44)*OK);
Append(~Plist,(-7*w - 44)*OK);
Append(~Plist,(-11*w + 78)*OK);
Append(~Plist,(11*w + 78)*OK);
Append(~Plist,(-7*w - 52)*OK);
Append(~Plist,(-7*w + 52)*OK);
Append(~Plist,(-3*w + 2)*OK);
Append(~Plist,(3*w + 2)*OK);
Append(~Plist,(-9*w + 58)*OK);
Append(~Plist,(-9*w - 58)*OK);
Append(~Plist,(-12*w + 85)*OK);
Append(~Plist,(12*w + 85)*OK);
Append(~Plist,(-4*w - 17)*OK);
Append(~Plist,(4*w - 17)*OK);
Append(~Plist,(-6*w + 35)*OK);
Append(~Plist,(6*w + 35)*OK);
Append(~Plist,(-5*w - 26)*OK);
Append(~Plist,(5*w - 26)*OK);
Append(~Plist,(11*w + 72)*OK);
Append(~Plist,(11*w - 72)*OK);
Append(~Plist,(-13*w + 92)*OK);
Append(~Plist,(13*w + 92)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 27)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("9.1-a",(3)*OK,[0, 3, -3, -6, -6, -6, 6, 3, -3, 1, -6, 6, 7, 7, -6, 6, 0, -13, 6, 6, 10, 10, 0, 0, -12, -12, 1, 1, -6]);
ECSearch("9.1-b",(3)*OK,[0, -3, 3, -6, -6, 6, -6, -3, 3, 1, 6, -6, 7, 7, 6, -6, 0, -13, 6, 6, 10, 10, 0, 0, -12, -12, 1, 1, -6]);
ECSearch("18.1-a",(3*w + 21)*OK,[-6, 6, -2, -2, 2, -2, -4, 4, 6, 4, -4, -2, -2, 2, -2, 0, 2, -10, -10, 14, 14, -10, 10, 14, 14, 18, 18, -10]);
ECSearch("18.1-b",(3*w + 21)*OK,[-4, 4, 2, 2, 8, -8, 0, 0, 10, -4, 4, 6, 6, -8, 8, 0, -14, 6, 6, -2, -2, 8, -8, 10, 10, -14, -14, -10]);
ECSearch("18.1-c",(3*w + 21)*OK,[4, -4, 2, 2, -8, 8, 0, 0, 10, 4, -4, 6, 6, 8, -8, 0, -14, 6, 6, -2, -2, -8, 8, 10, 10, -14, -14, -10]);
ECSearch("18.1-d",(3*w + 21)*OK,[6, -6, -2, -2, -2, 2, 4, -4, 6, -4, 4, -2, -2, -2, 2, 0, 2, -10, -10, 14, 14, 10, -10, 14, 14, 18, 18, -10]);
ECSearch("19.1-a",(2*w - 13)*OK,[0, 4, 0, 0, -6, 6, 2, -9, -3, -1, -1, -4, 2, 2, 2, -10, -9, 5, 12, -3, 11, -1, -13, 14, 0, -15, 2, -7, -18]);
ECSearch("19.1-b",(2*w - 13)*OK,[0, 4, 0, 0, -6, 6, -2, 9, 3, -1, 1, 4, 2, 2, -2, 10, 9, 5, 12, -3, 11, -1, 13, -14, 0, -15, 2, -7, -18]);
ECSearch("19.2-a",(-2*w - 13)*OK,[0, 4, 0, 0, 6, -6, 2, -3, -9, -1, -4, -1, 2, 2, -10, 2, -9, 5, -3, 12, -1, 11, 14, -13, -15, 0, -7, 2, 3]);
ECSearch("19.2-b",(-2*w - 13)*OK,[0, 4, 0, 0, 6, -6, -2, 3, 9, -1, 4, 1, 2, 2, 10, -2, 9, 5, -3, 12, -1, 11, -14, 13, -15, 0, -7, 2, 3]);
ECSearch("22.1-a",(-w - 5)*OK,[2, -2, -2, 2, -2, -8, 4, 0, 2, -2, -6, -2, 6, 0, -6, 4, -10, -6, 6, -6, 14, -4, 2, -6, -18, -14, 18, -6]);
ECSearch("22.1-b",(-w - 5)*OK,[-2, -6, 0, -3, 0, -6, -6, 6, -8, 0, -6, -11, -2, -6, -6, 9, -4, -9, -12, 10, 1, 0, 12, -15, -3, 10, 10, -18]);
ECSearch("22.1-c",(-w - 5)*OK,[2, 2, -2, 2, 2, 8, -4, 0, 2, 2, 6, -2, 6, 0, 6, -4, -10, -6, 6, -6, 14, 4, -2, -6, -18, -14, 18, -6]);
ECSearch("22.1-d",(-w - 5)*OK,[2, -2, -2, -3, -2, 2, -6, 0, 2, -2, 4, 3, -4, -10, 4, 9, 0, -11, -4, 14, -1, -14, -8, 9, -3, 6, -12, 14]);
ECSearch("22.1-e",(-w - 5)*OK,[2, 2, -2, -3, 2, -2, 6, 0, 2, 2, -4, 3, -4, 10, -4, -9, 0, -11, -4, 14, -1, 14, 8, 9, -3, 6, -12, 14]);
ECSearch("22.1-f",(-w - 5)*OK,[-2, 6, 0, -3, 0, 6, 6, -6, -8, 0, 6, -11, -2, 6, 6, -9, -4, -9, -12, 10, 1, 0, -12, -15, -3, 10, 10, -18]);
ECSearch("22.2-a",(w - 5)*OK,[2, -2, 2, -2, -8, -2, 0, 4, 2, -6, -2, 6, -2, -6, 0, 4, -10, 6, -6, 14, -6, 2, -4, -18, -6, 18, -14, -2]);
ECSearch("22.2-b",(w - 5)*OK,[-2, -6, -3, 0, -6, 0, 6, -6, -8, -6, 0, -2, -11, -6, -6, 9, -4, -12, -9, 1, 10, 12, 0, -3, -15, 10, 10, 0]);
ECSearch("22.2-c",(w - 5)*OK,[2, 2, 2, -2, 8, 2, 0, -4, 2, 6, 2, 6, -2, 6, 0, -4, -10, 6, -6, 14, -6, -2, 4, -18, -6, 18, -14, -2]);
ECSearch("22.2-d",(w - 5)*OK,[2, -2, -3, -2, 2, -2, 0, -6, 2, 4, -2, -4, 3, 4, -10, 9, 0, -4, -11, -1, 14, -8, -14, -3, 9, -12, 6, -2]);
ECSearch("22.2-e",(w - 5)*OK,[2, 2, -3, -2, -2, 2, 0, 6, 2, -4, 2, -4, 3, -4, 10, -9, 0, -4, -11, -1, 14, 8, 14, -3, 9, -12, 6, -2]);
ECSearch("22.2-f",(w - 5)*OK,[-2, 6, -3, 0, 6, 0, -6, 6, -8, 6, 0, -2, -11, 6, 6, -9, -4, -12, -9, 1, 10, -12, 0, -3, -15, 10, 10, 0]);
ECSearch("25.1-a",(5)*OK,[1, -1, -1, 5, 6, -6, 5, -1, 6, 6, 1, 7, -2, -2, 2, 2, 4, -5, -4, 8, 5, -7, -12, 0, 6, 6, 16, 4, 3]);
ECSearch("25.1-b",(5)*OK,[1, -1, -5, 1, -6, 6, 1, -5, -6, -6, -7, -1, -2, -2, -2, -2, -4, -5, 8, -4, -7, 5, 0, 12, 6, 6, 4, 16, -9]);
ECSearch("25.1-c",(5)*OK,[1, -1, 5, -1, -6, 6, -1, 5, 6, 6, 7, 1, -2, -2, 2, 2, 4, -5, 8, -4, -7, 5, 0, -12, 6, 6, 4, 16, -9]);
ECSearch("25.1-d",(5)*OK,[1, -1, 1, -5, 6, -6, -5, 1, -6, -6, -1, -7, -2, -2, -2, -2, -4, -5, -4, 8, 5, -7, 12, 0, 6, 6, 16, 4, 3]);
