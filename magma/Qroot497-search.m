print "Field 2.2.497.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 124);
OK := Integers(K);
Plist := [];
Append(~Plist,(17*w - 198)*OK);
Append(~Plist,(17*w + 181)*OK);
Append(~Plist,(-184*w + 2143)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(-2*w - 21)*OK);
Append(~Plist,(2*w - 23)*OK);
Append(~Plist,(14*w + 149)*OK);
Append(~Plist,(14*w - 163)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(-20*w + 233)*OK);
Append(~Plist,(20*w + 213)*OK);
Append(~Plist,(8*w - 93)*OK);
Append(~Plist,(8*w + 85)*OK);
Append(~Plist,(-4*w + 47)*OK);
Append(~Plist,(-4*w - 43)*OK);
Append(~Plist,(-150*w - 1597)*OK);
Append(~Plist,(150*w - 1747)*OK);
Append(~Plist,(-218*w - 2321)*OK);
Append(~Plist,(218*w - 2539)*OK);
Append(~Plist,(48*w - 559)*OK);
Append(~Plist,(-48*w - 511)*OK);
Append(~Plist,(-116*w - 1235)*OK);
Append(~Plist,(116*w - 1351)*OK);
Append(~Plist,(82*w - 955)*OK);
Append(~Plist,(-82*w - 873)*OK);
Append(~Plist,(586*w + 6239)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(26*w + 277)*OK);
Append(~Plist,(26*w - 303)*OK);
Append(~Plist,(-252*w - 2683)*OK);
Append(~Plist,(252*w - 2935)*OK);
Append(~Plist,(11)*OK);
Append(~Plist,(4*w + 41)*OK);
Append(~Plist,(4*w - 45)*OK);
Append(~Plist,(-6*w - 65)*OK);
Append(~Plist,(6*w - 71)*OK);
Append(~Plist,(-2*w + 19)*OK);
Append(~Plist,(2*w + 17)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 25)*OK);
Append(~Plist,(518*w + 5515)*OK);
Append(~Plist,(518*w - 6033)*OK);
Append(~Plist,(-286*w - 3045)*OK);
Append(~Plist,(286*w - 3331)*OK);
Append(~Plist,(-36*w - 383)*OK);
Append(~Plist,(36*w - 419)*OK);
Append(~Plist,(-16*w + 187)*OK);
Append(~Plist,(-16*w - 171)*OK);
Append(~Plist,(-2*w + 17)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(-18*w - 191)*OK);
Append(~Plist,(18*w - 209)*OK);
Append(~Plist,(-122*w + 1421)*OK);
Append(~Plist,(122*w + 1299)*OK);
Append(~Plist,(-30*w + 349)*OK);
Append(~Plist,(30*w + 319)*OK);
Append(~Plist,(988*w + 10519)*OK);
Append(~Plist,(988*w - 11507)*OK);
Append(~Plist,(-484*w + 5637)*OK);
Append(~Plist,(-484*w - 5153)*OK);
Append(~Plist,(-4*w + 43)*OK);
Append(~Plist,(4*w + 39)*OK);
Append(~Plist,(110*w + 1171)*OK);
Append(~Plist,(110*w - 1281)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(38*w + 405)*OK);
Append(~Plist,(38*w - 443)*OK);
Append(~Plist,(19)*OK);
Append(~Plist,(-156*w + 1817)*OK);
Append(~Plist,(156*w + 1661)*OK);
Append(~Plist,(-22*w + 257)*OK);
Append(~Plist,(-22*w - 235)*OK);
Append(~Plist,(-8*w - 83)*OK);
Append(~Plist,(8*w - 91)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(94*w - 1095)*OK);
Append(~Plist,(94*w + 1001)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(-2*w - 7)*OK);
Append(~Plist,(416*w + 4429)*OK);
Append(~Plist,(416*w - 4845)*OK);
Append(~Plist,(-2*w + 7)*OK);
Append(~Plist,(-2*w - 5)*OK);
Append(~Plist,(-66*w - 703)*OK);
Append(~Plist,(66*w - 769)*OK);
Append(~Plist,(-4*w - 37)*OK);
Append(~Plist,(4*w - 41)*OK);
Append(~Plist,(16*w - 185)*OK);
Append(~Plist,(16*w + 169)*OK);
Append(~Plist,(-190*w + 2213)*OK);
Append(~Plist,(190*w + 2023)*OK);
Append(~Plist,(212*w + 2257)*OK);
Append(~Plist,(212*w - 2469)*OK);
Append(~Plist,(23)*OK);
Append(~Plist,(18*w - 211)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("1.1-a",(1)*OK,[1, 1, 0, 6, 0, 0, 0, 0, 10, -2, -2, 0, 0, 6, 6, 0, 0, -12, -12, 0, 0, 0, 0, 0, 0, 16, -8, -8, 0, 0]);
ECSearch("4.1-a",(2)*OK,[-1, 1, 5, -1, 0, -6, 2, -6, 0, 5, 5, -4, -10, -12, 6, 11, -7, 3, 3, 0, 0, -10, 2, -12, -4, 2, 8, -10]);
ECSearch("4.1-b",(2)*OK,[1, 1, 1, -5, 6, 0, 2, 0, -6, -5, -5, -10, -4, -6, 12, -7, 11, -3, -3, 0, 0, -2, 10, -12, 2, -4, 10, -8]);
ECSearch("4.1-c",(2)*OK,[-1, 1, -1, 5, -6, 0, 2, 0, -6, 5, 5, -10, -4, 6, -12, -7, 11, 3, 3, 0, 0, 2, -10, -12, 2, -4, -10, 8]);
ECSearch("4.1-d",(2)*OK,[1, 1, -5, 1, 0, 6, 2, -6, 0, -5, -5, -4, -10, 12, -6, 11, -7, -3, -3, 0, 0, 10, -2, -12, -4, 2, -8, 10]);
