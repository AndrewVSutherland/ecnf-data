print "Field 2.2.328.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - 82);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w)*OK);
Append(~Plist,(3)*OK+(w + 1)*OK);
Append(~Plist,(3)*OK+(w + 2)*OK);
Append(~Plist,(11)*OK+(w + 4)*OK);
Append(~Plist,(11)*OK+(w + 7)*OK);
Append(~Plist,(13)*OK+(w + 2)*OK);
Append(~Plist,(13)*OK+(w + 11)*OK);
Append(~Plist,(19)*OK+(w + 5)*OK);
Append(~Plist,(19)*OK+(w + 14)*OK);
Append(~Plist,(23)*OK+(w + 6)*OK);
Append(~Plist,(23)*OK+(w + 17)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(29)*OK+(w + 13)*OK);
Append(~Plist,(29)*OK+(w + 16)*OK);
Append(~Plist,(31)*OK+(w + 12)*OK);
Append(~Plist,(31)*OK+(w + 19)*OK);
Append(~Plist,(41)*OK+(w)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(53)*OK+(w + 20)*OK);
Append(~Plist,(53)*OK+(w + 33)*OK);
Append(~Plist,(67)*OK+(w + 22)*OK);
Append(~Plist,(67)*OK+(w + 45)*OK);
Append(~Plist,(w + 3)*OK);
Append(~Plist,(w - 3)*OK);
Append(~Plist,(101)*OK+(w + 48)*OK);
Append(~Plist,(101)*OK+(w + 53)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 15)*OK);
Append(~Plist,(109)*OK+(w + 54)*OK);
Append(~Plist,(109)*OK+(w + 55)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(127)*OK+(w + 35)*OK);
Append(~Plist,(127)*OK+(w + 92)*OK);
Append(~Plist,(149)*OK+(w + 23)*OK);
Append(~Plist,(149)*OK+(w + 126)*OK);
Append(~Plist,(157)*OK+(w + 32)*OK);
Append(~Plist,(157)*OK+(w + 125)*OK);
Append(~Plist,(179)*OK+(w + 34)*OK);
Append(~Plist,(179)*OK+(w + 145)*OK);
Append(~Plist,(181)*OK+(w + 25)*OK);
Append(~Plist,(181)*OK+(w + 156)*OK);
Append(~Plist,(211)*OK+(w + 90)*OK);
Append(~Plist,(211)*OK+(w + 121)*OK);
Append(~Plist,(-3*w + 31)*OK);
Append(~Plist,(3*w + 31)*OK);
Append(~Plist,(227)*OK+(w + 38)*OK);
Append(~Plist,(227)*OK+(w + 189)*OK);
Append(~Plist,(229)*OK+(w + 51)*OK);
Append(~Plist,(229)*OK+(w + 178)*OK);
Append(~Plist,(241)*OK+(w + 75)*OK);
Append(~Plist,(241)*OK+(w + 166)*OK);
Append(~Plist,(271)*OK+(w + 95)*OK);
Append(~Plist,(271)*OK+(w + 176)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(293)*OK+(w + 31)*OK);
Append(~Plist,(293)*OK+(w + 262)*OK);
Append(~Plist,(317)*OK+(w + 84)*OK);
Append(~Plist,(317)*OK+(w + 233)*OK);
Append(~Plist,(331)*OK+(w + 134)*OK);
Append(~Plist,(331)*OK+(w + 197)*OK);
Append(~Plist,(337)*OK+(w + 115)*OK);
Append(~Plist,(337)*OK+(w + 222)*OK);
Append(~Plist,(347)*OK+(w + 155)*OK);
Append(~Plist,(347)*OK+(w + 192)*OK);
Append(~Plist,(353)*OK+(w + 105)*OK);
Append(~Plist,(353)*OK+(w + 248)*OK);
Append(~Plist,(w + 21)*OK);
Append(~Plist,(w - 21)*OK);
Append(~Plist,(367)*OK+(w + 123)*OK);
Append(~Plist,(367)*OK+(w + 244)*OK);
Append(~Plist,(397)*OK+(w + 102)*OK);
Append(~Plist,(397)*OK+(w + 295)*OK);
Append(~Plist,(-2*w + 27)*OK);
Append(~Plist,(2*w + 27)*OK);
Append(~Plist,(409)*OK+(w + 30)*OK);
Append(~Plist,(409)*OK+(w + 379)*OK);
Append(~Plist,(421)*OK+(w + 107)*OK);
Append(~Plist,(421)*OK+(w + 314)*OK);
Append(~Plist,(431)*OK+(w + 157)*OK);
Append(~Plist,(431)*OK+(w + 274)*OK);
Append(~Plist,(433)*OK+(w + 184)*OK);
Append(~Plist,(433)*OK+(w + 249)*OK);
Append(~Plist,(-3*w + 17)*OK);
Append(~Plist,(3*w + 17)*OK);
Append(~Plist,(-3*w - 35)*OK);
Append(~Plist,(3*w - 35)*OK);
Append(~Plist,(499)*OK+(w + 138)*OK);
Append(~Plist,(499)*OK+(w + 361)*OK);
Append(~Plist,(509)*OK+(w + 56)*OK);
Append(~Plist,(509)*OK+(w + 453)*OK);
Append(~Plist,(547)*OK+(w + 58)*OK);
Append(~Plist,(547)*OK+(w + 489)*OK);
Append(~Plist,(557)*OK+(w + 235)*OK);
Append(~Plist,(557)*OK+(w + 322)*OK);
Append(~Plist,(563)*OK+(w + 229)*OK);
Append(~Plist,(563)*OK+(w + 334)*OK);
Append(~Plist,(-3*w - 13)*OK);
Append(~Plist,(3*w - 13)*OK);
Append(~Plist,(571)*OK+(w + 129)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("2.1-a",(2)*OK+(w)*OK,[2, -2, -6, 6, -4, 4, 2, -2, 8, 8, -6, -4, 4, 0, 0, -10, 10, -12, 12, 2, -2, 2, 2, 12, -12, 8, 8, 12, -12]);
ECSearch("2.1-b",(2)*OK+(w)*OK,[-2, 2, 6, -6, 4, -4, -2, 2, 8, 8, -6, 4, -4, 0, 0, -10, 10, 12, -12, -2, 2, 2, 2, -12, 12, 8, 8, -12, 12]);
