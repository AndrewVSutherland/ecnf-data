print "Field 2.2.377.1";
Qx<x> := PolynomialRing(RationalField());
K<w> := NumberField(x^2 - x - 94);
OK := Integers(K);
Plist := [];
Append(~Plist,(2)*OK+(w)*OK);
Append(~Plist,(2)*OK+(w + 1)*OK);
Append(~Plist,(3)*OK);
Append(~Plist,(11)*OK+(w + 2)*OK);
Append(~Plist,(11)*OK+(w + 8)*OK);
Append(~Plist,(4*w + 37)*OK);
Append(~Plist,(19)*OK+(w + 7)*OK);
Append(~Plist,(19)*OK+(w + 11)*OK);
Append(~Plist,(-2*w + 21)*OK);
Append(~Plist,(2*w + 19)*OK);
Append(~Plist,(5)*OK);
Append(~Plist,(6*w + 55)*OK);
Append(~Plist,(31)*OK+(w + 12)*OK);
Append(~Plist,(31)*OK+(w + 18)*OK);
Append(~Plist,(37)*OK+(w + 4)*OK);
Append(~Plist,(37)*OK+(w + 32)*OK);
Append(~Plist,(41)*OK+(w + 3)*OK);
Append(~Plist,(41)*OK+(w + 37)*OK);
Append(~Plist,(47)*OK+(w)*OK);
Append(~Plist,(47)*OK+(w + 46)*OK);
Append(~Plist,(7)*OK);
Append(~Plist,(2*w - 19)*OK);
Append(~Plist,(-2*w - 17)*OK);
Append(~Plist,(73)*OK+(w + 15)*OK);
Append(~Plist,(73)*OK+(w + 57)*OK);
Append(~Plist,(89)*OK+(w + 16)*OK);
Append(~Plist,(89)*OK+(w + 72)*OK);
Append(~Plist,(97)*OK+(w + 29)*OK);
Append(~Plist,(97)*OK+(w + 67)*OK);
Append(~Plist,(8*w + 73)*OK);
Append(~Plist,(-8*w + 81)*OK);
Append(~Plist,(-2*w + 23)*OK);
Append(~Plist,(2*w + 21)*OK);
Append(~Plist,(137)*OK+(w + 34)*OK);
Append(~Plist,(137)*OK+(w + 102)*OK);
Append(~Plist,(4*w - 39)*OK);
Append(~Plist,(-4*w - 35)*OK);
Append(~Plist,(163)*OK+(w + 20)*OK);
Append(~Plist,(163)*OK+(w + 142)*OK);
Append(~Plist,(-4*w - 39)*OK);
Append(~Plist,(-4*w + 43)*OK);
Append(~Plist,(-10*w - 93)*OK);
Append(~Plist,(-10*w + 103)*OK);
Append(~Plist,(-2*w + 15)*OK);
Append(~Plist,(2*w + 13)*OK);
Append(~Plist,(193)*OK+(w + 71)*OK);
Append(~Plist,(193)*OK+(w + 121)*OK);
Append(~Plist,(-2*w + 25)*OK);
Append(~Plist,(2*w + 23)*OK);
Append(~Plist,(229)*OK+(w + 23)*OK);
Append(~Plist,(229)*OK+(w + 205)*OK);
Append(~Plist,(-2*w + 13)*OK);
Append(~Plist,(2*w + 11)*OK);
Append(~Plist,(6*w - 59)*OK);
Append(~Plist,(-6*w - 53)*OK);
Append(~Plist,(271)*OK+(w + 84)*OK);
Append(~Plist,(271)*OK+(w + 186)*OK);
Append(~Plist,(-2*w + 11)*OK);
Append(~Plist,(2*w + 9)*OK);
Append(~Plist,(-4*w - 33)*OK);
Append(~Plist,(4*w - 37)*OK);
Append(~Plist,(17)*OK);
Append(~Plist,(293)*OK+(w + 116)*OK);
Append(~Plist,(293)*OK+(w + 176)*OK);
Append(~Plist,(307)*OK+(w + 50)*OK);
Append(~Plist,(307)*OK+(w + 256)*OK);
Append(~Plist,(-2*w + 9)*OK);
Append(~Plist,(2*w + 7)*OK);
Append(~Plist,(317)*OK+(w + 118)*OK);
Append(~Plist,(317)*OK+(w + 198)*OK);
Append(~Plist,(331)*OK+(w + 27)*OK);
Append(~Plist,(331)*OK+(w + 303)*OK);
Append(~Plist,(12*w + 109)*OK);
Append(~Plist,(-12*w + 121)*OK);
Append(~Plist,(359)*OK+(w + 28)*OK);
Append(~Plist,(359)*OK+(w + 330)*OK);
Append(~Plist,(-2*w + 3)*OK);
Append(~Plist,(-2*w - 1)*OK);
Append(~Plist,(379)*OK+(w + 129)*OK);
Append(~Plist,(379)*OK+(w + 249)*OK);
Append(~Plist,(409)*OK+(w + 134)*OK);
Append(~Plist,(409)*OK+(w + 274)*OK);
Append(~Plist,(-4*w + 35)*OK);
Append(~Plist,(4*w + 31)*OK);
Append(~Plist,(421)*OK+(w + 139)*OK);
Append(~Plist,(421)*OK+(w + 281)*OK);
Append(~Plist,(18*w + 167)*OK);
Append(~Plist,(-18*w + 185)*OK);
Append(~Plist,(449)*OK+(w + 31)*OK);
Append(~Plist,(449)*OK+(w + 417)*OK);
Append(~Plist,(461)*OK+(w + 61)*OK);
Append(~Plist,(461)*OK+(w + 399)*OK);
Append(~Plist,(479)*OK+(w + 145)*OK);
Append(~Plist,(479)*OK+(w + 333)*OK);
Append(~Plist,(-16*w - 149)*OK);
Append(~Plist,(-16*w + 165)*OK);
Append(~Plist,(-2*w + 31)*OK);
Append(~Plist,(2*w + 29)*OK);
Append(~Plist,(541)*OK+(w + 66)*OK);
Append(~Plist,(541)*OK+(w + 474)*OK);
effort := 400;
ECSearch := procedure(class_label, N, aplist);
print "Isogeny class ", class_label;
goodP := [P: P in Plist | Valuation(N,P) eq 0];
goodP := [goodP[i]: i in [1..#(aplist)]];
curves := EllipticCurveSearch(N,effort : Primes:=goodP, Traces:=aplist);
curves := [E: E in curves | &and[TraceOfFrobenius(E,goodP[i]) eq aplist[i] : i in [1..#(aplist)]]];
if #curves eq 0 then print "No curve found"; end if;
for E in curves do;
 a1,a2,a3,a4,a6:=Explode(aInvariants(E));
 printf "Curve [%o,%o,%o,%o,%o]\n",a1,a2,a3,a4,a6;
 end for;
end procedure;
SetColumns(0);

ECSearch("4.1-a",(2)*OK,[-5, 0, 0, 4, 6, -6, -6, -6, 1, 0, 0, 0, 3, -3, 0, 0, 3, -3, 5, 6, 6, 6, -6, 6, -6, 12, -12, -14]);
ECSearch("4.1-b",(2)*OK,[5, -5, 5, -1, 4, -4, -6, -6, -9, -10, 5, -5, -8, 8, -10, 10, -3, 3, -10, 1, 1, -16, 16, 14, -14, -2, 2, -4]);
ECSearch("4.1-c",(2)*OK,[5, 5, -5, -1, -4, 4, -6, -6, -9, -10, -5, 5, 8, -8, 10, -10, 3, -3, -10, 1, 1, 16, -16, -14, 14, 2, -2, -4]);
ECSearch("4.1-d",(2)*OK,[-5, 0, 0, 4, -6, 6, -6, -6, 1, 0, 0, 0, -3, 3, 0, 0, -3, 3, 5, 6, 6, -6, 6, -6, 6, -12, 12, -14]);
ECSearch("8.3-a",(8)*OK+(w + 2)*OK,[1, -2, 0, 4, -2, 0, 4, 0, -8, 10, -2, -8, -4, -6, 10, -2, -2, 8, -12, -2, 10, -6, -2, 14, -10, 6, -2, 14, 0]);
ECSearch("8.3-b",(8)*OK+(w + 2)*OK,[-1, -2, 0, -4, -2, 0, -4, 0, -8, 10, -2, 8, 4, 6, -10, 2, 2, -8, 12, -2, 10, -6, 2, -14, 10, -6, 2, -14, 0]);
ECSearch("8.4-a",(8)*OK+(w + 5)*OK,[1, -2, 4, 0, -2, 4, 0, -8, 0, 10, -2, -4, -8, 10, -6, -2, -2, -12, 8, -2, -6, 10, 14, -2, 6, -10, 14, -2, 16]);
ECSearch("8.4-b",(8)*OK+(w + 5)*OK,[-1, -2, -4, 0, -2, -4, 0, -8, 0, 10, -2, 4, 8, -10, 6, 2, 2, 12, -8, -2, -6, 10, -14, 2, -6, 10, -14, 2, 16]);
